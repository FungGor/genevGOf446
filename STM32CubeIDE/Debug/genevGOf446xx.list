
genevGOf446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007110  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  080072e0  080072e0  000082e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075a0  080075a0  000095c8  2**0
                  CONTENTS
  4 .ARM          00000008  080075a0  080075a0  000085a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075a8  080075a8  000095c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a8  080075a8  000085a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075ac  080075ac  000085ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c8  20000000  080075b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004504  200005c8  08007b78  000095c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004acc  08007b78  00009acc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000095c8  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003d360  00000000  00000000  000095f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000086  00000000  00000000  00046958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00044e3b  00000000  00000000  000469de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008219  00000000  00000000  0008b819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c38  00000000  00000000  00093a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f90a2  00000000  00000000  00095670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002678  00000000  00000000  0018e712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d0b8  00000000  00000000  00190d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001bde42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dc8  00000000  00000000  001bde88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00014aab  00000000  00000000  001c2c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200005c8 	.word	0x200005c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080072c8 	.word	0x080072c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200005cc 	.word	0x200005cc
 800020c:	080072c8 	.word	0x080072c8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000504:	480d      	ldr	r0, [pc, #52]	@ (800053c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000506:	490e      	ldr	r1, [pc, #56]	@ (8000540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000508:	4a0e      	ldr	r2, [pc, #56]	@ (8000544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0b      	ldr	r2, [pc, #44]	@ (8000548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800051c:	4c0b      	ldr	r4, [pc, #44]	@ (800054c <LoopFillZerobss+0x26>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800052a:	f002 fb2d 	bl	8002b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800052e:	f006 fe4f 	bl	80071d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000532:	f000 f879 	bl	8000628 <main>
  bx  lr    
 8000536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800053c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000540:	200005c8 	.word	0x200005c8
  ldr r2, =_sidata
 8000544:	080075b0 	.word	0x080075b0
  ldr r2, =_sbss
 8000548:	200005c8 	.word	0x200005c8
  ldr r4, =_ebss
 800054c:	20004acc 	.word	0x20004acc

08000550 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <BusFault_Handler>
	...

08000554 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000554:	4b04      	ldr	r3, [pc, #16]	@ (8000568 <vApplicationGetIdleTaskMemory+0x14>)
 8000556:	6003      	str	r3, [r0, #0]
{
 8000558:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800055a:	2380      	movs	r3, #128	@ 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800055c:	4c03      	ldr	r4, [pc, #12]	@ (800056c <vApplicationGetIdleTaskMemory+0x18>)
 800055e:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000560:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000564:	6013      	str	r3, [r2, #0]
}
 8000566:	4770      	bx	lr
 8000568:	200007e4 	.word	0x200007e4
 800056c:	200005e4 	.word	0x200005e4

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	2300      	movs	r3, #0
{
 8000574:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 800057a:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000582:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	4926      	ldr	r1, [pc, #152]	@ (8000620 <SystemClock_Config+0xb0>)
 8000588:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058a:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058e:	4a25      	ldr	r2, [pc, #148]	@ (8000624 <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8000594:	6408      	str	r0, [r1, #64]	@ 0x40
 8000596:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000598:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 800059c:	9101      	str	r1, [sp, #4]
 800059e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	9302      	str	r3, [sp, #8]
 80005a2:	6813      	ldr	r3, [r2, #0]
 80005a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	6813      	ldr	r3, [r2, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b2:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	ed9f 7b17 	vldr	d7, [pc, #92]	@ 8000618 <SystemClock_Config+0xa8>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005bc:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c2:	9414      	str	r4, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2002      	movs	r0, #2
 80005c6:	2102      	movs	r1, #2
 80005c8:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005cc:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005ce:	23b4      	movs	r3, #180	@ 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d2:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d6:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005d8:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f003 f82d 	bl	8003638 <HAL_RCC_OscConfig>
 80005de:	b108      	cbz	r0, 80005e4 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <SystemClock_Config+0x72>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005e4:	f002 fec6 	bl	8003374 <HAL_PWREx_EnableOverDrive>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b108      	cbz	r0, 80005f0 <SystemClock_Config+0x80>
 80005ec:	b672      	cpsid	i
  while (1)
 80005ee:	e7fe      	b.n	80005ee <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f6:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fe:	a803      	add	r0, sp, #12
 8000600:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000602:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000608:	f002 fef0 	bl	80033ec <HAL_RCC_ClockConfig>
 800060c:	b108      	cbz	r0, 8000612 <SystemClock_Config+0xa2>
 800060e:	b672      	cpsid	i
  while (1)
 8000610:	e7fe      	b.n	8000610 <SystemClock_Config+0xa0>
}
 8000612:	b017      	add	sp, #92	@ 0x5c
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	bf00      	nop
 8000618:	00000001 	.word	0x00000001
 800061c:	00010000 	.word	0x00010000
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <main>:
{
 8000628:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	2400      	movs	r4, #0
{
 800062e:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 8000630:	f002 fab4 	bl	8002b9c <HAL_Init>
  SystemClock_Config();
 8000634:	f7ff ff9c 	bl	8000570 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
 800063c:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000640:	4ba4      	ldr	r3, [pc, #656]	@ (80008d4 <main+0x2ac>)
 8000642:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	9416      	str	r4, [sp, #88]	@ 0x58
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	6b19      	ldr	r1, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOB, FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin, GPIO_PIN_RESET);
 8000648:	48a3      	ldr	r0, [pc, #652]	@ (80008d8 <main+0x2b0>)
  hadc1.Instance = ADC1;
 800064a:	4da4      	ldr	r5, [pc, #656]	@ (80008dc <main+0x2b4>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	f8df 82a4 	ldr.w	r8, [pc, #676]	@ 80008f4 <main+0x2cc>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000650:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000654:	6319      	str	r1, [r3, #48]	@ 0x30
 8000656:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000658:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800065c:	9100      	str	r1, [sp, #0]
 800065e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	9401      	str	r4, [sp, #4]
 8000662:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000664:	f041 0104 	orr.w	r1, r1, #4
 8000668:	6319      	str	r1, [r3, #48]	@ 0x30
 800066a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800066c:	f001 0104 	and.w	r1, r1, #4
 8000670:	9101      	str	r1, [sp, #4]
 8000672:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	9402      	str	r4, [sp, #8]
 8000676:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000678:	f041 0101 	orr.w	r1, r1, #1
 800067c:	6319      	str	r1, [r3, #48]	@ 0x30
 800067e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000680:	f001 0101 	and.w	r1, r1, #1
 8000684:	9102      	str	r1, [sp, #8]
 8000686:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000688:	9403      	str	r4, [sp, #12]
 800068a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800068c:	f041 0102 	orr.w	r1, r1, #2
 8000690:	6319      	str	r1, [r3, #48]	@ 0x30
 8000692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000694:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin, GPIO_PIN_RESET);
 8000698:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin, GPIO_PIN_RESET);
 800069c:	f240 4106 	movw	r1, #1030	@ 0x406
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	9b03      	ldr	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006a4:	2720      	movs	r7, #32
  HAL_GPIO_WritePin(GPIOB, FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin, GPIO_PIN_RESET);
 80006a6:	f002 fe61 	bl	800336c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin;
 80006aa:	f240 4306 	movw	r3, #1030	@ 0x406
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ae:	488a      	ldr	r0, [pc, #552]	@ (80008d8 <main+0x2b0>)
 80006b0:	a912      	add	r1, sp, #72	@ 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	e9cd 3612 	strd	r3, r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f002 fd47 	bl	800314c <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80006be:	4621      	mov	r1, r4
 80006c0:	463a      	mov	r2, r7
 80006c2:	a812      	add	r0, sp, #72	@ 0x48
 80006c4:	f006 fd26 	bl	8007114 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c8:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 80006cc:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80006d0:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  hadc1.Instance = ADC1;
 80006d4:	4b82      	ldr	r3, [pc, #520]	@ (80008e0 <main+0x2b8>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d6:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d8:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006da:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006de:	62ec      	str	r4, [r5, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006e0:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e4:	4628      	mov	r0, r5
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006e6:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  hadc1.Init.ScanConvMode = ENABLE;
 80006ea:	612e      	str	r6, [r5, #16]
  hadc1.Init.NbrOfConversion = 1;
 80006ec:	61ee      	str	r6, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ee:	616e      	str	r6, [r5, #20]
  hadc1.Instance = ADC1;
 80006f0:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f2:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f6:	f8c5 9004 	str.w	r9, [r5, #4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006fa:	60ec      	str	r4, [r5, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fc:	f002 fa7a 	bl	8002bf4 <HAL_ADC_Init>
 8000700:	b108      	cbz	r0, 8000706 <main+0xde>
 8000702:	b672      	cpsid	i
  while (1)
 8000704:	e7fe      	b.n	8000704 <main+0xdc>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000706:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000708:	9018      	str	r0, [sp, #96]	@ 0x60
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800070a:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
  sConfigInjected.InjectedOffset = 0;
 800070e:	9015      	str	r0, [sp, #84]	@ 0x54
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000710:	2307      	movs	r3, #7
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000712:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000716:	a912      	add	r1, sp, #72	@ 0x48
 8000718:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = 1;
 800071a:	9613      	str	r6, [sp, #76]	@ 0x4c
  sConfigInjected.InjectedNbrOfConversion = 1;
 800071c:	9616      	str	r6, [sp, #88]	@ 0x58
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800071e:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000720:	f8cd a064 	str.w	sl, [sp, #100]	@ 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000724:	f002 fbc8 	bl	8002eb8 <HAL_ADCEx_InjectedConfigChannel>
 8000728:	b108      	cbz	r0, 800072e <main+0x106>
 800072a:	b672      	cpsid	i
  while (1)
 800072c:	e7fe      	b.n	800072c <main+0x104>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072e:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfig.Channel = ADC_CHANNEL_3;
 8000730:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	4628      	mov	r0, r5
 8000734:	a90b      	add	r1, sp, #44	@ 0x2c
  sConfig.Rank = 1;
 8000736:	960c      	str	r6, [sp, #48]	@ 0x30
  sConfig.Channel = ADC_CHANNEL_3;
 8000738:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	f002 fb07 	bl	8002d4c <HAL_ADC_ConfigChannel>
 800073e:	4683      	mov	fp, r0
 8000740:	b108      	cbz	r0, 8000746 <main+0x11e>
 8000742:	b672      	cpsid	i
  while (1)
 8000744:	e7fe      	b.n	8000744 <main+0x11c>
  hadc2.Instance = ADC2;
 8000746:	4d67      	ldr	r5, [pc, #412]	@ (80008e4 <main+0x2bc>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000748:	4601      	mov	r1, r0
 800074a:	463a      	mov	r2, r7
 800074c:	a812      	add	r0, sp, #72	@ 0x48
 800074e:	f006 fce1 	bl	8007114 <memset>
  hadc2.Instance = ADC2;
 8000752:	4b65      	ldr	r3, [pc, #404]	@ (80008e8 <main+0x2c0>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000754:	f8c5 9004 	str.w	r9, [r5, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000758:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	e9cd bb0b 	strd	fp, fp, [sp, #44]	@ 0x2c
 800075e:	e9cd bb0d 	strd	fp, fp, [sp, #52]	@ 0x34
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000762:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000766:	60ec      	str	r4, [r5, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000768:	f8c5 b008 	str.w	fp, [r5, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800076c:	612e      	str	r6, [r5, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800076e:	f885 b018 	strb.w	fp, [r5, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000772:	f885 b020 	strb.w	fp, [r5, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000776:	f8c5 b02c 	str.w	fp, [r5, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800077a:	f885 b030 	strb.w	fp, [r5, #48]	@ 0x30
  hadc2.Init.NbrOfConversion = 1;
 800077e:	61ee      	str	r6, [r5, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000780:	616e      	str	r6, [r5, #20]
  hadc2.Instance = ADC2;
 8000782:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000784:	f002 fa36 	bl	8002bf4 <HAL_ADC_Init>
 8000788:	b108      	cbz	r0, 800078e <main+0x166>
 800078a:	b672      	cpsid	i
  while (1)
 800078c:	e7fe      	b.n	800078c <main+0x164>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800078e:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000790:	9018      	str	r0, [sp, #96]	@ 0x60
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000792:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
  sConfigInjected.InjectedOffset = 0;
 8000796:	9015      	str	r0, [sp, #84]	@ 0x54
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8000798:	240e      	movs	r4, #14
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800079a:	a912      	add	r1, sp, #72	@ 0x48
 800079c:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 800079e:	f8cd a064 	str.w	sl, [sp, #100]	@ 0x64
  sConfigInjected.InjectedRank = 1;
 80007a2:	9613      	str	r6, [sp, #76]	@ 0x4c
  sConfigInjected.InjectedNbrOfConversion = 1;
 80007a4:	9616      	str	r6, [sp, #88]	@ 0x58
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80007a6:	9412      	str	r4, [sp, #72]	@ 0x48
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007a8:	f002 fb86 	bl	8002eb8 <HAL_ADCEx_InjectedConfigChannel>
 80007ac:	b108      	cbz	r0, 80007b2 <main+0x18a>
 80007ae:	b672      	cpsid	i
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <main+0x188>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b2:	900d      	str	r0, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b4:	a90b      	add	r1, sp, #44	@ 0x2c
 80007b6:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_14;
 80007b8:	940b      	str	r4, [sp, #44]	@ 0x2c
  sConfig.Rank = 1;
 80007ba:	960c      	str	r6, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007bc:	f002 fac6 	bl	8002d4c <HAL_ADC_ConfigChannel>
 80007c0:	4604      	mov	r4, r0
 80007c2:	b108      	cbz	r0, 80007c8 <main+0x1a0>
 80007c4:	b672      	cpsid	i
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <main+0x19e>
  htim1.Instance = TIM1;
 80007c8:	4d48      	ldr	r5, [pc, #288]	@ (80008ec <main+0x2c4>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007ca:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007cc:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 80007d0:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 80007d4:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007d8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80007dc:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	9004      	str	r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e2:	9011      	str	r0, [sp, #68]	@ 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	9005      	str	r0, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007e6:	4601      	mov	r1, r0
 80007e8:	463a      	mov	r2, r7
 80007ea:	a812      	add	r0, sp, #72	@ 0x48
 80007ec:	f006 fc92 	bl	8007114 <memset>
  htim1.Instance = TIM1;
 80007f0:	4b3f      	ldr	r3, [pc, #252]	@ (80008f0 <main+0x2c8>)
 80007f2:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80007f4:	f241 58f9 	movw	r8, #5625	@ 0x15f9
 80007f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007fc:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80007fe:	e9c5 4701 	strd	r4, r7, [r5, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000802:	e9c5 8303 	strd	r8, r3, [r5, #12]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000806:	616e      	str	r6, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800080a:	f003 f919 	bl	8003a40 <HAL_TIM_Base_Init>
 800080e:	b108      	cbz	r0, 8000814 <main+0x1ec>
 8000810:	b672      	cpsid	i
  while (1)
 8000812:	e7fe      	b.n	8000812 <main+0x1ea>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000814:	4628      	mov	r0, r5
 8000816:	f003 f9df 	bl	8003bd8 <HAL_TIM_PWM_Init>
 800081a:	b108      	cbz	r0, 8000820 <main+0x1f8>
 800081c:	b672      	cpsid	i
  while (1)
 800081e:	e7fe      	b.n	800081e <main+0x1f6>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000820:	f04f 0c06 	mov.w	ip, #6
 8000824:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000826:	a906      	add	r1, sp, #24
 8000828:	4628      	mov	r0, r5
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800082a:	e9cd c306 	strd	ip, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800082e:	f003 fc11 	bl	8004054 <HAL_TIM_SlaveConfigSynchro>
 8000832:	b108      	cbz	r0, 8000838 <main+0x210>
 8000834:	b672      	cpsid	i
  while (1)
 8000836:	e7fe      	b.n	8000836 <main+0x20e>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	e9cd 7004 	strd	r7, r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800083c:	a904      	add	r1, sp, #16
 800083e:	4628      	mov	r0, r5
 8000840:	f003 fe8e 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	b108      	cbz	r0, 800084a <main+0x222>
 8000846:	b672      	cpsid	i
  while (1)
 8000848:	e7fe      	b.n	8000848 <main+0x220>
  sConfigOC.Pulse = 0;
 800084a:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084c:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084e:	4827      	ldr	r0, [pc, #156]	@ (80008ec <main+0x2c4>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000850:	9211      	str	r2, [sp, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000852:	a90b      	add	r1, sp, #44	@ 0x2c
  sConfigOC.Pulse = 0;
 8000854:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000858:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800085c:	e9cd 220f 	strd	r2, r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000860:	f003 fa4a 	bl	8003cf8 <HAL_TIM_PWM_ConfigChannel>
 8000864:	b108      	cbz	r0, 800086a <main+0x242>
 8000866:	b672      	cpsid	i
  while (1)
 8000868:	e7fe      	b.n	8000868 <main+0x240>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800086a:	4820      	ldr	r0, [pc, #128]	@ (80008ec <main+0x2c4>)
 800086c:	2204      	movs	r2, #4
 800086e:	a90b      	add	r1, sp, #44	@ 0x2c
 8000870:	f003 fa42 	bl	8003cf8 <HAL_TIM_PWM_ConfigChannel>
 8000874:	b108      	cbz	r0, 800087a <main+0x252>
 8000876:	b672      	cpsid	i
  while (1)
 8000878:	e7fe      	b.n	8000878 <main+0x250>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800087a:	481c      	ldr	r0, [pc, #112]	@ (80008ec <main+0x2c4>)
 800087c:	2208      	movs	r2, #8
 800087e:	a90b      	add	r1, sp, #44	@ 0x2c
 8000880:	f003 fa3a 	bl	8003cf8 <HAL_TIM_PWM_ConfigChannel>
 8000884:	b108      	cbz	r0, 800088a <main+0x262>
 8000886:	b672      	cpsid	i
  while (1)
 8000888:	e7fe      	b.n	8000888 <main+0x260>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800088a:	2270      	movs	r2, #112	@ 0x70
 800088c:	f241 53f8 	movw	r3, #5624	@ 0x15f8
 8000890:	e9cd 230b 	strd	r2, r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000894:	4815      	ldr	r0, [pc, #84]	@ (80008ec <main+0x2c4>)
 8000896:	220c      	movs	r2, #12
 8000898:	a90b      	add	r1, sp, #44	@ 0x2c
 800089a:	f003 fa2d 	bl	8003cf8 <HAL_TIM_PWM_ConfigChannel>
 800089e:	b108      	cbz	r0, 80008a4 <main+0x27c>
 80008a0:	b672      	cpsid	i
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <main+0x27a>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80008a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008a8:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80008ac:	e9cd 5212 	strd	r5, r2, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80008b0:	2248      	movs	r2, #72	@ 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80008b2:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b6:	9019      	str	r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80008b8:	f44f 7680 	mov.w	r6, #256	@ 0x100
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008bc:	480b      	ldr	r0, [pc, #44]	@ (80008ec <main+0x2c4>)
 80008be:	eb0d 0102 	add.w	r1, sp, r2
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80008c2:	e9cd 6214 	strd	r6, r2, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008c6:	f003 fe8b 	bl	80045e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ca:	4604      	mov	r4, r0
 80008cc:	b1a0      	cbz	r0, 80008f8 <main+0x2d0>
 80008ce:	b672      	cpsid	i
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <main+0x2a8>
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020400 	.word	0x40020400
 80008dc:	200009a8 	.word	0x200009a8
 80008e0:	40012000 	.word	0x40012000
 80008e4:	20000960 	.word	0x20000960
 80008e8:	40012100 	.word	0x40012100
 80008ec:	20000918 	.word	0x20000918
 80008f0:	40010000 	.word	0x40010000
 80008f4:	0f000001 	.word	0x0f000001
  htim2.Instance = TIM2;
 80008f8:	4d4c      	ldr	r5, [pc, #304]	@ (8000a2c <main+0x404>)
  HAL_TIM_MspPostInit(&htim1);
 80008fa:	484d      	ldr	r0, [pc, #308]	@ (8000a30 <main+0x408>)
 80008fc:	f001 fbba 	bl	8002074 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000900:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000904:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000906:	4628      	mov	r0, r5
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000908:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8000910:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000914:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
 8000918:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000920:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000928:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800092a:	f003 f889 	bl	8003a40 <HAL_TIM_Base_Init>
 800092e:	b108      	cbz	r0, 8000934 <main+0x30c>
 8000930:	b672      	cpsid	i
  while (1)
 8000932:	e7fe      	b.n	8000932 <main+0x30a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000938:	a90b      	add	r1, sp, #44	@ 0x2c
 800093a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093c:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800093e:	f003 fadf 	bl	8003f00 <HAL_TIM_ConfigClockSource>
 8000942:	b108      	cbz	r0, 8000948 <main+0x320>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x31e>
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000948:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  sConfig.Commutation_Delay = 0;
 800094c:	9015      	str	r0, [sp, #84]	@ 0x54
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 800094e:	230f      	movs	r3, #15
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000950:	a912      	add	r1, sp, #72	@ 0x48
 8000952:	4628      	mov	r0, r5
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8000954:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000956:	f003 fd9f 	bl	8004498 <HAL_TIMEx_HallSensor_Init>
 800095a:	b108      	cbz	r0, 8000960 <main+0x338>
 800095c:	b672      	cpsid	i
  while (1)
 800095e:	e7fe      	b.n	800095e <main+0x336>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000960:	2350      	movs	r3, #80	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000962:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000964:	a906      	add	r1, sp, #24
 8000966:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000968:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096a:	f003 fdf9 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 800096e:	4603      	mov	r3, r0
 8000970:	b108      	cbz	r0, 8000976 <main+0x34e>
 8000972:	b672      	cpsid	i
  while (1)
 8000974:	e7fe      	b.n	8000974 <main+0x34c>
  huart1.Instance = USART1;
 8000976:	482f      	ldr	r0, [pc, #188]	@ (8000a34 <main+0x40c>)
  huart1.Init.BaudRate = 115200;
 8000978:	492f      	ldr	r1, [pc, #188]	@ (8000a38 <main+0x410>)
 800097a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800097e:	e9c0 1200 	strd	r1, r2, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000982:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000990:	f003 fe54 	bl	800463c <HAL_UART_Init>
 8000994:	b108      	cbz	r0, 800099a <main+0x372>
 8000996:	b672      	cpsid	i
  while (1)
 8000998:	e7fe      	b.n	8000998 <main+0x370>
  MX_MotorControl_Init();
 800099a:	f001 f915 	bl	8001bc8 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2102      	movs	r1, #2
 80009a2:	2012      	movs	r0, #18
 80009a4:	f002 fb6e 	bl	8003084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009a8:	2012      	movs	r0, #18
 80009aa:	f002 fba7 	bl	80030fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	4611      	mov	r1, r2
 80009b2:	2019      	movs	r0, #25
 80009b4:	f002 fb66 	bl	8003084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009b8:	2019      	movs	r0, #25
 80009ba:	f002 fb9f 	bl	80030fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2104      	movs	r1, #4
 80009c2:	2018      	movs	r0, #24
 80009c4:	f002 fb5e 	bl	8003084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80009c8:	2018      	movs	r0, #24
 80009ca:	f002 fb97 	bl	80030fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2103      	movs	r1, #3
 80009d2:	201c      	movs	r0, #28
 80009d4:	f002 fb56 	bl	8003084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009d8:	201c      	movs	r0, #28
 80009da:	f002 fb8f 	bl	80030fc <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 80009de:	4c17      	ldr	r4, [pc, #92]	@ (8000a3c <main+0x414>)
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2103      	movs	r1, #3
 80009e4:	2025      	movs	r0, #37	@ 0x25
 80009e6:	f002 fb4d 	bl	8003084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ea:	2025      	movs	r0, #37	@ 0x25
 80009ec:	f002 fb86 	bl	80030fc <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 80009f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f2:	ad0b      	add	r5, sp, #44	@ 0x2c
 80009f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80009fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 80009fe:	2100      	movs	r1, #0
 8000a00:	a80b      	add	r0, sp, #44	@ 0x2c
 8000a02:	f003 feb3 	bl	800476c <osThreadCreate>
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <main+0x418>)
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 8000a08:	340c      	adds	r4, #12
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 8000a0a:	6018      	str	r0, [r3, #0]
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 8000a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0e:	ad12      	add	r5, sp, #72	@ 0x48
 8000a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a12:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a16:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  safetyHandle = osThreadCreate(osThread(safety), NULL);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	a812      	add	r0, sp, #72	@ 0x48
 8000a1e:	f003 fea5 	bl	800476c <osThreadCreate>
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <main+0x41c>)
 8000a24:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000a26:	f003 fe9b 	bl	8004760 <osKernelStart>
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <main+0x402>
 8000a2c:	200008d0 	.word	0x200008d0
 8000a30:	20000918 	.word	0x20000918
 8000a34:	2000088c 	.word	0x2000088c
 8000a38:	40011000 	.word	0x40011000
 8000a3c:	080072e0 	.word	0x080072e0
 8000a40:	20000888 	.word	0x20000888
 8000a44:	20000884 	.word	0x20000884

08000a48 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000a48:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000a4a:	6802      	ldr	r2, [r0, #0]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d000      	beq.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8000a50:	4770      	bx	lr
    HAL_IncTick();
 8000a52:	f002 b8bd 	b.w	8002bd0 <HAL_IncTick>
 8000a56:	bf00      	nop
 8000a58:	40001000 	.word	0x40001000

08000a5c <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000a5c:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8000a60:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000a64:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000a66:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000a6a:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000a6e:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000a72:	f880 c018 	strb.w	ip, [r0, #24]
}
 8000a76:	4770      	bx	lr

08000a78 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000a78:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a7c:	f240 1301 	movw	r3, #257	@ 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000a80:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000a84:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000a86:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a88:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000a8a:	4770      	bx	lr

08000a8c <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000a8c:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a90:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000a92:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000a96:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000a98:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000a9a:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000aa0:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000aa2:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000aa4:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000aa6:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000aa8:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000aac:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000aae:	b002      	add	sp, #8
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000ab4:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000ab6:	2103      	movs	r1, #3
{
 8000ab8:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000aba:	6800      	ldr	r0, [r0, #0]
 8000abc:	f006 f978 	bl	8006db0 <STM_NextState>

  if ( RetVal == true )
 8000ac0:	b108      	cbz	r0, 8000ac6 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000ac6:	bd10      	pop	{r4, pc}

08000ac8 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000ac8:	6800      	ldr	r0, [r0, #0]
 8000aca:	2107      	movs	r1, #7
 8000acc:	f006 b970 	b.w	8006db0 <STM_NextState>

08000ad0 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000ad0:	6800      	ldr	r0, [r0, #0]
 8000ad2:	f006 b9e9 	b.w	8006ea8 <STM_FaultAcknowledged>
 8000ad6:	bf00      	nop

08000ad8 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000ad8:	6800      	ldr	r0, [r0, #0]
 8000ada:	2101      	movs	r1, #1
 8000adc:	f006 b968 	b.w	8006db0 <STM_NextState>

08000ae0 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000ae0:	b178      	cbz	r0, 8000b02 <MCI_ExecBufferedCommands+0x22>
{
 8000ae2:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000ae4:	7e03      	ldrb	r3, [r0, #24]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	4604      	mov	r4, r0
 8000aea:	d000      	beq.n	8000aee <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000aec:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000aee:	7b01      	ldrb	r1, [r0, #12]
 8000af0:	2902      	cmp	r1, #2
 8000af2:	d020      	beq.n	8000b36 <MCI_ExecBufferedCommands+0x56>
 8000af4:	2903      	cmp	r1, #3
 8000af6:	d005      	beq.n	8000b04 <MCI_ExecBufferedCommands+0x24>
 8000af8:	2901      	cmp	r1, #1
 8000afa:	d00c      	beq.n	8000b16 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000afc:	2303      	movs	r3, #3
 8000afe:	7623      	strb	r3, [r4, #24]
}
 8000b00:	bd10      	pop	{r4, pc}
 8000b02:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000b04:	6882      	ldr	r2, [r0, #8]
 8000b06:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000b0a:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000b0e:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000b10:	2302      	movs	r3, #2
 8000b12:	7623      	strb	r3, [r4, #24]
}
 8000b14:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000b16:	6883      	ldr	r3, [r0, #8]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000b1e:	6840      	ldr	r0, [r0, #4]
 8000b20:	f006 f86a 	bl	8006bf8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000b24:	8ae2      	ldrh	r2, [r4, #22]
 8000b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b2a:	6860      	ldr	r0, [r4, #4]
 8000b2c:	f006 f868 	bl	8006c00 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d0e3      	beq.n	8000afc <MCI_ExecBufferedCommands+0x1c>
 8000b34:	e7ec      	b.n	8000b10 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000b36:	6883      	ldr	r3, [r0, #8]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f883 1024 	strb.w	r1, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000b3e:	6840      	ldr	r0, [r0, #4]
 8000b40:	f006 f85a 	bl	8006bf8 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000b44:	8ae2      	ldrh	r2, [r4, #22]
 8000b46:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000b4a:	6860      	ldr	r0, [r4, #4]
 8000b4c:	f006 f858 	bl	8006c00 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d0d3      	beq.n	8000afc <MCI_ExecBufferedCommands+0x1c>
 8000b54:	e7dc      	b.n	8000b10 <MCI_ExecBufferedCommands+0x30>
 8000b56:	bf00      	nop

08000b58 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000b58:	6800      	ldr	r0, [r0, #0]
 8000b5a:	f006 b9a3 	b.w	8006ea4 <STM_GetState>
 8000b5e:	bf00      	nop

08000b60 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000b60:	7e40      	ldrb	r0, [r0, #25]
 8000b62:	4770      	bx	lr

08000b64 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000b64:	7b03      	ldrb	r3, [r0, #12]
 8000b66:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000b68:	bf0c      	ite	eq
 8000b6a:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000b6e:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000b74:	6840      	ldr	r0, [r0, #4]
 8000b76:	f006 b887 	b.w	8006c88 <STC_StopRamp>
 8000b7a:	bf00      	nop

08000b7c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000b7c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000b7e:	6840      	ldr	r0, [r0, #4]
 8000b80:	f006 f820 	bl	8006bc4 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000b84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000b88:	f005 bfbe 	b.w	8006b08 <SPD_GetAvrgMecSpeedUnit>

08000b8c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000b8c:	6840      	ldr	r0, [r0, #4]
 8000b8e:	f006 b823 	b.w	8006bd8 <STC_GetMecSpeedRefUnit>
 8000b92:	bf00      	nop

08000b94 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000b94:	6882      	ldr	r2, [r0, #8]
 8000b96:	6810      	ldr	r0, [r2, #0]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	b282      	uxth	r2, r0
 8000b9c:	f362 030f 	bfi	r3, r2, #0, #16
 8000ba0:	0c00      	lsrs	r0, r0, #16
 8000ba2:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000ba6:	b082      	sub	sp, #8
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	b002      	add	sp, #8
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000bb0:	6882      	ldr	r2, [r0, #8]
 8000bb2:	6850      	ldr	r0, [r2, #4]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	b282      	uxth	r2, r0
 8000bb8:	f362 030f 	bfi	r3, r2, #0, #16
 8000bbc:	0c00      	lsrs	r0, r0, #16
 8000bbe:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000bc2:	b082      	sub	sp, #8
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	b002      	add	sp, #8
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000bcc:	6882      	ldr	r2, [r0, #8]
 8000bce:	68d0      	ldr	r0, [r2, #12]
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	b282      	uxth	r2, r0
 8000bd4:	f362 030f 	bfi	r3, r2, #0, #16
 8000bd8:	0c00      	lsrs	r0, r0, #16
 8000bda:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000bde:	b082      	sub	sp, #8
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	b002      	add	sp, #8
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000be8:	6882      	ldr	r2, [r0, #8]
 8000bea:	6910      	ldr	r0, [r2, #16]
 8000bec:	2300      	movs	r3, #0
 8000bee:	b282      	uxth	r2, r0
 8000bf0:	f362 030f 	bfi	r3, r2, #0, #16
 8000bf4:	0c00      	lsrs	r0, r0, #16
 8000bf6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000bfa:	b082      	sub	sp, #8
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000c04:	6882      	ldr	r2, [r0, #8]
 8000c06:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	b282      	uxth	r2, r0
 8000c0e:	f362 030f 	bfi	r3, r2, #0, #16
 8000c12:	0c00      	lsrs	r0, r0, #16
 8000c14:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000c18:	b082      	sub	sp, #8
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	b002      	add	sp, #8
 8000c1e:	4770      	bx	lr

08000c20 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000c20:	6882      	ldr	r2, [r0, #8]
 8000c22:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000c26:	2300      	movs	r3, #0
 8000c28:	b282      	uxth	r2, r0
 8000c2a:	f362 030f 	bfi	r3, r2, #0, #16
 8000c2e:	0c00      	lsrs	r0, r0, #16
 8000c30:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000c34:	b082      	sub	sp, #8
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	b002      	add	sp, #8
 8000c3a:	4770      	bx	lr

08000c3c <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000c3c:	6883      	ldr	r3, [r0, #8]
}
 8000c3e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000c42:	4770      	bx	lr

08000c44 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000c44:	2300      	movs	r3, #0
 8000c46:	6882      	ldr	r2, [r0, #8]
 8000c48:	f361 030f 	bfi	r3, r1, #0, #16
 8000c4c:	f361 431f 	bfi	r3, r1, #16, #16
 8000c50:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000c58:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000c5a:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000c5e:	f006 f869 	bl	8006d34 <STC_GetDefaultIqdref>
 8000c62:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000c66:	8220      	strh	r0, [r4, #16]
 8000c68:	8263      	strh	r3, [r4, #18]
}
 8000c6a:	bd10      	pop	{r4, pc}

08000c6c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8000c6c:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000c70:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000c74:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000c78:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000c7c:	fb10 f202 	smulbb	r2, r0, r2
 8000c80:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000c84:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8000c88:	b084      	sub	sp, #16
 8000c8a:	b203      	sxth	r3, r0
  if ( wbeta_tmp > INT16_MAX )
 8000c8c:	da05      	bge.n	8000c9a <MCM_Clarke+0x2e>
 8000c8e:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000c90:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8000c94:	da0c      	bge.n	8000cb0 <MCM_Clarke+0x44>
 8000c96:	4a09      	ldr	r2, [pc, #36]	@ (8000cbc <MCM_Clarke+0x50>)
 8000c98:	e001      	b.n	8000c9e <MCM_Clarke+0x32>
 8000c9a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f363 000f 	bfi	r0, r3, #0, #16
 8000ca6:	b293      	uxth	r3, r2
 8000ca8:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <MCM_Clarke+0x50>)
 8000cb2:	b20a      	sxth	r2, r1
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	bfb8      	it	lt
 8000cb8:	4602      	movlt	r2, r0
 8000cba:	e7f0      	b.n	8000c9e <MCM_Clarke+0x32>
 8000cbc:	ffff8001 	.word	0xffff8001

08000cc0 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000cc0:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000cc4:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000cc8:	f400 7140 	and.w	r1, r0, #768	@ 0x300
 8000ccc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 8000cd0:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000cd2:	d028      	beq.n	8000d26 <MCM_Trig_Functions+0x66>
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	d816      	bhi.n	8000d0a <MCM_Trig_Functions+0x4a>
 8000cdc:	b361      	cbz	r1, 8000d38 <MCM_Trig_Functions+0x78>
 8000cde:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8000ce2:	d109      	bne.n	8000cf8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ce4:	b2c0      	uxtb	r0, r0
 8000ce6:	43c2      	mvns	r2, r0
 8000ce8:	491a      	ldr	r1, [pc, #104]	@ (8000d54 <MCM_Trig_Functions+0x94>)
 8000cea:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000cec:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000cf0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000cf4:	4252      	negs	r2, r2
 8000cf6:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f363 000f 	bfi	r0, r3, #0, #16
 8000d00:	b292      	uxth	r2, r2
 8000d02:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000d06:	b002      	add	sp, #8
 8000d08:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000d0a:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8000d0e:	d1f3      	bne.n	8000cf8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d10:	4910      	ldr	r1, [pc, #64]	@ (8000d54 <MCM_Trig_Functions+0x94>)
 8000d12:	b2c0      	uxtb	r0, r0
 8000d14:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d16:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d1a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d1c:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d1e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d22:	b21b      	sxth	r3, r3
      break;
 8000d24:	e7e8      	b.n	8000cf8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d26:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d28:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d2a:	490a      	ldr	r1, [pc, #40]	@ (8000d54 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d2c:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d2e:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d32:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8000d36:	e7df      	b.n	8000cf8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d38:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d3a:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d3c:	4905      	ldr	r1, [pc, #20]	@ (8000d54 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d3e:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d40:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d48:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d4a:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000d4c:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000d4e:	b21b      	sxth	r3, r3
      break;
 8000d50:	e7d2      	b.n	8000cf8 <MCM_Trig_Functions+0x38>
 8000d52:	bf00      	nop
 8000d54:	08007330 	.word	0x08007330

08000d58 <MCM_Park>:
{
 8000d58:	b530      	push	{r4, r5, lr}
 8000d5a:	4605      	mov	r5, r0
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000d60:	4608      	mov	r0, r1
 8000d62:	f7ff ffad 	bl	8000cc0 <MCM_Trig_Functions>
 8000d66:	b22d      	sxth	r5, r5
 8000d68:	b201      	sxth	r1, r0
 8000d6a:	1424      	asrs	r4, r4, #16
 8000d6c:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000d6e:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000d72:	fb04 3310 	mls	r3, r4, r0, r3
  if ( wqd_tmp > INT16_MAX )
 8000d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d7a:	da05      	bge.n	8000d88 <MCM_Park+0x30>
 8000d7c:	13da      	asrs	r2, r3, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000d7e:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8000d82:	da22      	bge.n	8000dca <MCM_Park+0x72>
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <MCM_Park+0x80>)
 8000d86:	e001      	b.n	8000d8c <MCM_Park+0x34>
 8000d88:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000d8c:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000d90:	fb05 4400 	mla	r4, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8000d94:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000d98:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000d9c:	da04      	bge.n	8000da8 <MCM_Park+0x50>
  else if ( wqd_tmp < ( -32768 ) )
 8000d9e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000da2:	da0c      	bge.n	8000dbe <MCM_Park+0x66>
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <MCM_Park+0x80>)
 8000da6:	e001      	b.n	8000dac <MCM_Park+0x54>
 8000da8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return ( Output );
 8000dac:	b292      	uxth	r2, r2
 8000dae:	2000      	movs	r0, #0
 8000db0:	f362 000f 	bfi	r0, r2, #0, #16
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000dba:	b005      	add	sp, #20
 8000dbc:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000dbe:	4906      	ldr	r1, [pc, #24]	@ (8000dd8 <MCM_Park+0x80>)
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	bfb8      	it	lt
 8000dc6:	460b      	movlt	r3, r1
 8000dc8:	e7f0      	b.n	8000dac <MCM_Park+0x54>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000dca:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <MCM_Park+0x80>)
 8000dcc:	b212      	sxth	r2, r2
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	bfb8      	it	lt
 8000dd2:	461a      	movlt	r2, r3
 8000dd4:	e7da      	b.n	8000d8c <MCM_Park+0x34>
 8000dd6:	bf00      	nop
 8000dd8:	ffff8001 	.word	0xffff8001

08000ddc <MCM_Rev_Park>:
{
 8000ddc:	b530      	push	{r4, r5, lr}
 8000dde:	4605      	mov	r5, r0
 8000de0:	b085      	sub	sp, #20
 8000de2:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000de4:	4608      	mov	r0, r1
 8000de6:	f7ff ff6b 	bl	8000cc0 <MCM_Trig_Functions>
 8000dea:	1424      	asrs	r4, r4, #16
 8000dec:	1402      	asrs	r2, r0, #16
 8000dee:	b22d      	sxth	r5, r5
 8000df0:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000df2:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000df6:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000dfa:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000dfe:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8000e02:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000e06:	2000      	movs	r0, #0
 8000e08:	f363 000f 	bfi	r0, r3, #0, #16
 8000e0c:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8000e10:	f364 401f 	bfi	r0, r4, #16, #16
}
 8000e14:	b005      	add	sp, #20
 8000e16:	bd30      	pop	{r4, r5, pc}

08000e18 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000e18:	b538      	push	{r3, r4, r5, lr}
 8000e1a:	2326      	movs	r3, #38	@ 0x26
 8000e1c:	4916      	ldr	r1, [pc, #88]	@ (8000e78 <FOC_Clear+0x60>)
 8000e1e:	fb00 f303 	mul.w	r3, r0, r3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000e22:	2400      	movs	r4, #0
 8000e24:	50cc      	str	r4, [r1, r3]
{
 8000e26:	4605      	mov	r5, r0
 8000e28:	f103 0208 	add.w	r2, r3, #8
 8000e2c:	1858      	adds	r0, r3, r1
 8000e2e:	3310      	adds	r3, #16
 8000e30:	440a      	add	r2, r1
 8000e32:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000e34:	4911      	ldr	r1, [pc, #68]	@ (8000e7c <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8000e36:	6044      	str	r4, [r0, #4]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000e38:	6054      	str	r4, [r2, #4]
 8000e3a:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000e3c:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000e40:	f8c3 400a 	str.w	r4, [r3, #10]
 8000e44:	f8c3 4006 	str.w	r4, [r3, #6]
 8000e48:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000e4c:	4621      	mov	r1, r4
 8000e4e:	f005 fb9f 	bl	8006590 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <FOC_Clear+0x68>)
 8000e54:	4621      	mov	r1, r4
 8000e56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000e5a:	f005 fb99 	bl	8006590 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <FOC_Clear+0x6c>)
 8000e60:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000e64:	f005 feb0 	bl	8006bc8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000e68:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <FOC_Clear+0x70>)
 8000e6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000e72:	f005 bd85 	b.w	8006980 <PWMC_SwitchOffPWM>
 8000e76:	bf00      	nop
 8000e78:	20000ac8 	.word	0x20000ac8
 8000e7c:	20000a40 	.word	0x20000a40
 8000e80:	20000a3c 	.word	0x20000a3c
 8000e84:	20000a48 	.word	0x20000a48
 8000e88:	20000a30 	.word	0x20000a30

08000e8c <MCboot>:
{
 8000e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8000e90:	f8df a1ac 	ldr.w	sl, [pc, #428]	@ 8001040 <MCboot+0x1b4>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000e94:	4e56      	ldr	r6, [pc, #344]	@ (8000ff0 <MCboot+0x164>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000e96:	4d57      	ldr	r5, [pc, #348]	@ (8000ff4 <MCboot+0x168>)
  HALL_Init (&HALL_M1);
 8000e98:	f8df b1a8 	ldr.w	fp, [pc, #424]	@ 8001044 <MCboot+0x1b8>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000e9c:	4f56      	ldr	r7, [pc, #344]	@ (8000ff8 <MCboot+0x16c>)
  PID_HandleInit(&PIDIqHandle_M1);
 8000e9e:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 8001048 <MCboot+0x1bc>
  PID_HandleInit(&PIDIdHandle_M1);
 8000ea2:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800104c <MCboot+0x1c0>
{
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 8000eaa:	4650      	mov	r0, sl
{
 8000eac:	e9cd 3102 	strd	r3, r1, [sp, #8]
  STM_Init(&STM[M1]);
 8000eb0:	f005 ff56 	bl	8006d60 <STM_Init>
  bMCBootCompleted = 0;
 8000eb4:	4a51      	ldr	r2, [pc, #324]	@ (8000ffc <MCboot+0x170>)
  pCLM[M1] = &CircleLimitationM1;
 8000eb6:	4b52      	ldr	r3, [pc, #328]	@ (8001000 <MCboot+0x174>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000eb8:	4852      	ldr	r0, [pc, #328]	@ (8001004 <MCboot+0x178>)
 8000eba:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000ec0:	4a51      	ldr	r2, [pc, #324]	@ (8001008 <MCboot+0x17c>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000ec2:	4d52      	ldr	r5, [pc, #328]	@ (800100c <MCboot+0x180>)
  pCLM[M1] = &CircleLimitationM1;
 8000ec4:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8000ec6:	f005 f8f3 	bl	80060b0 <ICS_Init>
  startTimers();
 8000eca:	f005 fbe3 	bl	8006694 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000ece:	4630      	mov	r0, r6
 8000ed0:	f005 fb4a 	bl	8006568 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000ed4:	4b4e      	ldr	r3, [pc, #312]	@ (8001010 <MCboot+0x184>)
 8000ed6:	602b      	str	r3, [r5, #0]
  HALL_Init (&HALL_M1);
 8000ed8:	4658      	mov	r0, fp
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000eda:	603e      	str	r6, [r7, #0]
  HALL_Init (&HALL_M1);
 8000edc:	f004 fc9e 	bl	800581c <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000ee0:	465a      	mov	r2, fp
 8000ee2:	6839      	ldr	r1, [r7, #0]
 8000ee4:	6828      	ldr	r0, [r5, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000ee6:	4e4b      	ldr	r6, [pc, #300]	@ (8001014 <MCboot+0x188>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8000ee8:	f005 fe56 	bl	8006b98 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000eec:	4648      	mov	r0, r9
 8000eee:	f005 fb3b 	bl	8006568 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000ef2:	4640      	mov	r0, r8
 8000ef4:	f005 fb38 	bl	8006568 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000ef8:	4947      	ldr	r1, [pc, #284]	@ (8001018 <MCboot+0x18c>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8000efa:	4b48      	ldr	r3, [pc, #288]	@ (800101c <MCboot+0x190>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000efc:	4848      	ldr	r0, [pc, #288]	@ (8001020 <MCboot+0x194>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000efe:	f8c1 9000 	str.w	r9, [r1]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000f02:	6030      	str	r0, [r6, #0]
  NTC_Init(&TempSensorParamsM1);
 8000f04:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8001050 <MCboot+0x1c4>
  pPIDId[M1] = &PIDIdHandle_M1;
 8000f08:	f8c3 8000 	str.w	r8, [r3]
  RVBS_Init(pBusSensorM1);
 8000f0c:	f005 fd7a 	bl	8006a04 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000f10:	4a44      	ldr	r2, [pc, #272]	@ (8001024 <MCboot+0x198>)
 8000f12:	4b45      	ldr	r3, [pc, #276]	@ (8001028 <MCboot+0x19c>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000f14:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8001054 <MCboot+0x1c8>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000f18:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 8000f1a:	4648      	mov	r0, r9
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000f1c:	6832      	ldr	r2, [r6, #0]
 8000f1e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000f22:	f8c3 810c 	str.w	r8, [r3, #268]	@ 0x10c
  NTC_Init(&TempSensorParamsM1);
 8000f26:	f005 fadb 	bl	80064e0 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000f2a:	4940      	ldr	r1, [pc, #256]	@ (800102c <MCboot+0x1a0>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000f2c:	4b40      	ldr	r3, [pc, #256]	@ (8001030 <MCboot+0x1a4>)
 8000f2e:	4841      	ldr	r0, [pc, #260]	@ (8001034 <MCboot+0x1a8>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000f30:	f8c1 9000 	str.w	r9, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000f34:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8000f36:	f005 fdaf 	bl	8006a98 <REMNG_Init>
  FOC_Clear(M1);
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f7ff ff6c 	bl	8000e18 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000f40:	f04f 0901 	mov.w	r9, #1
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000f44:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000f46:	f888 9024 	strb.w	r9, [r8, #36]	@ 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000f4a:	f005 fef3 	bl	8006d34 <STC_GetDefaultIqdref>
 8000f4e:	f8c8 0010 	str.w	r0, [r8, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000f52:	6828      	ldr	r0, [r5, #0]
 8000f54:	f005 feee 	bl	8006d34 <STC_GetDefaultIqdref>
 8000f58:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f5c:	4643      	mov	r3, r8
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000f5e:	f8a8 0014 	strh.w	r0, [r8, #20]
  oMCInterface[M1] = & Mci[M1];
 8000f62:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 8001058 <MCboot+0x1cc>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f66:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000f68:	4833      	ldr	r0, [pc, #204]	@ (8001038 <MCboot+0x1ac>)
 8000f6a:	f8c8 0000 	str.w	r0, [r8]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000f6e:	4651      	mov	r1, sl
 8000f70:	f7ff fd74 	bl	8000a5c <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000f74:	f8d8 0000 	ldr.w	r0, [r8]
 8000f78:	9001      	str	r0, [sp, #4]
 8000f7a:	6828      	ldr	r0, [r5, #0]
 8000f7c:	f005 fed0 	bl	8006d20 <STC_GetMecSpeedRefUnitDefault>
 8000f80:	4622      	mov	r2, r4
 8000f82:	4601      	mov	r1, r0
 8000f84:	9801      	ldr	r0, [sp, #4]
 8000f86:	f7ff fd77 	bl	8000a78 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8000f8a:	9802      	ldr	r0, [sp, #8]
 8000f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8000f90:	6003      	str	r3, [r0, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000f92:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <MCboot+0x168>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000f94:	4820      	ldr	r0, [pc, #128]	@ (8001018 <MCboot+0x18c>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000f96:	6819      	ldr	r1, [r3, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000f98:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000f9a:	4b22      	ldr	r3, [pc, #136]	@ (8001024 <MCboot+0x198>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000f9c:	4d23      	ldr	r5, [pc, #140]	@ (800102c <MCboot+0x1a0>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000f9e:	f8d7 c000 	ldr.w	ip, [r7]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000fa2:	6807      	ldr	r7, [r0, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000fa4:	481d      	ldr	r0, [pc, #116]	@ (800101c <MCboot+0x190>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000fa6:	f8d3 e000 	ldr.w	lr, [r3]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000faa:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000fac:	4b23      	ldr	r3, [pc, #140]	@ (800103c <MCboot+0x1b0>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000fae:	6836      	ldr	r6, [r6, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000fb0:	6800      	ldr	r0, [r0, #0]
 8000fb2:	6098      	str	r0, [r3, #8]
  MCT[M1].pStateMachine = &STM[M1];
 8000fb4:	e9c3 2a09 	strd	r2, sl, [r3, #36]	@ 0x24
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000fb8:	e9c3 c700 	strd	ip, r7, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000fbc:	e9c3 560b 	strd	r5, r6, [r3, #44]	@ 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8000fc0:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000fc4:	e9c3 440d 	strd	r4, r4, [r3, #52]	@ 0x34
  MCT[M1].pFF = MC_NULL;
 8000fc8:	e9c3 4410 	strd	r4, r4, [r3, #64]	@ 0x40
  MCT[M1].pSCC = MC_NULL;
 8000fcc:	e9c3 4412 	strd	r4, r4, [r3, #72]	@ 0x48
  bMCBootCompleted = 1;
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <MCboot+0x170>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000fd2:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8000fd4:	f8c3 b018 	str.w	fp, [r3, #24]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000fd8:	f8c3 e03c 	str.w	lr, [r3, #60]	@ 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000fdc:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8000fde:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 8000fe0:	651c      	str	r4, [r3, #80]	@ 0x50
  pMCTList[M1] = &MCT[M1];
 8000fe2:	9903      	ldr	r1, [sp, #12]
  bMCBootCompleted = 1;
 8000fe4:	f882 9000 	strb.w	r9, [r2]
  pMCTList[M1] = &MCT[M1];
 8000fe8:	600b      	str	r3, [r1, #0]
}
 8000fea:	b007      	add	sp, #28
 8000fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ff0:	20000420 	.word	0x20000420
 8000ff4:	20000a30 	.word	0x20000a30
 8000ff8:	20000a44 	.word	0x20000a44
 8000ffc:	20000a1c 	.word	0x20000a1c
 8001000:	20000a28 	.word	0x20000a28
 8001004:	20000320 	.word	0x20000320
 8001008:	2000013c 	.word	0x2000013c
 800100c:	20000a48 	.word	0x20000a48
 8001010:	20000394 	.word	0x20000394
 8001014:	20000a38 	.word	0x20000a38
 8001018:	20000a40 	.word	0x20000a40
 800101c:	20000a3c 	.word	0x20000a3c
 8001020:	20000208 	.word	0x20000208
 8001024:	20000a2c 	.word	0x20000a2c
 8001028:	2000044c 	.word	0x2000044c
 800102c:	20000a34 	.word	0x20000a34
 8001030:	20000a24 	.word	0x20000a24
 8001034:	200001f0 	.word	0x200001f0
 8001038:	20000aac 	.word	0x20000aac
 800103c:	20000a54 	.word	0x20000a54
 8001040:	20000a4c 	.word	0x20000a4c
 8001044:	20000258 	.word	0x20000258
 8001048:	200003f4 	.word	0x200003f4
 800104c:	200003c8 	.word	0x200003c8
 8001050:	20000230 	.word	0x20000230
 8001054:	20000ac8 	.word	0x20000ac8
 8001058:	20000aa8 	.word	0x20000aa8

0800105c <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001060:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001062:	4c08      	ldr	r4, [pc, #32]	@ (8001084 <FOC_CalcCurrRef+0x24>)
 8001064:	2326      	movs	r3, #38	@ 0x26
 8001066:	fb03 4400 	mla	r4, r3, r0, r4
 800106a:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800106e:	b103      	cbz	r3, 8001072 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001070:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001072:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <FOC_CalcCurrRef+0x28>)
 8001074:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001078:	f005 fe0a 	bl	8006c90 <STC_CalcTorqueReference>
 800107c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800107e:	8220      	strh	r0, [r4, #16]
}
 8001080:	bd10      	pop	{r4, pc}
 8001082:	bf00      	nop
 8001084:	20000ac8 	.word	0x20000ac8
 8001088:	20000a48 	.word	0x20000a48

0800108c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800108c:	4b01      	ldr	r3, [pc, #4]	@ (8001094 <TSK_SetChargeBootCapDelayM1+0x8>)
 800108e:	8018      	strh	r0, [r3, #0]
}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000a20 	.word	0x20000a20

08001098 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001098:	4b03      	ldr	r3, [pc, #12]	@ (80010a8 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800109a:	8818      	ldrh	r0, [r3, #0]
 800109c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800109e:	fab0 f080 	clz	r0, r0
 80010a2:	0940      	lsrs	r0, r0, #5
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000a20 	.word	0x20000a20

080010ac <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80010ac:	4b01      	ldr	r3, [pc, #4]	@ (80010b4 <TSK_SetStopPermanencyTimeM1+0x8>)
 80010ae:	8018      	strh	r0, [r3, #0]
}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000a1e 	.word	0x20000a1e

080010b8 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80010ba:	8818      	ldrh	r0, [r3, #0]
 80010bc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80010be:	fab0 f080 	clz	r0, r0
 80010c2:	0940      	lsrs	r0, r0, #5
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000a1e 	.word	0x20000a1e

080010cc <TSK_MediumFrequencyTaskM1>:
{
 80010cc:	b530      	push	{r4, r5, lr}
 80010ce:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80010d0:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80010d2:	f10d 0106 	add.w	r1, sp, #6
 80010d6:	484d      	ldr	r0, [pc, #308]	@ (800120c <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 80010d8:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80010dc:	f004 fcee 	bl	8005abc <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 80010e0:	4d4b      	ldr	r5, [pc, #300]	@ (8001210 <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80010e2:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 80010e4:	6828      	ldr	r0, [r5, #0]
 80010e6:	f005 fa9f 	bl	8006628 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80010ea:	484a      	ldr	r0, [pc, #296]	@ (8001214 <TSK_MediumFrequencyTaskM1+0x148>)
 80010ec:	f005 feda 	bl	8006ea4 <STM_GetState>
  switch ( StateM1 )
 80010f0:	1ec3      	subs	r3, r0, #3
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	d81b      	bhi.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
 80010f6:	e8df f003 	tbb	[pc, r3]
 80010fa:	392d      	.short	0x392d
 80010fc:	6008513e 	.word	0x6008513e
 8001100:	1a1a1a69 	.word	0x1a1a1a69
 8001104:	6e1a1a1a 	.word	0x6e1a1a1a
 8001108:	1c7c      	.short	0x1c7c
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 800110a:	4b43      	ldr	r3, [pc, #268]	@ (8001218 <TSK_MediumFrequencyTaskM1+0x14c>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	f005 f89f 	bl	8006250 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fe80 	bl	8000e18 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001118:	6828      	ldr	r0, [r5, #0]
 800111a:	f005 f99d 	bl	8006458 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800111e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001122:	f7ff ffc3 	bl	80010ac <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001126:	483b      	ldr	r0, [pc, #236]	@ (8001214 <TSK_MediumFrequencyTaskM1+0x148>)
 8001128:	2108      	movs	r1, #8
 800112a:	f005 fe41 	bl	8006db0 <STM_NextState>
}
 800112e:	b003      	add	sp, #12
 8001130:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 8001132:	4836      	ldr	r0, [pc, #216]	@ (800120c <TSK_MediumFrequencyTaskM1+0x140>)
 8001134:	f004 fbfc 	bl	8005930 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001138:	4836      	ldr	r0, [pc, #216]	@ (8001214 <TSK_MediumFrequencyTaskM1+0x148>)
 800113a:	2104      	movs	r1, #4
 800113c:	f005 fe38 	bl	8006db0 <STM_NextState>
 8001140:	2800      	cmp	r0, #0
 8001142:	d0f4      	beq.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
      FOC_Clear( M1 );
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fe67 	bl	8000e18 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 800114a:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <TSK_MediumFrequencyTaskM1+0x14c>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	f005 f83f 	bl	80061d0 <ICS_SwitchOnPWM>
 8001152:	e7ec      	b.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 8001154:	4b30      	ldr	r3, [pc, #192]	@ (8001218 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	f005 f814 	bl	8006184 <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800115c:	2014      	movs	r0, #20
 800115e:	f7ff ff95 	bl	800108c <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001162:	2110      	movs	r1, #16
 8001164:	482b      	ldr	r0, [pc, #172]	@ (8001214 <TSK_MediumFrequencyTaskM1+0x148>)
 8001166:	f005 fe23 	bl	8006db0 <STM_NextState>
    break;
 800116a:	e7e0      	b.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 800116c:	2105      	movs	r1, #5
 800116e:	4829      	ldr	r0, [pc, #164]	@ (8001214 <TSK_MediumFrequencyTaskM1+0x148>)
 8001170:	f005 fe1e 	bl	8006db0 <STM_NextState>
    break;
 8001174:	e7db      	b.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
	  FOC_InitAdditionalMethods(M1);
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff ff70 	bl	800105c <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff ff6f 	bl	8001060 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001182:	2106      	movs	r1, #6
 8001184:	4823      	ldr	r0, [pc, #140]	@ (8001214 <TSK_MediumFrequencyTaskM1+0x148>)
 8001186:	f005 fe13 	bl	8006db0 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 800118a:	4b24      	ldr	r3, [pc, #144]	@ (800121c <TSK_MediumFrequencyTaskM1+0x150>)
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	f005 fddf 	bl	8006d50 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <TSK_MediumFrequencyTaskM1+0x154>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	f7ff fca3 	bl	8000ae0 <MCI_ExecBufferedCommands>
    break;
 800119a:	e7c8      	b.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 800119c:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <TSK_MediumFrequencyTaskM1+0x154>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	f7ff fc9e 	bl	8000ae0 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff ff5b 	bl	8001060 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 80011aa:	2c00      	cmp	r4, #0
 80011ac:	d1bf      	bne.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80011ae:	4622      	mov	r2, r4
 80011b0:	2120      	movs	r1, #32
 80011b2:	4818      	ldr	r0, [pc, #96]	@ (8001214 <TSK_MediumFrequencyTaskM1+0x148>)
 80011b4:	f005 fdda 	bl	8006d6c <STM_FaultProcessing>
 80011b8:	e7b9      	b.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80011ba:	f7ff ff7d 	bl	80010b8 <TSK_StopPermanencyTimeHasElapsedM1>
 80011be:	2800      	cmp	r0, #0
 80011c0:	d0b5      	beq.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
      STM_NextState( &STM[M1], STOP_IDLE );
 80011c2:	2109      	movs	r1, #9
 80011c4:	4813      	ldr	r0, [pc, #76]	@ (8001214 <TSK_MediumFrequencyTaskM1+0x148>)
 80011c6:	f005 fdf3 	bl	8006db0 <STM_NextState>
 80011ca:	e7b0      	b.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
    STM_NextState( &STM[M1], IDLE );
 80011cc:	2100      	movs	r1, #0
 80011ce:	4811      	ldr	r0, [pc, #68]	@ (8001214 <TSK_MediumFrequencyTaskM1+0x148>)
 80011d0:	f005 fdee 	bl	8006db0 <STM_NextState>
}
 80011d4:	e7ab      	b.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80011d6:	f7ff ff5f 	bl	8001098 <TSK_ChargeBootCapDelayHasElapsedM1>
 80011da:	2800      	cmp	r0, #0
 80011dc:	d0a7      	beq.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <TSK_MediumFrequencyTaskM1+0x14c>)
 80011e0:	2100      	movs	r1, #0
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	f005 fbce 	bl	8006984 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80011e8:	2111      	movs	r1, #17
 80011ea:	480a      	ldr	r0, [pc, #40]	@ (8001214 <TSK_MediumFrequencyTaskM1+0x148>)
 80011ec:	f005 fde0 	bl	8006db0 <STM_NextState>
 80011f0:	e79d      	b.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <TSK_MediumFrequencyTaskM1+0x14c>)
 80011f4:	2101      	movs	r1, #1
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f005 fbc4 	bl	8006984 <PWMC_CurrentReadingCalibr>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d096      	beq.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
      STM_NextState( &STM[M1], CLEAR );
 8001200:	2112      	movs	r1, #18
 8001202:	4804      	ldr	r0, [pc, #16]	@ (8001214 <TSK_MediumFrequencyTaskM1+0x148>)
 8001204:	f005 fdd4 	bl	8006db0 <STM_NextState>
 8001208:	e791      	b.n	800112e <TSK_MediumFrequencyTaskM1+0x62>
 800120a:	bf00      	nop
 800120c:	20000258 	.word	0x20000258
 8001210:	20000a2c 	.word	0x20000a2c
 8001214:	20000a4c 	.word	0x20000a4c
 8001218:	20000a30 	.word	0x20000a30
 800121c:	20000a48 	.word	0x20000a48
 8001220:	20000aa8 	.word	0x20000aa8

08001224 <MC_Scheduler>:
{
 8001224:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MC_Scheduler+0x48>)
 8001228:	781c      	ldrb	r4, [r3, #0]
 800122a:	2c01      	cmp	r4, #1
 800122c:	d000      	beq.n	8001230 <MC_Scheduler+0xc>
}
 800122e:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001230:	4d0f      	ldr	r5, [pc, #60]	@ (8001270 <MC_Scheduler+0x4c>)
 8001232:	882b      	ldrh	r3, [r5, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	b1ab      	cbz	r3, 8001264 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001238:	882b      	ldrh	r3, [r5, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	b29b      	uxth	r3, r3
 800123e:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001240:	4a0c      	ldr	r2, [pc, #48]	@ (8001274 <MC_Scheduler+0x50>)
 8001242:	8813      	ldrh	r3, [r2, #0]
 8001244:	b29b      	uxth	r3, r3
 8001246:	b11b      	cbz	r3, 8001250 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001248:	8813      	ldrh	r3, [r2, #0]
 800124a:	3b01      	subs	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001250:	4a09      	ldr	r2, [pc, #36]	@ (8001278 <MC_Scheduler+0x54>)
 8001252:	8813      	ldrh	r3, [r2, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0e9      	beq.n	800122e <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800125a:	8813      	ldrh	r3, [r2, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	b29b      	uxth	r3, r3
 8001260:	8013      	strh	r3, [r2, #0]
}
 8001262:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001264:	f7ff ff32 	bl	80010cc <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001268:	802c      	strh	r4, [r5, #0]
 800126a:	e7e9      	b.n	8001240 <MC_Scheduler+0x1c>
 800126c:	20000a1c 	.word	0x20000a1c
 8001270:	20000a22 	.word	0x20000a22
 8001274:	20000a20 	.word	0x20000a20
 8001278:	20000a1e 	.word	0x20000a1e

0800127c <MC_RunMotorControlTasks>:
{
 800127c:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 800127e:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <MC_RunMotorControlTasks+0x18>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b903      	cbnz	r3, 8001286 <MC_RunMotorControlTasks+0xa>
}
 8001284:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001286:	f7ff ffcd 	bl	8001224 <MC_Scheduler>
}
 800128a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 800128e:	f001 b8dd 	b.w	800244c <UI_Scheduler>
 8001292:	bf00      	nop
 8001294:	20000a1c 	.word	0x20000a1c

08001298 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 800129c:	4830      	ldr	r0, [pc, #192]	@ (8001360 <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800129e:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 800137c <TSK_HighFrequencyTask+0xe4>
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80012a2:	4c30      	ldr	r4, [pc, #192]	@ (8001364 <TSK_HighFrequencyTask+0xcc>)
{
 80012a4:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 80012a6:	f004 fbeb 	bl	8005a80 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80012aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001368 <TSK_HighFrequencyTask+0xd0>)
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	f005 fc89 	bl	8006bc4 <STC_GetSpeedSensor>
 80012b2:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80012b4:	f005 fc24 	bl	8006b00 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80012b8:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 80012ba:	4605      	mov	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80012bc:	f8d8 0000 	ldr.w	r0, [r8]
 80012c0:	f005 fa40 	bl	8006744 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80012c4:	9803      	ldr	r0, [sp, #12]
 80012c6:	f7ff fcd1 	bl	8000c6c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80012ca:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 80012cc:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80012ce:	f7ff fd43 	bl	8000d58 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 80012d2:	4b26      	ldr	r3, [pc, #152]	@ (800136c <TSK_HighFrequencyTask+0xd4>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80012d4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80012d8:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80012da:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80012dc:	1a09      	subs	r1, r1, r0
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	f005 f962 	bl	80065a8 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80012e4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80012e8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 80012ec:	1ac9      	subs	r1, r1, r3
 80012ee:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <TSK_HighFrequencyTask+0xd8>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 80012f0:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	f005 f958 	bl	80065a8 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80012f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <TSK_HighFrequencyTask+0xdc>)
 80012fa:	f8ad 6008 	strh.w	r6, [sp, #8]
 80012fe:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001302:	9902      	ldr	r1, [sp, #8]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	f004 fa33 	bl	8005770 <Circle_Limitation>
 800130a:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800130c:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800130e:	9602      	str	r6, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001310:	f005 fbfe 	bl	8006b10 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001314:	4629      	mov	r1, r5
 8001316:	9802      	ldr	r0, [sp, #8]
 8001318:	f7ff fd60 	bl	8000ddc <MCM_Rev_Park>
 800131c:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800131e:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001322:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001324:	f005 fa10 	bl	8006748 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001328:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800132a:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 800132c:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800132e:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001330:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001332:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001334:	f8c4 6016 	str.w	r6, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 8001338:	2901      	cmp	r1, #1
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800133a:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800133c:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 800133e:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001342:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8001344:	d003      	beq.n	800134e <TSK_HighFrequencyTask+0xb6>
}
 8001346:	2000      	movs	r0, #0
 8001348:	b006      	add	sp, #24
 800134a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	4809      	ldr	r0, [pc, #36]	@ (8001378 <TSK_HighFrequencyTask+0xe0>)
 8001352:	f005 fd0b 	bl	8006d6c <STM_FaultProcessing>
}
 8001356:	2000      	movs	r0, #0
 8001358:	b006      	add	sp, #24
 800135a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800135e:	bf00      	nop
 8001360:	20000258 	.word	0x20000258
 8001364:	20000ac8 	.word	0x20000ac8
 8001368:	20000a48 	.word	0x20000a48
 800136c:	20000a40 	.word	0x20000a40
 8001370:	20000a3c 	.word	0x20000a3c
 8001374:	20000a28 	.word	0x20000a28
 8001378:	20000a4c 	.word	0x20000a4c
 800137c:	20000a30 	.word	0x20000a30

08001380 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001382:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001384:	4e20      	ldr	r6, [pc, #128]	@ (8001408 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8001386:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001388:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800138c:	f005 f8ba 	bl	8006504 <NTC_CalcAvTemp>
 8001390:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001392:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001396:	f005 fb15 	bl	80069c4 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800139a:	f025 0508 	bic.w	r5, r5, #8
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800139e:	4305      	orrs	r5, r0
 80013a0:	b2ad      	uxth	r5, r5
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80013a2:	b334      	cbz	r4, 80013f2 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80013a4:	4f19      	ldr	r7, [pc, #100]	@ (800140c <TSK_SafetyTask_PWMOFF+0x8c>)
 80013a6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80013aa:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 80013ae:	43ea      	mvns	r2, r5
 80013b0:	b292      	uxth	r2, r2
 80013b2:	4629      	mov	r1, r5
 80013b4:	4638      	mov	r0, r7
 80013b6:	f005 fcd9 	bl	8006d6c <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80013ba:	4638      	mov	r0, r7
 80013bc:	f005 fd72 	bl	8006ea4 <STM_GetState>
 80013c0:	280a      	cmp	r0, #10
 80013c2:	d002      	beq.n	80013ca <TSK_SafetyTask_PWMOFF+0x4a>
 80013c4:	280b      	cmp	r0, #11
 80013c6:	d00e      	beq.n	80013e6 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80013c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80013ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80013ce:	f005 fad7 	bl	8006980 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff fd20 	bl	8000e18 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <TSK_SafetyTask_PWMOFF+0x90>)
 80013da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80013de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80013e2:	f005 b839 	b.w	8006458 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80013e6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 80013ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80013ee:	f005 bac7 	b.w	8006980 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <TSK_SafetyTask_PWMOFF+0x94>)
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	f005 fb1f 	bl	8006a38 <RVBS_CalcAvVbus>
 80013fa:	f020 0008 	bic.w	r0, r0, #8
 80013fe:	4305      	orrs	r5, r0
 8001400:	b2ad      	uxth	r5, r5
 8001402:	e7cf      	b.n	80013a4 <TSK_SafetyTask_PWMOFF+0x24>
 8001404:	20000a34 	.word	0x20000a34
 8001408:	20000a30 	.word	0x20000a30
 800140c:	20000a4c 	.word	0x20000a4c
 8001410:	20000a2c 	.word	0x20000a2c
 8001414:	20000a38 	.word	0x20000a38

08001418 <TSK_SafetyTask>:
{
 8001418:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <TSK_SafetyTask+0x1c>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d000      	beq.n	8001424 <TSK_SafetyTask+0xc>
}
 8001422:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff ffab 	bl	8001380 <TSK_SafetyTask_PWMOFF>
}
 800142a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800142e:	f000 bd03 	b.w	8001e38 <RCM_ExecUserConv>
 8001432:	bf00      	nop
 8001434:	20000a1c 	.word	0x20000a1c

08001438 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001438:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 800143a:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <TSK_HardwareFaultTask+0x18>)
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	f004 ff07 	bl	8006250 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001446:	4803      	ldr	r0, [pc, #12]	@ (8001454 <TSK_HardwareFaultTask+0x1c>)
 8001448:	2200      	movs	r2, #0
 800144a:	2180      	movs	r1, #128	@ 0x80
 800144c:	f005 bc8e 	b.w	8006d6c <STM_FaultProcessing>
 8001450:	20000a30 	.word	0x20000a30
 8001454:	20000a4c 	.word	0x20000a4c

08001458 <startMediumFrequencyTask>:

/* startMediumFrequencyTask function */
void startMediumFrequencyTask(void const * argument)
{
 8001458:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f004 f858 	bl	8005510 <vTaskDelay>
    MC_RunMotorControlTasks();
 8001460:	f7ff ff0c 	bl	800127c <MC_RunMotorControlTasks>
  for(;;)
 8001464:	e7f9      	b.n	800145a <startMediumFrequencyTask+0x2>
 8001466:	bf00      	nop

08001468 <StartSafetyTask>:
  /* USER CODE END MF task 1 */
}

/* startSafetyTask function */
void StartSafetyTask(void const * argument)
{
 8001468:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f004 f850 	bl	8005510 <vTaskDelay>
    TSK_SafetyTask();
 8001470:	f7ff ffd2 	bl	8001418 <TSK_SafetyTask>
  for(;;)
 8001474:	e7f9      	b.n	800146a <StartSafetyTask+0x2>
 8001476:	bf00      	nop

08001478 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001478:	b410      	push	{r4}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800147a:	4a3a      	ldr	r2, [pc, #232]	@ (8001564 <mc_lock_pins+0xec>)
 800147c:	4b3a      	ldr	r3, [pc, #232]	@ (8001568 <mc_lock_pins+0xf0>)
 800147e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001480:	2110      	movs	r1, #16
 8001482:	61d1      	str	r1, [r2, #28]
 8001484:	b08d      	sub	sp, #52	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001486:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001488:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800148a:	4b38      	ldr	r3, [pc, #224]	@ (800156c <mc_lock_pins+0xf4>)
  temp = READ_REG(GPIOx->LCKR);
 800148c:	920b      	str	r2, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 800148e:	2102      	movs	r1, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001490:	4a37      	ldr	r2, [pc, #220]	@ (8001570 <mc_lock_pins+0xf8>)
  (void) temp;
 8001492:	980b      	ldr	r0, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001494:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001496:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001498:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800149a:	69da      	ldr	r2, [r3, #28]
 800149c:	920a      	str	r2, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 800149e:	2104      	movs	r1, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a0:	4a34      	ldr	r2, [pc, #208]	@ (8001574 <mc_lock_pins+0xfc>)
  (void) temp;
 80014a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014a6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a8:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014aa:	69da      	ldr	r2, [r3, #28]
 80014ac:	9209      	str	r2, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014ae:	2101      	movs	r1, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  (void) temp;
 80014b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014b8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ba:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014bc:	69da      	ldr	r2, [r3, #28]
 80014be:	9208      	str	r2, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001578 <mc_lock_pins+0x100>)
  (void) temp;
 80014c6:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c8:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014ca:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014cc:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	9207      	str	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d2:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
  (void) temp;
 80014da:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014dc:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014de:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014e0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014e2:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014e4:	4a25      	ldr	r2, [pc, #148]	@ (800157c <mc_lock_pins+0x104>)
  temp = READ_REG(GPIOx->LCKR);
 80014e6:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014e8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ec:	f44f 31a0 	mov.w	r1, #81920	@ 0x14000
  (void) temp;
 80014f0:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014f2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014f4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014f6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014f8:	69d1      	ldr	r1, [r2, #28]
 80014fa:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014fc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001500:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 8001504:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001506:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001508:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800150a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800150c:	69d9      	ldr	r1, [r3, #28]
 800150e:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001510:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001514:	f44f 31c0 	mov.w	r1, #98304	@ 0x18000
  (void) temp;
 8001518:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800151a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800151c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800151e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001520:	69d1      	ldr	r1, [r2, #28]
 8001522:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001524:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001528:	f44f 3190 	mov.w	r1, #73728	@ 0x12000
  (void) temp;
 800152c:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800152e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001530:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001532:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001534:	69d2      	ldr	r2, [r2, #28]
 8001536:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001538:	2108      	movs	r1, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800153a:	4a11      	ldr	r2, [pc, #68]	@ (8001580 <mc_lock_pins+0x108>)
  (void) temp;
 800153c:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800153e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001540:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001542:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001544:	69d9      	ldr	r1, [r3, #28]
 8001546:	9101      	str	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001548:	3278      	adds	r2, #120	@ 0x78
  WRITE_REG(GPIOx->LCKR, PinMask);
 800154a:	2180      	movs	r1, #128	@ 0x80
  (void) temp;
 800154c:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800154e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001550:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001552:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001558:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 800155a:	b00d      	add	sp, #52	@ 0x34
 800155c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40020800 	.word	0x40020800
 8001568:	00010010 	.word	0x00010010
 800156c:	40020000 	.word	0x40020000
 8001570:	00010002 	.word	0x00010002
 8001574:	00010004 	.word	0x00010004
 8001578:	00010100 	.word	0x00010100
 800157c:	40020400 	.word	0x40020400
 8001580:	00010008 	.word	0x00010008

08001584 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	460c      	mov	r4, r1
 8001588:	b08d      	sub	sp, #52	@ 0x34
 800158a:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 800158c:	2100      	movs	r1, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 800158e:	0962      	lsrs	r2, r4, #5
{
 8001590:	4605      	mov	r5, r0
 8001592:	461f      	mov	r7, r3
  bool bNoError = false; // Default is error
 8001594:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8001598:	d122      	bne.n	80015e0 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800159a:	2c12      	cmp	r4, #18
 800159c:	d814      	bhi.n	80015c8 <MCP_ReceivedFrame+0x44>
 800159e:	e8df f014 	tbh	[pc, r4, lsl #1]
 80015a2:	0016      	.short	0x0016
 80015a4:	00ba015d 	.word	0x00ba015d
 80015a8:	00130153 	.word	0x00130153
 80015ac:	004c0013 	.word	0x004c0013
 80015b0:	007d0075 	.word	0x007d0075
 80015b4:	01f200a6 	.word	0x01f200a6
 80015b8:	01d201b2 	.word	0x01d201b2
 80015bc:	001301c9 	.word	0x001301c9
 80015c0:	00130013 	.word	0x00130013
 80015c4:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80015ce:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80015d2:	2301      	movs	r3, #1
 80015d4:	f10d 020e 	add.w	r2, sp, #14
 80015d8:	21ff      	movs	r1, #255	@ 0xff
 80015da:	47a0      	blx	r4
    }
  }
}
 80015dc:	b00d      	add	sp, #52	@ 0x34
 80015de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80015e0:	3a01      	subs	r2, #1
 80015e2:	f000 ff73 	bl	80024cc <UI_SetReg>
 80015e6:	b1c8      	cbz	r0, 800161c <MCP_ReceivedFrame+0x98>
  switch (Code)
 80015e8:	f004 041f 	and.w	r4, r4, #31
 80015ec:	2c12      	cmp	r4, #18
 80015ee:	f200 8266 	bhi.w	8001abe <MCP_ReceivedFrame+0x53a>
 80015f2:	e8df f014 	tbh	[pc, r4, lsl #1]
 80015f6:	0079      	.short	0x0079
 80015f8:	00900133 	.word	0x00900133
 80015fc:	02640129 	.word	0x02640129
 8001600:	00220264 	.word	0x00220264
 8001604:	0053004b 	.word	0x0053004b
 8001608:	01c8007c 	.word	0x01c8007c
 800160c:	01a80188 	.word	0x01a80188
 8001610:	0264019f 	.word	0x0264019f
 8001614:	02640264 	.word	0x02640264
 8001618:	00790264 	.word	0x00790264
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 800161c:	230b      	movs	r3, #11
    if (bNoError)
 800161e:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001622:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001626:	2800      	cmp	r0, #0
 8001628:	d0d1      	beq.n	80015ce <MCP_ReceivedFrame+0x4a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 800162a:	2300      	movs	r3, #0
 800162c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001630:	461a      	mov	r2, r3
 8001632:	21f0      	movs	r1, #240	@ 0xf0
 8001634:	47a0      	blx	r4
}
 8001636:	b00d      	add	sp, #52	@ 0x34
 8001638:	bdf0      	pop	{r4, r5, r6, r7, pc}
        outBuff[i] = 0;
 800163a:	ac04      	add	r4, sp, #16
 800163c:	2100      	movs	r1, #0
 800163e:	2220      	movs	r2, #32
 8001640:	4620      	mov	r0, r4
 8001642:	f005 fd67 	bl	8007114 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001646:	f8d5 70a8 	ldr.w	r7, [r5, #168]	@ 0xa8
 800164a:	f10d 0112 	add.w	r1, sp, #18
 800164e:	1e7b      	subs	r3, r7, #1
 8001650:	f107 061c 	add.w	r6, r7, #28
 8001654:	e004      	b.n	8001660 <MCP_ReceivedFrame+0xdc>
 8001656:	429e      	cmp	r6, r3
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001658:	f801 2f01 	strb.w	r2, [r1, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800165c:	f000 826f 	beq.w	8001b3e <MCP_ReceivedFrame+0x5ba>
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001660:	4618      	mov	r0, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001662:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001666:	2a09      	cmp	r2, #9
 8001668:	d1f5      	bne.n	8001656 <MCP_ReceivedFrame+0xd2>
 800166a:	f1c7 0301 	rsb	r3, r7, #1
 800166e:	4403      	add	r3, r0
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001670:	1d5a      	adds	r2, r3, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001672:	1dd9      	adds	r1, r3, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001674:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001676:	5cba      	ldrb	r2, [r7, r2]
 8001678:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 800167c:	5c7a      	ldrb	r2, [r7, r1]
 800167e:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001682:	5cfb      	ldrb	r3, [r7, r3]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001684:	69ee      	ldr	r6, [r5, #28]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001686:	f88d 3012 	strb.w	r3, [sp, #18]
 800168a:	e173      	b.n	8001974 <MCP_ReceivedFrame+0x3f0>
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800168c:	88b2      	ldrh	r2, [r6, #4]
 800168e:	6831      	ldr	r1, [r6, #0]
 8001690:	4628      	mov	r0, r5
 8001692:	f001 fa15 	bl	8002ac0 <UI_ExecSpeedRamp>
 8001696:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800169a:	e7c4      	b.n	8001626 <MCP_ReceivedFrame+0xa2>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 800169c:	f10d 000e 	add.w	r0, sp, #14
 80016a0:	7831      	ldrb	r1, [r6, #0]
 80016a2:	9000      	str	r0, [sp, #0]
 80016a4:	ab03      	add	r3, sp, #12
 80016a6:	f10d 020a 	add.w	r2, sp, #10
 80016aa:	4628      	mov	r0, r5
 80016ac:	f001 fa24 	bl	8002af8 <UI_GetRevupData>
      outBuff[4] = (uint8_t)(FinalTorque);
 80016b0:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 80016b4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80016b8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80016bc:	69ec      	ldr	r4, [r5, #28]
      outBuff[0] = (uint8_t)(rpm);
 80016be:	2200      	movs	r2, #0
 80016c0:	f360 0207 	bfi	r2, r0, #0, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80016c4:	1200      	asrs	r0, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 80016c6:	f360 220f 	bfi	r2, r0, #8, #8
 80016ca:	f361 4217 	bfi	r2, r1, #16, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80016ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80016d2:	0a09      	lsrs	r1, r1, #8
      outBuff[0] = (uint8_t)(rpm);
 80016d4:	f361 621f 	bfi	r2, r1, #24, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80016d8:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 80016da:	e9cd 3204 	strd	r3, r2, [sp, #16]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80016de:	69a8      	ldr	r0, [r5, #24]
 80016e0:	2308      	movs	r3, #8
 80016e2:	aa04      	add	r2, sp, #16
 80016e4:	21f0      	movs	r1, #240	@ 0xf0
 80016e6:	47a0      	blx	r4
    if (bNoError)
 80016e8:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80016ec:	e79b      	b.n	8001626 <MCP_ReceivedFrame+0xa2>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80016ee:	f8d6 2001 	ldr.w	r2, [r6, #1]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80016f2:	4bba      	ldr	r3, [pc, #744]	@ (80019dc <MCP_ReceivedFrame+0x458>)
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80016f4:	f9b6 1005 	ldrsh.w	r1, [r6, #5]
 80016f8:	9100      	str	r1, [sp, #0]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80016fa:	fb83 0302 	smull	r0, r3, r3, r2
 80016fe:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001702:	7831      	ldrb	r1, [r6, #0]
 8001704:	f8b6 2007 	ldrh.w	r2, [r6, #7]
 8001708:	b21b      	sxth	r3, r3
 800170a:	4628      	mov	r0, r5
 800170c:	f001 fa12 	bl	8002b34 <UI_SetRevupData>
 8001710:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001714:	e787      	b.n	8001626 <MCP_ReceivedFrame+0xa2>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001716:	f996 3000 	ldrsb.w	r3, [r6]
 800171a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800171c:	2203      	movs	r2, #3
 800171e:	2b00      	cmp	r3, #0
 8001720:	f88d 200e 	strb.w	r2, [sp, #14]
 8001724:	f2c0 8160 	blt.w	80019e8 <MCP_ReceivedFrame+0x464>
 8001728:	2963      	cmp	r1, #99	@ 0x63
 800172a:	f200 81ad 	bhi.w	8001a88 <MCP_ReceivedFrame+0x504>
 800172e:	2941      	cmp	r1, #65	@ 0x41
 8001730:	f200 8134 	bhi.w	800199c <MCP_ReceivedFrame+0x418>
 8001734:	2941      	cmp	r1, #65	@ 0x41
 8001736:	d8d7      	bhi.n	80016e8 <MCP_ReceivedFrame+0x164>
 8001738:	a301      	add	r3, pc, #4	@ (adr r3, 8001740 <MCP_ReceivedFrame+0x1bc>)
 800173a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001aed 	.word	0x08001aed
 8001744:	08001a9b 	.word	0x08001a9b
 8001748:	08001aed 	.word	0x08001aed
 800174c:	08001aed 	.word	0x08001aed
 8001750:	08001a9b 	.word	0x08001a9b
 8001754:	080019b7 	.word	0x080019b7
 8001758:	080019b7 	.word	0x080019b7
 800175c:	080019b7 	.word	0x080019b7
 8001760:	080019b7 	.word	0x080019b7
 8001764:	080019b7 	.word	0x080019b7
 8001768:	080019b7 	.word	0x080019b7
 800176c:	080019b7 	.word	0x080019b7
 8001770:	080019b7 	.word	0x080019b7
 8001774:	080019b7 	.word	0x080019b7
 8001778:	080019b7 	.word	0x080019b7
 800177c:	080019b7 	.word	0x080019b7
 8001780:	080019b7 	.word	0x080019b7
 8001784:	080019b7 	.word	0x080019b7
 8001788:	080019b7 	.word	0x080019b7
 800178c:	080019b7 	.word	0x080019b7
 8001790:	080019b7 	.word	0x080019b7
 8001794:	080019b7 	.word	0x080019b7
 8001798:	080019b7 	.word	0x080019b7
 800179c:	080019b7 	.word	0x080019b7
 80017a0:	080019b7 	.word	0x080019b7
 80017a4:	080019b7 	.word	0x080019b7
 80017a8:	080019b7 	.word	0x080019b7
 80017ac:	080019b7 	.word	0x080019b7
 80017b0:	080016e9 	.word	0x080016e9
 80017b4:	080016e9 	.word	0x080016e9
 80017b8:	08001a9b 	.word	0x08001a9b
 80017bc:	080019b7 	.word	0x080019b7
 80017c0:	080019b7 	.word	0x080019b7
 80017c4:	080019b7 	.word	0x080019b7
 80017c8:	08001aed 	.word	0x08001aed
 80017cc:	080016e9 	.word	0x080016e9
 80017d0:	080016e9 	.word	0x080016e9
 80017d4:	080016e9 	.word	0x080016e9
 80017d8:	080016e9 	.word	0x080016e9
 80017dc:	080016e9 	.word	0x080016e9
 80017e0:	080016e9 	.word	0x080016e9
 80017e4:	080016e9 	.word	0x080016e9
 80017e8:	080016e9 	.word	0x080016e9
 80017ec:	080016e9 	.word	0x080016e9
 80017f0:	080016e9 	.word	0x080016e9
 80017f4:	080016e9 	.word	0x080016e9
 80017f8:	080016e9 	.word	0x080016e9
 80017fc:	080016e9 	.word	0x080016e9
 8001800:	080016e9 	.word	0x080016e9
 8001804:	080016e9 	.word	0x080016e9
 8001808:	080016e9 	.word	0x080016e9
 800180c:	080016e9 	.word	0x080016e9
 8001810:	080016e9 	.word	0x080016e9
 8001814:	080016e9 	.word	0x080016e9
 8001818:	080016e9 	.word	0x080016e9
 800181c:	080016e9 	.word	0x080016e9
 8001820:	080016e9 	.word	0x080016e9
 8001824:	080016e9 	.word	0x080016e9
 8001828:	080016e9 	.word	0x080016e9
 800182c:	080016e9 	.word	0x080016e9
 8001830:	080016e9 	.word	0x080016e9
 8001834:	080016e9 	.word	0x080016e9
 8001838:	080016e9 	.word	0x080016e9
 800183c:	080016e9 	.word	0x080016e9
 8001840:	080016e9 	.word	0x080016e9
 8001844:	080019b7 	.word	0x080019b7
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001848:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 800184a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 800184c:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001850:	4628      	mov	r0, r5
 8001852:	f001 f8ff 	bl	8002a54 <UI_ExecCmd>
 8001856:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800185a:	e6e4      	b.n	8001626 <MCP_ReceivedFrame+0xa2>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 800185c:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 800185e:	2305      	movs	r3, #5
 8001860:	2948      	cmp	r1, #72	@ 0x48
 8001862:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001866:	f200 80df 	bhi.w	8001a28 <MCP_ReceivedFrame+0x4a4>
 800186a:	2948      	cmp	r1, #72	@ 0x48
 800186c:	f200 80f4 	bhi.w	8001a58 <MCP_ReceivedFrame+0x4d4>
 8001870:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001874:	00f2015d 	.word	0x00f2015d
 8001878:	015600f2 	.word	0x015600f2
 800187c:	012b00f2 	.word	0x012b00f2
 8001880:	012b012b 	.word	0x012b012b
 8001884:	012b012b 	.word	0x012b012b
 8001888:	012b012b 	.word	0x012b012b
 800188c:	012b012b 	.word	0x012b012b
 8001890:	012b012b 	.word	0x012b012b
 8001894:	01020102 	.word	0x01020102
 8001898:	00f200f2 	.word	0x00f200f2
 800189c:	012b012b 	.word	0x012b012b
 80018a0:	012b012b 	.word	0x012b012b
 80018a4:	00f2012b 	.word	0x00f2012b
 80018a8:	00f200f2 	.word	0x00f200f2
 80018ac:	00850085 	.word	0x00850085
 80018b0:	00f200f2 	.word	0x00f200f2
 80018b4:	00f200f2 	.word	0x00f200f2
 80018b8:	00f200f2 	.word	0x00f200f2
 80018bc:	00f200f2 	.word	0x00f200f2
 80018c0:	00f200f2 	.word	0x00f200f2
 80018c4:	00f200f2 	.word	0x00f200f2
 80018c8:	00f200f2 	.word	0x00f200f2
 80018cc:	00f200f2 	.word	0x00f200f2
 80018d0:	00f200f2 	.word	0x00f200f2
 80018d4:	00f200f2 	.word	0x00f200f2
 80018d8:	00f200f2 	.word	0x00f200f2
 80018dc:	00f200f2 	.word	0x00f200f2
 80018e0:	00f200f2 	.word	0x00f200f2
 80018e4:	00f200f2 	.word	0x00f200f2
 80018e8:	00f200f2 	.word	0x00f200f2
 80018ec:	00f200f2 	.word	0x00f200f2
 80018f0:	00f200f2 	.word	0x00f200f2
 80018f4:	012b00f2 	.word	0x012b00f2
 80018f8:	00f200f2 	.word	0x00f200f2
 80018fc:	00f200f2 	.word	0x00f200f2
 8001900:	01020102 	.word	0x01020102
 8001904:	0102      	.short	0x0102
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001906:	4c36      	ldr	r4, [pc, #216]	@ (80019e0 <MCP_ReceivedFrame+0x45c>)
      stepList.data = buffer;
 8001908:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800190a:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 800190c:	4621      	mov	r1, r4
 800190e:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001910:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001914:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001918:	f001 f934 	bl	8002b84 <UI_GetMPInfo>
 800191c:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001920:	2800      	cmp	r0, #0
 8001922:	f43f ae54 	beq.w	80015ce <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001926:	69ee      	ldr	r6, [r5, #28]
 8001928:	7923      	ldrb	r3, [r4, #4]
 800192a:	6822      	ldr	r2, [r4, #0]
 800192c:	69a8      	ldr	r0, [r5, #24]
 800192e:	21f0      	movs	r1, #240	@ 0xf0
 8001930:	47b0      	blx	r6
  if (RequireAck)
 8001932:	e653      	b.n	80015dc <MCP_ReceivedFrame+0x58>
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001934:	6831      	ldr	r1, [r6, #0]
 8001936:	88b2      	ldrh	r2, [r6, #4]
 8001938:	b209      	sxth	r1, r1
 800193a:	4628      	mov	r0, r5
 800193c:	f001 f8d2 	bl	8002ae4 <UI_ExecTorqueRamp>
 8001940:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001944:	e66f      	b.n	8001626 <MCP_ReceivedFrame+0xa2>
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001946:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 800194a:	ac04      	add	r4, sp, #16
 800194c:	3b01      	subs	r3, #1
 800194e:	4622      	mov	r2, r4
 8001950:	2000      	movs	r0, #0
 8001952:	e004      	b.n	800195e <MCP_ReceivedFrame+0x3da>
 8001954:	3001      	adds	r0, #1
 8001956:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001958:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800195c:	d009      	beq.n	8001972 <MCP_ReceivedFrame+0x3ee>
 800195e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001962:	2900      	cmp	r1, #0
 8001964:	d1f6      	bne.n	8001954 <MCP_ReceivedFrame+0x3d0>
        outBuff[i] = 0;
 8001966:	f1c0 0220 	rsb	r2, r0, #32
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	4420      	add	r0, r4
 800196e:	f005 fbd1 	bl	8007114 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001972:	69ee      	ldr	r6, [r5, #28]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001974:	69a8      	ldr	r0, [r5, #24]
 8001976:	2320      	movs	r3, #32
 8001978:	4622      	mov	r2, r4
 800197a:	21f0      	movs	r1, #240	@ 0xf0
 800197c:	47b0      	blx	r6
      bNoError = true;
 800197e:	2301      	movs	r3, #1
 8001980:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001984:	e651      	b.n	800162a <MCP_ReceivedFrame+0xa6>
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001986:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 800198a:	f9b6 1000 	ldrsh.w	r1, [r6]
 800198e:	4628      	mov	r0, r5
 8001990:	f001 f8ea 	bl	8002b68 <UI_SetCurrentReferences>
      bNoError = true;
 8001994:	2301      	movs	r3, #1
 8001996:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 800199a:	e646      	b.n	800162a <MCP_ReceivedFrame+0xa6>
 800199c:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b1b      	cmp	r3, #27
 80019a4:	f63f aea0 	bhi.w	80016e8 <MCP_ReceivedFrame+0x164>
 80019a8:	480e      	ldr	r0, [pc, #56]	@ (80019e4 <MCP_ReceivedFrame+0x460>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	4203      	tst	r3, r0
 80019b2:	f000 80ad 	beq.w	8001b10 <MCP_ReceivedFrame+0x58c>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80019b6:	f10d 0209 	add.w	r2, sp, #9
 80019ba:	4628      	mov	r0, r5
 80019bc:	f000 fe36 	bl	800262c <UI_GetReg>
          if ( bNoError == true )
 80019c0:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80019c4:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f43f ae01 	beq.w	80015ce <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 80019cc:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80019d0:	2302      	movs	r3, #2
 80019d2:	aa04      	add	r2, sp, #16
 80019d4:	21f0      	movs	r1, #240	@ 0xf0
 80019d6:	47a0      	blx	r4
  if (RequireAck)
 80019d8:	e600      	b.n	80015dc <MCP_ReceivedFrame+0x58>
 80019da:	bf00      	nop
 80019dc:	2aaaaaab 	.word	0x2aaaaaab
 80019e0:	20000af0 	.word	0x20000af0
 80019e4:	0f8ffe78 	.word	0x0f8ffe78
 80019e8:	f081 0380 	eor.w	r3, r1, #128	@ 0x80
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 80019f2:	f63f ae79 	bhi.w	80016e8 <MCP_ReceivedFrame+0x164>
 80019f6:	2a08      	cmp	r2, #8
 80019f8:	f63f ae76 	bhi.w	80016e8 <MCP_ReceivedFrame+0x164>
 80019fc:	a301      	add	r3, pc, #4	@ (adr r3, 8001a04 <MCP_ReceivedFrame+0x480>)
 80019fe:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001aed 	.word	0x08001aed
 8001a08:	080016e9 	.word	0x080016e9
 8001a0c:	08001aed 	.word	0x08001aed
 8001a10:	08001a9b 	.word	0x08001a9b
 8001a14:	08001a9b 	.word	0x08001a9b
 8001a18:	08001a9b 	.word	0x08001a9b
 8001a1c:	080019b7 	.word	0x080019b7
 8001a20:	080019b7 	.word	0x080019b7
 8001a24:	080019b7 	.word	0x080019b7
 8001a28:	2965      	cmp	r1, #101	@ 0x65
 8001a2a:	d913      	bls.n	8001a54 <MCP_ReceivedFrame+0x4d0>
 8001a2c:	f1a1 0374 	sub.w	r3, r1, #116	@ 0x74
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	2a14      	cmp	r2, #20
 8001a34:	d810      	bhi.n	8001a58 <MCP_ReceivedFrame+0x4d4>
 8001a36:	2b14      	cmp	r3, #20
 8001a38:	d80e      	bhi.n	8001a58 <MCP_ReceivedFrame+0x4d4>
 8001a3a:	e8df f003 	tbb	[pc, r3]
 8001a3e:	1d71      	.short	0x1d71
 8001a40:	1d1d1d1d 	.word	0x1d1d1d1d
 8001a44:	1d0d0d0d 	.word	0x1d0d0d0d
 8001a48:	0d0d0d1d 	.word	0x0d0d0d1d
 8001a4c:	0d0d0d0d 	.word	0x0d0d0d0d
 8001a50:	4646      	.short	0x4646
 8001a52:	46          	.byte	0x46
 8001a53:	00          	.byte	0x00
 8001a54:	294e      	cmp	r1, #78	@ 0x4e
 8001a56:	d805      	bhi.n	8001a64 <MCP_ReceivedFrame+0x4e0>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001a58:	2302      	movs	r3, #2
    if (bNoError)
 8001a5a:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001a5e:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001a62:	e5e0      	b.n	8001626 <MCP_ReceivedFrame+0xa2>
 8001a64:	f1a1 024f 	sub.w	r2, r1, #79	@ 0x4f
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	4093      	lsls	r3, r2
 8001a6e:	4a36      	ldr	r2, [pc, #216]	@ (8001b48 <MCP_ReceivedFrame+0x5c4>)
 8001a70:	4213      	tst	r3, r2
 8001a72:	d12a      	bne.n	8001aca <MCP_ReceivedFrame+0x546>
 8001a74:	295b      	cmp	r1, #91	@ 0x5b
 8001a76:	d1ef      	bne.n	8001a58 <MCP_ReceivedFrame+0x4d4>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001a78:	f8d6 2001 	ldr.w	r2, [r6, #1]
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	f000 fd25 	bl	80024cc <UI_SetReg>
 8001a82:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001a86:	e5ce      	b.n	8001626 <MCP_ReceivedFrame+0xa2>
 8001a88:	f1a1 0364 	sub.w	r3, r1, #100	@ 0x64
 8001a8c:	482f      	ldr	r0, [pc, #188]	@ (8001b4c <MCP_ReceivedFrame+0x5c8>)
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2201      	movs	r2, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	4018      	ands	r0, r3
 8001a98:	b1f8      	cbz	r0, 8001ada <MCP_ReceivedFrame+0x556>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001a9a:	f10d 0209 	add.w	r2, sp, #9
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	f000 fdc4 	bl	800262c <UI_GetReg>
          if ( bNoError == true )
 8001aa4:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001aa8:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f43f ad8f 	beq.w	80015ce <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001ab0:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	aa04      	add	r2, sp, #16
 8001ab8:	21f0      	movs	r1, #240	@ 0xf0
 8001aba:	47a0      	blx	r4
  if (RequireAck)
 8001abc:	e58e      	b.n	80015dc <MCP_ReceivedFrame+0x58>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001abe:	2301      	movs	r3, #1
    if (bNoError)
 8001ac0:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001ac4:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001ac8:	e5ad      	b.n	8001626 <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001aca:	f8b6 2001 	ldrh.w	r2, [r6, #1]
 8001ace:	4628      	mov	r0, r5
 8001ad0:	f000 fcfc 	bl	80024cc <UI_SetReg>
 8001ad4:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001ad8:	e5a5      	b.n	8001626 <MCP_ReceivedFrame+0xa2>
 8001ada:	f64c 4203 	movw	r2, #52227	@ 0xcc03
 8001ade:	4213      	tst	r3, r2
 8001ae0:	f47f af69 	bne.w	80019b6 <MCP_ReceivedFrame+0x432>
 8001ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b50 <MCP_ReceivedFrame+0x5cc>)
 8001ae6:	4213      	tst	r3, r2
 8001ae8:	f43f adfe 	beq.w	80016e8 <MCP_ReceivedFrame+0x164>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001aec:	f10d 0209 	add.w	r2, sp, #9
 8001af0:	4628      	mov	r0, r5
 8001af2:	f000 fd9b 	bl	800262c <UI_GetReg>
           if ( bNoError == true )
 8001af6:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001afa:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f43f ad66 	beq.w	80015ce <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001b02:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001b06:	2301      	movs	r3, #1
 8001b08:	aa04      	add	r2, sp, #16
 8001b0a:	21f0      	movs	r1, #240	@ 0xf0
 8001b0c:	47a0      	blx	r4
  if (RequireAck)
 8001b0e:	e565      	b.n	80015dc <MCP_ReceivedFrame+0x58>
 8001b10:	4a10      	ldr	r2, [pc, #64]	@ (8001b54 <MCP_ReceivedFrame+0x5d0>)
 8001b12:	4213      	tst	r3, r2
 8001b14:	d1c1      	bne.n	8001a9a <MCP_ReceivedFrame+0x516>
 8001b16:	4a10      	ldr	r2, [pc, #64]	@ (8001b58 <MCP_ReceivedFrame+0x5d4>)
 8001b18:	401a      	ands	r2, r3
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d1e6      	bne.n	8001aec <MCP_ReceivedFrame+0x568>
 8001b1e:	e5e3      	b.n	80016e8 <MCP_ReceivedFrame+0x164>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001b20:	7872      	ldrb	r2, [r6, #1]
 8001b22:	4628      	mov	r0, r5
 8001b24:	f000 fcd2 	bl	80024cc <UI_SetReg>
 8001b28:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001b2c:	e57b      	b.n	8001626 <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001b2e:	7872      	ldrb	r2, [r6, #1]
 8001b30:	2100      	movs	r1, #0
 8001b32:	4628      	mov	r0, r5
 8001b34:	f000 fcca 	bl	80024cc <UI_SetReg>
 8001b38:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001b3c:	e573      	b.n	8001626 <MCP_ReceivedFrame+0xa2>
 8001b3e:	2326      	movs	r3, #38	@ 0x26
 8001b40:	2124      	movs	r1, #36	@ 0x24
 8001b42:	2222      	movs	r2, #34	@ 0x22
 8001b44:	e597      	b.n	8001676 <MCP_ReceivedFrame+0xf2>
 8001b46:	bf00      	nop
 8001b48:	006407f1 	.word	0x006407f1
 8001b4c:	0ffe11f0 	.word	0x0ffe11f0
 8001b50:	0001020c 	.word	0x0001020c
 8001b54:	00200107 	.word	0x00200107
 8001b58:	00100080 	.word	0x00100080

08001b5c <MCP_WaitNextFrame>:
{
 8001b5c:	b510      	push	{r4, lr}
 8001b5e:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001b60:	6980      	ldr	r0, [r0, #24]
 8001b62:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b64:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001b66:	2280      	movs	r2, #128	@ 0x80
 8001b68:	f884 20ac 	strb.w	r2, [r4, #172]	@ 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8001b6c:	6a23      	ldr	r3, [r4, #32]
 8001b6e:	69a0      	ldr	r0, [r4, #24]
}
 8001b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001b74:	4718      	bx	r3
 8001b76:	bf00      	nop

08001b78 <MCP_Init>:
{
 8001b78:	b570      	push	{r4, r5, r6, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	4604      	mov	r4, r0
 8001b7e:	461d      	mov	r5, r3
 8001b80:	9b07      	ldr	r3, [sp, #28]
  pHandle->s_fwVer = s_fwVer;
 8001b82:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
  FCP_SetClient( pFCP, pHandle,
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <MCP_Init+0x34>)
  pHandle->pFCP = pFCP;
 8001b88:	61a1      	str	r1, [r4, #24]
{
 8001b8a:	4608      	mov	r0, r1
 8001b8c:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4a07      	ldr	r2, [pc, #28]	@ (8001bb0 <MCP_Init+0x38>)
 8001b92:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <MCP_Init+0x3c>)
 8001b94:	4621      	mov	r1, r4
 8001b96:	f003 fe27 	bl	80057e8 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001b9a:	9b06      	ldr	r3, [sp, #24]
 8001b9c:	6263      	str	r3, [r4, #36]	@ 0x24
  pHandle->fFcpReceive = fFcpReceive;
 8001b9e:	e9c4 6507 	strd	r6, r5, [r4, #28]
  MCP_WaitNextFrame(pHandle);
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7ff ffda 	bl	8001b5c <MCP_WaitNextFrame>
}
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd70      	pop	{r4, r5, r6, pc}
 8001bac:	08001bb9 	.word	0x08001bb9
 8001bb0:	08001bc1 	.word	0x08001bc1
 8001bb4:	08001585 	.word	0x08001585

08001bb8 <MCP_OnTimeOut>:
{
 8001bb8:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001bba:	f7ff ffcf 	bl	8001b5c <MCP_WaitNextFrame>
}
 8001bbe:	bd08      	pop	{r3, pc}

08001bc0 <MCP_SentFrame>:
{
 8001bc0:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001bc2:	f7ff ffcb 	bl	8001b5c <MCP_WaitNextFrame>
}
 8001bc6:	bd08      	pop	{r3, pc}

08001bc8 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001bc8:	b530      	push	{r4, r5, lr}
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001bca:	4d09      	ldr	r5, [pc, #36]	@ (8001bf0 <MX_MotorControl_Init+0x28>)
 8001bcc:	4c09      	ldr	r4, [pc, #36]	@ (8001bf4 <MX_MotorControl_Init+0x2c>)
{
 8001bce:	b083      	sub	sp, #12
  MCboot(pMCI,pMCT);
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7ff f95a 	bl	8000e8c <MCboot>
  mc_lock_pins();
 8001bd8:	f7ff fc4e 	bl	8001478 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <MX_MotorControl_Init+0x30>)
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4806      	ldr	r0, [pc, #24]	@ (8001bfc <MX_MotorControl_Init+0x34>)
 8001be2:	462b      	mov	r3, r5
 8001be4:	4622      	mov	r2, r4
 8001be6:	2101      	movs	r1, #1
 8001be8:	f000 fbee 	bl	80023c8 <UI_TaskInit>
}
 8001bec:	b003      	add	sp, #12
 8001bee:	bd30      	pop	{r4, r5, pc}
 8001bf0:	20000af8 	.word	0x20000af8
 8001bf4:	20000afc 	.word	0x20000afc
 8001bf8:	08007560 	.word	0x08007560
 8001bfc:	20000560 	.word	0x20000560

08001c00 <vPortSetupTimerInterrupt>:

void vPortSetupTimerInterrupt( void )
{
 8001c00:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001c02:	f001 fc91 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8001c06:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <vPortSetupTimerInterrupt+0x18>)
 8001c08:	fba3 3000 	umull	r3, r0, r3, r0
 8001c0c:	09c0      	lsrs	r0, r0, #7
}
 8001c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001c12:	f001 ba81 	b.w	8003118 <HAL_SYSTICK_Config>
 8001c16:	bf00      	nop
 8001c18:	10624dd3 	.word	0x10624dd3

08001c1c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc8 <RCM_RegisterRegConv+0x1ac>)
{
 8001c1e:	b570      	push	{r4, r5, r6, lr}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c20:	681c      	ldr	r4, [r3, #0]
{
 8001c22:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c24:	2c00      	cmp	r4, #0
 8001c26:	d077      	beq.n	8001d18 <RCM_RegisterRegConv+0xfc>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c28:	7922      	ldrb	r2, [r4, #4]
 8001c2a:	f890 c004 	ldrb.w	ip, [r0, #4]
 8001c2e:	4562      	cmp	r2, ip
 8001c30:	d01d      	beq.n	8001c6e <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	2a00      	cmp	r2, #0
 8001c36:	f000 808a 	beq.w	8001d4e <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c3a:	7914      	ldrb	r4, [r2, #4]
 8001c3c:	4564      	cmp	r4, ip
  uint8_t handle=255;
 8001c3e:	f04f 00ff 	mov.w	r0, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c42:	d072      	beq.n	8001d2a <RCM_RegisterRegConv+0x10e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c44:	689c      	ldr	r4, [r3, #8]
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	f000 8085 	beq.w	8001d56 <RCM_RegisterRegConv+0x13a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c4c:	7922      	ldrb	r2, [r4, #4]
 8001c4e:	4562      	cmp	r2, ip
 8001c50:	d077      	beq.n	8001d42 <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c52:	68dc      	ldr	r4, [r3, #12]
 8001c54:	2c00      	cmp	r4, #0
 8001c56:	f000 808d 	beq.w	8001d74 <RCM_RegisterRegConv+0x158>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c5a:	7922      	ldrb	r2, [r4, #4]
 8001c5c:	4562      	cmp	r2, ip
 8001c5e:	f000 8095 	beq.w	8001d8c <RCM_RegisterRegConv+0x170>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001c62:	2803      	cmp	r0, #3
 8001c64:	bf98      	it	ls
 8001c66:	680a      	ldrls	r2, [r1, #0]
 8001c68:	d906      	bls.n	8001c78 <RCM_RegisterRegConv+0x5c>
 8001c6a:	20ff      	movs	r0, #255	@ 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001c6c:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	6820      	ldr	r0, [r4, #0]
 8001c72:	4282      	cmp	r2, r0
 8001c74:	d1dd      	bne.n	8001c32 <RCM_RegisterRegConv+0x16>
  uint8_t i=0;
 8001c76:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 8001c78:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001c7c:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001c7e:	4c53      	ldr	r4, [pc, #332]	@ (8001dcc <RCM_RegisterRegConv+0x1b0>)
 8001c80:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001c82:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001c84:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001c88:	d411      	bmi.n	8001cae <RCM_RegisterRegConv+0x92>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001c8a:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001c8c:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8001c90:	f023 0320 	bic.w	r3, r3, #32
 8001c94:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8001c96:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001c98:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001c9a:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8001c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ca2:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8001ca4:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001ca6:	6893      	ldr	r3, [r2, #8]
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001cae:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001cb0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001cb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001cb6:	790b      	ldrb	r3, [r1, #4]
 8001cb8:	2b09      	cmp	r3, #9
 8001cba:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8001cbe:	d83a      	bhi.n	8001d36 <RCM_RegisterRegConv+0x11a>
 8001cc0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8001cc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cc8:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
 8001cd0:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001cd4:	fab4 f484 	clz	r4, r4
 8001cd8:	fa2e fe04 	lsr.w	lr, lr, r4
 8001cdc:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8001cde:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8001ce2:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8001ce6:	f04f 7cf8 	mov.w	ip, #32505856	@ 0x1f00000
 8001cea:	fa9c f5ac 	rbit	r5, ip
 8001cee:	fab5 f585 	clz	r5, r5
 8001cf2:	fa9c fcac 	rbit	ip, ip
 8001cf6:	688e      	ldr	r6, [r1, #8]
 8001cf8:	fabc fc8c 	clz	ip, ip
 8001cfc:	fa23 f105 	lsr.w	r1, r3, r5
 8001d00:	fa23 f30c 	lsr.w	r3, r3, ip
 8001d04:	fa06 f503 	lsl.w	r5, r6, r3
 8001d08:	2307      	movs	r3, #7
 8001d0a:	408b      	lsls	r3, r1
 8001d0c:	ea24 0303 	bic.w	r3, r4, r3
 8001d10:	432b      	orrs	r3, r5
 8001d12:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8001d16:	bd70      	pop	{r4, r5, r6, pc}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	2a00      	cmp	r2, #0
 8001d1c:	d03c      	beq.n	8001d98 <RCM_RegisterRegConv+0x17c>
 8001d1e:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8001d22:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d24:	7914      	ldrb	r4, [r2, #4]
 8001d26:	4564      	cmp	r4, ip
 8001d28:	d18c      	bne.n	8001c44 <RCM_RegisterRegConv+0x28>
 8001d2a:	6814      	ldr	r4, [r2, #0]
 8001d2c:	680a      	ldr	r2, [r1, #0]
 8001d2e:	4294      	cmp	r4, r2
 8001d30:	d188      	bne.n	8001c44 <RCM_RegisterRegConv+0x28>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d32:	2001      	movs	r0, #1
 8001d34:	e7a0      	b.n	8001c78 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001d36:	3c1e      	subs	r4, #30
 8001d38:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001d3c:	f003 7e00 	and.w	lr, r3, #33554432	@ 0x2000000
 8001d40:	e7c4      	b.n	8001ccc <RCM_RegisterRegConv+0xb0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d42:	6824      	ldr	r4, [r4, #0]
 8001d44:	680a      	ldr	r2, [r1, #0]
 8001d46:	4294      	cmp	r4, r2
 8001d48:	d183      	bne.n	8001c52 <RCM_RegisterRegConv+0x36>
      i++;
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	e794      	b.n	8001c78 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d4e:	689c      	ldr	r4, [r3, #8]
 8001d50:	b1b4      	cbz	r4, 8001d80 <RCM_RegisterRegConv+0x164>
 8001d52:	2001      	movs	r0, #1
 8001d54:	e77a      	b.n	8001c4c <RCM_RegisterRegConv+0x30>
 8001d56:	2804      	cmp	r0, #4
 8001d58:	d924      	bls.n	8001da4 <RCM_RegisterRegConv+0x188>
 8001d5a:	68d8      	ldr	r0, [r3, #12]
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d02f      	beq.n	8001dc0 <RCM_RegisterRegConv+0x1a4>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d60:	7902      	ldrb	r2, [r0, #4]
 8001d62:	4562      	cmp	r2, ip
 8001d64:	680a      	ldr	r2, [r1, #0]
 8001d66:	d1f0      	bne.n	8001d4a <RCM_RegisterRegConv+0x12e>
 8001d68:	6800      	ldr	r0, [r0, #0]
      i++;
 8001d6a:	4282      	cmp	r2, r0
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2003      	moveq	r0, #3
 8001d70:	2002      	movne	r0, #2
 8001d72:	e781      	b.n	8001c78 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d74:	2804      	cmp	r0, #4
 8001d76:	680a      	ldr	r2, [r1, #0]
 8001d78:	f67f af7e 	bls.w	8001c78 <RCM_RegisterRegConv+0x5c>
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	e77b      	b.n	8001c78 <RCM_RegisterRegConv+0x5c>
 8001d80:	68dc      	ldr	r4, [r3, #12]
 8001d82:	b1dc      	cbz	r4, 8001dbc <RCM_RegisterRegConv+0x1a0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d84:	7922      	ldrb	r2, [r4, #4]
 8001d86:	4562      	cmp	r2, ip
 8001d88:	d118      	bne.n	8001dbc <RCM_RegisterRegConv+0x1a0>
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	6824      	ldr	r4, [r4, #0]
 8001d8e:	680a      	ldr	r2, [r1, #0]
 8001d90:	4294      	cmp	r4, r2
 8001d92:	f47f af66 	bne.w	8001c62 <RCM_RegisterRegConv+0x46>
 8001d96:	e7f1      	b.n	8001d7c <RCM_RegisterRegConv+0x160>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d98:	689c      	ldr	r4, [r3, #8]
 8001d9a:	b11c      	cbz	r4, 8001da4 <RCM_RegisterRegConv+0x188>
 8001d9c:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8001da0:	4610      	mov	r0, r2
 8001da2:	e753      	b.n	8001c4c <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001da4:	68dc      	ldr	r4, [r3, #12]
 8001da6:	b914      	cbnz	r4, 8001dae <RCM_RegisterRegConv+0x192>
 8001da8:	680a      	ldr	r2, [r1, #0]
 8001daa:	4620      	mov	r0, r4
 8001dac:	e764      	b.n	8001c78 <RCM_RegisterRegConv+0x5c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001dae:	7920      	ldrb	r0, [r4, #4]
 8001db0:	790a      	ldrb	r2, [r1, #4]
 8001db2:	4290      	cmp	r0, r2
 8001db4:	d006      	beq.n	8001dc4 <RCM_RegisterRegConv+0x1a8>
 8001db6:	680a      	ldr	r2, [r1, #0]
 8001db8:	2000      	movs	r0, #0
 8001dba:	e75d      	b.n	8001c78 <RCM_RegisterRegConv+0x5c>
 8001dbc:	680a      	ldr	r2, [r1, #0]
 8001dbe:	e7b8      	b.n	8001d32 <RCM_RegisterRegConv+0x116>
 8001dc0:	680a      	ldr	r2, [r1, #0]
 8001dc2:	e7c2      	b.n	8001d4a <RCM_RegisterRegConv+0x12e>
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e7e1      	b.n	8001d8c <RCM_RegisterRegConv+0x170>
 8001dc8:	20000b28 	.word	0x20000b28
 8001dcc:	20000b08 	.word	0x20000b08

08001dd0 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001dd0:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <RCM_ExecRegularConv+0x64>)
 8001dd2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001dd6:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001dd8:	6812      	ldr	r2, [r2, #0]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001dda:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001dde:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001de0:	bf93      	iteet	ls
 8001de2:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 8001de6:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001de8:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
 8001dec:	f043 7300 	orrls.w	r3, r3, #33554432	@ 0x2000000
 8001df0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001df4:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001df8:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8001dfc:	fab1 f181 	clz	r1, r1
 8001e00:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8001e04:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 8001e10:	f021 011f 	bic.w	r1, r1, #31
 8001e14:	4319      	orrs	r1, r3

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8001e16:	0153      	lsls	r3, r2, #5
 8001e18:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
 8001e1c:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8001e20:	2101      	movs	r1, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001e22:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8001e24:	f8c3 1178 	str.w	r1, [r3, #376]	@ 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001e28:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001e2a:	079b      	lsls	r3, r3, #30
 8001e2c:	d5fc      	bpl.n	8001e28 <RCM_ExecRegularConv+0x58>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001e2e:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8001e30:	b280      	uxth	r0, r0
 8001e32:	4770      	bx	lr
 8001e34:	20000b28 	.word	0x20000b28

08001e38 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001e38:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001e3a:	4c0e      	ldr	r4, [pc, #56]	@ (8001e74 <RCM_ExecUserConv+0x3c>)
 8001e3c:	7823      	ldrb	r3, [r4, #0]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d000      	beq.n	8001e44 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001e42:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e44:	4d0c      	ldr	r5, [pc, #48]	@ (8001e78 <RCM_ExecUserConv+0x40>)
 8001e46:	7828      	ldrb	r0, [r5, #0]
 8001e48:	f7ff ffc2 	bl	8001dd0 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <RCM_ExecUserConv+0x44>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e80 <RCM_ExecUserConv+0x48>)
 8001e50:	4601      	mov	r1, r0
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e52:	7828      	ldrb	r0, [r5, #0]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e54:	8011      	strh	r1, [r2, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e56:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e5e:	2d00      	cmp	r5, #0
 8001e60:	d0ef      	beq.n	8001e42 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e62:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001e66:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e6c:	462b      	mov	r3, r5
}
 8001e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e72:	4718      	bx	r3
 8001e74:	20000b00 	.word	0x20000b00
 8001e78:	20000b04 	.word	0x20000b04
 8001e7c:	20000b08 	.word	0x20000b08
 8001e80:	20000b02 	.word	0x20000b02

08001e84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <HAL_MspInit+0x3c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	9200      	str	r2, [sp, #0]
 8001e8c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001e8e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001e92:	6459      	str	r1, [r3, #68]	@ 0x44
 8001e94:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001e96:	f400 4080 	and.w	r0, r0, #16384	@ 0x4000
 8001e9a:	9000      	str	r0, [sp, #0]
 8001e9c:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	9201      	str	r2, [sp, #4]
 8001ea0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001ea2:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8001ea6:	6418      	str	r0, [r3, #64]	@ 0x40
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb8:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eba:	f001 b8e3 	b.w	8003084 <HAL_NVIC_SetPriority>
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	00000000 	.word	0x00000000

08001ec8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001eca:	6803      	ldr	r3, [r0, #0]
 8001ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8001fc0 <HAL_ADC_MspInit+0xf8>)
{
 8001ece:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001ed2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001ed8:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001edc:	940a      	str	r4, [sp, #40]	@ 0x28
  if(hadc->Instance==ADC1)
 8001ede:	d004      	beq.n	8001eea <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001ee0:	4a38      	ldr	r2, [pc, #224]	@ (8001fc4 <HAL_ADC_MspInit+0xfc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d046      	beq.n	8001f74 <HAL_ADC_MspInit+0xac>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ee6:	b00c      	add	sp, #48	@ 0x30
 8001ee8:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eea:	4b37      	ldr	r3, [pc, #220]	@ (8001fc8 <HAL_ADC_MspInit+0x100>)
 8001eec:	9400      	str	r4, [sp, #0]
 8001eee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef0:	4836      	ldr	r0, [pc, #216]	@ (8001fcc <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ef6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ef8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001efa:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001efe:	9200      	str	r2, [sp, #0]
 8001f00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f02:	9401      	str	r4, [sp, #4]
 8001f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f06:	f042 0204 	orr.w	r2, r2, #4
 8001f0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f0e:	f002 0204 	and.w	r2, r2, #4
 8001f12:	9201      	str	r2, [sp, #4]
 8001f14:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	9402      	str	r4, [sp, #8]
 8001f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f22:	f002 0201 	and.w	r2, r2, #1
 8001f26:	9202      	str	r2, [sp, #8]
 8001f28:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	9403      	str	r4, [sp, #12]
 8001f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f2e:	f042 0202 	orr.w	r2, r2, #2
 8001f32:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = BATTERY_CURRENT_Pin|MOTOR_TEMP_Pin;
 8001f3e:	2205      	movs	r2, #5
 8001f40:	2303      	movs	r3, #3
 8001f42:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f48:	f001 f900 	bl	800314c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 8001f4e:	2288      	movs	r2, #136	@ 0x88
 8001f50:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	481f      	ldr	r0, [pc, #124]	@ (8001fd0 <HAL_ADC_MspInit+0x108>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 8001f56:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f001 f8f7 	bl	800314c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMPERATURE_Pin;
 8001f5e:	2201      	movs	r2, #1
 8001f60:	2303      	movs	r3, #3
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8001f62:	481c      	ldr	r0, [pc, #112]	@ (8001fd4 <HAL_ADC_MspInit+0x10c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8001f66:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = TEMPERATURE_Pin;
 8001f68:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f001 f8ee 	bl	800314c <HAL_GPIO_Init>
}
 8001f70:	b00c      	add	sp, #48	@ 0x30
 8001f72:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f74:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <HAL_ADC_MspInit+0x100>)
 8001f76:	9404      	str	r4, [sp, #16]
 8001f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	4814      	ldr	r0, [pc, #80]	@ (8001fcc <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f80:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f84:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001f88:	9204      	str	r2, [sp, #16]
 8001f8a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8c:	9405      	str	r4, [sp, #20]
 8001f8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f90:	f042 0204 	orr.w	r2, r2, #4
 8001f94:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8001f98:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8001fb8 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8001fa4:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa8:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8001faa:	f001 f8cf 	bl	800314c <HAL_GPIO_Init>
}
 8001fae:	b00c      	add	sp, #48	@ 0x30
 8001fb0:	bd10      	pop	{r4, pc}
 8001fb2:	bf00      	nop
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	00000010 	.word	0x00000010
 8001fbc:	00000003 	.word	0x00000003
 8001fc0:	40012000 	.word	0x40012000
 8001fc4:	40012100 	.word	0x40012100
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	40020400 	.word	0x40020400

08001fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fd8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8001fda:	6802      	ldr	r2, [r0, #0]
 8001fdc:	4922      	ldr	r1, [pc, #136]	@ (8002068 <HAL_TIM_Base_MspInit+0x90>)
{
 8001fde:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8001fe2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001fe8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001fec:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8001fee:	d004      	beq.n	8001ffa <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001ff0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001ff4:	d00e      	beq.n	8002014 <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ff6:	b00a      	add	sp, #40	@ 0x28
 8001ff8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800206c <HAL_TIM_Base_MspInit+0x94>)
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	9b01      	ldr	r3, [sp, #4]
}
 8002010:	b00a      	add	sp, #40	@ 0x28
 8002012:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002014:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8002018:	9302      	str	r3, [sp, #8]
 800201a:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 800201c:	f040 0001 	orr.w	r0, r0, #1
 8002020:	6410      	str	r0, [r2, #64]	@ 0x40
 8002022:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8002024:	f000 0001 	and.w	r0, r0, #1
 8002028:	9002      	str	r0, [sp, #8]
 800202a:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	9303      	str	r3, [sp, #12]
 800202e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	480f      	ldr	r0, [pc, #60]	@ (8002070 <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6313      	str	r3, [r2, #48]	@ 0x30
 8002038:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 800203a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8002060 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002044:	2202      	movs	r2, #2
 8002046:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 800204a:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204e:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f001 f87a 	bl	800314c <HAL_GPIO_Init>
}
 8002058:	b00a      	add	sp, #40	@ 0x28
 800205a:	bd10      	pop	{r4, pc}
 800205c:	f3af 8000 	nop.w
 8002060:	00000007 	.word	0x00000007
 8002064:	00000002 	.word	0x00000002
 8002068:	40010000 	.word	0x40010000
 800206c:	40023800 	.word	0x40023800
 8002070:	40020000 	.word	0x40020000

08002074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002074:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002076:	4a1f      	ldr	r2, [pc, #124]	@ (80020f4 <HAL_TIM_MspPostInit+0x80>)
 8002078:	6801      	ldr	r1, [r0, #0]
{
 800207a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800207e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002084:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002088:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800208a:	d001      	beq.n	8002090 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800208c:	b008      	add	sp, #32
 800208e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002090:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	4817      	ldr	r0, [pc, #92]	@ (80020f8 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	f041 0102 	orr.w	r1, r1, #2
 800209e:	6311      	str	r1, [r2, #48]	@ 0x30
 80020a0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80020a2:	f001 0102 	and.w	r1, r1, #2
 80020a6:	9100      	str	r1, [sp, #0]
 80020a8:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020ae:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	4323      	orrs	r3, r4
 80020b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020b6:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	4023      	ands	r3, r4
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020be:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80020c0:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80020c4:	2302      	movs	r3, #2
 80020c6:	2602      	movs	r6, #2
 80020c8:	2702      	movs	r7, #2
 80020ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f001 f83b 	bl	800314c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80020d6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020da:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	4807      	ldr	r0, [pc, #28]	@ (80020fc <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020de:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80020e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80020e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f001 f82f 	bl	800314c <HAL_GPIO_Init>
}
 80020ee:	b008      	add	sp, #32
 80020f0:	bdd0      	pop	{r4, r6, r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40010000 	.word	0x40010000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020000 	.word	0x40020000

08002100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002100:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8002102:	4a1b      	ldr	r2, [pc, #108]	@ (8002170 <HAL_UART_MspInit+0x70>)
 8002104:	6801      	ldr	r1, [r0, #0]
{
 8002106:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 800210a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002110:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002114:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 8002116:	d002      	beq.n	800211e <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002118:	b009      	add	sp, #36	@ 0x24
 800211a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800211e:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8002126:	f040 0010 	orr.w	r0, r0, #16
 800212a:	6450      	str	r0, [r2, #68]	@ 0x44
 800212c:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 800212e:	f000 0010 	and.w	r0, r0, #16
 8002132:	9000      	str	r0, [sp, #0]
 8002134:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	480e      	ldr	r0, [pc, #56]	@ (8002174 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002144:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8002168 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002150:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002152:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002158:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	f000 fff7 	bl	800314c <HAL_GPIO_Init>
}
 800215e:	b009      	add	sp, #36	@ 0x24
 8002160:	f85d fb04 	ldr.w	pc, [sp], #4
 8002164:	f3af 8000 	nop.w
 8002168:	000000c0 	.word	0x000000c0
 800216c:	00000002 	.word	0x00000002
 8002170:	40011000 	.word	0x40011000
 8002174:	40020400 	.word	0x40020400

08002178 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800217c:	4b23      	ldr	r3, [pc, #140]	@ (800220c <HAL_InitTick+0x94>)
 800217e:	2200      	movs	r2, #0
 8002180:	9202      	str	r2, [sp, #8]
 8002182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002184:	f042 0210 	orr.w	r2, r2, #16
 8002188:	641a      	str	r2, [r3, #64]	@ 0x40
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	9302      	str	r3, [sp, #8]
{
 8002192:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002194:	a901      	add	r1, sp, #4
 8002196:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002198:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800219a:	f001 f9eb 	bl	8003574 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800219e:	9b06      	ldr	r3, [sp, #24]
 80021a0:	b9d3      	cbnz	r3, 80021d8 <HAL_InitTick+0x60>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021a2:	f001 f9c7 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 80021a6:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021a8:	4a19      	ldr	r2, [pc, #100]	@ (8002210 <HAL_InitTick+0x98>)

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021aa:	4c1a      	ldr	r4, [pc, #104]	@ (8002214 <HAL_InitTick+0x9c>)
 80021ac:	491a      	ldr	r1, [pc, #104]	@ (8002218 <HAL_InitTick+0xa0>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	0c9b      	lsrs	r3, r3, #18
 80021b4:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80021b6:	2200      	movs	r2, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80021b8:	e9c4 1300 	strd	r1, r3, [r4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 80021bc:	4620      	mov	r0, r4
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021be:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim6.Init.ClockDivision = 0;
 80021c2:	6122      	str	r2, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c4:	60a2      	str	r2, [r4, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	61a2      	str	r2, [r4, #24]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021c8:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim6);
 80021ca:	f001 fc39 	bl	8003a40 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80021ce:	4606      	mov	r6, r0
 80021d0:	b130      	cbz	r0, 80021e0 <HAL_InitTick+0x68>
    }
  }

 /* Return function status */
  return status;
}
 80021d2:	4630      	mov	r0, r6
 80021d4:	b008      	add	sp, #32
 80021d6:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021d8:	f001 f9ac 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 80021dc:	0043      	lsls	r3, r0, #1
 80021de:	e7e3      	b.n	80021a8 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021e0:	4620      	mov	r0, r4
 80021e2:	f001 fcbd 	bl	8003b60 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80021e6:	4606      	mov	r6, r0
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d1f2      	bne.n	80021d2 <HAL_InitTick+0x5a>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021ec:	2036      	movs	r0, #54	@ 0x36
 80021ee:	f000 ff85 	bl	80030fc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f2:	2d0f      	cmp	r5, #15
 80021f4:	d901      	bls.n	80021fa <HAL_InitTick+0x82>
        status = HAL_ERROR;
 80021f6:	2601      	movs	r6, #1
 80021f8:	e7eb      	b.n	80021d2 <HAL_InitTick+0x5a>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021fa:	4632      	mov	r2, r6
 80021fc:	4629      	mov	r1, r5
 80021fe:	2036      	movs	r0, #54	@ 0x36
 8002200:	f000 ff40 	bl	8003084 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <HAL_InitTick+0xa4>)
 8002206:	601d      	str	r5, [r3, #0]
 8002208:	e7e3      	b.n	80021d2 <HAL_InitTick+0x5a>
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	431bde83 	.word	0x431bde83
 8002214:	20000b38 	.word	0x20000b38
 8002218:	40001000 	.word	0x40001000
 800221c:	20000570 	.word	0x20000570

08002220 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002220:	4801      	ldr	r0, [pc, #4]	@ (8002228 <TIM6_DAC_IRQHandler+0x8>)
 8002222:	f001 bfab 	b.w	800417c <HAL_TIM_IRQHandler>
 8002226:	bf00      	nop
 8002228:	20000b38 	.word	0x20000b38

0800222c <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <ADC_IRQHandler+0x24>)
 800222e:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8002230:	0752      	lsls	r2, r2, #29
 8002232:	d505      	bpl.n	8002240 <ADC_IRQHandler+0x14>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	f022 020c 	bic.w	r2, r2, #12
 800223a:	601a      	str	r2, [r3, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 800223c:	f7ff b82c 	b.w	8001298 <TSK_HighFrequencyTask>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8002240:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <ADC_IRQHandler+0x28>)
 8002242:	6813      	ldr	r3, [r2, #0]
 8002244:	f023 030c 	bic.w	r3, r3, #12
 8002248:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 800224a:	f7ff b825 	b.w	8001298 <TSK_HighFrequencyTask>
 800224e:	bf00      	nop
 8002250:	40012000 	.word	0x40012000
 8002254:	40012200 	.word	0x40012200

08002258 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8002258:	4803      	ldr	r0, [pc, #12]	@ (8002268 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800225a:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800225c:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800225e:	f06f 0201 	mvn.w	r2, #1
 8002262:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002264:	f004 b888 	b.w	8006378 <ICS_TIMx_UP_IRQHandler>
 8002268:	20000320 	.word	0x20000320

0800226c <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 800226c:	4807      	ldr	r0, [pc, #28]	@ (800228c <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 800226e:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002270:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8002272:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	0612      	lsls	r2, r2, #24
 8002278:	d504      	bpl.n	8002284 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800227a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800227e:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 8002280:	f004 f8c4 	bl	800640c <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002288:	f7fe bfcc 	b.w	8001224 <MC_Scheduler>
 800228c:	20000320 	.word	0x20000320

08002290 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8002290:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 8002292:	4c0c      	ldr	r4, [pc, #48]	@ (80022c4 <TIM2_IRQHandler+0x34>)
 8002294:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	07d1      	lsls	r1, r2, #31
 800229a:	d506      	bpl.n	80022aa <TIM2_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800229c:	f06f 0201 	mvn.w	r2, #1
 80022a0:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(HALL_M1.TIMx);
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 80022a2:	4620      	mov	r0, r4
 80022a4:	f003 fde2 	bl	8005e6c <HALL_TIMx_UP_IRQHandler>
  else
  {
    /* Nothing to do */
  }
  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 80022a8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	0792      	lsls	r2, r2, #30
 80022ae:	d507      	bpl.n	80022c0 <TIM2_IRQHandler+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80022b0:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80022b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 80022b8:	4802      	ldr	r0, [pc, #8]	@ (80022c4 <TIM2_IRQHandler+0x34>)
 80022ba:	611a      	str	r2, [r3, #16]
 80022bc:	f003 bc4a 	b.w	8005b54 <HALL_TIMx_CC_IRQHandler>
}
 80022c0:	bd10      	pop	{r4, pc}
 80022c2:	bf00      	nop
 80022c4:	20000258 	.word	0x20000258

080022c8 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 80022c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80022ca:	4c1f      	ldr	r4, [pc, #124]	@ (8002348 <USART1_IRQHandler+0x80>)
 80022cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	0691      	lsls	r1, r2, #26
{
 80022d4:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80022d6:	d407      	bmi.n	80022e8 <USART1_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80022d8:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80022da:	0612      	lsls	r2, r2, #24
 80022dc:	d413      	bmi.n	8002306 <USART1_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80022de:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80022e0:	071b      	lsls	r3, r3, #28
 80022e2:	d418      	bmi.n	8002316 <USART1_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 80022e4:	b002      	add	sp, #8
 80022e6:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80022e8:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 80022ea:	4620      	mov	r0, r4
 80022ec:	b2c9      	uxtb	r1, r1
 80022ee:	f004 fe97 	bl	8007020 <UFCP_RX_IRQ_Handler>
 80022f2:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d01e      	beq.n	8002336 <USART1_IRQHandler+0x6e>
    if (retVal == 2)
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d021      	beq.n	8002340 <USART1_IRQHandler+0x78>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80022fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	0612      	lsls	r2, r2, #24
 8002304:	d5eb      	bpl.n	80022de <USART1_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 8002306:	4810      	ldr	r0, [pc, #64]	@ (8002348 <USART1_IRQHandler+0x80>)
 8002308:	f004 fde2 	bl	8006ed0 <UFCP_TX_IRQ_Handler>
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800230c:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	071b      	lsls	r3, r3, #28
 8002314:	d5e6      	bpl.n	80022e4 <USART1_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002316:	480c      	ldr	r0, [pc, #48]	@ (8002348 <USART1_IRQHandler+0x80>)
 8002318:	f004 fee8 	bl	80070ec <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800231c:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  tmpreg = USARTx->SR;
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002324:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800232a:	9b01      	ldr	r3, [sp, #4]
}
 800232c:	b002      	add	sp, #8
 800232e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8002332:	f000 b8ad 	b.w	8002490 <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStart();
 8002336:	f000 f8b1 	bl	800249c <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800233a:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 800233e:	e7cb      	b.n	80022d8 <USART1_IRQHandler+0x10>
      UI_SerialCommunicationTimeOutStop();
 8002340:	f000 f8a6 	bl	8002490 <UI_SerialCommunicationTimeOutStop>
 8002344:	e7da      	b.n	80022fc <USART1_IRQHandler+0x34>
 8002346:	bf00      	nop
 8002348:	20000000 	.word	0x20000000

0800234c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800234c:	b510      	push	{r4, lr}
 800234e:	b082      	sub	sp, #8
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002350:	f7ff f872 	bl	8001438 <TSK_HardwareFaultTask>
 8002354:	4c1b      	ldr	r4, [pc, #108]	@ (80023c4 <HardFault_Handler+0x78>)

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002356:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	0712      	lsls	r2, r2, #28
 800235e:	d41d      	bmi.n	800239c <HardFault_Handler+0x50>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002360:	681a      	ldr	r2, [r3, #0]
        UFCP_OVR_IRQ_Handler(&pUSART);
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002362:	0610      	lsls	r0, r2, #24
 8002364:	d40f      	bmi.n	8002386 <HardFault_Handler+0x3a>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002366:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002368:	0692      	lsls	r2, r2, #26
 800236a:	d5f6      	bpl.n	800235a <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800236c:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 800236e:	4620      	mov	r0, r4
 8002370:	b2c9      	uxtb	r1, r1
 8002372:	f004 fe55 	bl	8007020 <UFCP_RX_IRQ_Handler>
 8002376:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002378:	2b01      	cmp	r3, #1
 800237a:	d01f      	beq.n	80023bc <HardFault_Handler+0x70>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 800237c:	2b02      	cmp	r3, #2
 800237e:	d1ea      	bne.n	8002356 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8002380:	f000 f886 	bl	8002490 <UI_SerialCommunicationTimeOutStop>
 8002384:	e7e7      	b.n	8002356 <HardFault_Handler+0xa>
        UFCP_TX_IRQ_Handler(&pUSART);
 8002386:	4620      	mov	r0, r4
 8002388:	f004 fda2 	bl	8006ed0 <UFCP_TX_IRQ_Handler>
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800238c:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	0691      	lsls	r1, r2, #26
 8002394:	d4ea      	bmi.n	800236c <HardFault_Handler+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002396:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002398:	0712      	lsls	r2, r2, #28
 800239a:	d5e1      	bpl.n	8002360 <HardFault_Handler+0x14>
        UFCP_OVR_IRQ_Handler(&pUSART);
 800239c:	4620      	mov	r0, r4
 800239e:	f004 fea5 	bl	80070ec <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80023a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  tmpreg = USARTx->SR;
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80023aa:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80023b0:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 80023b2:	f000 f86d 	bl	8002490 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80023b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 80023ba:	e7d1      	b.n	8002360 <HardFault_Handler+0x14>
          UI_SerialCommunicationTimeOutStart();
 80023bc:	f000 f86e 	bl	800249c <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 80023c0:	e7c9      	b.n	8002356 <HardFault_Handler+0xa>
 80023c2:	bf00      	nop
 80023c4:	20000000 	.word	0x20000000

080023c8 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 80023c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
 80023cc:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 8002440 <UI_TaskInit+0x78>
    pMCP->_Super = UI_Params;
 80023d0:	f8df e070 	ldr.w	lr, [pc, #112]	@ 8002444 <UI_TaskInit+0x7c>

    UFCP_Init( & pUSART );
 80023d4:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8002448 <UI_TaskInit+0x80>
{
 80023d8:	461e      	mov	r6, r3
    pMCP = &MCP_UI_Params;
 80023da:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <UI_TaskInit+0x68>)
 80023dc:	f8c8 3000 	str.w	r3, [r8]
{
 80023e0:	4607      	mov	r7, r0
 80023e2:	460c      	mov	r4, r1
 80023e4:	4615      	mov	r5, r2
    pMCP->_Super = UI_Params;
 80023e6:	469c      	mov	ip, r3
 80023e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80023ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80023f0:	e89e 0003 	ldmia.w	lr, {r0, r1}
{
 80023f4:	b082      	sub	sp, #8
    pMCP->_Super = UI_Params;
 80023f6:	e88c 0003 	stmia.w	ip, {r0, r1}
    UFCP_Init( & pUSART );
 80023fa:	4648      	mov	r0, r9
{
 80023fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    UFCP_Init( & pUSART );
 8002400:	f004 fd64 	bl	8006ecc <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002404:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <UI_TaskInit+0x6c>)
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f8cd a004 	str.w	sl, [sp, #4]
 800240c:	f8d8 0000 	ldr.w	r0, [r8]
 8002410:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <UI_TaskInit+0x70>)
 8002412:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <UI_TaskInit+0x74>)
 8002414:	4649      	mov	r1, r9
 8002416:	f7ff fbaf 	bl	8001b78 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800241a:	f8d8 0000 	ldr.w	r0, [r8]
 800241e:	970a      	str	r7, [sp, #40]	@ 0x28
 8002420:	4633      	mov	r3, r6
 8002422:	462a      	mov	r2, r5
 8002424:	4621      	mov	r1, r4

}
 8002426:	b002      	add	sp, #8
 8002428:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800242c:	f000 b83c 	b.w	80024a8 <UI_Init>
 8002430:	20000b84 	.word	0x20000b84
 8002434:	0800710d 	.word	0x0800710d
 8002438:	08006f39 	.word	0x08006f39
 800243c:	08006f65 	.word	0x08006f65
 8002440:	20000c34 	.word	0x20000c34
 8002444:	200009f0 	.word	0x200009f0
 8002448:	20000000 	.word	0x20000000

0800244c <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 800244c:	4a0d      	ldr	r2, [pc, #52]	@ (8002484 <UI_Scheduler+0x38>)
 800244e:	8813      	ldrh	r3, [r2, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	b11b      	cbz	r3, 800245c <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002454:	8813      	ldrh	r3, [r2, #0]
 8002456:	3b01      	subs	r3, #1
 8002458:	b29b      	uxth	r3, r3
 800245a:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 800245c:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <UI_Scheduler+0x3c>)
 800245e:	8813      	ldrh	r3, [r2, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d903      	bls.n	800246e <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002466:	8813      	ldrh	r3, [r2, #0]
 8002468:	3b01      	subs	r3, #1
 800246a:	b29b      	uxth	r3, r3
 800246c:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 800246e:	4a07      	ldr	r2, [pc, #28]	@ (800248c <UI_Scheduler+0x40>)
 8002470:	8813      	ldrh	r3, [r2, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d903      	bls.n	8002480 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002478:	8813      	ldrh	r3, [r2, #0]
 800247a:	3b01      	subs	r3, #1
 800247c:	b29b      	uxth	r3, r3
 800247e:	8013      	strh	r3, [r2, #0]
  }
}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000b82 	.word	0x20000b82
 8002488:	20000b80 	.word	0x20000b80
 800248c:	20000564 	.word	0x20000564

08002490 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002490:	4b01      	ldr	r3, [pc, #4]	@ (8002498 <UI_SerialCommunicationTimeOutStop+0x8>)
 8002492:	2200      	movs	r2, #0
 8002494:	801a      	strh	r2, [r3, #0]
}
 8002496:	4770      	bx	lr
 8002498:	20000b80 	.word	0x20000b80

0800249c <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 800249c:	4b01      	ldr	r3, [pc, #4]	@ (80024a4 <UI_SerialCommunicationTimeOutStart+0x8>)
 800249e:	224f      	movs	r2, #79	@ 0x4f
 80024a0:	801a      	strh	r2, [r3, #0]
}
 80024a2:	4770      	bx	lr
 80024a4:	20000b80 	.word	0x20000b80

080024a8 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 80024a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
  pHandle->bDriveNum = bMCNum;
 80024ac:	7101      	strb	r1, [r0, #4]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80024ae:	9b00      	ldr	r3, [sp, #0]
 80024b0:	6103      	str	r3, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 80024b2:	2100      	movs	r1, #0
 80024b4:	7501      	strb	r1, [r0, #20]
}
 80024b6:	4770      	bx	lr

080024b8 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 80024b8:	7903      	ldrb	r3, [r0, #4]
 80024ba:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 80024bc:	bf86      	itte	hi
 80024be:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 80024c0:	2001      	movhi	r0, #1
    retVal = false;
 80024c2:	2000      	movls	r0, #0
  }
  return retVal;
}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop

080024c8 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 80024c8:	7d00      	ldrb	r0, [r0, #20]
 80024ca:	4770      	bx	lr

080024cc <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 80024cc:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80024ce:	6884      	ldr	r4, [r0, #8]
 80024d0:	7d03      	ldrb	r3, [r0, #20]
 80024d2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 80024d6:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80024d8:	68c2      	ldr	r2, [r0, #12]
{
 80024da:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80024dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 80024e0:	295b      	cmp	r1, #91	@ 0x5b
 80024e2:	d82f      	bhi.n	8002544 <UI_SetReg+0x78>
 80024e4:	e8df f001 	tbb	[pc, r1]
 80024e8:	412e2e3d 	.word	0x412e2e3d
 80024ec:	59544f2e 	.word	0x59544f2e
 80024f0:	736e695e 	.word	0x736e695e
 80024f4:	8d888378 	.word	0x8d888378
 80024f8:	2e2e2e2e 	.word	0x2e2e2e2e
 80024fc:	2e2e2e2e 	.word	0x2e2e2e2e
 8002500:	2e2e2e2e 	.word	0x2e2e2e2e
 8002504:	2e2e2e2e 	.word	0x2e2e2e2e
 8002508:	2e2e2e2e 	.word	0x2e2e2e2e
 800250c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002510:	2e2e2e2e 	.word	0x2e2e2e2e
 8002514:	2e2e2e2e 	.word	0x2e2e2e2e
 8002518:	2e2e2e2e 	.word	0x2e2e2e2e
 800251c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002520:	2e2e2e2e 	.word	0x2e2e2e2e
 8002524:	2e2e2e2e 	.word	0x2e2e2e2e
 8002528:	2e2e922e 	.word	0x2e2e922e
 800252c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002530:	2e2e2e2e 	.word	0x2e2e2e2e
 8002534:	2e2e2e2e 	.word	0x2e2e2e2e
 8002538:	2e2e2e2e 	.word	0x2e2e2e2e
 800253c:	2e2e2e2e 	.word	0x2e2e2e2e
 8002540:	312e2e2e 	.word	0x312e2e2e
 8002544:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002546:	b003      	add	sp, #12
 8002548:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 800254a:	4937      	ldr	r1, [pc, #220]	@ (8002628 <UI_SetReg+0x15c>)
 800254c:	fb81 3104 	smull	r3, r1, r1, r4
 8002550:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002554:	2200      	movs	r2, #0
 8002556:	b209      	sxth	r1, r1
 8002558:	4628      	mov	r0, r5
 800255a:	f7fe fa8d 	bl	8000a78 <MCI_ExecSpeedRamp>
  bool retVal = true;
 800255e:	2001      	movs	r0, #1
 8002560:	e7f1      	b.n	8002546 <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002562:	b2e1      	uxtb	r1, r4
 8002564:	f7ff ffa8 	bl	80024b8 <UI_SelectMC>
    break;
 8002568:	e7ed      	b.n	8002546 <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 800256a:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800256e:	d052      	beq.n	8002616 <UI_SetReg+0x14a>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002570:	2c01      	cmp	r4, #1
 8002572:	d1f4      	bne.n	800255e <UI_SetReg+0x92>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002574:	4628      	mov	r0, r5
 8002576:	f7fe fb09 	bl	8000b8c <MCI_GetMecSpeedRefUnit>
 800257a:	2200      	movs	r2, #0
 800257c:	4601      	mov	r1, r0
 800257e:	4628      	mov	r0, r5
 8002580:	f7fe fa7a 	bl	8000a78 <MCI_ExecSpeedRamp>
 8002584:	e7eb      	b.n	800255e <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	b221      	sxth	r1, r4
 800258a:	f003 fff5 	bl	8006578 <PID_SetKP>
    break;
 800258e:	e7e6      	b.n	800255e <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	b221      	sxth	r1, r4
 8002594:	f003 fff2 	bl	800657c <PID_SetKI>
    break;
 8002598:	e7e1      	b.n	800255e <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	b221      	sxth	r1, r4
 800259e:	f003 fffd 	bl	800659c <PID_SetKD>
    break;
 80025a2:	e7dc      	b.n	800255e <UI_SetReg+0x92>
      currComp = MCI_GetIqdref(pMCI);
 80025a4:	4628      	mov	r0, r5
 80025a6:	f7fe fb1f 	bl	8000be8 <MCI_GetIqdref>
 80025aa:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 80025ac:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 80025b0:	9901      	ldr	r1, [sp, #4]
 80025b2:	4628      	mov	r0, r5
 80025b4:	f7fe fa74 	bl	8000aa0 <MCI_SetCurrentReferences>
    break;
 80025b8:	e7d1      	b.n	800255e <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80025ba:	6858      	ldr	r0, [r3, #4]
 80025bc:	b221      	sxth	r1, r4
 80025be:	f003 ffdb 	bl	8006578 <PID_SetKP>
    break;
 80025c2:	e7cc      	b.n	800255e <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80025c4:	6858      	ldr	r0, [r3, #4]
 80025c6:	b221      	sxth	r1, r4
 80025c8:	f003 ffd8 	bl	800657c <PID_SetKI>
    break;
 80025cc:	e7c7      	b.n	800255e <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 80025ce:	6858      	ldr	r0, [r3, #4]
 80025d0:	b221      	sxth	r1, r4
 80025d2:	f003 ffe3 	bl	800659c <PID_SetKD>
    break;
 80025d6:	e7c2      	b.n	800255e <UI_SetReg+0x92>
      currComp = MCI_GetIqdref(pMCI);
 80025d8:	4628      	mov	r0, r5
 80025da:	f7fe fb05 	bl	8000be8 <MCI_GetIqdref>
 80025de:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 80025e0:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 80025e4:	9901      	ldr	r1, [sp, #4]
 80025e6:	4628      	mov	r0, r5
 80025e8:	f7fe fa5a 	bl	8000aa0 <MCI_SetCurrentReferences>
    break;
 80025ec:	e7b7      	b.n	800255e <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 80025ee:	6898      	ldr	r0, [r3, #8]
 80025f0:	b221      	sxth	r1, r4
 80025f2:	f003 ffc1 	bl	8006578 <PID_SetKP>
    break;
 80025f6:	e7b2      	b.n	800255e <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80025f8:	6898      	ldr	r0, [r3, #8]
 80025fa:	b221      	sxth	r1, r4
 80025fc:	f003 ffbe 	bl	800657c <PID_SetKI>
    break;
 8002600:	e7ad      	b.n	800255e <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002602:	6898      	ldr	r0, [r3, #8]
 8002604:	b221      	sxth	r1, r4
 8002606:	f003 ffc9 	bl	800659c <PID_SetKD>
    break;
 800260a:	e7a8      	b.n	800255e <UI_SetReg+0x92>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 800260c:	b221      	sxth	r1, r4
 800260e:	4628      	mov	r0, r5
 8002610:	f7fe fb18 	bl	8000c44 <MCI_SetIdref>
    break;
 8002614:	e7a3      	b.n	800255e <UI_SetReg+0x92>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002616:	4628      	mov	r0, r5
 8002618:	f7fe fb10 	bl	8000c3c <MCI_GetTeref>
 800261c:	4622      	mov	r2, r4
 800261e:	4601      	mov	r1, r0
 8002620:	4628      	mov	r0, r5
 8002622:	f7fe fa33 	bl	8000a8c <MCI_ExecTorqueRamp>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002626:	e79a      	b.n	800255e <UI_SetReg+0x92>
 8002628:	2aaaaaab 	.word	0x2aaaaaab

0800262c <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 800262c:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800262e:	68c4      	ldr	r4, [r0, #12]
 8002630:	7d03      	ldrb	r3, [r0, #20]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002632:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002634:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002638:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 800263c:	b08d      	sub	sp, #52	@ 0x34

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 800263e:	2a00      	cmp	r2, #0
 8002640:	f000 808b 	beq.w	800275a <UI_GetReg+0x12e>
  {
    *success = true;
 8002644:	f04f 0c01 	mov.w	ip, #1
 8002648:	f882 c000 	strb.w	ip, [r2]
  }

  switch (bRegID)
 800264c:	2981      	cmp	r1, #129	@ 0x81
 800264e:	f200 8111 	bhi.w	8002874 <UI_GetReg+0x248>
 8002652:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002656:	0143      	.short	0x0143
 8002658:	016d0171 	.word	0x016d0171
 800265c:	01620169 	.word	0x01620169
 8002660:	015a015e 	.word	0x015a015e
 8002664:	01130156 	.word	0x01130156
 8002668:	01d30126 	.word	0x01d30126
 800266c:	010901cf 	.word	0x010901cf
 8002670:	0146014a 	.word	0x0146014a
 8002674:	010f014e 	.word	0x010f014e
 8002678:	010f010f 	.word	0x010f010f
 800267c:	010f010f 	.word	0x010f010f
 8002680:	010f010f 	.word	0x010f010f
 8002684:	010f010f 	.word	0x010f010f
 8002688:	01520122 	.word	0x01520122
 800268c:	010f01ea 	.word	0x010f01ea
 8002690:	01e3010f 	.word	0x01e3010f
 8002694:	011d0118 	.word	0x011d0118
 8002698:	01dc010f 	.word	0x01dc010f
 800269c:	013401d7 	.word	0x013401d7
 80026a0:	012a012f 	.word	0x012a012f
 80026a4:	011d0118 	.word	0x011d0118
 80026a8:	01090113 	.word	0x01090113
 80026ac:	01770139 	.word	0x01770139
 80026b0:	01c8013e 	.word	0x01c8013e
 80026b4:	019e01b3 	.word	0x019e01b3
 80026b8:	010f010f 	.word	0x010f010f
 80026bc:	010f010f 	.word	0x010f010f
 80026c0:	010f010f 	.word	0x010f010f
 80026c4:	010f010f 	.word	0x010f010f
 80026c8:	010f010f 	.word	0x010f010f
 80026cc:	010f010f 	.word	0x010f010f
 80026d0:	010f010f 	.word	0x010f010f
 80026d4:	01900197 	.word	0x01900197
 80026d8:	010f0109 	.word	0x010f0109
 80026dc:	010f010f 	.word	0x010f010f
 80026e0:	010f010f 	.word	0x010f010f
 80026e4:	010f010f 	.word	0x010f010f
 80026e8:	010f010f 	.word	0x010f010f
 80026ec:	010f010f 	.word	0x010f010f
 80026f0:	010f010f 	.word	0x010f010f
 80026f4:	010f010f 	.word	0x010f010f
 80026f8:	010f010f 	.word	0x010f010f
 80026fc:	010f010f 	.word	0x010f010f
 8002700:	010f010f 	.word	0x010f010f
 8002704:	010f010f 	.word	0x010f010f
 8002708:	010f010f 	.word	0x010f010f
 800270c:	010f0180 	.word	0x010f0180
 8002710:	010f010f 	.word	0x010f010f
 8002714:	010f010f 	.word	0x010f010f
 8002718:	010f010f 	.word	0x010f010f
 800271c:	010f010f 	.word	0x010f010f
 8002720:	010f010f 	.word	0x010f010f
 8002724:	010f010f 	.word	0x010f010f
 8002728:	010f010f 	.word	0x010f010f
 800272c:	010f010f 	.word	0x010f010f
 8002730:	017c010f 	.word	0x017c010f
 8002734:	01cd018c 	.word	0x01cd018c
 8002738:	0111010f 	.word	0x0111010f
 800273c:	010f0111 	.word	0x010f0111
 8002740:	010f010f 	.word	0x010f010f
 8002744:	010f010f 	.word	0x010f010f
 8002748:	010f010f 	.word	0x010f010f
 800274c:	010f010f 	.word	0x010f010f
 8002750:	010f010f 	.word	0x010f010f
 8002754:	010f010f 	.word	0x010f010f
 8002758:	0111      	.short	0x0111
 800275a:	2981      	cmp	r1, #129	@ 0x81
 800275c:	f200 808c 	bhi.w	8002878 <UI_GetReg+0x24c>
 8002760:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002764:	00ea00bc 	.word	0x00ea00bc
 8002768:	00e200e6 	.word	0x00e200e6
 800276c:	00d700db 	.word	0x00d700db
 8002770:	00cf00d3 	.word	0x00cf00d3
 8002774:	009f008c 	.word	0x009f008c
 8002778:	0148014c 	.word	0x0148014c
 800277c:	00c30082 	.word	0x00c30082
 8002780:	00c700bf 	.word	0x00c700bf
 8002784:	008a008a 	.word	0x008a008a
 8002788:	008a008a 	.word	0x008a008a
 800278c:	008a008a 	.word	0x008a008a
 8002790:	008a008a 	.word	0x008a008a
 8002794:	009b008a 	.word	0x009b008a
 8002798:	016300cb 	.word	0x016300cb
 800279c:	008a008a 	.word	0x008a008a
 80027a0:	0091015c 	.word	0x0091015c
 80027a4:	008a0096 	.word	0x008a0096
 80027a8:	01500155 	.word	0x01500155
 80027ac:	00a800ad 	.word	0x00a800ad
 80027b0:	009100a3 	.word	0x009100a3
 80027b4:	008c0096 	.word	0x008c0096
 80027b8:	00b20082 	.word	0x00b20082
 80027bc:	00b700f0 	.word	0x00b700f0
 80027c0:	012c0141 	.word	0x012c0141
 80027c4:	008a0117 	.word	0x008a0117
 80027c8:	008a008a 	.word	0x008a008a
 80027cc:	008a008a 	.word	0x008a008a
 80027d0:	008a008a 	.word	0x008a008a
 80027d4:	008a008a 	.word	0x008a008a
 80027d8:	008a008a 	.word	0x008a008a
 80027dc:	008a008a 	.word	0x008a008a
 80027e0:	0110008a 	.word	0x0110008a
 80027e4:	00820109 	.word	0x00820109
 80027e8:	008a008a 	.word	0x008a008a
 80027ec:	008a008a 	.word	0x008a008a
 80027f0:	008a008a 	.word	0x008a008a
 80027f4:	008a008a 	.word	0x008a008a
 80027f8:	008a008a 	.word	0x008a008a
 80027fc:	008a008a 	.word	0x008a008a
 8002800:	008a008a 	.word	0x008a008a
 8002804:	008a008a 	.word	0x008a008a
 8002808:	008a008a 	.word	0x008a008a
 800280c:	008a008a 	.word	0x008a008a
 8002810:	008a008a 	.word	0x008a008a
 8002814:	008a008a 	.word	0x008a008a
 8002818:	00f9008a 	.word	0x00f9008a
 800281c:	008a008a 	.word	0x008a008a
 8002820:	008a008a 	.word	0x008a008a
 8002824:	008a008a 	.word	0x008a008a
 8002828:	008a008a 	.word	0x008a008a
 800282c:	008a008a 	.word	0x008a008a
 8002830:	008a008a 	.word	0x008a008a
 8002834:	008a008a 	.word	0x008a008a
 8002838:	008a008a 	.word	0x008a008a
 800283c:	008a008a 	.word	0x008a008a
 8002840:	010500f5 	.word	0x010500f5
 8002844:	008a0146 	.word	0x008a0146
 8002848:	008a008a 	.word	0x008a008a
 800284c:	008a008a 	.word	0x008a008a
 8002850:	008a008a 	.word	0x008a008a
 8002854:	008a008a 	.word	0x008a008a
 8002858:	008a008a 	.word	0x008a008a
 800285c:	008a008a 	.word	0x008a008a
 8002860:	008a008a 	.word	0x008a008a
 8002864:	008a008a 	.word	0x008a008a
    }
    break;

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002868:	4628      	mov	r0, r5
 800286a:	f7fe f9bd 	bl	8000be8 <MCI_GetIqdref>
 800286e:	1400      	asrs	r0, r0, #16
      }
	}
    break;
  }
  return bRetVal;
}
 8002870:	b00d      	add	sp, #52	@ 0x34
 8002872:	bd30      	pop	{r4, r5, pc}
        *success = false;
 8002874:	2300      	movs	r3, #0
 8002876:	7013      	strb	r3, [r2, #0]
      bRetVal = CTRBDID;
 8002878:	2000      	movs	r0, #0
  return bRetVal;
 800287a:	e7f9      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqdref(pMCI).q;
 800287c:	4628      	mov	r0, r5
 800287e:	f7fe f9b3 	bl	8000be8 <MCI_GetIqdref>
 8002882:	b200      	sxth	r0, r0
    break;
 8002884:	e7f4      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqd(pMCI).q;
 8002886:	4628      	mov	r0, r5
 8002888:	f7fe f9a0 	bl	8000bcc <MCI_GetIqd>
 800288c:	b200      	sxth	r0, r0
    break;
 800288e:	e7ef      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002890:	4628      	mov	r0, r5
 8002892:	f7fe f99b 	bl	8000bcc <MCI_GetIqd>
 8002896:	1400      	asrs	r0, r0, #16
    break;
 8002898:	e7ea      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 800289a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800289c:	f002 ff62 	bl	8005764 <VBS_GetAvBusVoltage_V>
    break;
 80028a0:	e7e6      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80028a2:	6860      	ldr	r0, [r4, #4]
 80028a4:	f003 fe6c 	bl	8006580 <PID_GetKP>
    break;
 80028a8:	e7e2      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80028aa:	4628      	mov	r0, r5
 80028ac:	f7fe f980 	bl	8000bb0 <MCI_GetIalphabeta>
 80028b0:	1400      	asrs	r0, r0, #16
    break;
 80028b2:	e7dd      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80028b4:	4628      	mov	r0, r5
 80028b6:	f7fe f97b 	bl	8000bb0 <MCI_GetIalphabeta>
 80028ba:	b200      	sxth	r0, r0
    break;
 80028bc:	e7d8      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = MCI_GetIab(pMCI).b;
 80028be:	4628      	mov	r0, r5
 80028c0:	f7fe f968 	bl	8000b94 <MCI_GetIab>
 80028c4:	1400      	asrs	r0, r0, #16
    break;
 80028c6:	e7d3      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = MCI_GetVqd(pMCI).q;
 80028c8:	4628      	mov	r0, r5
 80028ca:	f7fe f99b 	bl	8000c04 <MCI_GetVqd>
 80028ce:	b200      	sxth	r0, r0
    break;
 80028d0:	e7ce      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 80028d2:	4628      	mov	r0, r5
 80028d4:	f7fe f9a4 	bl	8000c20 <MCI_GetValphabeta>
 80028d8:	b200      	sxth	r0, r0
    break;
 80028da:	e7c9      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80028dc:	f7ff fdf4 	bl	80024c8 <UI_GetSelectedMC>
    break;
 80028e0:	e7c6      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80028e2:	68a0      	ldr	r0, [r4, #8]
 80028e4:	f003 fe50 	bl	8006588 <PID_GetKI>
    break;
 80028e8:	e7c2      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80028ea:	68a0      	ldr	r0, [r4, #8]
 80028ec:	f003 fe48 	bl	8006580 <PID_GetKP>
    break;
 80028f0:	e7be      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 80028f2:	68a0      	ldr	r0, [r4, #8]
 80028f4:	f003 fe54 	bl	80065a0 <PID_GetKD>
    break;
 80028f8:	e7ba      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80028fa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80028fc:	f003 fe1e 	bl	800653c <NTC_GetAvTemp_C>
    break;
 8002900:	e7b6      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8002902:	6820      	ldr	r0, [r4, #0]
 8002904:	f003 fe4c 	bl	80065a0 <PID_GetKD>
    break;
 8002908:	e7b2      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 800290a:	6820      	ldr	r0, [r4, #0]
 800290c:	f003 fe3c 	bl	8006588 <PID_GetKI>
    break;
 8002910:	e7ae      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002912:	6820      	ldr	r0, [r4, #0]
 8002914:	f003 fe34 	bl	8006580 <PID_GetKP>
    break;
 8002918:	e7aa      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 800291a:	4628      	mov	r0, r5
 800291c:	f7fe f936 	bl	8000b8c <MCI_GetMecSpeedRefUnit>
 8002920:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002924:	0040      	lsls	r0, r0, #1
    break;
 8002926:	e7a3      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002928:	4628      	mov	r0, r5
 800292a:	f7fe f919 	bl	8000b60 <MCI_GetControlMode>
    break;
 800292e:	e79f      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002930:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002932:	f004 fab7 	bl	8006ea4 <STM_GetState>
	break;
 8002936:	e79b      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002938:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
}
 800293a:	b00d      	add	sp, #52	@ 0x34
 800293c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002940:	f004 babe 	b.w	8006ec0 <STM_GetFaultState>
      bRetVal = MCI_GetVqd(pMCI).d;
 8002944:	4628      	mov	r0, r5
 8002946:	f7fe f95d 	bl	8000c04 <MCI_GetVqd>
 800294a:	1400      	asrs	r0, r0, #16
    break;
 800294c:	e790      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 800294e:	6820      	ldr	r0, [r4, #0]
 8002950:	f003 fe20 	bl	8006594 <PID_GetKPDivisor>
    break;
 8002954:	e78c      	b.n	8002870 <UI_GetReg+0x244>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002956:	4628      	mov	r0, r5
 8002958:	f7fe f902 	bl	8000b60 <MCI_GetControlMode>
 800295c:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 800295e:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002960:	d06f      	beq.n	8002a42 <UI_GetReg+0x416>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002962:	f7fe f913 	bl	8000b8c <MCI_GetMecSpeedRefUnit>
 8002966:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800296a:	0040      	lsls	r0, r0, #1
 800296c:	e780      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 800296e:	6820      	ldr	r0, [r4, #0]
 8002970:	f003 fe12 	bl	8006598 <PID_GetKIDivisor>
    break;
 8002974:	e77c      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002976:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002978:	f004 f9d8 	bl	8006d2c <STC_GetMinAppNegativeMecSpeedUnit>
 800297c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002980:	0040      	lsls	r0, r0, #1
    break;
 8002982:	e775      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002984:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002986:	f004 f9cf 	bl	8006d28 <STC_GetMaxAppPositiveMecSpeedUnit>
 800298a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800298e:	0040      	lsls	r0, r0, #1
    break;
 8002990:	e76e      	b.n	8002870 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002992:	6902      	ldr	r2, [r0, #16]
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002998:	0f1a      	lsrs	r2, r3, #28
 800299a:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800299c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80029a0:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80029a2:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80029a6:	d948      	bls.n	8002a3a <UI_GetReg+0x40e>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	f63f af65 	bhi.w	8002878 <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 80029ae:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80029b0:	2800      	cmp	r0, #0
 80029b2:	f43f af61 	beq.w	8002878 <UI_GetReg+0x24c>
        bRetVal = SPD_GetS16Speed(pSPD);
 80029b6:	f004 f8e5 	bl	8006b84 <SPD_GetS16Speed>
 80029ba:	e759      	b.n	8002870 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80029bc:	6902      	ldr	r2, [r0, #16]
 80029be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80029c2:	0f1a      	lsrs	r2, r3, #28
 80029c4:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80029c6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80029ca:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80029cc:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80029d0:	d92f      	bls.n	8002a32 <UI_GetReg+0x406>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	f63f af50 	bhi.w	8002878 <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 80029d8:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80029da:	2800      	cmp	r0, #0
 80029dc:	f43f af4c 	beq.w	8002878 <UI_GetReg+0x24c>
        bRetVal = SPD_GetElAngle(pSPD);
 80029e0:	f004 f88e 	bl	8006b00 <SPD_GetElAngle>
 80029e4:	e744      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 80029e6:	4628      	mov	r0, r5
 80029e8:	f7fe f91a 	bl	8000c20 <MCI_GetValphabeta>
 80029ec:	1400      	asrs	r0, r0, #16
    break;
 80029ee:	e73f      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)(MC_UID);
 80029f0:	4817      	ldr	r0, [pc, #92]	@ (8002a50 <UI_GetReg+0x424>)
 80029f2:	e73d      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80029f4:	6860      	ldr	r0, [r4, #4]
 80029f6:	f003 fdd3 	bl	80065a0 <PID_GetKD>
    break;
 80029fa:	e739      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80029fc:	6860      	ldr	r0, [r4, #4]
 80029fe:	f003 fdc3 	bl	8006588 <PID_GetKI>
    break;
 8002a02:	e735      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = MCI_GetIab(pMCI).a;
 8002a04:	4628      	mov	r0, r5
 8002a06:	f7fe f8c5 	bl	8000b94 <MCI_GetIab>
 8002a0a:	b200      	sxth	r0, r0
    break;
 8002a0c:	e730      	b.n	8002870 <UI_GetReg+0x244>
      if (pMCT->pRevupCtrl)
 8002a0e:	6960      	ldr	r0, [r4, #20]
 8002a10:	2800      	cmp	r0, #0
 8002a12:	f43f af31 	beq.w	8002878 <UI_GetReg+0x24c>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002a16:	f004 f86f 	bl	8006af8 <RUC_GetNumberOfPhases>
 8002a1a:	e729      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	f7fe f8ad 	bl	8000b7c <MCI_GetAvrgMecSpeedUnit>
 8002a22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a26:	0040      	lsls	r0, r0, #1
    break;
 8002a28:	e722      	b.n	8002870 <UI_GetReg+0x244>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002a2a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002a2c:	f003 fd42 	bl	80064b4 <MPM_GetAvrgElMotorPowerW>
    break;
 8002a30:	e71e      	b.n	8002870 <UI_GetReg+0x244>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d9d0      	bls.n	80029d8 <UI_GetReg+0x3ac>
        pSPD = pMCT->pSpeedSensorMain;
 8002a36:	69a0      	ldr	r0, [r4, #24]
 8002a38:	e7cf      	b.n	80029da <UI_GetReg+0x3ae>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d9b7      	bls.n	80029ae <UI_GetReg+0x382>
        pSPD = pMCT->pSpeedSensorMain;
 8002a3e:	69a0      	ldr	r0, [r4, #24]
 8002a40:	e7b6      	b.n	80029b0 <UI_GetReg+0x384>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002a42:	f7fe f88f 	bl	8000b64 <MCI_GetLastRampFinalSpeed>
 8002a46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a4a:	0040      	lsls	r0, r0, #1
 8002a4c:	e710      	b.n	8002870 <UI_GetReg+0x244>
 8002a4e:	bf00      	nop
 8002a50:	34a6847a 	.word	0x34a6847a

08002a54 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002a54:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a56:	6883      	ldr	r3, [r0, #8]
 8002a58:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 8002a5a:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a5c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002a60:	290d      	cmp	r1, #13
 8002a62:	d811      	bhi.n	8002a88 <UI_ExecCmd+0x34>
 8002a64:	e8df f001 	tbb	[pc, r1]
 8002a68:	0e160b12 	.word	0x0e160b12
 8002a6c:	231f070e 	.word	0x231f070e
 8002a70:	10101027 	.word	0x10101027
 8002a74:	0b10      	.short	0x0b10
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002a76:	4620      	mov	r0, r4
 8002a78:	f7fe f86e 	bl	8000b58 <MCI_GetSTMState>
 8002a7c:	b130      	cbz	r0, 8002a8c <UI_ExecCmd+0x38>
      MCI_StopMotor(pMCI);
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f7fe f822 	bl	8000ac8 <MCI_StopMotor>
  bool retVal = true;
 8002a84:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002a86:	bd10      	pop	{r4, pc}
    retVal = false;
 8002a88:	2000      	movs	r0, #0
}
 8002a8a:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f7fe f811 	bl	8000ab4 <MCI_StartMotor>
 8002a92:	e7f7      	b.n	8002a84 <UI_ExecCmd+0x30>
      if (MCI_GetSTMState(pMCI) == RUN)
 8002a94:	4620      	mov	r0, r4
 8002a96:	f7fe f85f 	bl	8000b58 <MCI_GetSTMState>
 8002a9a:	2806      	cmp	r0, #6
 8002a9c:	d1f2      	bne.n	8002a84 <UI_ExecCmd+0x30>
        MCI_StopRamp(pMCI);
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7fe f868 	bl	8000b74 <MCI_StopRamp>
 8002aa4:	e7ee      	b.n	8002a84 <UI_ExecCmd+0x30>
      MCI_FaultAcknowledged(pMCI);
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f7fe f812 	bl	8000ad0 <MCI_FaultAcknowledged>
    break;
 8002aac:	e7ea      	b.n	8002a84 <UI_ExecCmd+0x30>
      MCI_EncoderAlign(pMCI);
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7fe f812 	bl	8000ad8 <MCI_EncoderAlign>
    break;
 8002ab4:	e7e6      	b.n	8002a84 <UI_ExecCmd+0x30>
      MCI_Clear_Iqdref(pMCI);
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f7fe f8ce 	bl	8000c58 <MCI_Clear_Iqdref>
    break;
 8002abc:	e7e2      	b.n	8002a84 <UI_ExecCmd+0x30>
 8002abe:	bf00      	nop

08002ac0 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002ac0:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002ac2:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002ac4:	f890 c014 	ldrb.w	ip, [r0, #20]
 8002ac8:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002aca:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8002ace:	fb83 c301 	smull	ip, r3, r3, r1
 8002ad2:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002ad6:	b209      	sxth	r1, r1
 8002ad8:	f7fd ffce 	bl	8000a78 <MCI_ExecSpeedRamp>
  return true;
}
 8002adc:	2001      	movs	r0, #1
 8002ade:	bd08      	pop	{r3, pc}
 8002ae0:	2aaaaaab 	.word	0x2aaaaaab

08002ae4 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002ae4:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002ae6:	6883      	ldr	r3, [r0, #8]
 8002ae8:	f890 c014 	ldrb.w	ip, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002aec:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002af0:	f7fd ffcc 	bl	8000a8c <MCI_ExecTorqueRamp>
  return true;
}
 8002af4:	2001      	movs	r0, #1
 8002af6:	bd08      	pop	{r3, pc}

08002af8 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	4617      	mov	r7, r2
 8002afc:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002afe:	7d02      	ldrb	r2, [r0, #20]
 8002b00:	68c3      	ldr	r3, [r0, #12]
 8002b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b06:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 8002b08:	b18c      	cbz	r4, 8002b2e <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	460d      	mov	r5, r1
 8002b0e:	f003 ffdd 	bl	8006acc <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002b12:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002b14:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002b16:	4620      	mov	r0, r4
 8002b18:	f003 ffde 	bl	8006ad8 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002b1c:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002b1e:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002b20:	4620      	mov	r0, r4
 8002b22:	f003 ffe1 	bl	8006ae8 <RUC_GetPhaseFinalTorque>
 8002b26:	9b06      	ldr	r3, [sp, #24]
 8002b28:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8002b2a:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8002b2e:	4620      	mov	r0, r4
}
 8002b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b32:	bf00      	nop

08002b34 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	461e      	mov	r6, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002b38:	7d05      	ldrb	r5, [r0, #20]
 8002b3a:	68c3      	ldr	r3, [r0, #12]
{
 8002b3c:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002b40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002b44:	695d      	ldr	r5, [r3, #20]
{
 8002b46:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002b48:	4628      	mov	r0, r5
 8002b4a:	f003 ffad 	bl	8006aa8 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002b4e:	4632      	mov	r2, r6
 8002b50:	4621      	mov	r1, r4
 8002b52:	4628      	mov	r0, r5
 8002b54:	f003 ffae 	bl	8006ab4 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002b58:	4628      	mov	r0, r5
 8002b5a:	463a      	mov	r2, r7
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	f003 ffaf 	bl	8006ac0 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002b62:	2001      	movs	r0, #1
 8002b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b66:	bf00      	nop

08002b68 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002b68:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b6a:	f890 c014 	ldrb.w	ip, [r0, #20]
 8002b6e:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8002b70:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8002b74:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002b78:	9901      	ldr	r1, [sp, #4]
 8002b7a:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 8002b7e:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8002b80:	f7fd bf8e 	b.w	8000aa0 <MCI_SetCurrentReferences>

08002b84 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002b84:	2000      	movs	r0, #0
 8002b86:	4770      	bx	lr

08002b88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b88:	4a03      	ldr	r2, [pc, #12]	@ (8002b98 <SystemInit+0x10>)
 8002b8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b8e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b9c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_Init+0x30>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bae:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bb6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb8:	2003      	movs	r0, #3
 8002bba:	f000 fa51 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bbe:	200f      	movs	r0, #15
 8002bc0:	f7ff fada 	bl	8002178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc4:	f7ff f95e 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002bc8:	2000      	movs	r0, #0
 8002bca:	bd08      	pop	{r3, pc}
 8002bcc:	40023c00 	.word	0x40023c00

08002bd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002bd0:	4a03      	ldr	r2, [pc, #12]	@ (8002be0 <HAL_IncTick+0x10>)
 8002bd2:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <HAL_IncTick+0x14>)
 8002bd4:	6811      	ldr	r1, [r2, #0]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	440b      	add	r3, r1
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000c38 	.word	0x20000c38
 8002be4:	2000056c 	.word	0x2000056c

08002be8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002be8:	4b01      	ldr	r3, [pc, #4]	@ (8002bf0 <HAL_GetTick+0x8>)
 8002bea:	6818      	ldr	r0, [r3, #0]
}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000c38 	.word	0x20000c38

08002bf4 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	f000 809e 	beq.w	8002d36 <HAL_ADC_Init+0x142>
{
 8002bfa:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bfc:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8002bfe:	4604      	mov	r4, r0
 8002c00:	b13d      	cbz	r5, 8002c12 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c04:	06db      	lsls	r3, r3, #27
 8002c06:	d50c      	bpl.n	8002c22 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8002c10:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002c12:	f7ff f959 	bl	8001ec8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002c16:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8002c1a:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c1e:	06db      	lsls	r3, r3, #27
 8002c20:	d4f2      	bmi.n	8002c08 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8002c22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c24:	4a47      	ldr	r2, [pc, #284]	@ (8002d44 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8002c26:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c2a:	f023 0302 	bic.w	r3, r3, #2
 8002c2e:	f043 0302 	orr.w	r3, r3, #2
 8002c32:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c34:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c36:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c38:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8002c3c:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c3e:	6851      	ldr	r1, [r2, #4]
 8002c40:	6860      	ldr	r0, [r4, #4]
 8002c42:	4301      	orrs	r1, r0
 8002c44:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c46:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c48:	6920      	ldr	r0, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c4a:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002c58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c5a:	685a      	ldr	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c5c:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c5e:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c62:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c6a:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c6c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	4302      	orrs	r2, r0
 8002c78:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c7a:	4a33      	ldr	r2, [pc, #204]	@ (8002d48 <HAL_ADC_Init+0x154>)
 8002c7c:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c7e:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c80:	d051      	beq.n	8002d26 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c86:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	4311      	orrs	r1, r2
 8002c8e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	4302      	orrs	r2, r0
 8002c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	f022 0202 	bic.w	r2, r2, #2
 8002ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	7e21      	ldrb	r1, [r4, #24]
 8002caa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002cae:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cb0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002cb4:	2a00      	cmp	r2, #0
 8002cb6:	d040      	beq.n	8002d3a <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cb8:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cc0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002cc8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	3901      	subs	r1, #1
 8002cce:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002cd2:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cd6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cd8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce0:	3901      	subs	r1, #1
 8002ce2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ce8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cea:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002cf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8002cf8:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8002cfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d06:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002d08:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d0a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002d0e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002d10:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002d12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d14:	f023 0303 	bic.w	r3, r3, #3
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002d24:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	e7b3      	b.n	8002c9e <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8002d36:	2001      	movs	r0, #1
}
 8002d38:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	e7c7      	b.n	8002cd4 <HAL_ADC_Init+0xe0>
 8002d44:	40012300 	.word	0x40012300
 8002d48:	0f000001 	.word	0x0f000001

08002d4c <HAL_ADC_ConfigChannel>:
{
 8002d4c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8002d4e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8002d52:	b082      	sub	sp, #8
 8002d54:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002d56:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8002d58:	f04f 0000 	mov.w	r0, #0
 8002d5c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002d5e:	f000 809e 	beq.w	8002e9e <HAL_ADC_ConfigChannel+0x152>
 8002d62:	2301      	movs	r3, #1
 8002d64:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d68:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d6a:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d6c:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d6e:	2d09      	cmp	r5, #9
 8002d70:	b2a8      	uxth	r0, r5
 8002d72:	d828      	bhi.n	8002dc6 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d74:	691e      	ldr	r6, [r3, #16]
 8002d76:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8002d7a:	f04f 0c07 	mov.w	ip, #7
 8002d7e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002d82:	ea26 060c 	bic.w	r6, r6, ip
 8002d86:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d88:	691e      	ldr	r6, [r3, #16]
 8002d8a:	fa04 f40e 	lsl.w	r4, r4, lr
 8002d8e:	4334      	orrs	r4, r6
 8002d90:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 8002d92:	684c      	ldr	r4, [r1, #4]
 8002d94:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d96:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8002d9a:	d82a      	bhi.n	8002df2 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d9c:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8002d9e:	3905      	subs	r1, #5
 8002da0:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002da4:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002da6:	fa0c f101 	lsl.w	r1, ip, r1
 8002daa:	ea24 0101 	bic.w	r1, r4, r1
 8002dae:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002db0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002db2:	4308      	orrs	r0, r1
 8002db4:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002db6:	493b      	ldr	r1, [pc, #236]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x158>)
 8002db8:	428b      	cmp	r3, r1
 8002dba:	d02b      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dc6:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8002dca:	68de      	ldr	r6, [r3, #12]
 8002dcc:	f1ac 0c1e 	sub.w	ip, ip, #30
 8002dd0:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dd4:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dd8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002ddc:	ea26 060c 	bic.w	r6, r6, ip
 8002de0:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002de2:	68de      	ldr	r6, [r3, #12]
 8002de4:	4334      	orrs	r4, r6
 8002de6:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 8002de8:	684c      	ldr	r4, [r1, #4]
 8002dea:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dec:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8002df0:	d9d4      	bls.n	8002d9c <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8002df2:	2c0c      	cmp	r4, #12
 8002df4:	d81f      	bhi.n	8002e36 <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002df6:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8002df8:	3923      	subs	r1, #35	@ 0x23
 8002dfa:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dfc:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dfe:	fa06 f101 	lsl.w	r1, r6, r1
 8002e02:	ea24 0101 	bic.w	r1, r4, r1
 8002e06:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e0a:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e0c:	4925      	ldr	r1, [pc, #148]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e0e:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e10:	428b      	cmp	r3, r1
 8002e12:	d1d3      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x70>
 8002e14:	2d12      	cmp	r5, #18
 8002e16:	d01b      	beq.n	8002e50 <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e18:	4b23      	ldr	r3, [pc, #140]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x15c>)
 8002e1a:	429d      	cmp	r5, r3
 8002e1c:	d022      	beq.n	8002e64 <HAL_ADC_ConfigChannel+0x118>
 8002e1e:	2d11      	cmp	r5, #17
 8002e20:	d1cc      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e22:	4b22      	ldr	r3, [pc, #136]	@ (8002eac <HAL_ADC_ConfigChannel+0x160>)
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8002e2a:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8002e32:	6059      	str	r1, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e34:	e7c2      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e36:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8002e38:	3941      	subs	r1, #65	@ 0x41
 8002e3a:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e3c:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e3e:	fa06 f101 	lsl.w	r1, r6, r1
 8002e42:	ea24 0101 	bic.w	r1, r4, r1
 8002e46:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e4a:	4308      	orrs	r0, r1
 8002e4c:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8002e4e:	e7b2      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e50:	4b16      	ldr	r3, [pc, #88]	@ (8002eac <HAL_ADC_ConfigChannel+0x160>)
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8002e58:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8002e60:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e62:	e7ab      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e64:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e66:	4c12      	ldr	r4, [pc, #72]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e68:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e6a:	4812      	ldr	r0, [pc, #72]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e6c:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8002e70:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8002e78:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	fba0 0303 	umull	r0, r3, r0, r3
 8002e80:	0c9b      	lsrs	r3, r3, #18
 8002e82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002e8a:	9b01      	ldr	r3, [sp, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d095      	beq.n	8002dbc <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8002e90:	9b01      	ldr	r3, [sp, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002e96:	9b01      	ldr	r3, [sp, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f9      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x144>
 8002e9c:	e78e      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8002e9e:	2002      	movs	r0, #2
}
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	40012000 	.word	0x40012000
 8002ea8:	10000012 	.word	0x10000012
 8002eac:	40012300 	.word	0x40012300
 8002eb0:	20000568 	.word	0x20000568
 8002eb4:	431bde83 	.word	0x431bde83

08002eb8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eba:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002ebe:	698d      	ldr	r5, [r1, #24]
  __HAL_LOCK(hadc);
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	f000 80c2 	beq.w	800304a <HAL_ADCEx_InjectedConfigChannel+0x192>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002ecc:	680c      	ldr	r4, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002ece:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002ed0:	688a      	ldr	r2, [r1, #8]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002ed2:	2c09      	cmp	r4, #9
 8002ed4:	4684      	mov	ip, r0
 8002ed6:	b2a0      	uxth	r0, r4
 8002ed8:	d861      	bhi.n	8002f9e <HAL_ADCEx_InjectedConfigChannel+0xe6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002eda:	691e      	ldr	r6, [r3, #16]
 8002edc:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8002ee0:	2707      	movs	r7, #7
 8002ee2:	fa07 f70e 	lsl.w	r7, r7, lr
 8002ee6:	ea26 0607 	bic.w	r6, r6, r7
 8002eea:	611e      	str	r6, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002eec:	691e      	ldr	r6, [r3, #16]
 8002eee:	fa02 f20e 	lsl.w	r2, r2, lr
 8002ef2:	4332      	orrs	r2, r6
 8002ef4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002ef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002ef8:	690f      	ldr	r7, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002efa:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002efc:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002f00:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002f02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f04:	f107 3eff 	add.w	lr, r7, #4294967295
 8002f08:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 8002f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002f0e:	1cf2      	adds	r2, r6, #3
 8002f10:	1bd2      	subs	r2, r2, r7
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8002f16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f1a:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002f1e:	4090      	lsls	r0, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002f20:	fa0e f202 	lsl.w	r2, lr, r2
 8002f24:	ea27 0202 	bic.w	r2, r7, r2
 8002f28:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002f2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f2c:	4310      	orrs	r0, r2
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002f2e:	4a48      	ldr	r2, [pc, #288]	@ (8003050 <HAL_ADCEx_InjectedConfigChannel+0x198>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002f30:	6398      	str	r0, [r3, #56]	@ 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002f32:	4295      	cmp	r5, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002f3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002f3c:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002f3e:	d065      	beq.n	800300c <HAL_ADCEx_InjectedConfigChannel+0x154>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002f40:	4315      	orrs	r5, r2
 8002f42:	609d      	str	r5, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002f44:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002f46:	69c8      	ldr	r0, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002f48:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002f4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	4302      	orrs	r2, r0
 8002f52:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002f54:	7d4a      	ldrb	r2, [r1, #21]
 8002f56:	2a00      	cmp	r2, #0
 8002f58:	d031      	beq.n	8002fbe <HAL_ADCEx_InjectedConfigChannel+0x106>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f60:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002f62:	7d0a      	ldrb	r2, [r1, #20]
 8002f64:	2a00      	cmp	r2, #0
 8002f66:	d031      	beq.n	8002fcc <HAL_ADCEx_InjectedConfigChannel+0x114>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f6e:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8002f70:	2e02      	cmp	r6, #2
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002f72:	68ca      	ldr	r2, [r1, #12]
  switch(sConfigInjected->InjectedRank)
 8002f74:	d031      	beq.n	8002fda <HAL_ADCEx_InjectedConfigChannel+0x122>
 8002f76:	2e03      	cmp	r6, #3
 8002f78:	d056      	beq.n	8003028 <HAL_ADCEx_InjectedConfigChannel+0x170>
 8002f7a:	2e01      	cmp	r6, #1
 8002f7c:	d04a      	beq.n	8003014 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002f7e:	6a19      	ldr	r1, [r3, #32]
 8002f80:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8002f84:	f021 010f 	bic.w	r1, r1, #15
 8002f88:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002f8a:	6a19      	ldr	r1, [r3, #32]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002f90:	4a30      	ldr	r2, [pc, #192]	@ (8003054 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d02d      	beq.n	8002ff2 <HAL_ADCEx_InjectedConfigChannel+0x13a>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
}
 8002f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002f9e:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8002fa2:	68df      	ldr	r7, [r3, #12]
 8002fa4:	3e1e      	subs	r6, #30
 8002fa6:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002faa:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002fac:	fa0e f606 	lsl.w	r6, lr, r6
 8002fb0:	ea27 0606 	bic.w	r6, r7, r6
 8002fb4:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002fb6:	68de      	ldr	r6, [r3, #12]
 8002fb8:	4332      	orrs	r2, r6
 8002fba:	60da      	str	r2, [r3, #12]
 8002fbc:	e79b      	b.n	8002ef6 <HAL_ADCEx_InjectedConfigChannel+0x3e>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc4:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002fc6:	7d0a      	ldrb	r2, [r1, #20]
 8002fc8:	2a00      	cmp	r2, #0
 8002fca:	d1cd      	bne.n	8002f68 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fd2:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8002fd4:	2e02      	cmp	r6, #2
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002fd6:	68ca      	ldr	r2, [r1, #12]
  switch(sConfigInjected->InjectedRank)
 8002fd8:	d1cd      	bne.n	8002f76 <HAL_ADCEx_InjectedConfigChannel+0xbe>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002fda:	6999      	ldr	r1, [r3, #24]
 8002fdc:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8002fe0:	f021 010f 	bic.w	r1, r1, #15
 8002fe4:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002fe6:	6999      	ldr	r1, [r3, #24]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002fec:	4a19      	ldr	r2, [pc, #100]	@ (8003054 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d1d1      	bne.n	8002f96 <HAL_ADCEx_InjectedConfigChannel+0xde>
 8002ff2:	2c12      	cmp	r4, #18
 8002ff4:	d022      	beq.n	800303c <HAL_ADCEx_InjectedConfigChannel+0x184>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002ff6:	4b18      	ldr	r3, [pc, #96]	@ (8003058 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 8002ff8:	429c      	cmp	r4, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_ADCEx_InjectedConfigChannel+0x148>
 8002ffc:	2c11      	cmp	r4, #17
 8002ffe:	d1ca      	bne.n	8002f96 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003000:	4a16      	ldr	r2, [pc, #88]	@ (800305c <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8003002:	6853      	ldr	r3, [r2, #4]
 8003004:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003008:	6053      	str	r3, [r2, #4]
 800300a:	e7c4      	b.n	8002f96 <HAL_ADCEx_InjectedConfigChannel+0xde>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800300c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	e79f      	b.n	8002f54 <HAL_ADCEx_InjectedConfigChannel+0x9c>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003014:	6959      	ldr	r1, [r3, #20]
 8003016:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 800301a:	f021 010f 	bic.w	r1, r1, #15
 800301e:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003020:	6959      	ldr	r1, [r3, #20]
 8003022:	430a      	orrs	r2, r1
 8003024:	615a      	str	r2, [r3, #20]
      break;
 8003026:	e7b3      	b.n	8002f90 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003028:	69d9      	ldr	r1, [r3, #28]
 800302a:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 800302e:	f021 010f 	bic.w	r1, r1, #15
 8003032:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003034:	69d9      	ldr	r1, [r3, #28]
 8003036:	430a      	orrs	r2, r1
 8003038:	61da      	str	r2, [r3, #28]
      break;
 800303a:	e7a9      	b.n	8002f90 <HAL_ADCEx_InjectedConfigChannel+0xd8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800303c:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8003040:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003044:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003048:	e7a5      	b.n	8002f96 <HAL_ADCEx_InjectedConfigChannel+0xde>
  __HAL_LOCK(hadc);
 800304a:	2002      	movs	r0, #2
}
 800304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304e:	bf00      	nop
 8003050:	000f0001 	.word	0x000f0001
 8003054:	40012000 	.word	0x40012000
 8003058:	10000012 	.word	0x10000012
 800305c:	40012300 	.word	0x40012300

08003060 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003060:	4907      	ldr	r1, [pc, #28]	@ (8003080 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003062:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003064:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003066:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800306a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003070:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003072:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800307a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003084:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <HAL_NVIC_SetPriority+0x70>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800308c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308e:	f1c3 0e07 	rsb	lr, r3, #7
 8003092:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003096:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800309a:	bf28      	it	cs
 800309c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a0:	f1bc 0f06 	cmp.w	ip, #6
 80030a4:	d91c      	bls.n	80030e0 <HAL_NVIC_SetPriority+0x5c>
 80030a6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	fa03 f30c 	lsl.w	r3, r3, ip
 80030b2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ba:	fa03 f30e 	lsl.w	r3, r3, lr
 80030be:	ea21 0303 	bic.w	r3, r1, r3
 80030c2:	fa03 f30c 	lsl.w	r3, r3, ip
 80030c6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80030ca:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030cc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80030ce:	db0a      	blt.n	80030e6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80030d4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80030d8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80030dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80030e0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e2:	4694      	mov	ip, r2
 80030e4:	e7e7      	b.n	80030b6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e6:	4a04      	ldr	r2, [pc, #16]	@ (80030f8 <HAL_NVIC_SetPriority+0x74>)
 80030e8:	f000 000f 	and.w	r0, r0, #15
 80030ec:	4402      	add	r2, r0
 80030ee:	7613      	strb	r3, [r2, #24]
 80030f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80030f4:	e000ed00 	.word	0xe000ed00
 80030f8:	e000ecfc 	.word	0xe000ecfc

080030fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80030fc:	2800      	cmp	r0, #0
 80030fe:	db07      	blt.n	8003110 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003100:	0941      	lsrs	r1, r0, #5
 8003102:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <HAL_NVIC_EnableIRQ+0x18>)
 8003104:	f000 001f 	and.w	r0, r0, #31
 8003108:	2301      	movs	r3, #1
 800310a:	4083      	lsls	r3, r0
 800310c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000e100 	.word	0xe000e100

08003118 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003118:	3801      	subs	r0, #1
 800311a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800311e:	d301      	bcc.n	8003124 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003120:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003122:	4770      	bx	lr
{
 8003124:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003126:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312a:	4c07      	ldr	r4, [pc, #28]	@ (8003148 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003132:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003136:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003138:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800313a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800313c:	619a      	str	r2, [r3, #24]
}
 800313e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003142:	6119      	str	r1, [r3, #16]
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003150:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003152:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003154:	f8df a200 	ldr.w	sl, [pc, #512]	@ 8003358 <HAL_GPIO_Init+0x20c>
{
 8003158:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 800315a:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800315e:	4689      	mov	r9, r1
 8003160:	e003      	b.n	800316a <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003162:	3301      	adds	r3, #1
 8003164:	2b10      	cmp	r3, #16
 8003166:	f000 808c 	beq.w	8003282 <HAL_GPIO_Init+0x136>
    ioposition = 0x01U << position;
 800316a:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800316e:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8003172:	43a2      	bics	r2, r4
 8003174:	d1f5      	bne.n	8003162 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003176:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800317a:	f001 0203 	and.w	r2, r1, #3
 800317e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003182:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003184:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003186:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800318c:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003190:	d97a      	bls.n	8003288 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003192:	2a03      	cmp	r2, #3
 8003194:	f040 80b1 	bne.w	80032fa <HAL_GPIO_Init+0x1ae>
      temp = GPIOx->MODER;
 8003198:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800319a:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800319e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a0:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a2:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80031a6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a8:	d0db      	beq.n	8003162 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031aa:	2200      	movs	r2, #0
 80031ac:	9203      	str	r2, [sp, #12]
 80031ae:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80031b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031b6:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 80031ba:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 80031be:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80031c2:	9203      	str	r2, [sp, #12]
 80031c4:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031ce:	f003 0703 	and.w	r7, r3, #3
 80031d2:	260f      	movs	r6, #15
 80031d4:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 80031d8:	00bf      	lsls	r7, r7, #2
 80031da:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031de:	4e5b      	ldr	r6, [pc, #364]	@ (800334c <HAL_GPIO_Init+0x200>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80031e0:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031e2:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031e4:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031e8:	d022      	beq.n	8003230 <HAL_GPIO_Init+0xe4>
 80031ea:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80031ee:	42b0      	cmp	r0, r6
 80031f0:	f000 808e 	beq.w	8003310 <HAL_GPIO_Init+0x1c4>
 80031f4:	4e56      	ldr	r6, [pc, #344]	@ (8003350 <HAL_GPIO_Init+0x204>)
 80031f6:	42b0      	cmp	r0, r6
 80031f8:	f000 8090 	beq.w	800331c <HAL_GPIO_Init+0x1d0>
 80031fc:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 800335c <HAL_GPIO_Init+0x210>
 8003200:	4560      	cmp	r0, ip
 8003202:	f000 8091 	beq.w	8003328 <HAL_GPIO_Init+0x1dc>
 8003206:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8003360 <HAL_GPIO_Init+0x214>
 800320a:	4560      	cmp	r0, ip
 800320c:	f000 8092 	beq.w	8003334 <HAL_GPIO_Init+0x1e8>
 8003210:	f8df c150 	ldr.w	ip, [pc, #336]	@ 8003364 <HAL_GPIO_Init+0x218>
 8003214:	4560      	cmp	r0, ip
 8003216:	f000 8093 	beq.w	8003340 <HAL_GPIO_Init+0x1f4>
 800321a:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 8003368 <HAL_GPIO_Init+0x21c>
 800321e:	4560      	cmp	r0, ip
 8003220:	bf0c      	ite	eq
 8003222:	f04f 0c06 	moveq.w	ip, #6
 8003226:	f04f 0c07 	movne.w	ip, #7
 800322a:	fa0c f707 	lsl.w	r7, ip, r7
 800322e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003230:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003232:	4a48      	ldr	r2, [pc, #288]	@ (8003354 <HAL_GPIO_Init+0x208>)
 8003234:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003236:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8003238:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800323c:	4e45      	ldr	r6, [pc, #276]	@ (8003354 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 800323e:	bf54      	ite	pl
 8003240:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003242:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8003246:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8003248:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800324a:	4e42      	ldr	r6, [pc, #264]	@ (8003354 <HAL_GPIO_Init+0x208>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800324c:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 800324e:	bf54      	ite	pl
 8003250:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003252:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8003256:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8003258:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800325a:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800325c:	4e3d      	ldr	r6, [pc, #244]	@ (8003354 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 800325e:	bf54      	ite	pl
 8003260:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003262:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8003266:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003268:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800326a:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326c:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003270:	4938      	ldr	r1, [pc, #224]	@ (8003354 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8003272:	bf54      	ite	pl
 8003274:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003276:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800327a:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 800327c:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800327e:	f47f af74 	bne.w	800316a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8003282:	b005      	add	sp, #20
 8003284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8003288:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800328a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328e:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8003292:	fa07 f70c 	lsl.w	r7, r7, ip
 8003296:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800329a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800329c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800329e:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a2:	f3c1 1700 	ubfx	r7, r1, #4, #1
 80032a6:	409f      	lsls	r7, r3
 80032a8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80032ac:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80032ae:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032b0:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b4:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80032b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80032bc:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c0:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80032c2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c4:	f47f af68 	bne.w	8003198 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 80032c8:	08df      	lsrs	r7, r3, #3
 80032ca:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80032ce:	9701      	str	r7, [sp, #4]
 80032d0:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d2:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 80032d6:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032d8:	f003 0e07 	and.w	lr, r3, #7
 80032dc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80032e0:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032e2:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032e6:	fa06 fe0e 	lsl.w	lr, r6, lr
 80032ea:	9e00      	ldr	r6, [sp, #0]
 80032ec:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80032f0:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032f2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80032f6:	6237      	str	r7, [r6, #32]
 80032f8:	e74e      	b.n	8003198 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 80032fa:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032fc:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003300:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8003304:	fa07 f70c 	lsl.w	r7, r7, ip
 8003308:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800330c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330e:	e743      	b.n	8003198 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003310:	f04f 0c01 	mov.w	ip, #1
 8003314:	fa0c f707 	lsl.w	r7, ip, r7
 8003318:	433d      	orrs	r5, r7
 800331a:	e789      	b.n	8003230 <HAL_GPIO_Init+0xe4>
 800331c:	f04f 0c02 	mov.w	ip, #2
 8003320:	fa0c f707 	lsl.w	r7, ip, r7
 8003324:	433d      	orrs	r5, r7
 8003326:	e783      	b.n	8003230 <HAL_GPIO_Init+0xe4>
 8003328:	f04f 0c03 	mov.w	ip, #3
 800332c:	fa0c f707 	lsl.w	r7, ip, r7
 8003330:	433d      	orrs	r5, r7
 8003332:	e77d      	b.n	8003230 <HAL_GPIO_Init+0xe4>
 8003334:	f04f 0c04 	mov.w	ip, #4
 8003338:	fa0c f707 	lsl.w	r7, ip, r7
 800333c:	433d      	orrs	r5, r7
 800333e:	e777      	b.n	8003230 <HAL_GPIO_Init+0xe4>
 8003340:	f04f 0c05 	mov.w	ip, #5
 8003344:	fa0c f707 	lsl.w	r7, ip, r7
 8003348:	433d      	orrs	r5, r7
 800334a:	e771      	b.n	8003230 <HAL_GPIO_Init+0xe4>
 800334c:	40020000 	.word	0x40020000
 8003350:	40020800 	.word	0x40020800
 8003354:	40013c00 	.word	0x40013c00
 8003358:	40023800 	.word	0x40023800
 800335c:	40020c00 	.word	0x40020c00
 8003360:	40021000 	.word	0x40021000
 8003364:	40021400 	.word	0x40021400
 8003368:	40021800 	.word	0x40021800

0800336c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800336c:	b902      	cbnz	r2, 8003370 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800336e:	0409      	lsls	r1, r1, #16
 8003370:	6181      	str	r1, [r0, #24]
  }
}
 8003372:	4770      	bx	lr

08003374 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003374:	b530      	push	{r4, r5, lr}
 8003376:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003378:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800337a:	491a      	ldr	r1, [pc, #104]	@ (80033e4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800337c:	4d1a      	ldr	r5, [pc, #104]	@ (80033e8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	2200      	movs	r2, #0
 8003380:	9201      	str	r2, [sp, #4]
 8003382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003384:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003390:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003392:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003394:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003396:	640a      	str	r2, [r1, #64]	@ 0x40
  tickstart = HAL_GetTick();
 8003398:	f7ff fc26 	bl	8002be8 <HAL_GetTick>
 800339c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800339e:	e005      	b.n	80033ac <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033a0:	f7ff fc22 	bl	8002be8 <HAL_GetTick>
 80033a4:	1b00      	subs	r0, r0, r4
 80033a6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80033aa:	d816      	bhi.n	80033da <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033ac:	686b      	ldr	r3, [r5, #4]
 80033ae:	03da      	lsls	r2, r3, #15
 80033b0:	d5f6      	bpl.n	80033a0 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033b2:	4b0c      	ldr	r3, [pc, #48]	@ (80033e4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033b4:	4d0c      	ldr	r5, [pc, #48]	@ (80033e8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033b6:	2201      	movs	r2, #1
 80033b8:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 80033ba:	f7ff fc15 	bl	8002be8 <HAL_GetTick>
 80033be:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033c0:	e005      	b.n	80033ce <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033c2:	f7ff fc11 	bl	8002be8 <HAL_GetTick>
 80033c6:	1b00      	subs	r0, r0, r4
 80033c8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80033cc:	d805      	bhi.n	80033da <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033ce:	686b      	ldr	r3, [r5, #4]
 80033d0:	039b      	lsls	r3, r3, #14
 80033d2:	d5f6      	bpl.n	80033c2 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80033d4:	2000      	movs	r0, #0
}
 80033d6:	b003      	add	sp, #12
 80033d8:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80033da:	2003      	movs	r0, #3
}
 80033dc:	b003      	add	sp, #12
 80033de:	bd30      	pop	{r4, r5, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	420e0000 	.word	0x420e0000
 80033e8:	40007000 	.word	0x40007000

080033ec <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ec:	2800      	cmp	r0, #0
 80033ee:	f000 8087 	beq.w	8003500 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f2:	4a48      	ldr	r2, [pc, #288]	@ (8003514 <HAL_RCC_ClockConfig+0x128>)
 80033f4:	6813      	ldr	r3, [r2, #0]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	428b      	cmp	r3, r1
{
 80033fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003400:	460d      	mov	r5, r1
 8003402:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003404:	d209      	bcs.n	800341a <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	b2cb      	uxtb	r3, r1
 8003408:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	6813      	ldr	r3, [r2, #0]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	428b      	cmp	r3, r1
 8003412:	d002      	beq.n	800341a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003414:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8003416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	0798      	lsls	r0, r3, #30
 800341e:	d514      	bpl.n	800344a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003420:	0759      	lsls	r1, r3, #29
 8003422:	d504      	bpl.n	800342e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003424:	493c      	ldr	r1, [pc, #240]	@ (8003518 <HAL_RCC_ClockConfig+0x12c>)
 8003426:	688a      	ldr	r2, [r1, #8]
 8003428:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 800342c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342e:	071a      	lsls	r2, r3, #28
 8003430:	d504      	bpl.n	800343c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003432:	4939      	ldr	r1, [pc, #228]	@ (8003518 <HAL_RCC_ClockConfig+0x12c>)
 8003434:	688a      	ldr	r2, [r1, #8]
 8003436:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800343a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800343c:	4936      	ldr	r1, [pc, #216]	@ (8003518 <HAL_RCC_ClockConfig+0x12c>)
 800343e:	68a0      	ldr	r0, [r4, #8]
 8003440:	688a      	ldr	r2, [r1, #8]
 8003442:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003446:	4302      	orrs	r2, r0
 8003448:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	07df      	lsls	r7, r3, #31
 800344c:	d521      	bpl.n	8003492 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344e:	6862      	ldr	r2, [r4, #4]
 8003450:	2a01      	cmp	r2, #1
 8003452:	d057      	beq.n	8003504 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003454:	1e93      	subs	r3, r2, #2
 8003456:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003458:	4b2f      	ldr	r3, [pc, #188]	@ (8003518 <HAL_RCC_ClockConfig+0x12c>)
 800345a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345c:	d94d      	bls.n	80034fa <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	0799      	lsls	r1, r3, #30
 8003460:	d5d8      	bpl.n	8003414 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003462:	4e2d      	ldr	r6, [pc, #180]	@ (8003518 <HAL_RCC_ClockConfig+0x12c>)
 8003464:	68b3      	ldr	r3, [r6, #8]
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	4313      	orrs	r3, r2
 800346c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800346e:	f7ff fbbb 	bl	8002be8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003472:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003476:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003478:	e004      	b.n	8003484 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347a:	f7ff fbb5 	bl	8002be8 <HAL_GetTick>
 800347e:	1bc0      	subs	r0, r0, r7
 8003480:	4540      	cmp	r0, r8
 8003482:	d844      	bhi.n	800350e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003484:	68b3      	ldr	r3, [r6, #8]
 8003486:	6862      	ldr	r2, [r4, #4]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003490:	d1f3      	bne.n	800347a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003492:	4a20      	ldr	r2, [pc, #128]	@ (8003514 <HAL_RCC_ClockConfig+0x128>)
 8003494:	6813      	ldr	r3, [r2, #0]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	42ab      	cmp	r3, r5
 800349c:	d906      	bls.n	80034ac <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	b2eb      	uxtb	r3, r5
 80034a0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	6813      	ldr	r3, [r2, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	42ab      	cmp	r3, r5
 80034aa:	d1b3      	bne.n	8003414 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	075a      	lsls	r2, r3, #29
 80034b0:	d506      	bpl.n	80034c0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b2:	4919      	ldr	r1, [pc, #100]	@ (8003518 <HAL_RCC_ClockConfig+0x12c>)
 80034b4:	68e0      	ldr	r0, [r4, #12]
 80034b6:	688a      	ldr	r2, [r1, #8]
 80034b8:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80034bc:	4302      	orrs	r2, r0
 80034be:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c0:	071b      	lsls	r3, r3, #28
 80034c2:	d507      	bpl.n	80034d4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c4:	4a14      	ldr	r2, [pc, #80]	@ (8003518 <HAL_RCC_ClockConfig+0x12c>)
 80034c6:	6921      	ldr	r1, [r4, #16]
 80034c8:	6893      	ldr	r3, [r2, #8]
 80034ca:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80034ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80034d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034d4:	f000 f870 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 80034d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003518 <HAL_RCC_ClockConfig+0x12c>)
 80034da:	4c10      	ldr	r4, [pc, #64]	@ (800351c <HAL_RCC_ClockConfig+0x130>)
 80034dc:	6892      	ldr	r2, [r2, #8]
 80034de:	4910      	ldr	r1, [pc, #64]	@ (8003520 <HAL_RCC_ClockConfig+0x134>)
 80034e0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80034e4:	4603      	mov	r3, r0
 80034e6:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80034e8:	480e      	ldr	r0, [pc, #56]	@ (8003524 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ea:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80034ec:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ee:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80034f0:	f7fe fe42 	bl	8002178 <HAL_InitTick>
  return HAL_OK;
 80034f4:	2000      	movs	r0, #0
}
 80034f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fa:	0198      	lsls	r0, r3, #6
 80034fc:	d4b1      	bmi.n	8003462 <HAL_RCC_ClockConfig+0x76>
 80034fe:	e789      	b.n	8003414 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003500:	2001      	movs	r0, #1
}
 8003502:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003504:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <HAL_RCC_ClockConfig+0x12c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	039e      	lsls	r6, r3, #14
 800350a:	d4aa      	bmi.n	8003462 <HAL_RCC_ClockConfig+0x76>
 800350c:	e782      	b.n	8003414 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800350e:	2003      	movs	r0, #3
 8003510:	e781      	b.n	8003416 <HAL_RCC_ClockConfig+0x2a>
 8003512:	bf00      	nop
 8003514:	40023c00 	.word	0x40023c00
 8003518:	40023800 	.word	0x40023800
 800351c:	08007588 	.word	0x08007588
 8003520:	20000568 	.word	0x20000568
 8003524:	20000570 	.word	0x20000570

08003528 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003528:	4b01      	ldr	r3, [pc, #4]	@ (8003530 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000568 	.word	0x20000568

08003534 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003534:	4b04      	ldr	r3, [pc, #16]	@ (8003548 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003536:	4905      	ldr	r1, [pc, #20]	@ (800354c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	4a05      	ldr	r2, [pc, #20]	@ (8003550 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800353c:	6808      	ldr	r0, [r1, #0]
 800353e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003542:	5cd3      	ldrb	r3, [r2, r3]
}
 8003544:	40d8      	lsrs	r0, r3
 8003546:	4770      	bx	lr
 8003548:	40023800 	.word	0x40023800
 800354c:	20000568 	.word	0x20000568
 8003550:	08007580 	.word	0x08007580

08003554 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003554:	4b04      	ldr	r3, [pc, #16]	@ (8003568 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003556:	4905      	ldr	r1, [pc, #20]	@ (800356c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	4a05      	ldr	r2, [pc, #20]	@ (8003570 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800355c:	6808      	ldr	r0, [r1, #0]
 800355e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003562:	5cd3      	ldrb	r3, [r2, r3]
}
 8003564:	40d8      	lsrs	r0, r3
 8003566:	4770      	bx	lr
 8003568:	40023800 	.word	0x40023800
 800356c:	20000568 	.word	0x20000568
 8003570:	08007580 	.word	0x08007580

08003574 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003574:	4b0e      	ldr	r3, [pc, #56]	@ (80035b0 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003576:	220f      	movs	r2, #15
 8003578:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	f002 0203 	and.w	r2, r2, #3
 8003580:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003588:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8003590:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	08db      	lsrs	r3, r3, #3
{
 8003596:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003598:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800359c:	4c05      	ldr	r4, [pc, #20]	@ (80035b4 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800359e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035a0:	6823      	ldr	r3, [r4, #0]
}
 80035a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	600b      	str	r3, [r1, #0]
}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40023c00 	.word	0x40023c00

080035b8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b8:	491d      	ldr	r1, [pc, #116]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x78>)
{
 80035ba:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035bc:	688b      	ldr	r3, [r1, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d01a      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x44>
 80035c6:	2b0c      	cmp	r3, #12
 80035c8:	d116      	bne.n	80035f8 <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035ca:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035cc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ce:	6849      	ldr	r1, [r1, #4]
 80035d0:	4818      	ldr	r0, [pc, #96]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x7c>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d2:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80035da:	bf18      	it	ne
 80035dc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035de:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e2:	fba1 0100 	umull	r0, r1, r1, r0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e6:	f7fc fe13 	bl	8000210 <__aeabi_uldivmod>
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035ea:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x78>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 80035f2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80035f6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f8:	480e      	ldr	r0, [pc, #56]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x7c>)
}
 80035fa:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035fc:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035fe:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003600:	6849      	ldr	r1, [r1, #4]
 8003602:	480c      	ldr	r0, [pc, #48]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x7c>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003604:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003608:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800360c:	bf18      	it	ne
 800360e:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003610:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003614:	fba1 0100 	umull	r0, r1, r1, r0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003618:	f7fc fdfa 	bl	8000210 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x78>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003624:	3301      	adds	r3, #1
 8003626:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003628:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800362c:	bd08      	pop	{r3, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	00f42400 	.word	0x00f42400

08003638 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003638:	2800      	cmp	r0, #0
 800363a:	f000 81fb 	beq.w	8003a34 <HAL_RCC_OscConfig+0x3fc>
{
 800363e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003642:	6803      	ldr	r3, [r0, #0]
 8003644:	07de      	lsls	r6, r3, #31
{
 8003646:	b082      	sub	sp, #8
 8003648:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800364a:	d536      	bpl.n	80036ba <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800364c:	49a1      	ldr	r1, [pc, #644]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 800364e:	688a      	ldr	r2, [r1, #8]
 8003650:	f002 020c 	and.w	r2, r2, #12
 8003654:	2a04      	cmp	r2, #4
 8003656:	f000 80de 	beq.w	8003816 <HAL_RCC_OscConfig+0x1de>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800365a:	688a      	ldr	r2, [r1, #8]
 800365c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003660:	2a08      	cmp	r2, #8
 8003662:	f000 80d4 	beq.w	800380e <HAL_RCC_OscConfig+0x1d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003666:	499b      	ldr	r1, [pc, #620]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 8003668:	688a      	ldr	r2, [r1, #8]
 800366a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800366e:	2a0c      	cmp	r2, #12
 8003670:	f000 8104 	beq.w	800387c <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003674:	6863      	ldr	r3, [r4, #4]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800367a:	f000 8118 	beq.w	80038ae <HAL_RCC_OscConfig+0x276>
 800367e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003682:	f000 8192 	beq.w	80039aa <HAL_RCC_OscConfig+0x372>
 8003686:	4d93      	ldr	r5, [pc, #588]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 8003688:	682a      	ldr	r2, [r5, #0]
 800368a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800368e:	602a      	str	r2, [r5, #0]
 8003690:	682a      	ldr	r2, [r5, #0]
 8003692:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003696:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003698:	2b00      	cmp	r3, #0
 800369a:	f040 810d 	bne.w	80038b8 <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7ff faa3 	bl	8002be8 <HAL_GetTick>
 80036a2:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a4:	e005      	b.n	80036b2 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a6:	f7ff fa9f 	bl	8002be8 <HAL_GetTick>
 80036aa:	1b80      	subs	r0, r0, r6
 80036ac:	2864      	cmp	r0, #100	@ 0x64
 80036ae:	f200 80fa 	bhi.w	80038a6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	682b      	ldr	r3, [r5, #0]
 80036b4:	039f      	lsls	r7, r3, #14
 80036b6:	d4f6      	bmi.n	80036a6 <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	079d      	lsls	r5, r3, #30
 80036bc:	d52f      	bpl.n	800371e <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036be:	4a85      	ldr	r2, [pc, #532]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 80036c0:	6891      	ldr	r1, [r2, #8]
 80036c2:	f011 0f0c 	tst.w	r1, #12
 80036c6:	f000 8099 	beq.w	80037fc <HAL_RCC_OscConfig+0x1c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ca:	6891      	ldr	r1, [r2, #8]
 80036cc:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036d0:	2908      	cmp	r1, #8
 80036d2:	f000 808f 	beq.w	80037f4 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d6:	497f      	ldr	r1, [pc, #508]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 80036d8:	688a      	ldr	r2, [r1, #8]
 80036da:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036de:	2a0c      	cmp	r2, #12
 80036e0:	f000 815e 	beq.w	80039a0 <HAL_RCC_OscConfig+0x368>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e4:	68e3      	ldr	r3, [r4, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8112 	beq.w	8003910 <HAL_RCC_OscConfig+0x2d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ec:	4b7a      	ldr	r3, [pc, #488]	@ (80038d8 <HAL_RCC_OscConfig+0x2a0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ee:	4e79      	ldr	r6, [pc, #484]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
        __HAL_RCC_HSI_ENABLE();
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036f4:	f7ff fa78 	bl	8002be8 <HAL_GetTick>
 80036f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	e005      	b.n	8003708 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fc:	f7ff fa74 	bl	8002be8 <HAL_GetTick>
 8003700:	1b40      	subs	r0, r0, r5
 8003702:	2802      	cmp	r0, #2
 8003704:	f200 80cf 	bhi.w	80038a6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003708:	6833      	ldr	r3, [r6, #0]
 800370a:	079f      	lsls	r7, r3, #30
 800370c:	d5f6      	bpl.n	80036fc <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370e:	6833      	ldr	r3, [r6, #0]
 8003710:	6922      	ldr	r2, [r4, #16]
 8003712:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003716:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800371a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	071a      	lsls	r2, r3, #28
 8003720:	d452      	bmi.n	80037c8 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003722:	075d      	lsls	r5, r3, #29
 8003724:	d530      	bpl.n	8003788 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003726:	4a6b      	ldr	r2, [pc, #428]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 8003728:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800372a:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 800372e:	f000 8099 	beq.w	8003864 <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 8003732:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	4e69      	ldr	r6, [pc, #420]	@ (80038dc <HAL_RCC_OscConfig+0x2a4>)
 8003736:	6833      	ldr	r3, [r6, #0]
 8003738:	05d8      	lsls	r0, r3, #23
 800373a:	f140 80a4 	bpl.w	8003886 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800373e:	68a3      	ldr	r3, [r4, #8]
 8003740:	2b01      	cmp	r3, #1
 8003742:	f000 80cd 	beq.w	80038e0 <HAL_RCC_OscConfig+0x2a8>
 8003746:	2b05      	cmp	r3, #5
 8003748:	f000 8139 	beq.w	80039be <HAL_RCC_OscConfig+0x386>
 800374c:	4e61      	ldr	r6, [pc, #388]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 800374e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8003750:	f022 0201 	bic.w	r2, r2, #1
 8003754:	6732      	str	r2, [r6, #112]	@ 0x70
 8003756:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8003758:	f022 0204 	bic.w	r2, r2, #4
 800375c:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 80c3 	bne.w	80038ea <HAL_RCC_OscConfig+0x2b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7ff fa40 	bl	8002be8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003768:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800376c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376e:	e005      	b.n	800377c <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003770:	f7ff fa3a 	bl	8002be8 <HAL_GetTick>
 8003774:	1bc0      	subs	r0, r0, r7
 8003776:	4540      	cmp	r0, r8
 8003778:	f200 8095 	bhi.w	80038a6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800377e:	079b      	lsls	r3, r3, #30
 8003780:	d4f6      	bmi.n	8003770 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003782:	2d00      	cmp	r5, #0
 8003784:	f040 8106 	bne.w	8003994 <HAL_RCC_OscConfig+0x35c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003788:	69a3      	ldr	r3, [r4, #24]
 800378a:	b1cb      	cbz	r3, 80037c0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800378c:	4d51      	ldr	r5, [pc, #324]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 800378e:	68aa      	ldr	r2, [r5, #8]
 8003790:	f002 020c 	and.w	r2, r2, #12
 8003794:	2a08      	cmp	r2, #8
 8003796:	f000 80cc 	beq.w	8003932 <HAL_RCC_OscConfig+0x2fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379a:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379c:	4b4e      	ldr	r3, [pc, #312]	@ (80038d8 <HAL_RCC_OscConfig+0x2a0>)
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a4:	f000 8115 	beq.w	80039d2 <HAL_RCC_OscConfig+0x39a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7ff fa1e 	bl	8002be8 <HAL_GetTick>
 80037ac:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	e004      	b.n	80037ba <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b0:	f7ff fa1a 	bl	8002be8 <HAL_GetTick>
 80037b4:	1b00      	subs	r0, r0, r4
 80037b6:	2802      	cmp	r0, #2
 80037b8:	d875      	bhi.n	80038a6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	682b      	ldr	r3, [r5, #0]
 80037bc:	019b      	lsls	r3, r3, #6
 80037be:	d4f7      	bmi.n	80037b0 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80037c0:	2000      	movs	r0, #0
}
 80037c2:	b002      	add	sp, #8
 80037c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037c8:	6963      	ldr	r3, [r4, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d02d      	beq.n	800382a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_LSI_ENABLE();
 80037ce:	4b42      	ldr	r3, [pc, #264]	@ (80038d8 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d0:	4e40      	ldr	r6, [pc, #256]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_ENABLE();
 80037d2:	2201      	movs	r2, #1
 80037d4:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80037d8:	f7ff fa06 	bl	8002be8 <HAL_GetTick>
 80037dc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	e004      	b.n	80037ea <HAL_RCC_OscConfig+0x1b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e0:	f7ff fa02 	bl	8002be8 <HAL_GetTick>
 80037e4:	1b40      	subs	r0, r0, r5
 80037e6:	2802      	cmp	r0, #2
 80037e8:	d85d      	bhi.n	80038a6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ea:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80037ec:	079b      	lsls	r3, r3, #30
 80037ee:	d5f7      	bpl.n	80037e0 <HAL_RCC_OscConfig+0x1a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	e796      	b.n	8003722 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037f4:	6852      	ldr	r2, [r2, #4]
 80037f6:	0250      	lsls	r0, r2, #9
 80037f8:	f53f af6d 	bmi.w	80036d6 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fc:	4a35      	ldr	r2, [pc, #212]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	0792      	lsls	r2, r2, #30
 8003802:	d523      	bpl.n	800384c <HAL_RCC_OscConfig+0x214>
 8003804:	68e2      	ldr	r2, [r4, #12]
 8003806:	2a01      	cmp	r2, #1
 8003808:	d020      	beq.n	800384c <HAL_RCC_OscConfig+0x214>
    return HAL_ERROR;
 800380a:	2001      	movs	r0, #1
 800380c:	e7d9      	b.n	80037c2 <HAL_RCC_OscConfig+0x18a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800380e:	684a      	ldr	r2, [r1, #4]
 8003810:	0255      	lsls	r5, r2, #9
 8003812:	f57f af28 	bpl.w	8003666 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003816:	4a2f      	ldr	r2, [pc, #188]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	0392      	lsls	r2, r2, #14
 800381c:	f57f af4d 	bpl.w	80036ba <HAL_RCC_OscConfig+0x82>
 8003820:	6862      	ldr	r2, [r4, #4]
 8003822:	2a00      	cmp	r2, #0
 8003824:	f47f af49 	bne.w	80036ba <HAL_RCC_OscConfig+0x82>
 8003828:	e7ef      	b.n	800380a <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_LSI_DISABLE();
 800382a:	4a2b      	ldr	r2, [pc, #172]	@ (80038d8 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382c:	4e29      	ldr	r6, [pc, #164]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_DISABLE();
 800382e:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8003832:	f7ff f9d9 	bl	8002be8 <HAL_GetTick>
 8003836:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003838:	e004      	b.n	8003844 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800383a:	f7ff f9d5 	bl	8002be8 <HAL_GetTick>
 800383e:	1b40      	subs	r0, r0, r5
 8003840:	2802      	cmp	r0, #2
 8003842:	d830      	bhi.n	80038a6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003846:	079f      	lsls	r7, r3, #30
 8003848:	d4f7      	bmi.n	800383a <HAL_RCC_OscConfig+0x202>
 800384a:	e7d1      	b.n	80037f0 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	4921      	ldr	r1, [pc, #132]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 800384e:	6920      	ldr	r0, [r4, #16]
 8003850:	680a      	ldr	r2, [r1, #0]
 8003852:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8003856:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800385a:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385c:	071a      	lsls	r2, r3, #28
 800385e:	f57f af60 	bpl.w	8003722 <HAL_RCC_OscConfig+0xea>
 8003862:	e7b1      	b.n	80037c8 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800386c:	6413      	str	r3, [r2, #64]	@ 0x40
 800386e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003878:	2501      	movs	r5, #1
 800387a:	e75b      	b.n	8003734 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387c:	684a      	ldr	r2, [r1, #4]
 800387e:	0251      	lsls	r1, r2, #9
 8003880:	f57f aef8 	bpl.w	8003674 <HAL_RCC_OscConfig+0x3c>
 8003884:	e7c7      	b.n	8003816 <HAL_RCC_OscConfig+0x1de>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003886:	6833      	ldr	r3, [r6, #0]
 8003888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800388c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800388e:	f7ff f9ab 	bl	8002be8 <HAL_GetTick>
 8003892:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	6833      	ldr	r3, [r6, #0]
 8003896:	05d9      	lsls	r1, r3, #23
 8003898:	f53f af51 	bmi.w	800373e <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389c:	f7ff f9a4 	bl	8002be8 <HAL_GetTick>
 80038a0:	1bc0      	subs	r0, r0, r7
 80038a2:	2802      	cmp	r0, #2
 80038a4:	d9f6      	bls.n	8003894 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80038a6:	2003      	movs	r0, #3
}
 80038a8:	b002      	add	sp, #8
 80038aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ae:	4a09      	ldr	r2, [pc, #36]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80038b8:	f7ff f996 	bl	8002be8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038bc:	4e05      	ldr	r6, [pc, #20]	@ (80038d4 <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 80038be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c0:	e004      	b.n	80038cc <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c2:	f7ff f991 	bl	8002be8 <HAL_GetTick>
 80038c6:	1b40      	subs	r0, r0, r5
 80038c8:	2864      	cmp	r0, #100	@ 0x64
 80038ca:	d8ec      	bhi.n	80038a6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038cc:	6833      	ldr	r3, [r6, #0]
 80038ce:	039b      	lsls	r3, r3, #14
 80038d0:	d5f7      	bpl.n	80038c2 <HAL_RCC_OscConfig+0x28a>
 80038d2:	e6f1      	b.n	80036b8 <HAL_RCC_OscConfig+0x80>
 80038d4:	40023800 	.word	0x40023800
 80038d8:	42470000 	.word	0x42470000
 80038dc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e0:	4a55      	ldr	r2, [pc, #340]	@ (8003a38 <HAL_RCC_OscConfig+0x400>)
 80038e2:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80038ea:	f7ff f97d 	bl	8002be8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ee:	4f52      	ldr	r7, [pc, #328]	@ (8003a38 <HAL_RCC_OscConfig+0x400>)
      tickstart = HAL_GetTick();
 80038f0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f6:	e004      	b.n	8003902 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7ff f976 	bl	8002be8 <HAL_GetTick>
 80038fc:	1b80      	subs	r0, r0, r6
 80038fe:	4540      	cmp	r0, r8
 8003900:	d8d1      	bhi.n	80038a6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003902:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003904:	079a      	lsls	r2, r3, #30
 8003906:	d5f7      	bpl.n	80038f8 <HAL_RCC_OscConfig+0x2c0>
    if(pwrclkchanged == SET)
 8003908:	2d00      	cmp	r5, #0
 800390a:	f43f af3d 	beq.w	8003788 <HAL_RCC_OscConfig+0x150>
 800390e:	e041      	b.n	8003994 <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_HSI_DISABLE();
 8003910:	4a4a      	ldr	r2, [pc, #296]	@ (8003a3c <HAL_RCC_OscConfig+0x404>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	4e49      	ldr	r6, [pc, #292]	@ (8003a38 <HAL_RCC_OscConfig+0x400>)
        __HAL_RCC_HSI_DISABLE();
 8003914:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003916:	f7ff f967 	bl	8002be8 <HAL_GetTick>
 800391a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391c:	e004      	b.n	8003928 <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800391e:	f7ff f963 	bl	8002be8 <HAL_GetTick>
 8003922:	1b40      	subs	r0, r0, r5
 8003924:	2802      	cmp	r0, #2
 8003926:	d8be      	bhi.n	80038a6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003928:	6833      	ldr	r3, [r6, #0]
 800392a:	0799      	lsls	r1, r3, #30
 800392c:	d4f7      	bmi.n	800391e <HAL_RCC_OscConfig+0x2e6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	e6f5      	b.n	800371e <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003932:	2b01      	cmp	r3, #1
 8003934:	f43f af69 	beq.w	800380a <HAL_RCC_OscConfig+0x1d2>
        pll_config = RCC->PLLCFGR;
 8003938:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003940:	4291      	cmp	r1, r2
 8003942:	f47f af62 	bne.w	800380a <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003946:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003948:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394c:	4291      	cmp	r1, r2
 800394e:	f47f af5c 	bne.w	800380a <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003952:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003954:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8003958:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800395a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800395e:	f47f af54 	bne.w	800380a <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003962:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003964:	0852      	lsrs	r2, r2, #1
 8003966:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800396a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800396c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003970:	f47f af4b 	bne.w	800380a <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003974:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003976:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800397a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800397e:	f47f af44 	bne.w	800380a <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003982:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003984:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003988:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800398c:	bf14      	ite	ne
 800398e:	2001      	movne	r0, #1
 8003990:	2000      	moveq	r0, #0
 8003992:	e716      	b.n	80037c2 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003994:	4a28      	ldr	r2, [pc, #160]	@ (8003a38 <HAL_RCC_OscConfig+0x400>)
 8003996:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	@ 0x40
 800399e:	e6f3      	b.n	8003788 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a0:	684a      	ldr	r2, [r1, #4]
 80039a2:	0251      	lsls	r1, r2, #9
 80039a4:	f53f ae9e 	bmi.w	80036e4 <HAL_RCC_OscConfig+0xac>
 80039a8:	e728      	b.n	80037fc <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039aa:	4b23      	ldr	r3, [pc, #140]	@ (8003a38 <HAL_RCC_OscConfig+0x400>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80039ba:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039bc:	e77c      	b.n	80038b8 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039be:	4b1e      	ldr	r3, [pc, #120]	@ (8003a38 <HAL_RCC_OscConfig+0x400>)
 80039c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039c2:	f042 0204 	orr.w	r2, r2, #4
 80039c6:	671a      	str	r2, [r3, #112]	@ 0x70
 80039c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039d0:	e78b      	b.n	80038ea <HAL_RCC_OscConfig+0x2b2>
        tickstart = HAL_GetTick();
 80039d2:	f7ff f909 	bl	8002be8 <HAL_GetTick>
 80039d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d8:	e005      	b.n	80039e6 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039da:	f7ff f905 	bl	8002be8 <HAL_GetTick>
 80039de:	1b80      	subs	r0, r0, r6
 80039e0:	2802      	cmp	r0, #2
 80039e2:	f63f af60 	bhi.w	80038a6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	682b      	ldr	r3, [r5, #0]
 80039e8:	0199      	lsls	r1, r3, #6
 80039ea:	d4f6      	bmi.n	80039da <HAL_RCC_OscConfig+0x3a2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ec:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80039f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80039f2:	430b      	orrs	r3, r1
 80039f4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80039f8:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 80039fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80039fe:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003a02:	0852      	lsrs	r2, r2, #1
 8003a04:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003a08:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003a0a:	490c      	ldr	r1, [pc, #48]	@ (8003a3c <HAL_RCC_OscConfig+0x404>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003a10:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a12:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a14:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003a16:	f7ff f8e7 	bl	8002be8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	4d07      	ldr	r5, [pc, #28]	@ (8003a38 <HAL_RCC_OscConfig+0x400>)
        tickstart = HAL_GetTick();
 8003a1c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1e:	e005      	b.n	8003a2c <HAL_RCC_OscConfig+0x3f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a20:	f7ff f8e2 	bl	8002be8 <HAL_GetTick>
 8003a24:	1b00      	subs	r0, r0, r4
 8003a26:	2802      	cmp	r0, #2
 8003a28:	f63f af3d 	bhi.w	80038a6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	019a      	lsls	r2, r3, #6
 8003a30:	d5f6      	bpl.n	8003a20 <HAL_RCC_OscConfig+0x3e8>
 8003a32:	e6c5      	b.n	80037c0 <HAL_RCC_OscConfig+0x188>
    return HAL_ERROR;
 8003a34:	2001      	movs	r0, #1
}
 8003a36:	4770      	bx	lr
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	42470000 	.word	0x42470000

08003a40 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a40:	2800      	cmp	r0, #0
 8003a42:	f000 8086 	beq.w	8003b52 <HAL_TIM_Base_Init+0x112>
{
 8003a46:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a48:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d078      	beq.n	8003b48 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a56:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a58:	493f      	ldr	r1, [pc, #252]	@ (8003b58 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a60:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003a62:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a64:	d05c      	beq.n	8003b20 <HAL_TIM_Base_Init+0xe0>
 8003a66:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003a6a:	d030      	beq.n	8003ace <HAL_TIM_Base_Init+0x8e>
 8003a6c:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8003a70:	428a      	cmp	r2, r1
 8003a72:	d02c      	beq.n	8003ace <HAL_TIM_Base_Init+0x8e>
 8003a74:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003a78:	428a      	cmp	r2, r1
 8003a7a:	d028      	beq.n	8003ace <HAL_TIM_Base_Init+0x8e>
 8003a7c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003a80:	428a      	cmp	r2, r1
 8003a82:	d024      	beq.n	8003ace <HAL_TIM_Base_Init+0x8e>
 8003a84:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8003a88:	428a      	cmp	r2, r1
 8003a8a:	d049      	beq.n	8003b20 <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8c:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8003a90:	428a      	cmp	r2, r1
 8003a92:	d020      	beq.n	8003ad6 <HAL_TIM_Base_Init+0x96>
 8003a94:	4931      	ldr	r1, [pc, #196]	@ (8003b5c <HAL_TIM_Base_Init+0x11c>)
 8003a96:	428a      	cmp	r2, r1
 8003a98:	d01d      	beq.n	8003ad6 <HAL_TIM_Base_Init+0x96>
 8003a9a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003a9e:	428a      	cmp	r2, r1
 8003aa0:	d019      	beq.n	8003ad6 <HAL_TIM_Base_Init+0x96>
 8003aa2:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8003aa6:	428a      	cmp	r2, r1
 8003aa8:	d015      	beq.n	8003ad6 <HAL_TIM_Base_Init+0x96>
 8003aaa:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003aae:	428a      	cmp	r2, r1
 8003ab0:	d011      	beq.n	8003ad6 <HAL_TIM_Base_Init+0x96>
 8003ab2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003ab6:	428a      	cmp	r2, r1
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_TIM_Base_Init+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aba:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003abc:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003abe:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ac4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003ac6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003aca:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003acc:	e010      	b.n	8003af0 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8003ace:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ad4:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ade:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003ae8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003aea:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aec:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003aee:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af0:	2301      	movs	r3, #1
 8003af2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af4:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003afc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003b00:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003b04:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b10:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003b14:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003b1c:	2000      	movs	r0, #0
}
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003b20:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b22:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003b28:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b30:	69a1      	ldr	r1, [r4, #24]
 8003b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b36:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003b38:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b3a:	68e3      	ldr	r3, [r4, #12]
 8003b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003b3e:	6863      	ldr	r3, [r4, #4]
 8003b40:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003b42:	6963      	ldr	r3, [r4, #20]
 8003b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b46:	e7d3      	b.n	8003af0 <HAL_TIM_Base_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8003b48:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003b4c:	f7fe fa44 	bl	8001fd8 <HAL_TIM_Base_MspInit>
 8003b50:	e781      	b.n	8003a56 <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8003b52:	2001      	movs	r0, #1
}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40014400 	.word	0x40014400

08003b60 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003b60:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d12f      	bne.n	8003bc8 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b68:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6a:	4918      	ldr	r1, [pc, #96]	@ (8003bcc <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b72:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b74:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7c:	d019      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b82:	d016      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003b84:	4a12      	ldr	r2, [pc, #72]	@ (8003bd0 <HAL_TIM_Base_Start_IT+0x70>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003b8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00f      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003b92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00b      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003b9a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003ba2:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_Base_Start_IT+0x52>
 8003baa:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d104      	bne.n	8003bbc <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb8:	2a06      	cmp	r2, #6
 8003bba:	d003      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	4770      	bx	lr
    return HAL_ERROR;
 8003bc8:	2001      	movs	r0, #1
}
 8003bca:	4770      	bx	lr
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40000400 	.word	0x40000400

08003bd4 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop

08003bd8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	f000 8086 	beq.w	8003cea <HAL_TIM_PWM_Init+0x112>
{
 8003bde:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003be0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003be4:	4604      	mov	r4, r0
 8003be6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d078      	beq.n	8003ce0 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bee:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf0:	493f      	ldr	r1, [pc, #252]	@ (8003cf0 <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003bfa:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bfc:	d05c      	beq.n	8003cb8 <HAL_TIM_PWM_Init+0xe0>
 8003bfe:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003c02:	d030      	beq.n	8003c66 <HAL_TIM_PWM_Init+0x8e>
 8003c04:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8003c08:	428a      	cmp	r2, r1
 8003c0a:	d02c      	beq.n	8003c66 <HAL_TIM_PWM_Init+0x8e>
 8003c0c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003c10:	428a      	cmp	r2, r1
 8003c12:	d028      	beq.n	8003c66 <HAL_TIM_PWM_Init+0x8e>
 8003c14:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003c18:	428a      	cmp	r2, r1
 8003c1a:	d024      	beq.n	8003c66 <HAL_TIM_PWM_Init+0x8e>
 8003c1c:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8003c20:	428a      	cmp	r2, r1
 8003c22:	d049      	beq.n	8003cb8 <HAL_TIM_PWM_Init+0xe0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c24:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8003c28:	428a      	cmp	r2, r1
 8003c2a:	d020      	beq.n	8003c6e <HAL_TIM_PWM_Init+0x96>
 8003c2c:	4931      	ldr	r1, [pc, #196]	@ (8003cf4 <HAL_TIM_PWM_Init+0x11c>)
 8003c2e:	428a      	cmp	r2, r1
 8003c30:	d01d      	beq.n	8003c6e <HAL_TIM_PWM_Init+0x96>
 8003c32:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003c36:	428a      	cmp	r2, r1
 8003c38:	d019      	beq.n	8003c6e <HAL_TIM_PWM_Init+0x96>
 8003c3a:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8003c3e:	428a      	cmp	r2, r1
 8003c40:	d015      	beq.n	8003c6e <HAL_TIM_PWM_Init+0x96>
 8003c42:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003c46:	428a      	cmp	r2, r1
 8003c48:	d011      	beq.n	8003c6e <HAL_TIM_PWM_Init+0x96>
 8003c4a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003c4e:	428a      	cmp	r2, r1
 8003c50:	d00d      	beq.n	8003c6e <HAL_TIM_PWM_Init+0x96>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c52:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8003c54:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c56:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c5c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003c5e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c60:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c62:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c64:	e010      	b.n	8003c88 <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8003c66:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c6c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c70:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c76:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c7c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c7e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003c80:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003c82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c84:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c86:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c8c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003c94:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003c98:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003c9c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ca8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003cac:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003cb4:	2000      	movs	r0, #0
}
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8003cb8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cba:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003cc0:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc8:	69a1      	ldr	r1, [r4, #24]
 8003cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cce:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003cd0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd2:	68e3      	ldr	r3, [r4, #12]
 8003cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003cd6:	6863      	ldr	r3, [r4, #4]
 8003cd8:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003cda:	6963      	ldr	r3, [r4, #20]
 8003cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cde:	e7d3      	b.n	8003c88 <HAL_TIM_PWM_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8003ce0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003ce4:	f7ff ff76 	bl	8003bd4 <HAL_TIM_PWM_MspInit>
 8003ce8:	e781      	b.n	8003bee <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8003cea:	2001      	movs	r0, #1
}
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40014400 	.word	0x40014400

08003cf8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8003cf8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	f000 80c6 	beq.w	8003e8e <HAL_TIM_PWM_ConfigChannel+0x196>
 8003d02:	2301      	movs	r3, #1
{
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8003d08:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003d0c:	2a0c      	cmp	r2, #12
 8003d0e:	d808      	bhi.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003d10:	e8df f002 	tbb	[pc, r2]
 8003d14:	0707073e 	.word	0x0707073e
 8003d18:	07070767 	.word	0x07070767
 8003d1c:	07070793 	.word	0x07070793
 8003d20:	0c          	.byte	0x0c
 8003d21:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8003d22:	2300      	movs	r3, #0
 8003d24:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8003d28:	2001      	movs	r0, #1
}
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d2c:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d2e:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d30:	6a1a      	ldr	r2, [r3, #32]
 8003d32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d36:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003d38:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003d3a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003d3c:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d3e:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d42:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d46:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003d48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d4c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d50:	4d6a      	ldr	r5, [pc, #424]	@ (8003efc <HAL_TIM_PWM_ConfigChannel+0x204>)
 8003d52:	42ab      	cmp	r3, r5
 8003d54:	f000 80bc 	beq.w	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
 8003d58:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003d5c:	42ab      	cmp	r3, r5
 8003d5e:	f000 80b7 	beq.w	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d62:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d64:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d66:	6848      	ldr	r0, [r1, #4]
 8003d68:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d6c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d6e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003d84:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003d86:	2300      	movs	r3, #0
 8003d88:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003d8c:	2000      	movs	r0, #0
}
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d90:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003d92:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d94:	6a1a      	ldr	r2, [r3, #32]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003d9e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003da0:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003da2:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003da6:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8003da8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003daa:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8003dae:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003db0:	4d52      	ldr	r5, [pc, #328]	@ (8003efc <HAL_TIM_PWM_ConfigChannel+0x204>)
 8003db2:	42ab      	cmp	r3, r5
 8003db4:	d06d      	beq.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x19a>
 8003db6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003dba:	42ab      	cmp	r3, r5
 8003dbc:	d069      	beq.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 8003dbe:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003dc0:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003dc2:	6848      	ldr	r0, [r1, #4]
 8003dc4:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8003dc6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dc8:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dca:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dcc:	f042 0208 	orr.w	r2, r2, #8
 8003dd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	f022 0204 	bic.w	r2, r2, #4
 8003dd8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	619a      	str	r2, [r3, #24]
      break;
 8003de0:	e7d1      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003de2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003de4:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de6:	6a1a      	ldr	r2, [r3, #32]
 8003de8:	f022 0210 	bic.w	r2, r2, #16
 8003dec:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003dee:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003df0:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003df2:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003df4:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dfc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003dfe:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e02:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e06:	4d3d      	ldr	r5, [pc, #244]	@ (8003efc <HAL_TIM_PWM_ConfigChannel+0x204>)
 8003e08:	42ab      	cmp	r3, r5
 8003e0a:	d051      	beq.n	8003eb0 <HAL_TIM_PWM_ConfigChannel+0x1b8>
 8003e0c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e10:	42ab      	cmp	r3, r5
 8003e12:	d04d      	beq.n	8003eb0 <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CR2 = tmpcr2;
 8003e14:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e16:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003e18:	6848      	ldr	r0, [r1, #4]
 8003e1a:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003e1c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e1e:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e20:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003e36:	619a      	str	r2, [r3, #24]
      break;
 8003e38:	e7a5      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e3a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003e3c:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e44:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003e46:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003e48:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003e4a:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e4c:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003e50:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e52:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003e54:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e58:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e5c:	4d27      	ldr	r5, [pc, #156]	@ (8003efc <HAL_TIM_PWM_ConfigChannel+0x204>)
 8003e5e:	42ab      	cmp	r3, r5
 8003e60:	d03c      	beq.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x1e4>
 8003e62:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e66:	42ab      	cmp	r3, r5
 8003e68:	d038      	beq.n	8003edc <HAL_TIM_PWM_ConfigChannel+0x1e4>
  TIMx->CR2 = tmpcr2;
 8003e6a:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003e6c:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003e6e:	6848      	ldr	r0, [r1, #4]
 8003e70:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8003e72:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e74:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e76:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e78:	f042 0208 	orr.w	r2, r2, #8
 8003e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	f022 0204 	bic.w	r2, r2, #4
 8003e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e86:	69da      	ldr	r2, [r3, #28]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	61da      	str	r2, [r3, #28]
      break;
 8003e8c:	e77b      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x8e>
  __HAL_LOCK(htim);
 8003e8e:	2002      	movs	r0, #2
}
 8003e90:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8003e92:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e94:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003e98:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e9a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e9e:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ea2:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ea6:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eaa:	ea4e 0404 	orr.w	r4, lr, r4
 8003eae:	e786      	b.n	8003dbe <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eb0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eb6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eba:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ebe:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec2:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eca:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 8003ece:	e7a1      	b.n	8003e14 <HAL_TIM_PWM_ConfigChannel+0x11c>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ed0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ed2:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ed6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003eda:	e742      	b.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003edc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ede:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ee2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ee6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eea:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eee:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ef6:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 8003efa:	e7b6      	b.n	8003e6a <HAL_TIM_PWM_ConfigChannel+0x172>
 8003efc:	40010000 	.word	0x40010000

08003f00 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003f00:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d071      	beq.n	8003fec <HAL_TIM_ConfigClockSource+0xec>
 8003f08:	4602      	mov	r2, r0
{
 8003f0a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003f0e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8003f14:	2001      	movs	r0, #1
 8003f16:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003f1a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f20:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003f24:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003f26:	680b      	ldr	r3, [r1, #0]
 8003f28:	2b60      	cmp	r3, #96	@ 0x60
 8003f2a:	d061      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0xf0>
 8003f2c:	d824      	bhi.n	8003f78 <HAL_TIM_ConfigClockSource+0x78>
 8003f2e:	2b40      	cmp	r3, #64	@ 0x40
 8003f30:	d077      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x122>
 8003f32:	d94a      	bls.n	8003fca <HAL_TIM_ConfigClockSource+0xca>
 8003f34:	2b50      	cmp	r3, #80	@ 0x50
 8003f36:	d117      	bne.n	8003f68 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f38:	684b      	ldr	r3, [r1, #4]
 8003f3a:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f3c:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f3e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003f42:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f44:	6a23      	ldr	r3, [r4, #32]
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f4c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f52:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f56:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003f58:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f5a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f60:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f64:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f66:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003f6a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003f70:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8003f74:	bc30      	pop	{r4, r5}
 8003f76:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7c:	d0f3      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0x66>
 8003f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f82:	d110      	bne.n	8003fa6 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f84:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003f88:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f8a:	432b      	orrs	r3, r5
 8003f8c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f8e:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f92:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003f96:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f98:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f9a:	68a3      	ldr	r3, [r4, #8]
 8003f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fa0:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e7e0      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003fa6:	2b70      	cmp	r3, #112	@ 0x70
 8003fa8:	d1de      	bne.n	8003f68 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003faa:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003fae:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb0:	432b      	orrs	r3, r5
 8003fb2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb4:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003fbc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003fbe:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003fc0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fc2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003fc6:	60a3      	str	r3, [r4, #8]
      break;
 8003fc8:	e7cd      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d002      	beq.n	8003fd4 <HAL_TIM_ConfigClockSource+0xd4>
 8003fce:	d909      	bls.n	8003fe4 <HAL_TIM_ConfigClockSource+0xe4>
 8003fd0:	2b30      	cmp	r3, #48	@ 0x30
 8003fd2:	d1c9      	bne.n	8003f68 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8003fd4:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fd6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003fe0:	60a3      	str	r3, [r4, #8]
}
 8003fe2:	e7c0      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003fe4:	f033 0110 	bics.w	r1, r3, #16
 8003fe8:	d1be      	bne.n	8003f68 <HAL_TIM_ConfigClockSource+0x68>
 8003fea:	e7f3      	b.n	8003fd4 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8003fec:	2002      	movs	r0, #2
}
 8003fee:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff0:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff2:	6848      	ldr	r0, [r1, #4]
 8003ff4:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff6:	f023 0310 	bic.w	r3, r3, #16
 8003ffa:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffc:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8003ffe:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004000:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004004:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004008:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800400c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004010:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004012:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004014:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800401a:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800401e:	60a3      	str	r3, [r4, #8]
}
 8004020:	e7a1      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004022:	684b      	ldr	r3, [r1, #4]
 8004024:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8004026:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004028:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800402c:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402e:	6a23      	ldr	r3, [r4, #32]
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004036:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004038:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800403c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004040:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004042:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004044:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800404a:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800404e:	60a3      	str	r3, [r4, #8]
}
 8004050:	e789      	b.n	8003f66 <HAL_TIM_ConfigClockSource+0x66>
 8004052:	bf00      	nop

08004054 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004054:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004058:	2a01      	cmp	r2, #1
 800405a:	d050      	beq.n	80040fe <HAL_TIM_SlaveConfigSynchro+0xaa>
 800405c:	4603      	mov	r3, r0
{
 800405e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8004062:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8004068:	2001      	movs	r0, #1
 800406a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800406e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004070:	6848      	ldr	r0, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004072:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004074:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004078:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800407a:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800407e:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 8004080:	2850      	cmp	r0, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 8004082:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004084:	d060      	beq.n	8004148 <HAL_TIM_SlaveConfigSynchro+0xf4>
 8004086:	d90f      	bls.n	80040a8 <HAL_TIM_SlaveConfigSynchro+0x54>
 8004088:	2860      	cmp	r0, #96	@ 0x60
 800408a:	d03a      	beq.n	8004102 <HAL_TIM_SlaveConfigSynchro+0xae>
 800408c:	2870      	cmp	r0, #112	@ 0x70
 800408e:	d10e      	bne.n	80040ae <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004090:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8004094:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004096:	432a      	orrs	r2, r5
 8004098:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409a:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800409e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80040a2:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80040a4:	60a2      	str	r2, [r4, #8]
 80040a6:	e00f      	b.n	80040c8 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 80040a8:	2840      	cmp	r0, #64	@ 0x40
 80040aa:	d03d      	beq.n	8004128 <HAL_TIM_SlaveConfigSynchro+0xd4>
 80040ac:	d907      	bls.n	80040be <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 80040ae:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80040b0:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80040b2:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80040ba:	bc30      	pop	{r4, r5}
 80040bc:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80040be:	2820      	cmp	r0, #32
 80040c0:	d002      	beq.n	80040c8 <HAL_TIM_SlaveConfigSynchro+0x74>
 80040c2:	d912      	bls.n	80040ea <HAL_TIM_SlaveConfigSynchro+0x96>
 80040c4:	2830      	cmp	r0, #48	@ 0x30
 80040c6:	d1f2      	bne.n	80040ae <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80040c8:	68e2      	ldr	r2, [r4, #12]
 80040ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040ce:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80040d0:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 80040d2:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80040d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040da:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80040e0:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 80040e4:	4608      	mov	r0, r1
}
 80040e6:	bc30      	pop	{r4, r5}
 80040e8:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80040ea:	f030 0210 	bics.w	r2, r0, #16
 80040ee:	d0eb      	beq.n	80040c8 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 80040f0:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80040f2:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80040f4:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80040fc:	e7dd      	b.n	80040ba <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 80040fe:	2002      	movs	r0, #2
}
 8004100:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004102:	6a22      	ldr	r2, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004104:	6888      	ldr	r0, [r1, #8]
 8004106:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004108:	f022 0210 	bic.w	r2, r2, #16
 800410c:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410e:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8004110:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004112:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004116:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800411a:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800411e:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004122:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004124:	6222      	str	r2, [r4, #32]
 8004126:	e7cf      	b.n	80040c8 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004128:	2d05      	cmp	r5, #5
 800412a:	d0c0      	beq.n	80040ae <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 800412c:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800412e:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004130:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004138:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800413a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800413e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004142:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004144:	6220      	str	r0, [r4, #32]
      break;
 8004146:	e7bf      	b.n	80040c8 <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004148:	688a      	ldr	r2, [r1, #8]
 800414a:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 800414c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004152:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004154:	6a22      	ldr	r2, [r4, #32]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415c:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800415e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004162:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004166:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004168:	6221      	str	r1, [r4, #32]
 800416a:	e7ad      	b.n	80040c8 <HAL_TIM_SlaveConfigSynchro+0x74>

0800416c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop

08004170 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop

08004174 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop

08004178 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop

0800417c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800417c:	6803      	ldr	r3, [r0, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	0791      	lsls	r1, r2, #30
{
 8004182:	b510      	push	{r4, lr}
 8004184:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004186:	d502      	bpl.n	800418e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	0792      	lsls	r2, r2, #30
 800418c:	d45f      	bmi.n	800424e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	0750      	lsls	r0, r2, #29
 8004192:	d502      	bpl.n	800419a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	0751      	lsls	r1, r2, #29
 8004198:	d446      	bmi.n	8004228 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	0712      	lsls	r2, r2, #28
 800419e:	d502      	bpl.n	80041a6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	0710      	lsls	r0, r2, #28
 80041a4:	d42e      	bmi.n	8004204 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	06d2      	lsls	r2, r2, #27
 80041aa:	d502      	bpl.n	80041b2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	06d0      	lsls	r0, r2, #27
 80041b0:	d418      	bmi.n	80041e4 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	07d1      	lsls	r1, r2, #31
 80041b6:	d502      	bpl.n	80041be <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	07d2      	lsls	r2, r2, #31
 80041bc:	d45d      	bmi.n	800427a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	0610      	lsls	r0, r2, #24
 80041c2:	d502      	bpl.n	80041ca <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	0611      	lsls	r1, r2, #24
 80041c8:	d45f      	bmi.n	800428a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	0652      	lsls	r2, r2, #25
 80041ce:	d502      	bpl.n	80041d6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	0650      	lsls	r0, r2, #25
 80041d4:	d461      	bmi.n	800429a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	0691      	lsls	r1, r2, #26
 80041da:	d502      	bpl.n	80041e2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	0692      	lsls	r2, r2, #26
 80041e0:	d443      	bmi.n	800426a <HAL_TIM_IRQHandler+0xee>
}
 80041e2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041e4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e8:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041ea:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80041f4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041f6:	d064      	beq.n	80042c2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80041f8:	f7ff ffba 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041fe:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004200:	7722      	strb	r2, [r4, #28]
 8004202:	e7d6      	b.n	80041b2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004204:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004208:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800420a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800420c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004214:	d152      	bne.n	80042bc <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	f7ff ffa9 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421a:	4620      	mov	r0, r4
 800421c:	f7ff ffaa 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004220:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004222:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004224:	7722      	strb	r2, [r4, #28]
 8004226:	e7be      	b.n	80041a6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004228:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800422c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800422e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004230:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004238:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800423a:	d13c      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423c:	f7ff ff96 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	4620      	mov	r0, r4
 8004242:	f7ff ff97 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004248:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	7722      	strb	r2, [r4, #28]
 800424c:	e7a5      	b.n	800419a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800424e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004252:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004254:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004256:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	079b      	lsls	r3, r3, #30
 800425c:	d025      	beq.n	80042aa <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800425e:	f7ff ff87 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004264:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004266:	7722      	strb	r2, [r4, #28]
 8004268:	e791      	b.n	800418e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800426a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800426e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004270:	611a      	str	r2, [r3, #16]
}
 8004272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004276:	f000 b9dd 	b.w	8004634 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800427a:	f06f 0201 	mvn.w	r2, #1
 800427e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004280:	4620      	mov	r0, r4
 8004282:	f7fc fbe1 	bl	8000a48 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	e799      	b.n	80041be <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800428a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800428e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004290:	4620      	mov	r0, r4
 8004292:	f000 f9d1 	bl	8004638 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	e797      	b.n	80041ca <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800429a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800429e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff ff69 	bl	8004178 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	e795      	b.n	80041d6 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042aa:	f7ff ff5f 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ae:	4620      	mov	r0, r4
 80042b0:	f7ff ff60 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
 80042b4:	e7d5      	b.n	8004262 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80042b6:	f7ff ff5b 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
 80042ba:	e7c4      	b.n	8004246 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80042bc:	f7ff ff58 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
 80042c0:	e7ae      	b.n	8004220 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c2:	f7ff ff53 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7ff ff54 	bl	8004174 <HAL_TIM_PWM_PulseFinishedCallback>
 80042cc:	e796      	b.n	80041fc <HAL_TIM_IRQHandler+0x80>
 80042ce:	bf00      	nop

080042d0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d0:	4a35      	ldr	r2, [pc, #212]	@ (80043a8 <TIM_Base_SetConfig+0xd8>)
  tmpcr1 = TIMx->CR1;
 80042d2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d4:	4290      	cmp	r0, r2
{
 80042d6:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042d8:	d04d      	beq.n	8004376 <TIM_Base_SetConfig+0xa6>
 80042da:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80042de:	d034      	beq.n	800434a <TIM_Base_SetConfig+0x7a>
 80042e0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80042e4:	4290      	cmp	r0, r2
 80042e6:	d030      	beq.n	800434a <TIM_Base_SetConfig+0x7a>
 80042e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042ec:	4290      	cmp	r0, r2
 80042ee:	d02c      	beq.n	800434a <TIM_Base_SetConfig+0x7a>
 80042f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042f4:	4290      	cmp	r0, r2
 80042f6:	d028      	beq.n	800434a <TIM_Base_SetConfig+0x7a>
 80042f8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80042fc:	4290      	cmp	r0, r2
 80042fe:	d03a      	beq.n	8004376 <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004300:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004304:	4290      	cmp	r0, r2
 8004306:	d024      	beq.n	8004352 <TIM_Base_SetConfig+0x82>
 8004308:	4a28      	ldr	r2, [pc, #160]	@ (80043ac <TIM_Base_SetConfig+0xdc>)
 800430a:	4290      	cmp	r0, r2
 800430c:	d021      	beq.n	8004352 <TIM_Base_SetConfig+0x82>
 800430e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004312:	4290      	cmp	r0, r2
 8004314:	d01d      	beq.n	8004352 <TIM_Base_SetConfig+0x82>
 8004316:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800431a:	4290      	cmp	r0, r2
 800431c:	d019      	beq.n	8004352 <TIM_Base_SetConfig+0x82>
 800431e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004322:	4290      	cmp	r0, r2
 8004324:	d015      	beq.n	8004352 <TIM_Base_SetConfig+0x82>
 8004326:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800432a:	4290      	cmp	r0, r2
 800432c:	d011      	beq.n	8004352 <TIM_Base_SetConfig+0x82>
  TIMx->ARR = (uint32_t)Structure->Period ;
 800432e:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004330:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004332:	6949      	ldr	r1, [r1, #20]
 8004334:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004338:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800433a:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800433c:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800433e:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004340:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8004342:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->EGR = TIM_EGR_UG;
 8004346:	6143      	str	r3, [r0, #20]
}
 8004348:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800434a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800434c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004350:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004352:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004354:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800435c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004360:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004362:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004364:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004366:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004368:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800436a:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800436c:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800436e:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->EGR = TIM_EGR_UG;
 8004372:	6143      	str	r3, [r0, #20]
}
 8004374:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004376:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004378:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800437a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800437e:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8004380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004384:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004386:	694a      	ldr	r2, [r1, #20]
}
 8004388:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800438c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004390:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004392:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004394:	688b      	ldr	r3, [r1, #8]
 8004396:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004398:	680b      	ldr	r3, [r1, #0]
 800439a:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800439c:	690b      	ldr	r3, [r1, #16]
 800439e:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80043a0:	2301      	movs	r3, #1
 80043a2:	6143      	str	r3, [r0, #20]
}
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40014400 	.word	0x40014400

080043b0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b0:	6a03      	ldr	r3, [r0, #32]
 80043b2:	f023 0310 	bic.w	r3, r3, #16
 80043b6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80043b8:	6a03      	ldr	r3, [r0, #32]
{
 80043ba:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80043bc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80043be:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043c2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043ca:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80043cc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043d4:	4d0e      	ldr	r5, [pc, #56]	@ (8004410 <TIM_OC2_SetConfig+0x60>)
 80043d6:	42a8      	cmp	r0, r5
 80043d8:	d00a      	beq.n	80043f0 <TIM_OC2_SetConfig+0x40>
 80043da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80043de:	42a8      	cmp	r0, r5
 80043e0:	d006      	beq.n	80043f0 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 80043e2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80043e4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80043e6:	6182      	str	r2, [r0, #24]
}
 80043e8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80043ea:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80043ec:	6203      	str	r3, [r0, #32]
}
 80043ee:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043f0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80043f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043fa:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043fe:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004402:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8004406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800440a:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 800440e:	e7e8      	b.n	80043e2 <TIM_OC2_SetConfig+0x32>
 8004410:	40010000 	.word	0x40010000

08004414 <TIM_TI1_SetConfig>:
{
 8004414:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004416:	6a04      	ldr	r4, [r0, #32]
 8004418:	f024 0401 	bic.w	r4, r4, #1
 800441c:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800441e:	4c1b      	ldr	r4, [pc, #108]	@ (800448c <TIM_TI1_SetConfig+0x78>)
  tmpccmr1 = TIMx->CCMR1;
 8004420:	6985      	ldr	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8004422:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004424:	42a0      	cmp	r0, r4
{
 8004426:	4694      	mov	ip, r2
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004428:	d01c      	beq.n	8004464 <TIM_TI1_SetConfig+0x50>
 800442a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800442e:	d019      	beq.n	8004464 <TIM_TI1_SetConfig+0x50>
 8004430:	4a17      	ldr	r2, [pc, #92]	@ (8004490 <TIM_TI1_SetConfig+0x7c>)
 8004432:	4290      	cmp	r0, r2
 8004434:	d016      	beq.n	8004464 <TIM_TI1_SetConfig+0x50>
 8004436:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800443a:	4290      	cmp	r0, r2
 800443c:	d012      	beq.n	8004464 <TIM_TI1_SetConfig+0x50>
 800443e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004442:	4290      	cmp	r0, r2
 8004444:	d00e      	beq.n	8004464 <TIM_TI1_SetConfig+0x50>
 8004446:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800444a:	4290      	cmp	r0, r2
 800444c:	d00a      	beq.n	8004464 <TIM_TI1_SetConfig+0x50>
 800444e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004452:	4290      	cmp	r0, r2
 8004454:	d006      	beq.n	8004464 <TIM_TI1_SetConfig+0x50>
 8004456:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800445a:	4290      	cmp	r0, r2
 800445c:	d002      	beq.n	8004464 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800445e:	f045 0201 	orr.w	r2, r5, #1
 8004462:	e003      	b.n	800446c <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004464:	f025 0203 	bic.w	r2, r5, #3
    tmpccmr1 |= TIM_ICSelection;
 8004468:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800446c:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800446e:	f026 0c0a 	bic.w	ip, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004472:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004476:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004478:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800447c:	4313      	orrs	r3, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800447e:	ea41 010c 	orr.w	r1, r1, ip
  TIMx->CCMR1 = tmpccmr1;
 8004482:	6183      	str	r3, [r0, #24]
}
 8004484:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8004486:	6201      	str	r1, [r0, #32]
}
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40000400 	.word	0x40000400

08004494 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop

08004498 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8004498:	2800      	cmp	r0, #0
 800449a:	d05f      	beq.n	800455c <HAL_TIMEx_HallSensor_Init+0xc4>
{
 800449c:	b530      	push	{r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800449e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
{
 80044a2:	b089      	sub	sp, #36	@ 0x24
 80044a4:	460d      	mov	r5, r1
 80044a6:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80044a8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d050      	beq.n	8004552 <HAL_TIMEx_HallSensor_Init+0xba>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80044b2:	2302      	movs	r3, #2
 80044b4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b8:	f851 0b04 	ldr.w	r0, [r1], #4
 80044bc:	f7ff ff08 	bl	80042d0 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80044c0:	68ab      	ldr	r3, [r5, #8]
 80044c2:	6829      	ldr	r1, [r5, #0]
 80044c4:	6820      	ldr	r0, [r4, #0]
 80044c6:	2203      	movs	r2, #3
 80044c8:	f7ff ffa4 	bl	8004414 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044cc:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80044ce:	6869      	ldr	r1, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044d0:	6983      	ldr	r3, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80044d2:	68ea      	ldr	r2, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044d4:	f023 030c 	bic.w	r3, r3, #12
 80044d8:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80044da:	6983      	ldr	r3, [r0, #24]
 80044dc:	430b      	orrs	r3, r1
 80044de:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80044e0:	6843      	ldr	r3, [r0, #4]
 80044e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e6:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80044e8:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80044ea:	9202      	str	r2, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80044ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f0:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80044f2:	6883      	ldr	r3, [r0, #8]
 80044f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044f8:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80044fa:	6883      	ldr	r3, [r0, #8]
 80044fc:	f023 0307 	bic.w	r3, r3, #7
 8004500:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004502:	6883      	ldr	r3, [r0, #8]
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800450a:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800450c:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800450e:	2370      	movs	r3, #112	@ 0x70
 8004510:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004512:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004516:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800451a:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800451c:	f7ff ff48 	bl	80043b0 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004520:	6822      	ldr	r2, [r4, #0]
 8004522:	6851      	ldr	r1, [r2, #4]
 8004524:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004528:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800452a:	6851      	ldr	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800452c:	2301      	movs	r3, #1
  return HAL_OK;
 800452e:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004530:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 8004534:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004536:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800453a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800453e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004542:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 800454a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800454e:	b009      	add	sp, #36	@ 0x24
 8004550:	bd30      	pop	{r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8004552:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004556:	f7ff ff9d 	bl	8004494 <HAL_TIMEx_HallSensor_MspInit>
 800455a:	e7a9      	b.n	80044b0 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 800455c:	2001      	movs	r0, #1
}
 800455e:	4770      	bx	lr

08004560 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004560:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004564:	2a01      	cmp	r2, #1
 8004566:	d037      	beq.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8004568:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800456a:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	2002      	movs	r0, #2
{
 800456e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004574:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004578:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800457a:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800457e:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004580:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004582:	4816      	ldr	r0, [pc, #88]	@ (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8004584:	4282      	cmp	r2, r0
 8004586:	d01a      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004588:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800458c:	d017      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800458e:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8004592:	4282      	cmp	r2, r0
 8004594:	d013      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004596:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800459a:	4282      	cmp	r2, r0
 800459c:	d00f      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800459e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80045a2:	4282      	cmp	r2, r0
 80045a4:	d00b      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80045a6:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 80045aa:	4282      	cmp	r2, r0
 80045ac:	d007      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80045ae:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80045b2:	4282      	cmp	r2, r0
 80045b4:	d003      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80045b6:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80045ba:	4282      	cmp	r2, r0
 80045bc:	d104      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045be:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045c4:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c6:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80045c8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80045d0:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80045d4:	bc30      	pop	{r4, r5}
 80045d6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80045d8:	2002      	movs	r0, #2
}
 80045da:	4770      	bx	lr
 80045dc:	40010000 	.word	0x40010000

080045e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d023      	beq.n	8004630 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 80045e8:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045ea:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80045ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f2:	4602      	mov	r2, r0
 80045f4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045f6:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045f8:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045fe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004600:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004604:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004606:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800460c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800460e:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004610:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004612:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004616:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004618:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800461c:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 800461e:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004620:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8004622:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8004624:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8004628:	4608      	mov	r0, r1
}
 800462a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800462e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004630:	2002      	movs	r0, #2
}
 8004632:	4770      	bx	lr

08004634 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop

08004638 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop

0800463c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800463c:	2800      	cmp	r0, #0
 800463e:	f000 8086 	beq.w	800474e <HAL_UART_Init+0x112>
{
 8004642:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004644:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004648:	4604      	mov	r4, r0
 800464a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800464e:	2b00      	cmp	r3, #0
 8004650:	d078      	beq.n	8004744 <HAL_UART_Init+0x108>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004652:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004654:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8004656:	2224      	movs	r2, #36	@ 0x24
 8004658:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004662:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004664:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004666:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004668:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800466c:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800466e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004670:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004672:	4302      	orrs	r2, r0
 8004674:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004676:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004678:	4302      	orrs	r2, r0
 800467a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800467c:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8004680:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004684:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004686:	430a      	orrs	r2, r1
 8004688:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800468e:	4931      	ldr	r1, [pc, #196]	@ (8004754 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004690:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004694:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004696:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004698:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800469a:	d035      	beq.n	8004708 <HAL_UART_Init+0xcc>
 800469c:	4a2e      	ldr	r2, [pc, #184]	@ (8004758 <HAL_UART_Init+0x11c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d032      	beq.n	8004708 <HAL_UART_Init+0xcc>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046a2:	f7fe ff47 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a6:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046a8:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046aa:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046ae:	e9d4 5300 	ldrd	r5, r3, [r4]
 80046b2:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b6:	d02a      	beq.n	800470e <HAL_UART_Init+0xd2>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b8:	009a      	lsls	r2, r3, #2
 80046ba:	0f9b      	lsrs	r3, r3, #30
 80046bc:	f7fb fda8 	bl	8000210 <__aeabi_uldivmod>
 80046c0:	4a26      	ldr	r2, [pc, #152]	@ (800475c <HAL_UART_Init+0x120>)
 80046c2:	fba2 1300 	umull	r1, r3, r2, r0
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	2164      	movs	r1, #100	@ 0x64
 80046ca:	fb01 0013 	mls	r0, r1, r3, r0
 80046ce:	0100      	lsls	r0, r0, #4
 80046d0:	3032      	adds	r0, #50	@ 0x32
 80046d2:	fba2 2000 	umull	r2, r0, r2, r0
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80046dc:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046de:	692b      	ldr	r3, [r5, #16]
 80046e0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80046e4:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e6:	696b      	ldr	r3, [r5, #20]
 80046e8:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80046ec:	616b      	str	r3, [r5, #20]
  __HAL_UART_ENABLE(huart);
 80046ee:	68eb      	ldr	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f0:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80046f2:	2220      	movs	r2, #32
  __HAL_UART_ENABLE(huart);
 80046f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046f8:	60eb      	str	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fa:	6421      	str	r1, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046fc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004700:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  return HAL_OK;
 8004704:	4608      	mov	r0, r1
}
 8004706:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004708:	f7fe ff24 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 800470c:	e7cb      	b.n	80046a6 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800470e:	18da      	adds	r2, r3, r3
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	415b      	adcs	r3, r3
 8004716:	f7fb fd7b 	bl	8000210 <__aeabi_uldivmod>
 800471a:	4a10      	ldr	r2, [pc, #64]	@ (800475c <HAL_UART_Init+0x120>)
 800471c:	fba2 3100 	umull	r3, r1, r2, r0
 8004720:	0949      	lsrs	r1, r1, #5
 8004722:	2364      	movs	r3, #100	@ 0x64
 8004724:	fb03 0311 	mls	r3, r3, r1, r0
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	3332      	adds	r3, #50	@ 0x32
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800473a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800473e:	4413      	add	r3, r2
 8004740:	60ab      	str	r3, [r5, #8]
 8004742:	e7cc      	b.n	80046de <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8004744:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 8004748:	f7fd fcda 	bl	8002100 <HAL_UART_MspInit>
 800474c:	e781      	b.n	8004652 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 800474e:	2001      	movs	r0, #1
}
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40011000 	.word	0x40011000
 8004758:	40011400 	.word	0x40011400
 800475c:	51eb851f 	.word	0x51eb851f

08004760 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004760:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004762:	f000 ff05 	bl	8005570 <vTaskStartScheduler>
  
  return osOK;
}
 8004766:	2000      	movs	r0, #0
 8004768:	bd08      	pop	{r3, pc}
 800476a:	bf00      	nop

0800476c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	4684      	mov	ip, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004770:	6945      	ldr	r5, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004772:	f8dc 2010 	ldr.w	r2, [ip, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004776:	6840      	ldr	r0, [r0, #4]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004778:	f9bc e008 	ldrsh.w	lr, [ip, #8]
{
 800477c:	460b      	mov	r3, r1
 800477e:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004780:	f8dc 1000 	ldr.w	r1, [ip]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004784:	b17d      	cbz	r5, 80047a6 <osThreadCreate+0x3a>
 8004786:	f8dc 6018 	ldr.w	r6, [ip, #24]
 800478a:	b166      	cbz	r6, 80047a6 <osThreadCreate+0x3a>
  if (priority != osPriorityError) {
 800478c:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8004790:	bf14      	ite	ne
 8004792:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004796:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004798:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800479c:	9400      	str	r4, [sp, #0]
 800479e:	f000 fd6b 	bl	8005278 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80047a2:	b006      	add	sp, #24
 80047a4:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80047a6:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 80047aa:	bf14      	ite	ne
 80047ac:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047b0:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047b2:	9400      	str	r4, [sp, #0]
 80047b4:	ac05      	add	r4, sp, #20
 80047b6:	b292      	uxth	r2, r2
 80047b8:	9401      	str	r4, [sp, #4]
 80047ba:	f000 fe0d 	bl	80053d8 <xTaskCreate>
 80047be:	2801      	cmp	r0, #1
  return handle;
 80047c0:	bf0c      	ite	eq
 80047c2:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 80047c4:	2000      	movne	r0, #0
}
 80047c6:	b006      	add	sp, #24
 80047c8:	bd70      	pop	{r4, r5, r6, pc}
 80047ca:	bf00      	nop

080047cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80047cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047d0:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80047d2:	f000 ff61 	bl	8005698 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80047d6:	4a51      	ldr	r2, [pc, #324]	@ (800491c <pvPortMalloc+0x150>)
 80047d8:	6815      	ldr	r5, [r2, #0]
 80047da:	2d00      	cmp	r5, #0
 80047dc:	d035      	beq.n	800484a <pvPortMalloc+0x7e>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047de:	4b50      	ldr	r3, [pc, #320]	@ (8004920 <pvPortMalloc+0x154>)
 80047e0:	681e      	ldr	r6, [r3, #0]
 80047e2:	4234      	tst	r4, r6
 80047e4:	d12b      	bne.n	800483e <pvPortMalloc+0x72>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047e6:	b354      	cbz	r4, 800483e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80047e8:	f104 0008 	add.w	r0, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047ec:	0764      	lsls	r4, r4, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047ee:	bf1c      	itt	ne
 80047f0:	f020 0007 	bicne.w	r0, r0, #7
 80047f4:	3008      	addne	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047f6:	b310      	cbz	r0, 800483e <pvPortMalloc+0x72>
 80047f8:	f8df e138 	ldr.w	lr, [pc, #312]	@ 8004934 <pvPortMalloc+0x168>
 80047fc:	f8de c000 	ldr.w	ip, [lr]
 8004800:	4584      	cmp	ip, r0
 8004802:	d31c      	bcc.n	800483e <pvPortMalloc+0x72>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8004804:	4c47      	ldr	r4, [pc, #284]	@ (8004924 <pvPortMalloc+0x158>)
 8004806:	6823      	ldr	r3, [r4, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004808:	e003      	b.n	8004812 <pvPortMalloc+0x46>
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	b122      	cbz	r2, 8004818 <pvPortMalloc+0x4c>
 800480e:	461c      	mov	r4, r3
 8004810:	4613      	mov	r3, r2
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	4281      	cmp	r1, r0
 8004816:	d3f8      	bcc.n	800480a <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004818:	42ab      	cmp	r3, r5
 800481a:	d010      	beq.n	800483e <pvPortMalloc+0x72>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	6022      	str	r2, [r4, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004820:	1a0a      	subs	r2, r1, r0
 8004822:	2a10      	cmp	r2, #16
 8004824:	d946      	bls.n	80048b4 <pvPortMalloc+0xe8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004826:	181c      	adds	r4, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004828:	0761      	lsls	r1, r4, #29
 800482a:	d02c      	beq.n	8004886 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	e7fe      	b.n	800483c <pvPortMalloc+0x70>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800483e:	f000 ff33 	bl	80056a8 <xTaskResumeAll>
void *pvReturn = NULL;
 8004842:	2400      	movs	r4, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8004844:	4620      	mov	r0, r4
 8004846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800484a:	4b37      	ldr	r3, [pc, #220]	@ (8004928 <pvPortMalloc+0x15c>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800484c:	4835      	ldr	r0, [pc, #212]	@ (8004924 <pvPortMalloc+0x158>)
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800484e:	4f34      	ldr	r7, [pc, #208]	@ (8004920 <pvPortMalloc+0x154>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004850:	075d      	lsls	r5, r3, #29
	uxAddress -= xHeapStructSize;
 8004852:	4d36      	ldr	r5, [pc, #216]	@ (800492c <pvPortMalloc+0x160>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004854:	bf18      	it	ne
 8004856:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004858:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800485c:	bf18      	it	ne
 800485e:	f023 0307 	bicne.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8004862:	6015      	str	r5, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004864:	4a32      	ldr	r2, [pc, #200]	@ (8004930 <pvPortMalloc+0x164>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004866:	6003      	str	r3, [r0, #0]
 8004868:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800486a:	1aeb      	subs	r3, r5, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800486c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800486e:	4a31      	ldr	r2, [pc, #196]	@ (8004934 <pvPortMalloc+0x168>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004870:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004874:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004876:	2200      	movs	r2, #0
 8004878:	6042      	str	r2, [r0, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800487a:	603e      	str	r6, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800487c:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004880:	e9c1 5300 	strd	r5, r3, [r1]
}
 8004884:	e7ad      	b.n	80047e2 <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004886:	6062      	str	r2, [r4, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004888:	4a26      	ldr	r2, [pc, #152]	@ (8004924 <pvPortMalloc+0x158>)
						pxBlock->xBlockSize = xWantedSize;
 800488a:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800488c:	4617      	mov	r7, r2
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	4294      	cmp	r4, r2
 8004892:	d8fb      	bhi.n	800488c <pvPortMalloc+0xc0>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004894:	6879      	ldr	r1, [r7, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004896:	f8d4 8004 	ldr.w	r8, [r4, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800489a:	eb07 0901 	add.w	r9, r7, r1
 800489e:	454c      	cmp	r4, r9
 80048a0:	d028      	beq.n	80048f4 <pvPortMalloc+0x128>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048a2:	eb04 0108 	add.w	r1, r4, r8
 80048a6:	428a      	cmp	r2, r1
 80048a8:	d02e      	beq.n	8004908 <pvPortMalloc+0x13c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048aa:	6022      	str	r2, [r4, #0]
 80048ac:	4601      	mov	r1, r0

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048ae:	42a7      	cmp	r7, r4
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048b0:	bf18      	it	ne
 80048b2:	603c      	strne	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048b4:	481e      	ldr	r0, [pc, #120]	@ (8004930 <pvPortMalloc+0x164>)
 80048b6:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048b8:	ebac 0201 	sub.w	r2, ip, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048bc:	42a2      	cmp	r2, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048be:	bf38      	it	cc
 80048c0:	6002      	strcc	r2, [r0, #0]
					xNumberOfSuccessfulAllocations++;
 80048c2:	481d      	ldr	r0, [pc, #116]	@ (8004938 <pvPortMalloc+0x16c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048c4:	f8ce 2000 	str.w	r2, [lr]
					xNumberOfSuccessfulAllocations++;
 80048c8:	6802      	ldr	r2, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048ca:	4331      	orrs	r1, r6
					pxBlock->pxNextFreeBlock = NULL;
 80048cc:	2500      	movs	r5, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048ce:	f103 0408 	add.w	r4, r3, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048d2:	6059      	str	r1, [r3, #4]
					xNumberOfSuccessfulAllocations++;
 80048d4:	3201      	adds	r2, #1
					pxBlock->pxNextFreeBlock = NULL;
 80048d6:	601d      	str	r5, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80048d8:	6002      	str	r2, [r0, #0]
	( void ) xTaskResumeAll();
 80048da:	f000 fee5 	bl	80056a8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048de:	0763      	lsls	r3, r4, #29
 80048e0:	d0b0      	beq.n	8004844 <pvPortMalloc+0x78>
 80048e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	e7fe      	b.n	80048f2 <pvPortMalloc+0x126>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048f4:	4488      	add	r8, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048f6:	eb07 0108 	add.w	r1, r7, r8
 80048fa:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048fc:	f8c7 8004 	str.w	r8, [r7, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004900:	d001      	beq.n	8004906 <pvPortMalloc+0x13a>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004902:	6859      	ldr	r1, [r3, #4]
 8004904:	e7d6      	b.n	80048b4 <pvPortMalloc+0xe8>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004906:	463c      	mov	r4, r7
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004908:	42aa      	cmp	r2, r5
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800490a:	bf1c      	itt	ne
 800490c:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800490e:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004910:	6022      	str	r2, [r4, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004912:	bf1c      	itt	ne
 8004914:	4441      	addne	r1, r8
 8004916:	6061      	strne	r1, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004918:	6859      	ldr	r1, [r3, #4]
 800491a:	e7c8      	b.n	80048ae <pvPortMalloc+0xe2>
 800491c:	20000c50 	.word	0x20000c50
 8004920:	20000c3c 	.word	0x20000c3c
 8004924:	20000c54 	.word	0x20000c54
 8004928:	20000c5c 	.word	0x20000c5c
 800492c:	20004854 	.word	0x20004854
 8004930:	20000c48 	.word	0x20000c48
 8004934:	20000c4c 	.word	0x20000c4c
 8004938:	20000c44 	.word	0x20000c44

0800493c <vPortFree>:
	if( pv != NULL )
 800493c:	b1d0      	cbz	r0, 8004974 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800493e:	4a2c      	ldr	r2, [pc, #176]	@ (80049f0 <vPortFree+0xb4>)
 8004940:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	4213      	tst	r3, r2
 8004948:	d00b      	beq.n	8004962 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800494a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800494e:	b191      	cbz	r1, 8004976 <vPortFree+0x3a>
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	e7fe      	b.n	8004960 <vPortFree+0x24>
 8004962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004972:	e7fe      	b.n	8004972 <vPortFree+0x36>
 8004974:	4770      	bx	lr
{
 8004976:	b570      	push	{r4, r5, r6, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004978:	ea23 0302 	bic.w	r3, r3, r2
{
 800497c:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800497e:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004982:	4c1c      	ldr	r4, [pc, #112]	@ (80049f4 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004984:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8004986:	f000 fe87 	bl	8005698 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800498a:	9801      	ldr	r0, [sp, #4]
 800498c:	6822      	ldr	r2, [r4, #0]
 800498e:	f850 5c04 	ldr.w	r5, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004992:	4b19      	ldr	r3, [pc, #100]	@ (80049f8 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004994:	1951      	adds	r1, r2, r5
 8004996:	6021      	str	r1, [r4, #0]
		puc -= xHeapStructSize;
 8004998:	f1a0 0208 	sub.w	r2, r0, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800499c:	4619      	mov	r1, r3
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d8fb      	bhi.n	800499c <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049a4:	684e      	ldr	r6, [r1, #4]
 80049a6:	198c      	adds	r4, r1, r6
 80049a8:	42a2      	cmp	r2, r4
 80049aa:	d011      	beq.n	80049d0 <vPortFree+0x94>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049ac:	eb02 0e05 	add.w	lr, r2, r5
 80049b0:	4573      	cmp	r3, lr
 80049b2:	d013      	beq.n	80049dc <vPortFree+0xa0>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049b4:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
 80049b8:	4291      	cmp	r1, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049ba:	bf18      	it	ne
 80049bc:	600a      	strne	r2, [r1, #0]
					xNumberOfSuccessfulFrees++;
 80049be:	4a0f      	ldr	r2, [pc, #60]	@ (80049fc <vPortFree+0xc0>)
 80049c0:	6813      	ldr	r3, [r2, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	6013      	str	r3, [r2, #0]
}
 80049c6:	b002      	add	sp, #8
 80049c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				( void ) xTaskResumeAll();
 80049cc:	f000 be6c 	b.w	80056a8 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049d0:	4435      	add	r5, r6
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049d2:	194a      	adds	r2, r1, r5
 80049d4:	4293      	cmp	r3, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049d6:	604d      	str	r5, [r1, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049d8:	d1f1      	bne.n	80049be <vPortFree+0x82>
 80049da:	460a      	mov	r2, r1
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049dc:	4808      	ldr	r0, [pc, #32]	@ (8004a00 <vPortFree+0xc4>)
 80049de:	6800      	ldr	r0, [r0, #0]
 80049e0:	4283      	cmp	r3, r0
 80049e2:	d003      	beq.n	80049ec <vPortFree+0xb0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049e4:	e9d3 0400 	ldrd	r0, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049e8:	1963      	adds	r3, r4, r5
 80049ea:	6053      	str	r3, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049ec:	6010      	str	r0, [r2, #0]
 80049ee:	e7e3      	b.n	80049b8 <vPortFree+0x7c>
 80049f0:	20000c3c 	.word	0x20000c3c
 80049f4:	20000c4c 	.word	0x20000c4c
 80049f8:	20000c54 	.word	0x20000c54
 80049fc:	20000c40 	.word	0x20000c40
 8004a00:	20000c50 	.word	0x20000c50

08004a04 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a04:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a08:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a0c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a0e:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a12:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a16:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop

08004a1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop

08004a24 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a24:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004a26:	6803      	ldr	r3, [r0, #0]
{
 8004a28:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a2a:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 8004a2c:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a2e:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a32:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a34:	6091      	str	r1, [r2, #8]
}
 8004a36:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8004a3a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004a3c:	6003      	str	r3, [r0, #0]
}
 8004a3e:	4770      	bx	lr

08004a40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a40:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a42:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a44:	1c6b      	adds	r3, r5, #1
 8004a46:	d010      	beq.n	8004a6a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a48:	f100 0308 	add.w	r3, r0, #8
 8004a4c:	461c      	mov	r4, r3
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	42aa      	cmp	r2, r5
 8004a54:	d9fa      	bls.n	8004a4c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004a56:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a58:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8004a5a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a5c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a5e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a60:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8004a62:	6108      	str	r0, [r1, #16]
}
 8004a64:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8004a66:	6002      	str	r2, [r0, #0]
}
 8004a68:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a6a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a6c:	6863      	ldr	r3, [r4, #4]
 8004a6e:	e7f2      	b.n	8004a56 <vListInsert+0x16>

08004a70 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a70:	6903      	ldr	r3, [r0, #16]
{
 8004a72:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a74:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a78:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a7a:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8004a7c:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a7e:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a80:	bf08      	it	eq
 8004a82:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8004a84:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8004a86:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8004a8a:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8004a8c:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8004a8e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004a90:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8004a92:	6818      	ldr	r0, [r3, #0]
}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop

08004a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a98:	4808      	ldr	r0, [pc, #32]	@ (8004abc <prvPortStartFirstTask+0x24>)
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	6800      	ldr	r0, [r0, #0]
 8004a9e:	f380 8808 	msr	MSP, r0
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f380 8814 	msr	CONTROL, r0
 8004aaa:	b662      	cpsie	i
 8004aac:	b661      	cpsie	f
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	df00      	svc	0
 8004ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aba:	0000      	.short	0x0000
 8004abc:	e000ed08 	.word	0xe000ed08

08004ac0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ac0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ad0 <vPortEnableVFP+0x10>
 8004ac4:	6801      	ldr	r1, [r0, #0]
 8004ac6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004aca:	6001      	str	r1, [r0, #0]
 8004acc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ace:	0000      	.short	0x0000
 8004ad0:	e000ed88 	.word	0xe000ed88

08004ad4 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b10 <prvTaskExitError+0x3c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
{
 8004ad8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8004ada:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8004adc:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8004ade:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8004ae0:	d008      	beq.n	8004af4 <prvTaskExitError+0x20>
 8004ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	e7fe      	b.n	8004af2 <prvTaskExitError+0x1e>
 8004af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004b04:	9b01      	ldr	r3, [sp, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0fc      	beq.n	8004b04 <prvTaskExitError+0x30>
}
 8004b0a:	b002      	add	sp, #8
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000574 	.word	0x20000574

08004b14 <pxPortInitialiseStack>:
{
 8004b14:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b1a:	4c07      	ldr	r4, [pc, #28]	@ (8004b38 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b1c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b20:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b24:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b28:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b2c:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 8004b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b34:	3844      	subs	r0, #68	@ 0x44
 8004b36:	4770      	bx	lr
 8004b38:	08004ad5 	.word	0x08004ad5
 8004b3c:	00000000 	.word	0x00000000

08004b40 <SVC_Handler>:
	__asm volatile (
 8004b40:	4b07      	ldr	r3, [pc, #28]	@ (8004b60 <pxCurrentTCBConst2>)
 8004b42:	6819      	ldr	r1, [r3, #0]
 8004b44:	6808      	ldr	r0, [r1, #0]
 8004b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4a:	f380 8809 	msr	PSP, r0
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f380 8811 	msr	BASEPRI, r0
 8004b5a:	4770      	bx	lr
 8004b5c:	f3af 8000 	nop.w

08004b60 <pxCurrentTCBConst2>:
 8004b60:	20004988 	.word	0x20004988

08004b64 <vPortEnterCritical>:
 8004b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004b74:	4a0b      	ldr	r2, [pc, #44]	@ (8004ba4 <vPortEnterCritical+0x40>)
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8004b7a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004b7c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004b7e:	d000      	beq.n	8004b82 <vPortEnterCritical+0x1e>
}
 8004b80:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004b86:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f7      	beq.n	8004b80 <vPortEnterCritical+0x1c>
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	e7fe      	b.n	8004ba0 <vPortEnterCritical+0x3c>
 8004ba2:	bf00      	nop
 8004ba4:	20000574 	.word	0x20000574

08004ba8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004ba8:	4a08      	ldr	r2, [pc, #32]	@ (8004bcc <vPortExitCritical+0x24>)
 8004baa:	6813      	ldr	r3, [r2, #0]
 8004bac:	b943      	cbnz	r3, 8004bc0 <vPortExitCritical+0x18>
 8004bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	e7fe      	b.n	8004bbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bc4:	b90b      	cbnz	r3, 8004bca <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bc6:	f383 8811 	msr	BASEPRI, r3
}
 8004bca:	4770      	bx	lr
 8004bcc:	20000574 	.word	0x20000574

08004bd0 <PendSV_Handler>:
	__asm volatile
 8004bd0:	f3ef 8009 	mrs	r0, PSP
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	4b15      	ldr	r3, [pc, #84]	@ (8004c30 <pxCurrentTCBConst>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f01e 0f10 	tst.w	lr, #16
 8004be0:	bf08      	it	eq
 8004be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	6010      	str	r0, [r2, #0]
 8004bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004bf4:	f380 8811 	msr	BASEPRI, r0
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f000 fd72 	bl	80056e8 <vTaskSwitchContext>
 8004c04:	f04f 0000 	mov.w	r0, #0
 8004c08:	f380 8811 	msr	BASEPRI, r0
 8004c0c:	bc09      	pop	{r0, r3}
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	6808      	ldr	r0, [r1, #0]
 8004c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c16:	f01e 0f10 	tst.w	lr, #16
 8004c1a:	bf08      	it	eq
 8004c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c20:	f380 8809 	msr	PSP, r0
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst>:
 8004c30:	20004988 	.word	0x20004988

08004c34 <SysTick_Handler>:
{
 8004c34:	b508      	push	{r3, lr}
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004c46:	f000 fd3f 	bl	80056c8 <xTaskIncrementTick>
 8004c4a:	b128      	cbz	r0, 8004c58 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f383 8811 	msr	BASEPRI, r3
}
 8004c5e:	bd08      	pop	{r3, pc}

08004c60 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c60:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004c64:	4a48      	ldr	r2, [pc, #288]	@ (8004d88 <xPortStartScheduler+0x128>)
 8004c66:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8004c6a:	4291      	cmp	r1, r2
 8004c6c:	d041      	beq.n	8004cf2 <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c6e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8004c72:	4b46      	ldr	r3, [pc, #280]	@ (8004d8c <xPortStartScheduler+0x12c>)
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d033      	beq.n	8004ce0 <xPortStartScheduler+0x80>
{
 8004c78:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c7a:	4b45      	ldr	r3, [pc, #276]	@ (8004d90 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c7c:	4c45      	ldr	r4, [pc, #276]	@ (8004d94 <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c7e:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c80:	4845      	ldr	r0, [pc, #276]	@ (8004d98 <xPortStartScheduler+0x138>)
{
 8004c82:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c84:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c8a:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c94:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c98:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ca0:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ca2:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ca4:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ca6:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ca8:	bf48      	it	mi
 8004caa:	2206      	movmi	r2, #6
 8004cac:	d50f      	bpl.n	8004cce <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004cbe:	061b      	lsls	r3, r3, #24
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	f102 32ff 	add.w	r2, r2, #4294967295
 8004cc6:	d4f2      	bmi.n	8004cae <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cc8:	2903      	cmp	r1, #3
 8004cca:	d01b      	beq.n	8004d04 <xPortStartScheduler+0xa4>
 8004ccc:	6001      	str	r1, [r0, #0]
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	e7fe      	b.n	8004cde <xPortStartScheduler+0x7e>
 8004ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cf0:	e7fe      	b.n	8004cf0 <xPortStartScheduler+0x90>
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d02:	e7fe      	b.n	8004d02 <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d04:	9b02      	ldr	r3, [sp, #8]
 8004d06:	4a22      	ldr	r2, [pc, #136]	@ (8004d90 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8004d08:	4d24      	ldr	r5, [pc, #144]	@ (8004d9c <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d0a:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d0e:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d12:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d14:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d16:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d18:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8004d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d20:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d24:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8004d28:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d2c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	uxCriticalNesting = 0;
 8004d30:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 8004d32:	f7fc ff65 	bl	8001c00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004d36:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8004d38:	f7ff fec2 	bl	8004ac0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d3c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8004d40:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d44:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8004d48:	f7ff fea6 	bl	8004a98 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004d4c:	f000 fccc 	bl	80056e8 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8004d50:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8004d52:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8004d54:	3301      	adds	r3, #1
 8004d56:	d008      	beq.n	8004d6a <xPortStartScheduler+0x10a>
 8004d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	e7fe      	b.n	8004d68 <xPortStartScheduler+0x108>
 8004d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004d7a:	9b03      	ldr	r3, [sp, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0fc      	beq.n	8004d7a <xPortStartScheduler+0x11a>
}
 8004d80:	2000      	movs	r0, #0
 8004d82:	b004      	add	sp, #16
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
 8004d86:	bf00      	nop
 8004d88:	410fc271 	.word	0x410fc271
 8004d8c:	410fc270 	.word	0x410fc270
 8004d90:	e000e400 	.word	0xe000e400
 8004d94:	20004860 	.word	0x20004860
 8004d98:	2000485c 	.word	0x2000485c
 8004d9c:	20000574 	.word	0x20000574

08004da0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004da6:	f7ff fedd 	bl	8004b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004daa:	4a34      	ldr	r2, [pc, #208]	@ (8004e7c <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8004dac:	4d34      	ldr	r5, [pc, #208]	@ (8004e80 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8004dae:	6813      	ldr	r3, [r2, #0]
 8004db0:	3301      	adds	r3, #1
 8004db2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d031      	beq.n	8004e1e <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dba:	4e32      	ldr	r6, [pc, #200]	@ (8004e84 <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dbc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8004dbe:	6832      	ldr	r2, [r6, #0]
 8004dc0:	b332      	cbz	r2, 8004e10 <prvAddNewTaskToReadyList+0x70>
 8004dc2:	4f31      	ldr	r7, [pc, #196]	@ (8004e88 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dc4:	4831      	ldr	r0, [pc, #196]	@ (8004e8c <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004dc6:	4932      	ldr	r1, [pc, #200]	@ (8004e90 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8004dc8:	6802      	ldr	r2, [r0, #0]
 8004dca:	3201      	adds	r2, #1
 8004dcc:	6002      	str	r2, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004dce:	6808      	ldr	r0, [r1, #0]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	4302      	orrs	r2, r0
 8004dd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004dda:	600a      	str	r2, [r1, #0]
 8004ddc:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 8004de0:	1d21      	adds	r1, r4, #4
 8004de2:	f7ff fe1f 	bl	8004a24 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004de6:	f7ff fedf 	bl	8004ba8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dea:	6833      	ldr	r3, [r6, #0]
 8004dec:	b173      	cbz	r3, 8004e0c <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dee:	682a      	ldr	r2, [r5, #0]
 8004df0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004df2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d209      	bcs.n	8004e0c <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004df8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e00:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e10:	682a      	ldr	r2, [r5, #0]
 8004e12:	4f1d      	ldr	r7, [pc, #116]	@ (8004e88 <prvAddNewTaskToReadyList+0xe8>)
 8004e14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e16:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004e18:	bf98      	it	ls
 8004e1a:	602c      	strls	r4, [r5, #0]
 8004e1c:	e7d2      	b.n	8004dc4 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8004e1e:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e20:	6813      	ldr	r3, [r2, #0]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d003      	beq.n	8004e2e <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004e28:	4f17      	ldr	r7, [pc, #92]	@ (8004e88 <prvAddNewTaskToReadyList+0xe8>)
 8004e2a:	4e16      	ldr	r6, [pc, #88]	@ (8004e84 <prvAddNewTaskToReadyList+0xe4>)
 8004e2c:	e7ca      	b.n	8004dc4 <prvAddNewTaskToReadyList+0x24>
 8004e2e:	4f16      	ldr	r7, [pc, #88]	@ (8004e88 <prvAddNewTaskToReadyList+0xe8>)
 8004e30:	463e      	mov	r6, r7
 8004e32:	f107 088c 	add.w	r8, r7, #140	@ 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e36:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e38:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e3a:	f7ff fde3 	bl	8004a04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e3e:	4546      	cmp	r6, r8
 8004e40:	d1f9      	bne.n	8004e36 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e42:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8004ea8 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8004e46:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8004eac <prvAddNewTaskToReadyList+0x10c>
 8004e4a:	4e0e      	ldr	r6, [pc, #56]	@ (8004e84 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8004e4c:	4648      	mov	r0, r9
 8004e4e:	f7ff fdd9 	bl	8004a04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e52:	4640      	mov	r0, r8
 8004e54:	f7ff fdd6 	bl	8004a04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e58:	480e      	ldr	r0, [pc, #56]	@ (8004e94 <prvAddNewTaskToReadyList+0xf4>)
 8004e5a:	f7ff fdd3 	bl	8004a04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e5e:	480e      	ldr	r0, [pc, #56]	@ (8004e98 <prvAddNewTaskToReadyList+0xf8>)
 8004e60:	f7ff fdd0 	bl	8004a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e64:	480d      	ldr	r0, [pc, #52]	@ (8004e9c <prvAddNewTaskToReadyList+0xfc>)
 8004e66:	f7ff fdcd 	bl	8004a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <prvAddNewTaskToReadyList+0x100>)
 8004e6c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <prvAddNewTaskToReadyList+0x104>)
 8004e72:	f8c3 8000 	str.w	r8, [r3]
		prvAddTaskToReadyList( pxNewTCB );
 8004e76:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
}
 8004e78:	e7a4      	b.n	8004dc4 <prvAddNewTaskToReadyList+0x24>
 8004e7a:	bf00      	nop
 8004e7c:	20004888 	.word	0x20004888
 8004e80:	20004988 	.word	0x20004988
 8004e84:	2000487c 	.word	0x2000487c
 8004e88:	200048fc 	.word	0x200048fc
 8004e8c:	2000486c 	.word	0x2000486c
 8004e90:	20004880 	.word	0x20004880
 8004e94:	200048b8 	.word	0x200048b8
 8004e98:	200048a4 	.word	0x200048a4
 8004e9c:	2000488c 	.word	0x2000488c
 8004ea0:	200048d0 	.word	0x200048d0
 8004ea4:	200048cc 	.word	0x200048cc
 8004ea8:	200048e8 	.word	0x200048e8
 8004eac:	200048d4 	.word	0x200048d4

08004eb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f20 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eb4:	4e1b      	ldr	r6, [pc, #108]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8004eb6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eb8:	6833      	ldr	r3, [r6, #0]
{
 8004eba:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ebc:	1d18      	adds	r0, r3, #4
{
 8004ebe:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ec0:	f7ff fdd6 	bl	8004a70 <uxListRemove>
 8004ec4:	b940      	cbnz	r0, 8004ed8 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ec6:	6833      	ldr	r3, [r6, #0]
 8004ec8:	4917      	ldr	r1, [pc, #92]	@ (8004f28 <prvAddCurrentTaskToDelayedList+0x78>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	2201      	movs	r2, #1
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	680b      	ldr	r3, [r1, #0]
 8004ed2:	ea23 0302 	bic.w	r3, r3, r2
 8004ed6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ed8:	1c6b      	adds	r3, r5, #1
 8004eda:	d017      	beq.n	8004f0c <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004edc:	6833      	ldr	r3, [r6, #0]
 8004ede:	1964      	adds	r4, r4, r5
 8004ee0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004ee2:	d307      	bcc.n	8004ef4 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ee4:	4b11      	ldr	r3, [pc, #68]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0x7c>)
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004eea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eee:	3104      	adds	r1, #4
 8004ef0:	f7ff bda6 	b.w	8004a40 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f30 <prvAddCurrentTaskToDelayedList+0x80>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	6831      	ldr	r1, [r6, #0]
 8004efa:	3104      	adds	r1, #4
 8004efc:	f7ff fda0 	bl	8004a40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f00:	4b0c      	ldr	r3, [pc, #48]	@ (8004f34 <prvAddCurrentTaskToDelayedList+0x84>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8004f06:	bf88      	it	hi
 8004f08:	601c      	strhi	r4, [r3, #0]
}
 8004f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f0c:	2f00      	cmp	r7, #0
 8004f0e:	d0e5      	beq.n	8004edc <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f10:	6831      	ldr	r1, [r6, #0]
 8004f12:	4809      	ldr	r0, [pc, #36]	@ (8004f38 <prvAddCurrentTaskToDelayedList+0x88>)
}
 8004f14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f18:	3104      	adds	r1, #4
 8004f1a:	f7ff bd83 	b.w	8004a24 <vListInsertEnd>
 8004f1e:	bf00      	nop
 8004f20:	20004884 	.word	0x20004884
 8004f24:	20004988 	.word	0x20004988
 8004f28:	20004880 	.word	0x20004880
 8004f2c:	200048cc 	.word	0x200048cc
 8004f30:	200048d0 	.word	0x200048d0
 8004f34:	20004868 	.word	0x20004868
 8004f38:	2000488c 	.word	0x2000488c

08004f3c <prvIdleTask>:
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	4d23      	ldr	r5, [pc, #140]	@ (8004fcc <prvIdleTask+0x90>)
 8004f40:	4f23      	ldr	r7, [pc, #140]	@ (8004fd0 <prvIdleTask+0x94>)
 8004f42:	4e24      	ldr	r6, [pc, #144]	@ (8004fd4 <prvIdleTask+0x98>)
 8004f44:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8004fd8 <prvIdleTask+0x9c>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	b35b      	cbz	r3, 8004fa4 <prvIdleTask+0x68>
			taskENTER_CRITICAL();
 8004f4c:	f7ff fe0a 	bl	8004b64 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f54:	1d20      	adds	r0, r4, #4
 8004f56:	f7ff fd8b 	bl	8004a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f5a:	6833      	ldr	r3, [r6, #0]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8004f66:	f7ff fe1f 	bl	8004ba8 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f6a:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8004f6e:	f002 f8d9 	bl	8007124 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f72:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 8004f76:	b163      	cbz	r3, 8004f92 <prvIdleTask+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d022      	beq.n	8004fc2 <prvIdleTask+0x86>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d0e3      	beq.n	8004f48 <prvIdleTask+0xc>
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	e7fe      	b.n	8004f90 <prvIdleTask+0x54>
				vPortFree( pxTCB->pxStack );
 8004f92:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004f94:	f7ff fcd2 	bl	800493c <vPortFree>
				vPortFree( pxTCB );
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f7ff fccf 	bl	800493c <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f9e:	682b      	ldr	r3, [r5, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1d3      	bne.n	8004f4c <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d9cd      	bls.n	8004f48 <prvIdleTask+0xc>
				taskYIELD();
 8004fac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	e7c2      	b.n	8004f48 <prvIdleTask+0xc>
				vPortFree( pxTCB );
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f7ff fcba 	bl	800493c <vPortFree>
 8004fc8:	e7be      	b.n	8004f48 <prvIdleTask+0xc>
 8004fca:	bf00      	nop
 8004fcc:	200048a0 	.word	0x200048a0
 8004fd0:	200048a4 	.word	0x200048a4
 8004fd4:	20004888 	.word	0x20004888
 8004fd8:	200048fc 	.word	0x200048fc

08004fdc <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8004fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fe0:	4b48      	ldr	r3, [pc, #288]	@ (8005104 <xTaskIncrementTick.part.0+0x128>)
 8004fe2:	681d      	ldr	r5, [r3, #0]
 8004fe4:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
 8004fe6:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8004fe8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fea:	2d00      	cmp	r5, #0
 8004fec:	d041      	beq.n	8005072 <xTaskIncrementTick.part.0+0x96>
 8004fee:	4b46      	ldr	r3, [pc, #280]	@ (8005108 <xTaskIncrementTick.part.0+0x12c>)
 8004ff0:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	429d      	cmp	r5, r3
 8004ff6:	d349      	bcc.n	800508c <xTaskIncrementTick.part.0+0xb0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ff8:	4e44      	ldr	r6, [pc, #272]	@ (800510c <xTaskIncrementTick.part.0+0x130>)
 8004ffa:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8005120 <xTaskIncrementTick.part.0+0x144>
 8004ffe:	6833      	ldr	r3, [r6, #0]
 8005000:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 8005124 <xTaskIncrementTick.part.0+0x148>
 8005004:	681c      	ldr	r4, [r3, #0]
 8005006:	2c00      	cmp	r4, #0
 8005008:	d076      	beq.n	80050f8 <xTaskIncrementTick.part.0+0x11c>
					prvAddTaskToReadyList( pxTCB );
 800500a:	4f41      	ldr	r7, [pc, #260]	@ (8005110 <xTaskIncrementTick.part.0+0x134>)
BaseType_t xSwitchRequired = pdFALSE;
 800500c:	2400      	movs	r4, #0
 800500e:	e022      	b.n	8005056 <xTaskIncrementTick.part.0+0x7a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005010:	f7ff fd2e 	bl	8004a70 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005014:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005018:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800501c:	b10a      	cbz	r2, 8005022 <xTaskIncrementTick.part.0+0x46>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800501e:	f7ff fd27 	bl	8004a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005022:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2201      	movs	r2, #1
 800502a:	4082      	lsls	r2, r0
 800502c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005030:	431a      	orrs	r2, r3
 8005032:	4651      	mov	r1, sl
 8005034:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005038:	603a      	str	r2, [r7, #0]
 800503a:	f7ff fcf3 	bl	8004a24 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800503e:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005042:	6830      	ldr	r0, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005044:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 8005048:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800504a:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 800504c:	4291      	cmp	r1, r2
 800504e:	bf28      	it	cs
 8005050:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005052:	2b00      	cmp	r3, #0
 8005054:	d050      	beq.n	80050f8 <xTaskIncrementTick.part.0+0x11c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005056:	6833      	ldr	r3, [r6, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800505e:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005062:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 8005066:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005068:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800506a:	d2d1      	bcs.n	8005010 <xTaskIncrementTick.part.0+0x34>
						xNextTaskUnblockTime = xItemValue;
 800506c:	9b01      	ldr	r3, [sp, #4]
 800506e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005070:	e011      	b.n	8005096 <xTaskIncrementTick.part.0+0xba>
			taskSWITCH_DELAYED_LISTS();
 8005072:	4b26      	ldr	r3, [pc, #152]	@ (800510c <xTaskIncrementTick.part.0+0x130>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	b30a      	cbz	r2, 80050be <xTaskIncrementTick.part.0+0xe2>
 800507a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	e7fe      	b.n	800508a <xTaskIncrementTick.part.0+0xae>
 800508c:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8005120 <xTaskIncrementTick.part.0+0x144>
 8005090:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005124 <xTaskIncrementTick.part.0+0x148>
BaseType_t xSwitchRequired = pdFALSE;
 8005094:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005096:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 800509a:	491e      	ldr	r1, [pc, #120]	@ (8005114 <xTaskIncrementTick.part.0+0x138>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 80050a8:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 80050aa:	2a02      	cmp	r2, #2
 80050ac:	bf28      	it	cs
 80050ae:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 80050b0:	2b00      	cmp	r3, #0
}
 80050b2:	bf0c      	ite	eq
 80050b4:	4620      	moveq	r0, r4
 80050b6:	2001      	movne	r0, #1
 80050b8:	b003      	add	sp, #12
 80050ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80050be:	4a16      	ldr	r2, [pc, #88]	@ (8005118 <xTaskIncrementTick.part.0+0x13c>)
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	6811      	ldr	r1, [r2, #0]
 80050c4:	6019      	str	r1, [r3, #0]
 80050c6:	4915      	ldr	r1, [pc, #84]	@ (800511c <xTaskIncrementTick.part.0+0x140>)
 80050c8:	6010      	str	r0, [r2, #0]
 80050ca:	680a      	ldr	r2, [r1, #0]
 80050cc:	3201      	adds	r2, #1
 80050ce:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	b93a      	cbnz	r2, 80050e6 <xTaskIncrementTick.part.0+0x10a>
		xNextTaskUnblockTime = portMAX_DELAY;
 80050d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005108 <xTaskIncrementTick.part.0+0x12c>)
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	461a      	mov	r2, r3
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	4613      	mov	r3, r2
 80050e4:	e785      	b.n	8004ff2 <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e6:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050e8:	4a07      	ldr	r2, [pc, #28]	@ (8005108 <xTaskIncrementTick.part.0+0x12c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ea:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050ec:	9201      	str	r2, [sp, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	4613      	mov	r3, r2
}
 80050f6:	e77c      	b.n	8004ff2 <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f8:	9a01      	ldr	r2, [sp, #4]
 80050fa:	f04f 33ff 	mov.w	r3, #4294967295
 80050fe:	6013      	str	r3, [r2, #0]
					break;
 8005100:	e7c9      	b.n	8005096 <xTaskIncrementTick.part.0+0xba>
 8005102:	bf00      	nop
 8005104:	20004884 	.word	0x20004884
 8005108:	20004868 	.word	0x20004868
 800510c:	200048d0 	.word	0x200048d0
 8005110:	20004880 	.word	0x20004880
 8005114:	20004874 	.word	0x20004874
 8005118:	200048cc 	.word	0x200048cc
 800511c:	20004870 	.word	0x20004870
 8005120:	200048fc 	.word	0x200048fc
 8005124:	20004988 	.word	0x20004988

08005128 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 800512c:	4d48      	ldr	r5, [pc, #288]	@ (8005250 <xTaskResumeAll.part.0+0x128>)
BaseType_t xTaskResumeAll( void )
 800512e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8005130:	f7ff fd18 	bl	8004b64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	3b01      	subs	r3, #1
 8005138:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d16e      	bne.n	800521e <xTaskResumeAll.part.0+0xf6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005140:	4b44      	ldr	r3, [pc, #272]	@ (8005254 <xTaskResumeAll.part.0+0x12c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d06a      	beq.n	800521e <xTaskResumeAll.part.0+0xf6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005148:	f8df a120 	ldr.w	sl, [pc, #288]	@ 800526c <xTaskResumeAll.part.0+0x144>
 800514c:	f8da 2000 	ldr.w	r2, [sl]
 8005150:	2a00      	cmp	r2, #0
 8005152:	d079      	beq.n	8005248 <xTaskResumeAll.part.0+0x120>
 8005154:	4b40      	ldr	r3, [pc, #256]	@ (8005258 <xTaskResumeAll.part.0+0x130>)
 8005156:	4e41      	ldr	r6, [pc, #260]	@ (800525c <xTaskResumeAll.part.0+0x134>)
 8005158:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 8005270 <xTaskResumeAll.part.0+0x148>
 800515c:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8005274 <xTaskResumeAll.part.0+0x14c>
 8005160:	9301      	str	r3, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8005162:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005164:	f8da 200c 	ldr.w	r2, [sl, #12]
 8005168:	f8d2 b00c 	ldr.w	fp, [r2, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800516c:	f10b 0404 	add.w	r4, fp, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005170:	f10b 0018 	add.w	r0, fp, #24
 8005174:	f7ff fc7c 	bl	8004a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005178:	4620      	mov	r0, r4
 800517a:	f7ff fc79 	bl	8004a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800517e:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8005182:	6831      	ldr	r1, [r6, #0]
 8005184:	fa07 f200 	lsl.w	r2, r7, r0
 8005188:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800518c:	430a      	orrs	r2, r1
 800518e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8005192:	4621      	mov	r1, r4
 8005194:	6032      	str	r2, [r6, #0]
 8005196:	f7ff fc45 	bl	8004a24 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800519a:	f8d8 2000 	ldr.w	r2, [r8]
 800519e:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 80051a2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051a4:	4291      	cmp	r1, r2
 80051a6:	d341      	bcc.n	800522c <xTaskResumeAll.part.0+0x104>
						xYieldPending = pdTRUE;
 80051a8:	9b01      	ldr	r3, [sp, #4]
 80051aa:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051ac:	f8da 2000 	ldr.w	r2, [sl]
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	d1d7      	bne.n	8005164 <xTaskResumeAll.part.0+0x3c>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005260 <xTaskResumeAll.part.0+0x138>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	2a00      	cmp	r2, #0
 80051bc:	d03f      	beq.n	800523e <xTaskResumeAll.part.0+0x116>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051be:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051c0:	4b28      	ldr	r3, [pc, #160]	@ (8005264 <xTaskResumeAll.part.0+0x13c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051c4:	68d2      	ldr	r2, [r2, #12]
 80051c6:	6852      	ldr	r2, [r2, #4]
 80051c8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051ca:	4e27      	ldr	r6, [pc, #156]	@ (8005268 <xTaskResumeAll.part.0+0x140>)
 80051cc:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80051ce:	b194      	cbz	r4, 80051f6 <xTaskResumeAll.part.0+0xce>
								xYieldPending = pdTRUE;
 80051d0:	2701      	movs	r7, #1
 80051d2:	e006      	b.n	80051e2 <xTaskResumeAll.part.0+0xba>
 80051d4:	f7ff ff02 	bl	8004fdc <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 80051d8:	b108      	cbz	r0, 80051de <xTaskResumeAll.part.0+0xb6>
								xYieldPending = pdTRUE;
 80051da:	9b01      	ldr	r3, [sp, #4]
 80051dc:	601f      	str	r7, [r3, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051de:	3c01      	subs	r4, #1
 80051e0:	d008      	beq.n	80051f4 <xTaskResumeAll.part.0+0xcc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051e2:	682b      	ldr	r3, [r5, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f5      	beq.n	80051d4 <xTaskResumeAll.part.0+0xac>
		++xPendedTicks;
 80051e8:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051ea:	3c01      	subs	r4, #1
		++xPendedTicks;
 80051ec:	f103 0301 	add.w	r3, r3, #1
 80051f0:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051f2:	d1f6      	bne.n	80051e2 <xTaskResumeAll.part.0+0xba>
						xPendedTicks = 0;
 80051f4:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80051f6:	9b01      	ldr	r3, [sp, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	b183      	cbz	r3, 800521e <xTaskResumeAll.part.0+0xf6>
					taskYIELD_IF_USING_PREEMPTION();
 80051fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005204:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005210:	f7ff fcca 	bl	8004ba8 <vPortExitCritical>
						xAlreadyYielded = pdTRUE;
 8005214:	2401      	movs	r4, #1
}
 8005216:	4620      	mov	r0, r4
 8005218:	b003      	add	sp, #12
 800521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	taskEXIT_CRITICAL();
 800521e:	f7ff fcc3 	bl	8004ba8 <vPortExitCritical>
BaseType_t xAlreadyYielded = pdFALSE;
 8005222:	2400      	movs	r4, #0
}
 8005224:	4620      	mov	r0, r4
 8005226:	b003      	add	sp, #12
 8005228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800522c:	f8da 2000 	ldr.w	r2, [sl]
 8005230:	2a00      	cmp	r2, #0
 8005232:	d197      	bne.n	8005164 <xTaskResumeAll.part.0+0x3c>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005234:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <xTaskResumeAll.part.0+0x138>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	2a00      	cmp	r2, #0
 800523c:	d1bf      	bne.n	80051be <xTaskResumeAll.part.0+0x96>
		xNextTaskUnblockTime = portMAX_DELAY;
 800523e:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <xTaskResumeAll.part.0+0x13c>)
 8005240:	f04f 32ff 	mov.w	r2, #4294967295
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e7c0      	b.n	80051ca <xTaskResumeAll.part.0+0xa2>
 8005248:	4b03      	ldr	r3, [pc, #12]	@ (8005258 <xTaskResumeAll.part.0+0x130>)
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	e7bd      	b.n	80051ca <xTaskResumeAll.part.0+0xa2>
 800524e:	bf00      	nop
 8005250:	20004864 	.word	0x20004864
 8005254:	20004888 	.word	0x20004888
 8005258:	20004874 	.word	0x20004874
 800525c:	20004880 	.word	0x20004880
 8005260:	200048d0 	.word	0x200048d0
 8005264:	20004868 	.word	0x20004868
 8005268:	20004878 	.word	0x20004878
 800526c:	200048b8 	.word	0x200048b8
 8005270:	200048fc 	.word	0x200048fc
 8005274:	20004988 	.word	0x20004988

08005278 <xTaskCreateStatic>:
	{
 8005278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005282:	b1c5      	cbz	r5, 80052b6 <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
 8005284:	b174      	cbz	r4, 80052a4 <xTaskCreateStatic+0x2c>
 8005286:	4606      	mov	r6, r0
			volatile size_t xSize = sizeof( StaticTask_t );
 8005288:	20a0      	movs	r0, #160	@ 0xa0
 800528a:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 800528c:	9803      	ldr	r0, [sp, #12]
 800528e:	28a0      	cmp	r0, #160	@ 0xa0
 8005290:	d01a      	beq.n	80052c8 <xTaskCreateStatic+0x50>
 8005292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	e7fe      	b.n	80052a2 <xTaskCreateStatic+0x2a>
 80052a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80052b4:	e7fe      	b.n	80052b4 <xTaskCreateStatic+0x3c>
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80052c6:	e7fe      	b.n	80052c6 <xTaskCreateStatic+0x4e>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052c8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80052cc:	3a01      	subs	r2, #1
 80052ce:	eb05 0282 	add.w	r2, r5, r2, lsl #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052d2:	6325      	str	r5, [r4, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052d4:	f022 0507 	bic.w	r5, r2, #7
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052d8:	2202      	movs	r2, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052da:	9803      	ldr	r0, [sp, #12]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052dc:	f884 209d 	strb.w	r2, [r4, #157]	@ 0x9d
	if( pcName != NULL )
 80052e0:	2900      	cmp	r1, #0
 80052e2:	d073      	beq.n	80053cc <xTaskCreateStatic+0x154>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052e4:	780a      	ldrb	r2, [r1, #0]
 80052e6:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80052ea:	2a00      	cmp	r2, #0
 80052ec:	d036      	beq.n	800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052ee:	784a      	ldrb	r2, [r1, #1]
 80052f0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 80052f4:	b392      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052f6:	788a      	ldrb	r2, [r1, #2]
 80052f8:	f884 2036 	strb.w	r2, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 80052fc:	b372      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052fe:	78ca      	ldrb	r2, [r1, #3]
 8005300:	f884 2037 	strb.w	r2, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8005304:	b352      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005306:	790a      	ldrb	r2, [r1, #4]
 8005308:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800530c:	b332      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800530e:	794a      	ldrb	r2, [r1, #5]
 8005310:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8005314:	b312      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005316:	798a      	ldrb	r2, [r1, #6]
 8005318:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800531c:	b1f2      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800531e:	79ca      	ldrb	r2, [r1, #7]
 8005320:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8005324:	b1d2      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005326:	7a0a      	ldrb	r2, [r1, #8]
 8005328:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 800532c:	b1b2      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800532e:	7a4a      	ldrb	r2, [r1, #9]
 8005330:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8005334:	b192      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005336:	7a8a      	ldrb	r2, [r1, #10]
 8005338:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800533c:	b172      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800533e:	7aca      	ldrb	r2, [r1, #11]
 8005340:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8005344:	b152      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005346:	7b0a      	ldrb	r2, [r1, #12]
 8005348:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800534c:	b132      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800534e:	7b4a      	ldrb	r2, [r1, #13]
 8005350:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8005354:	b112      	cbz	r2, 800535c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005356:	7b8a      	ldrb	r2, [r1, #14]
 8005358:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800535c:	2200      	movs	r2, #0
 800535e:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005362:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	2f06      	cmp	r7, #6
 8005368:	bf28      	it	cs
 800536a:	2706      	movcs	r7, #6
		pxNewTCB->uxMutexesHeld = 0;
 800536c:	f04f 0800 	mov.w	r8, #0
	pxNewTCB->uxPriority = uxPriority;
 8005370:	62e7      	str	r7, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005372:	6467      	str	r7, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005374:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8005376:	f8c4 8048 	str.w	r8, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800537a:	f7ff fb4f 	bl	8004a1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800537e:	f104 0018 	add.w	r0, r4, #24
 8005382:	f7ff fb4b 	bl	8004a1c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005386:	f1c7 0707 	rsb	r7, r7, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800538a:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800538c:	61a7      	str	r7, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800538e:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005392:	4641      	mov	r1, r8
 8005394:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005396:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005398:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800539a:	f884 809c 	strb.w	r8, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800539e:	f001 feb9 	bl	8007114 <memset>
 80053a2:	4f0c      	ldr	r7, [pc, #48]	@ (80053d4 <xTaskCreateStatic+0x15c>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053a4:	9b01      	ldr	r3, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053a6:	6527      	str	r7, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053a8:	461a      	mov	r2, r3
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053aa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80053ae:	37d0      	adds	r7, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053b0:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053b2:	6563      	str	r3, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053b4:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053b6:	65a7      	str	r7, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053b8:	f7ff fbac 	bl	8004b14 <pxPortInitialiseStack>
 80053bc:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80053be:	4620      	mov	r0, r4
 80053c0:	f7ff fcee 	bl	8004da0 <prvAddNewTaskToReadyList>
	}
 80053c4:	4620      	mov	r0, r4
 80053c6:	b004      	add	sp, #16
 80053c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053cc:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 80053d0:	e7c7      	b.n	8005362 <xTaskCreateStatic+0xea>
 80053d2:	bf00      	nop
 80053d4:	2000498c 	.word	0x2000498c

080053d8 <xTaskCreate>:
	{
 80053d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053dc:	0095      	lsls	r5, r2, #2
	{
 80053de:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053e0:	4628      	mov	r0, r5
	{
 80053e2:	460e      	mov	r6, r1
 80053e4:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053e6:	f7ff f9f1 	bl	80047cc <pvPortMalloc>
			if( pxStack != NULL )
 80053ea:	2800      	cmp	r0, #0
 80053ec:	f000 8086 	beq.w	80054fc <xTaskCreate+0x124>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053f0:	4607      	mov	r7, r0
 80053f2:	20a0      	movs	r0, #160	@ 0xa0
 80053f4:	f7ff f9ea 	bl	80047cc <pvPortMalloc>
				if( pxNewTCB != NULL )
 80053f8:	4604      	mov	r4, r0
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d07b      	beq.n	80054f6 <xTaskCreate+0x11e>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053fe:	3d04      	subs	r5, #4
 8005400:	443d      	add	r5, r7
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005402:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8005404:	6307      	str	r7, [r0, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005406:	f025 0507 	bic.w	r5, r5, #7
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800540a:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
	if( pcName != NULL )
 800540e:	2e00      	cmp	r6, #0
 8005410:	d078      	beq.n	8005504 <xTaskCreate+0x12c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005412:	7833      	ldrb	r3, [r6, #0]
 8005414:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8005418:	2b00      	cmp	r3, #0
 800541a:	d036      	beq.n	800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800541c:	7873      	ldrb	r3, [r6, #1]
 800541e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8005422:	b393      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005424:	78b3      	ldrb	r3, [r6, #2]
 8005426:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 800542a:	b373      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800542c:	78f3      	ldrb	r3, [r6, #3]
 800542e:	f880 3037 	strb.w	r3, [r0, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8005432:	b353      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005434:	7933      	ldrb	r3, [r6, #4]
 8005436:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800543a:	b333      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800543c:	7973      	ldrb	r3, [r6, #5]
 800543e:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8005442:	b313      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005444:	79b3      	ldrb	r3, [r6, #6]
 8005446:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800544a:	b1f3      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800544c:	79f3      	ldrb	r3, [r6, #7]
 800544e:	f880 303b 	strb.w	r3, [r0, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8005452:	b1d3      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005454:	7a33      	ldrb	r3, [r6, #8]
 8005456:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 800545a:	b1b3      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800545c:	7a73      	ldrb	r3, [r6, #9]
 800545e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8005462:	b193      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005464:	7ab3      	ldrb	r3, [r6, #10]
 8005466:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800546a:	b173      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800546c:	7af3      	ldrb	r3, [r6, #11]
 800546e:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8005472:	b153      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005474:	7b33      	ldrb	r3, [r6, #12]
 8005476:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800547a:	b133      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800547c:	7b73      	ldrb	r3, [r6, #13]
 800547e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8005482:	b113      	cbz	r3, 800548a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005484:	7bb3      	ldrb	r3, [r6, #14]
 8005486:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800548a:	2300      	movs	r3, #0
 800548c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005490:	9e08      	ldr	r6, [sp, #32]
 8005492:	2e06      	cmp	r6, #6
 8005494:	bf28      	it	cs
 8005496:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 8005498:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 800549a:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800549c:	6466      	str	r6, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800549e:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80054a0:	64a7      	str	r7, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054a2:	f7ff fabb 	bl	8004a1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054a6:	f104 0018 	add.w	r0, r4, #24
 80054aa:	f7ff fab7 	bl	8004a1c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ae:	f1c6 0607 	rsb	r6, r6, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054b2:	224c      	movs	r2, #76	@ 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 80054b4:	f8c4 7098 	str.w	r7, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054b8:	4639      	mov	r1, r7
 80054ba:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054bc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054be:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054c0:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054c2:	f884 709c 	strb.w	r7, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054c6:	f001 fe25 	bl	8007114 <memset>
 80054ca:	4b10      	ldr	r3, [pc, #64]	@ (800550c <xTaskCreate+0x134>)
 80054cc:	6523      	str	r3, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054ce:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054d0:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 80054d4:	33d0      	adds	r3, #208	@ 0xd0
 80054d6:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054d8:	464a      	mov	r2, r9
 80054da:	4641      	mov	r1, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054dc:	6565      	str	r5, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054de:	f7ff fb19 	bl	8004b14 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 80054e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054e4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80054e6:	b103      	cbz	r3, 80054ea <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054e8:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80054ea:	4620      	mov	r0, r4
 80054ec:	f7ff fc58 	bl	8004da0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054f0:	2001      	movs	r0, #1
	}
 80054f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80054f6:	4638      	mov	r0, r7
 80054f8:	f7ff fa20 	bl	800493c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005504:	f880 6034 	strb.w	r6, [r0, #52]	@ 0x34
 8005508:	e7c2      	b.n	8005490 <xTaskCreate+0xb8>
 800550a:	bf00      	nop
 800550c:	2000498c 	.word	0x2000498c

08005510 <vTaskDelay>:
	{
 8005510:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005512:	b950      	cbnz	r0, 800552a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8005514:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800551c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	f3bf 8f6f 	isb	sy
	}
 8005528:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800552a:	4c10      	ldr	r4, [pc, #64]	@ (800556c <vTaskDelay+0x5c>)
 800552c:	6821      	ldr	r1, [r4, #0]
 800552e:	b141      	cbz	r1, 8005542 <vTaskDelay+0x32>
 8005530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	e7fe      	b.n	8005540 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	3301      	adds	r3, #1
 8005546:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005548:	f7ff fcb2 	bl	8004eb0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	b943      	cbnz	r3, 8005562 <vTaskDelay+0x52>
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	e7fe      	b.n	8005560 <vTaskDelay+0x50>
 8005562:	f7ff fde1 	bl	8005128 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8005566:	2800      	cmp	r0, #0
 8005568:	d0d4      	beq.n	8005514 <vTaskDelay+0x4>
	}
 800556a:	bd10      	pop	{r4, pc}
 800556c:	20004864 	.word	0x20004864

08005570 <vTaskStartScheduler>:
{
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	b084      	sub	sp, #16
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005574:	aa02      	add	r2, sp, #8
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005576:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005578:	a901      	add	r1, sp, #4
 800557a:	4668      	mov	r0, sp
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800557c:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005580:	f7fa ffe8 	bl	8000554 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005584:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8005588:	9d00      	ldr	r5, [sp, #0]
		configASSERT( puxStackBuffer != NULL );
 800558a:	b1bb      	cbz	r3, 80055bc <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 800558c:	b16d      	cbz	r5, 80055aa <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800558e:	21a0      	movs	r1, #160	@ 0xa0
 8005590:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005592:	9903      	ldr	r1, [sp, #12]
 8005594:	29a0      	cmp	r1, #160	@ 0xa0
 8005596:	d01a      	beq.n	80055ce <vTaskStartScheduler+0x5e>
 8005598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	e7fe      	b.n	80055a8 <vTaskStartScheduler+0x38>
 80055aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80055ba:	e7fe      	b.n	80055ba <vTaskStartScheduler+0x4a>
 80055bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80055cc:	e7fe      	b.n	80055cc <vTaskStartScheduler+0x5c>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80055ce:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80055d2:	3a01      	subs	r2, #1
 80055d4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055d8:	2102      	movs	r1, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055da:	632b      	str	r3, [r5, #48]	@ 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055dc:	4b26      	ldr	r3, [pc, #152]	@ (8005678 <vTaskStartScheduler+0x108>)
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055de:	f885 109d 	strb.w	r1, [r5, #157]	@ 0x9d
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055e2:	1d28      	adds	r0, r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055e4:	636b      	str	r3, [r5, #52]	@ 0x34
		pxNewTCB->uxMutexesHeld = 0;
 80055e6:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055ea:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055ee:	f885 4043 	strb.w	r4, [r5, #67]	@ 0x43
	pxNewTCB->uxPriority = uxPriority;
 80055f2:	62ec      	str	r4, [r5, #44]	@ 0x2c
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055f4:	f022 0607 	bic.w	r6, r2, #7
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80055f8:	9b03      	ldr	r3, [sp, #12]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055fa:	f7ff fa0f 	bl	8004a1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055fe:	f105 0018 	add.w	r0, r5, #24
 8005602:	f7ff fa0b 	bl	8004a1c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005606:	2307      	movs	r3, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005608:	224c      	movs	r2, #76	@ 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 800560a:	f8c5 4098 	str.w	r4, [r5, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800560e:	4621      	mov	r1, r4
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005610:	61ab      	str	r3, [r5, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005612:	18a8      	adds	r0, r5, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005614:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005616:	626d      	str	r5, [r5, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005618:	f885 409c 	strb.w	r4, [r5, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800561c:	f001 fd7a 	bl	8007114 <memset>
 8005620:	4b16      	ldr	r3, [pc, #88]	@ (800567c <vTaskStartScheduler+0x10c>)
 8005622:	652b      	str	r3, [r5, #80]	@ 0x50
 8005624:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005628:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800562a:	4915      	ldr	r1, [pc, #84]	@ (8005680 <vTaskStartScheduler+0x110>)
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800562c:	656a      	str	r2, [r5, #84]	@ 0x54
 800562e:	65ab      	str	r3, [r5, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005630:	4622      	mov	r2, r4
 8005632:	4630      	mov	r0, r6
 8005634:	f7ff fa6e 	bl	8004b14 <pxPortInitialiseStack>
 8005638:	6028      	str	r0, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800563a:	4628      	mov	r0, r5
 800563c:	f7ff fbb0 	bl	8004da0 <prvAddNewTaskToReadyList>
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005650:	4a0c      	ldr	r2, [pc, #48]	@ (8005684 <vTaskStartScheduler+0x114>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005652:	4b0d      	ldr	r3, [pc, #52]	@ (8005688 <vTaskStartScheduler+0x118>)
 8005654:	490d      	ldr	r1, [pc, #52]	@ (800568c <vTaskStartScheduler+0x11c>)
 8005656:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	6010      	str	r0, [r2, #0]
		xSchedulerRunning = pdTRUE;
 800565e:	4a0c      	ldr	r2, [pc, #48]	@ (8005690 <vTaskStartScheduler+0x120>)
 8005660:	2001      	movs	r0, #1
 8005662:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005664:	4a0b      	ldr	r2, [pc, #44]	@ (8005694 <vTaskStartScheduler+0x124>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005666:	334c      	adds	r3, #76	@ 0x4c
 8005668:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800566a:	6014      	str	r4, [r2, #0]
}
 800566c:	b004      	add	sp, #16
 800566e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8005672:	f7ff baf5 	b.w	8004c60 <xPortStartScheduler>
 8005676:	bf00      	nop
 8005678:	454c4449 	.word	0x454c4449
 800567c:	2000498c 	.word	0x2000498c
 8005680:	08004f3d 	.word	0x08004f3d
 8005684:	20004868 	.word	0x20004868
 8005688:	20004988 	.word	0x20004988
 800568c:	20000578 	.word	0x20000578
 8005690:	2000487c 	.word	0x2000487c
 8005694:	20004884 	.word	0x20004884

08005698 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005698:	4a02      	ldr	r2, [pc, #8]	@ (80056a4 <vTaskSuspendAll+0xc>)
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	6013      	str	r3, [r2, #0]
}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20004864 	.word	0x20004864

080056a8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80056a8:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <xTaskResumeAll+0x1c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	b943      	cbnz	r3, 80056c0 <xTaskResumeAll+0x18>
 80056ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	e7fe      	b.n	80056be <xTaskResumeAll+0x16>
 80056c0:	f7ff bd32 	b.w	8005128 <xTaskResumeAll.part.0>
 80056c4:	20004864 	.word	0x20004864

080056c8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056c8:	4b05      	ldr	r3, [pc, #20]	@ (80056e0 <xTaskIncrementTick+0x18>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	b90b      	cbnz	r3, 80056d2 <xTaskIncrementTick+0xa>
 80056ce:	f7ff bc85 	b.w	8004fdc <xTaskIncrementTick.part.0>
		++xPendedTicks;
 80056d2:	4a04      	ldr	r2, [pc, #16]	@ (80056e4 <xTaskIncrementTick+0x1c>)
 80056d4:	6813      	ldr	r3, [r2, #0]
 80056d6:	3301      	adds	r3, #1
}
 80056d8:	2000      	movs	r0, #0
		++xPendedTicks;
 80056da:	6013      	str	r3, [r2, #0]
}
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20004864 	.word	0x20004864
 80056e4:	20004878 	.word	0x20004878

080056e8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056e8:	4b18      	ldr	r3, [pc, #96]	@ (800574c <vTaskSwitchContext+0x64>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	b11b      	cbz	r3, 80056f6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80056ee:	4b18      	ldr	r3, [pc, #96]	@ (8005750 <vTaskSwitchContext+0x68>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80056f6:	4916      	ldr	r1, [pc, #88]	@ (8005750 <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f8:	4a16      	ldr	r2, [pc, #88]	@ (8005754 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 80056fa:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056fc:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056fe:	fab3 f383 	clz	r3, r3
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f1c3 031f 	rsb	r3, r3, #31
 8005708:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800570c:	4912      	ldr	r1, [pc, #72]	@ (8005758 <vTaskSwitchContext+0x70>)
 800570e:	009a      	lsls	r2, r3, #2
 8005710:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005714:	5888      	ldr	r0, [r1, r2]
 8005716:	b940      	cbnz	r0, 800572a <vTaskSwitchContext+0x42>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005728:	e7fe      	b.n	8005728 <vTaskSwitchContext+0x40>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800572a:	6858      	ldr	r0, [r3, #4]
 800572c:	3208      	adds	r2, #8
 800572e:	6840      	ldr	r0, [r0, #4]
 8005730:	6058      	str	r0, [r3, #4]
 8005732:	440a      	add	r2, r1
 8005734:	4290      	cmp	r0, r2
 8005736:	bf04      	itt	eq
 8005738:	6840      	ldreq	r0, [r0, #4]
 800573a:	6058      	streq	r0, [r3, #4]
 800573c:	4b07      	ldr	r3, [pc, #28]	@ (800575c <vTaskSwitchContext+0x74>)
 800573e:	68c2      	ldr	r2, [r0, #12]
 8005740:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a06      	ldr	r2, [pc, #24]	@ (8005760 <vTaskSwitchContext+0x78>)
 8005746:	334c      	adds	r3, #76	@ 0x4c
 8005748:	6013      	str	r3, [r2, #0]
}
 800574a:	4770      	bx	lr
 800574c:	20004864 	.word	0x20004864
 8005750:	20004874 	.word	0x20004874
 8005754:	20004880 	.word	0x20004880
 8005758:	200048fc 	.word	0x200048fc
 800575c:	20004988 	.word	0x20004988
 8005760:	20000578 	.word	0x20000578

08005764 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8005764:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8005766:	8840      	ldrh	r0, [r0, #2]
 8005768:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 800576c:	0c00      	lsrs	r0, r0, #16
 800576e:	4770      	bx	lr

08005770 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8005770:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005772:	8802      	ldrh	r2, [r0, #0]
 8005774:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8005776:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800577a:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800577e:	fb02 f202 	mul.w	r2, r2, r2
 8005782:	4594      	cmp	ip, r2
{
 8005784:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005786:	d919      	bls.n	80057bc <Circle_Limitation+0x4c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8005788:	f890 20b2 	ldrb.w	r2, [r0, #178]	@ 0xb2
 800578c:	ebc2 621c 	rsb	r2, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	eb00 0042 	add.w	r0, r0, r2, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8005796:	8882      	ldrh	r2, [r0, #4]
 8005798:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800579c:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800579e:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80057a2:	bfbc      	itt	lt
 80057a4:	f501 41ff 	addlt.w	r1, r1, #32640	@ 0x7f80
 80057a8:	317f      	addlt	r1, #127	@ 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bfbc      	itt	lt
 80057ae:	f503 43ff 	addlt.w	r3, r3, #32640	@ 0x7f80
 80057b2:	337f      	addlt	r3, #127	@ 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80057b4:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80057b8:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 80057bc:	b289      	uxth	r1, r1
 80057be:	2000      	movs	r0, #0
 80057c0:	f361 000f 	bfi	r0, r1, #0, #16
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f363 401f 	bfi	r0, r3, #16, #16
}
 80057ca:	b004      	add	sp, #16
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop

080057d0 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 80057d4:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 80057d6:	f8c0 3096 	str.w	r3, [r0, #150]	@ 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 80057da:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 80057de:	f8a0 311b 	strh.w	r3, [r0, #283]	@ 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 80057e2:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
}
 80057e6:	4770      	bx	lr

080057e8 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 80057e8:	b120      	cbz	r0, 80057f4 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 80057ea:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 80057ee:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 80057f0:	9b00      	ldr	r3, [sp, #0]
 80057f2:	60c3      	str	r3, [r0, #12]
  }
}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop

080057f8 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 80057f8:	b178      	cbz	r0, 800581a <FCP_CalcCRC+0x22>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 80057fa:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 80057fc:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 80057fe:	440b      	add	r3, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005800:	b139      	cbz	r1, 8005812 <FCP_CalcCRC+0x1a>
 8005802:	3001      	adds	r0, #1
 8005804:	4401      	add	r1, r0
    {
      nSum += pFrame->Buffer[idx];
 8005806:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800580a:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800580c:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 800580e:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005810:	d1f9      	bne.n	8005806 <FCP_CalcCRC+0xe>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8005812:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8005816:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  }

  return nCRC ;
}
 800581a:	4770      	bx	lr

0800581c <HALL_Init>:
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
                                     pHandle->_Super.bElToMecRatio;
 800581c:	7843      	ldrb	r3, [r0, #1]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 800581e:	f8b0 c016 	ldrh.w	ip, [r0, #22]

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8005822:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8005824:	b570      	push	{r4, r5, r6, lr}
  hMaxReliableElSpeedUnit *= 2u;
 8005826:	f8b0 e014 	ldrh.w	lr, [r0, #20]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 800582a:	fb1c fc03 	smulbb	ip, ip, r3
  hMaxReliableElSpeedUnit *= 2u;
 800582e:	fb1e fe03 	smulbb	lr, lr, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8005832:	fa1f fc8c 	uxth.w	ip, ip
  hMaxReliableElSpeedUnit *= 2u;
 8005836:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 800583a:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 800583c:	f1bc 0f03 	cmp.w	ip, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005840:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8005842:	f8a0 10c2 	strh.w	r1, [r0, #194]	@ 0xc2
  hMaxReliableElSpeedUnit *= 2u;
 8005846:	fa1f fe8e 	uxth.w	lr, lr
  if ( hMinReliableElSpeedUnit == 0u )
 800584a:	d969      	bls.n	8005920 <HALL_Init+0x104>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 800584c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8005850:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005854:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005858:	f242 7410 	movw	r4, #10000	@ 0x2710
 800585c:	fbb4 f4fc 	udiv	r4, r4, ip
 8005860:	b2a5      	uxth	r5, r4
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005862:	fb04 f101 	mul.w	r1, r4, r1
 8005866:	4c30      	ldr	r4, [pc, #192]	@ (8005928 <HALL_Init+0x10c>)
 8005868:	f8a0 50c0 	strh.w	r5, [r0, #192]	@ 0xc0
 800586c:	fba4 4101 	umull	r4, r1, r4, r1
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005870:	4c2e      	ldr	r4, [pc, #184]	@ (800592c <HALL_Init+0x110>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8005872:	8b45      	ldrh	r5, [r0, #26]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8005874:	f8a0 e0b0 	strh.w	lr, [r0, #176]	@ 0xb0
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005878:	fba4 4202 	umull	r4, r2, r4, r2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800587c:	69c4      	ldr	r4, [r0, #28]
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800587e:	0892      	lsrs	r2, r2, #2
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005880:	0989      	lsrs	r1, r1, #6

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005882:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8005886:	fbb2 f2f5 	udiv	r2, r2, r5
 800588a:	fb04 f202 	mul.w	r2, r4, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800588e:	f8c0 20b4 	str.w	r2, [r0, #180]	@ 0xb4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8005892:	040e      	lsls	r6, r1, #16
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005894:	ea4f 024c 	mov.w	r2, ip, lsl #1
                       / hMaxReliableElSpeedUnit);
 8005898:	fbb2 f2fe 	udiv	r2, r2, lr
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 800589c:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80058a0:	f890 20c6 	ldrb.w	r2, [r0, #198]	@ 0xc6
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80058a4:	f8c0 60b8 	str.w	r6, [r0, #184]	@ 0xb8
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 80058a8:	8c84      	ldrh	r4, [r0, #36]	@ 0x24
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80058aa:	f8a0 10ae 	strh.w	r1, [r0, #174]	@ 0xae
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80058ae:	fb05 f202 	mul.w	r2, r5, r2
 80058b2:	fbb2 f2f4 	udiv	r2, r2, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80058b6:	699c      	ldr	r4, [r3, #24]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 80058b8:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80058ba:	f8a0 20c4 	strh.w	r2, [r0, #196]	@ 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 80058be:	f890 2048 	ldrb.w	r2, [r0, #72]	@ 0x48
 80058c2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80058c6:	b289      	uxth	r1, r1
  pHandle->SensorIsReliable = true;
 80058c8:	2401      	movs	r4, #1
 80058ca:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 80058ce:	f880 4049 	strb.w	r4, [r0, #73]	@ 0x49
 80058d2:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 80058d4:	6299      	str	r1, [r3, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80058d6:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 80058d8:	2100      	movs	r1, #0
 80058da:	4322      	orrs	r2, r4
 80058dc:	615a      	str	r2, [r3, #20]
 80058de:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	f042 0204 	orr.w	r2, r2, #4
 80058e6:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	f042 0202 	orr.w	r2, r2, #2
 80058ee:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	4322      	orrs	r2, r4
 80058f4:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 80058f6:	6259      	str	r1, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CCER, Channels);
 80058f8:	6a1a      	ldr	r2, [r3, #32]
 80058fa:	4322      	orrs	r2, r4
 80058fc:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	4322      	orrs	r2, r4
 8005902:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 8005904:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8005908:	b14a      	cbz	r2, 800591e <HALL_Init+0x102>
 800590a:	f100 034c 	add.w	r3, r0, #76	@ 0x4c
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 800590e:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 8005912:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005916:	f843 1f04 	str.w	r1, [r3, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 800591a:	4293      	cmp	r3, r2
 800591c:	d1fb      	bne.n	8005916 <HALL_Init+0xfa>
  }
}
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	2496      	movs	r4, #150	@ 0x96
    pHandle->HallTimeout = 150u;
 8005922:	4625      	mov	r5, r4
 8005924:	e79d      	b.n	8005862 <HALL_Init+0x46>
 8005926:	bf00      	nop
 8005928:	10624dd3 	.word	0x10624dd3
 800592c:	aaaaaaab 	.word	0xaaaaaaab

08005930 <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005930:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005932:	68d1      	ldr	r1, [r2, #12]
 8005934:	f021 0102 	bic.w	r1, r1, #2

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 8005938:	2300      	movs	r3, #0
{
 800593a:	b4f0      	push	{r4, r5, r6, r7}

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 800593c:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	@ 0xae
 8005940:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 8005942:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 8005944:	f880 304a 	strb.w	r3, [r0, #74]	@ 0x4a
  pHandle->Direction = POSITIVE;
 8005948:	f880 10a2 	strb.w	r1, [r0, #162]	@ 0xa2
  pHandle->RatioInc = false;
 800594c:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 8005950:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
  pHandle->FirstCapt = 0u;
 8005954:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 8005958:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 800595a:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  pHandle->SensorIsReliable = true;
 800595e:	f880 1049 	strb.w	r1, [r0, #73]	@ 0x49
  pHandle->OVFCounter = 0u;
 8005962:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
  pHandle->_Super.hMecAccelUnitP = 0;
 8005966:	8243      	strh	r3, [r0, #18]
  pHandle->CompSpeed = 0;
 8005968:	f8a0 30ac 	strh.w	r3, [r0, #172]	@ 0xac
  WRITE_REG(TIMx->PSC, Prescaler);
 800596c:	6294      	str	r4, [r2, #40]	@ 0x28
  WRITE_REG(TIMx->CNT, Counter);
 800596e:	6253      	str	r3, [r2, #36]	@ 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005970:	6813      	ldr	r3, [r2, #0]
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005972:	6b86      	ldr	r6, [r0, #56]	@ 0x38
 8005974:	430b      	orrs	r3, r1
 8005976:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005978:	68d3      	ldr	r3, [r2, #12]
 800597a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800597c:	f043 0302 	orr.w	r3, r3, #2
 8005980:	60d3      	str	r3, [r2, #12]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005982:	f890 7020 	ldrb.w	r7, [r0, #32]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005986:	e9d0 5310 	ldrd	r5, r3, [r0, #64]	@ 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800598a:	e9d0 420c 	ldrd	r4, r2, [r0, #48]	@ 0x30
  if ( pHandle->SensorPlacement == DEGREES_120 )
 800598e:	b9ef      	cbnz	r7, 80059cc <HALL_Clear+0x9c>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8005990:	692d      	ldr	r5, [r5, #16]
 8005992:	43ab      	bics	r3, r5
 8005994:	6933      	ldr	r3, [r6, #16]
 8005996:	6924      	ldr	r4, [r4, #16]
 8005998:	bf0c      	ite	eq
 800599a:	2501      	moveq	r5, #1
 800599c:	2500      	movne	r5, #0
 800599e:	ea31 0303 	bics.w	r3, r1, r3
 80059a2:	bf0c      	ite	eq
 80059a4:	2301      	moveq	r3, #1
 80059a6:	2300      	movne	r3, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 80059ae:	ea32 0404 	bics.w	r4, r2, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80059b2:	bf08      	it	eq
 80059b4:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 80059b8:	1e5a      	subs	r2, r3, #1
 80059ba:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
 80059be:	2a05      	cmp	r2, #5
 80059c0:	d858      	bhi.n	8005a74 <HALL_Clear+0x144>
 80059c2:	e8df f002 	tbb	[pc, r2]
 80059c6:	2f25      	.short	0x2f25
 80059c8:	1b4d4339 	.word	0x1b4d4339
 80059cc:	6936      	ldr	r6, [r6, #16]
 80059ce:	692d      	ldr	r5, [r5, #16]
 80059d0:	43ab      	bics	r3, r5
 80059d2:	6923      	ldr	r3, [r4, #16]
 80059d4:	bf0c      	ite	eq
 80059d6:	2401      	moveq	r4, #1
 80059d8:	2400      	movne	r4, #0
 80059da:	ea32 0303 	bics.w	r3, r2, r3
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	ea31 0606 	bics.w	r6, r1, r6
 80059e8:	bf0c      	ite	eq
 80059ea:	2201      	moveq	r2, #1
 80059ec:	2200      	movne	r2, #0
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80059ee:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80059f0:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80059f4:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80059f8:	4313      	orrs	r3, r2
 80059fa:	e7dd      	b.n	80059b8 <HALL_Clear+0x88>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 80059fc:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80059fe:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8005a02:	3b3f      	subs	r3, #63	@ 0x3f
 8005a04:	b21b      	sxth	r3, r3
 8005a06:	8083      	strh	r3, [r0, #4]
}
 8005a08:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005a0a:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8005a0e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8005a10:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005a12:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8005a16:	333f      	adds	r3, #63	@ 0x3f
 8005a18:	b21b      	sxth	r3, r3
}
 8005a1a:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8005a1c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005a1e:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8005a22:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005a24:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005a26:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 8005a2a:	3b2a      	subs	r3, #42	@ 0x2a
 8005a2c:	b21b      	sxth	r3, r3
}
 8005a2e:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005a30:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005a32:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8005a36:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005a38:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005a3a:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 8005a3e:	332a      	adds	r3, #42	@ 0x2a
 8005a40:	b21b      	sxth	r3, r3
}
 8005a42:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005a44:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005a46:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8005a4a:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005a4c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005a4e:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 8005a52:	3b15      	subs	r3, #21
 8005a54:	b21b      	sxth	r3, r3
}
 8005a56:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005a58:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005a5a:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8005a5e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005a60:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005a62:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8005a66:	3315      	adds	r3, #21
 8005a68:	b21b      	sxth	r3, r3
}
 8005a6a:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005a6c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005a6e:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8005a72:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 8005a74:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005a76:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 8005a7a:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
      break;
 8005a7e:	e7c3      	b.n	8005a08 <HALL_Clear+0xd8>

08005a80 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005a80:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8005a84:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005a88:	428a      	cmp	r2, r1
{
 8005a8a:	4603      	mov	r3, r0
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005a8c:	8880      	ldrh	r0, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005a8e:	d00e      	beq.n	8005aae <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005a90:	f8b3 c0aa 	ldrh.w	ip, [r3, #170]	@ 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005a94:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005a98:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005a9a:	4408      	add	r0, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005a9c:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005a9e:	f8b3 c0ac 	ldrh.w	ip, [r3, #172]	@ 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005aa2:	f8a3 10aa 	strh.w	r1, [r3, #170]	@ 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005aa6:	4460      	add	r0, ip
 8005aa8:	b200      	sxth	r0, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005aaa:	8098      	strh	r0, [r3, #4]
}
 8005aac:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8005aae:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8005ab2:	4410      	add	r0, r2
 8005ab4:	b200      	sxth	r0, r0
 8005ab6:	8098      	strh	r0, [r3, #4]
}
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop

08005abc <HALL_CalcAvrgMecSpeedUnit>:
{
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8005ac0:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005ac4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
{
 8005ac6:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 8005ac8:	b180      	cbz	r0, 8005aec <HALL_CalcAvrgMecSpeedUnit+0x30>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8005acc:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	@ 0xae
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d812      	bhi.n	8005afa <HALL_CalcAvrgMecSpeedUnit+0x3e>
      pHandle->_Super.hElSpeedDpp = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	81e3      	strh	r3, [r4, #14]
            pHandle->CompSpeed = 0;
 8005ad8:	2300      	movs	r3, #0
      *hMecSpeedUnit = 0;
 8005ada:	802b      	strh	r3, [r5, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8005adc:	4629      	mov	r1, r5
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f001 f81a 	bl	8006b18 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005ae4:	f9b5 3000 	ldrsh.w	r3, [r5]
 8005ae8:	81a3      	strh	r3, [r4, #12]
}
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8005aec:	78e3      	ldrb	r3, [r4, #3]
 8005aee:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 8005af0:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 8005af2:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 8005af4:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005af6:	81a3      	strh	r3, [r4, #12]
}
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8005afa:	f9b4 20a4 	ldrsh.w	r2, [r4, #164]	@ 0xa4
 8005afe:	81e2      	strh	r2, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8005b00:	2a00      	cmp	r2, #0
 8005b02:	d0e9      	beq.n	8005ad8 <HALL_CalcAvrgMecSpeedUnit+0x1c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005b04:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d01f      	beq.n	8005b4c <HALL_CalcAvrgMecSpeedUnit+0x90>
          if (pHandle->HallMtpa == true)
 8005b0c:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
 8005b10:	b9d3      	cbnz	r3, 8005b48 <HALL_CalcAvrgMecSpeedUnit+0x8c>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8005b12:	88a3      	ldrh	r3, [r4, #4]
 8005b14:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	@ 0xaa
 8005b18:	1ac9      	subs	r1, r1, r3
 8005b1a:	b209      	sxth	r1, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 8005b1c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	@ 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8005b20:	f8a4 10a8 	strh.w	r1, [r4, #168]	@ 0xa8
            pHandle->CompSpeed = ( int16_t )
 8005b24:	fb91 f1f3 	sdiv	r1, r1, r3
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005b28:	8b63      	ldrh	r3, [r4, #26]
 8005b2a:	f8a4 10ac 	strh.w	r1, [r4, #172]	@ 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005b32:	69e1      	ldr	r1, [r4, #28]
 8005b34:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005b36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b3a:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005b3c:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005b40:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8005b44:	b21b      	sxth	r3, r3
 8005b46:	e7c8      	b.n	8005ada <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 8005b48:	2100      	movs	r1, #0
 8005b4a:	e7ed      	b.n	8005b28 <HALL_CalcAvrgMecSpeedUnit+0x6c>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8005b4c:	f9b4 30b0 	ldrsh.w	r3, [r4, #176]	@ 0xb0
 8005b50:	e7c3      	b.n	8005ada <HALL_CalcAvrgMecSpeedUnit+0x1e>
 8005b52:	bf00      	nop

08005b54 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8005b54:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d049      	beq.n	8005bf0 <HALL_TIMx_CC_IRQHandler+0x9c>
{
 8005b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8005b5e:	f890 c020 	ldrb.w	ip, [r0, #32]
    bPrevHallState = pHandle->HallState;
 8005b62:	f890 20a6 	ldrb.w	r2, [r0, #166]	@ 0xa6
    PrevDirection = pHandle->Direction;
 8005b66:	f990 10a2 	ldrsb.w	r1, [r0, #162]	@ 0xa2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8005b6a:	e9d0 740e 	ldrd	r7, r4, [r0, #56]	@ 0x38
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005b6e:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	@ 0x40
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005b72:	e9d0 e50c 	ldrd	lr, r5, [r0, #48]	@ 0x30
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8005b76:	f1bc 0f00 	cmp.w	ip, #0
 8005b7a:	d023      	beq.n	8005bc4 <HALL_TIMx_CC_IRQHandler+0x70>
 8005b7c:	693f      	ldr	r7, [r7, #16]
 8005b7e:	6936      	ldr	r6, [r6, #16]
 8005b80:	43b3      	bics	r3, r6
 8005b82:	f8de 3010 	ldr.w	r3, [lr, #16]
 8005b86:	bf0c      	ite	eq
 8005b88:	2601      	moveq	r6, #1
 8005b8a:	2600      	movne	r6, #0
 8005b8c:	ea35 0303 	bics.w	r3, r5, r3
 8005b90:	bf0c      	ite	eq
 8005b92:	2301      	moveq	r3, #1
 8005b94:	2300      	movne	r3, #0
 8005b96:	ea34 0707 	bics.w	r7, r4, r7
 8005b9a:	bf0c      	ite	eq
 8005b9c:	2401      	moveq	r4, #1
 8005b9e:	2400      	movne	r4, #0
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005ba0:	00a4      	lsls	r4, r4, #2
 8005ba2:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8005ba6:	f084 0404 	eor.w	r4, r4, #4
 8005baa:	4323      	orrs	r3, r4
 8005bac:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
    switch ( pHandle->HallState )
 8005bb0:	3b01      	subs	r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005bb2:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
    switch ( pHandle->HallState )
 8005bb4:	2b05      	cmp	r3, #5
 8005bb6:	f200 8154 	bhi.w	8005e62 <HALL_TIMx_CC_IRQHandler+0x30e>
 8005bba:	e8df f003 	tbb	[pc, r3]
 8005bbe:	5f6e      	.short	0x5f6e
 8005bc0:	1b354450 	.word	0x1b354450
 8005bc4:	6936      	ldr	r6, [r6, #16]
 8005bc6:	43b3      	bics	r3, r6
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f8de 6010 	ldr.w	r6, [lr, #16]
 8005bce:	bf0c      	ite	eq
 8005bd0:	2701      	moveq	r7, #1
 8005bd2:	2700      	movne	r7, #0
 8005bd4:	ea34 0303 	bics.w	r3, r4, r3
 8005bd8:	bf0c      	ite	eq
 8005bda:	2301      	moveq	r3, #1
 8005bdc:	2300      	movne	r3, #0
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	ea35 0606 	bics.w	r6, r5, r6
 8005be4:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005be8:	bf08      	it	eq
 8005bea:	f043 0301 	orreq.w	r3, r3, #1
 8005bee:	e7dd      	b.n	8005bac <HALL_TIMx_CC_IRQHandler+0x58>
}
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 8005bf4:	2a02      	cmp	r2, #2
 8005bf6:	d07a      	beq.n	8005cee <HALL_TIMx_CC_IRQHandler+0x19a>
        else if ( bPrevHallState == STATE_4 )
 8005bf8:	2a04      	cmp	r2, #4
 8005bfa:	f000 8098 	beq.w	8005d2e <HALL_TIMx_CC_IRQHandler+0x1da>
    if (pHandle->Direction != PrevDirection)
 8005bfe:	460a      	mov	r2, r1
    if (pHandle->HallMtpa == true)
 8005c00:	f890 30c7 	ldrb.w	r3, [r0, #199]	@ 0xc7
 8005c04:	b113      	cbz	r3, 8005c0c <HALL_TIMx_CC_IRQHandler+0xb8>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8005c06:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	@ 0xaa
 8005c0a:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 8005c0c:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f040 8097 	bne.w	8005d44 <HALL_TIMx_CC_IRQHandler+0x1f0>
      pHandle->FirstCapt++;
 8005c16:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8005c22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
}
 8005c24:	2000      	movs	r0, #0
 8005c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( bPrevHallState == STATE_4 )
 8005c28:	2a04      	cmp	r2, #4
 8005c2a:	d069      	beq.n	8005d00 <HALL_TIMx_CC_IRQHandler+0x1ac>
        else if ( bPrevHallState == STATE_1 )
 8005c2c:	2a01      	cmp	r2, #1
 8005c2e:	d1e6      	bne.n	8005bfe <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005c30:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005c32:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 8005c36:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005c38:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8005c3a:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005c3e:	b21b      	sxth	r3, r3
 8005c40:	f04f 32ff 	mov.w	r2, #4294967295
 8005c44:	e040      	b.n	8005cc8 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_6 )
 8005c46:	2a06      	cmp	r2, #6
 8005c48:	d068      	beq.n	8005d1c <HALL_TIMx_CC_IRQHandler+0x1c8>
        else if ( bPrevHallState == STATE_5 )
 8005c4a:	2a05      	cmp	r2, #5
 8005c4c:	d1d7      	bne.n	8005bfe <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->Direction = NEGATIVE;
 8005c4e:	22ff      	movs	r2, #255	@ 0xff
 8005c50:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8005c54:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8005c58:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5c:	e034      	b.n	8005cc8 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_1 )
 8005c5e:	2a01      	cmp	r2, #1
 8005c60:	d054      	beq.n	8005d0c <HALL_TIMx_CC_IRQHandler+0x1b8>
        else if ( bPrevHallState == STATE_2 )
 8005c62:	2a02      	cmp	r2, #2
 8005c64:	d1cb      	bne.n	8005bfe <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005c66:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005c68:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = NEGATIVE;
 8005c6c:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005c6e:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = NEGATIVE;
 8005c70:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005c74:	b21b      	sxth	r3, r3
 8005c76:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7a:	e025      	b.n	8005cc8 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_3 )
 8005c7c:	2a03      	cmp	r2, #3
 8005c7e:	d02d      	beq.n	8005cdc <HALL_TIMx_CC_IRQHandler+0x188>
        else if ( bPrevHallState == STATE_6 )
 8005c80:	2a06      	cmp	r2, #6
 8005c82:	d1bc      	bne.n	8005bfe <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005c84:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005c86:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 8005c8a:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005c8c:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 8005c8e:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005c92:	b21b      	sxth	r3, r3
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	e016      	b.n	8005cc8 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_5 )
 8005c9a:	2a05      	cmp	r2, #5
 8005c9c:	d00c      	beq.n	8005cb8 <HALL_TIMx_CC_IRQHandler+0x164>
        else if ( bPrevHallState == STATE_3 )
 8005c9e:	2a03      	cmp	r2, #3
 8005ca0:	d1ad      	bne.n	8005bfe <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005ca2:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005ca4:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 8005ca8:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005caa:	3355      	adds	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 8005cac:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005cb0:	b21b      	sxth	r3, r3
 8005cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb6:	e007      	b.n	8005cc8 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8005cb8:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005cba:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 8005cbe:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8005cc0:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 8005cc2:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8005cc6:	b21b      	sxth	r3, r3
    if (pHandle->Direction != PrevDirection)
 8005cc8:	428a      	cmp	r2, r1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005cca:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
    if (pHandle->Direction != PrevDirection)
 8005cce:	d096      	beq.n	8005bfe <HALL_TIMx_CC_IRQHandler+0xaa>
      pHandle->BufferFilled = 0 ;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8005cd6:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
 8005cda:	e791      	b.n	8005c00 <HALL_TIMx_CC_IRQHandler+0xac>
                                                  + S16_60_PHASE_SHIFT );
 8005cdc:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005cde:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = POSITIVE;
 8005ce2:	2201      	movs	r2, #1
                                                  + S16_60_PHASE_SHIFT );
 8005ce4:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = POSITIVE;
 8005ce6:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8005cea:	b21b      	sxth	r3, r3
 8005cec:	e7ec      	b.n	8005cc8 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005cee:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005cf0:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = POSITIVE;
 8005cf4:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005cf6:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = POSITIVE;
 8005cf8:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005cfc:	b21b      	sxth	r3, r3
 8005cfe:	e7e3      	b.n	8005cc8 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->Direction = POSITIVE;
 8005d00:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8005d02:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 8005d06:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8005d0a:	e7dd      	b.n	8005cc8 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005d0c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 8005d0e:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005d12:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
 8005d16:	3355      	adds	r3, #85	@ 0x55
 8005d18:	b21b      	sxth	r3, r3
 8005d1a:	e7d5      	b.n	8005cc8 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005d1c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005d1e:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 8005d22:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005d24:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 8005d26:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005d2a:	b21b      	sxth	r3, r3
 8005d2c:	e7cc      	b.n	8005cc8 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005d2e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005d30:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 8005d34:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005d36:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8005d38:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005d3c:	b21b      	sxth	r3, r3
 8005d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d42:	e7c1      	b.n	8005cc8 <HALL_TIMx_CC_IRQHandler+0x174>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8005d44:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8005d48:	f890 5026 	ldrb.w	r5, [r0, #38]	@ 0x26
 8005d4c:	42ab      	cmp	r3, r5
 8005d4e:	d205      	bcs.n	8005d5c <HALL_TIMx_CC_IRQHandler+0x208>
        pHandle->BufferFilled++;
 8005d50:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8005d54:	3301      	adds	r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
 8005d5c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005d5e:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005d60:	f890 304e 	ldrb.w	r3, [r0, #78]	@ 0x4e
      if ( pHandle->OVFCounter != 0u )
 8005d64:	f890 104e 	ldrb.w	r1, [r0, #78]	@ 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005d68:	041b      	lsls	r3, r3, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8005d6a:	b2bf      	uxth	r7, r7
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005d6c:	fa13 f386 	uxtah	r3, r3, r6
      if ( pHandle->OVFCounter != 0u )
 8005d70:	f001 0cff 	and.w	ip, r1, #255	@ 0xff
 8005d74:	2900      	cmp	r1, #0
 8005d76:	d044      	beq.n	8005e02 <HALL_TIMx_CC_IRQHandler+0x2ae>
        if ( pHandle->RatioInc )
 8005d78:	f890 104b 	ldrb.w	r1, [r0, #75]	@ 0x4b
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	d04a      	beq.n	8005e16 <HALL_TIMx_CC_IRQHandler+0x2c2>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8005d80:	2100      	movs	r1, #0
 8005d82:	f880 104b 	strb.w	r1, [r0, #75]	@ 0x4b
        hAux = hPrscBuf + 1u;
 8005d86:	1c79      	adds	r1, r7, #1
        wCaptBuf *= hAux;
 8005d88:	b289      	uxth	r1, r1
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
        if ( wCaptBuf < pHandle->MinPeriod )
 8005d8e:	f8d0 10bc 	ldr.w	r1, [r0, #188]	@ 0xbc
 8005d92:	4299      	cmp	r1, r3
 8005d94:	d830      	bhi.n	8005df8 <HALL_TIMx_CC_IRQHandler+0x2a4>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005d96:	f890 1098 	ldrb.w	r1, [r0, #152]	@ 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8005d9a:	f8d0 60b8 	ldr.w	r6, [r0, #184]	@ 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005d9e:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8005da2:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8005da6:	429e      	cmp	r6, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005da8:	f8dc 7050 	ldr.w	r7, [ip, #80]	@ 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8005dac:	bf88      	it	hi
 8005dae:	fb02 f603 	mulhi.w	r6, r2, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005db2:	eba4 0407 	sub.w	r4, r4, r7
          pHandle->SpeedFIFOIdx++;
 8005db6:	f101 0101 	add.w	r1, r1, #1
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005dba:	f8c0 409c 	str.w	r4, [r0, #156]	@ 0x9c
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 8005dbe:	bf94      	ite	ls
 8005dc0:	4356      	mulls	r6, r2
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8005dc2:	19a4      	addhi	r4, r4, r6
          pHandle->SpeedFIFOIdx++;
 8005dc4:	b2c9      	uxtb	r1, r1
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8005dc6:	bf88      	it	hi
 8005dc8:	f8c0 409c 	strhi.w	r4, [r0, #156]	@ 0x9c
 8005dcc:	f8cc 6050 	str.w	r6, [ip, #80]	@ 0x50
            pHandle->SpeedFIFOIdx = 0u;
 8005dd0:	428d      	cmp	r5, r1
 8005dd2:	bf08      	it	eq
 8005dd4:	2100      	moveq	r1, #0
 8005dd6:	f880 1098 	strb.w	r1, [r0, #152]	@ 0x98
          if ( pHandle->SensorIsReliable) 
 8005dda:	f890 1049 	ldrb.w	r1, [r0, #73]	@ 0x49
 8005dde:	b331      	cbz	r1, 8005e2e <HALL_TIMx_CC_IRQHandler+0x2da>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8005de0:	f890 404d 	ldrb.w	r4, [r0, #77]	@ 0x4d
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8005de4:	f8d0 10b4 	ldr.w	r1, [r0, #180]	@ 0xb4
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8005de8:	42a5      	cmp	r5, r4
 8005dea:	d931      	bls.n	8005e50 <HALL_TIMx_CC_IRQHandler+0x2fc>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8005dec:	fbb1 f1f3 	udiv	r1, r1, r3
 8005df0:	fb11 f102 	smulbb	r1, r1, r2
 8005df4:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
      pHandle->OVFCounter = 0u;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
}
 8005dfe:	2000      	movs	r0, #0
 8005e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 8005e02:	f890 104a 	ldrb.w	r1, [r0, #74]	@ 0x4a
 8005e06:	b1a9      	cbz	r1, 8005e34 <HALL_TIMx_CC_IRQHandler+0x2e0>
          hAux = hPrscBuf + 2u;
 8005e08:	1cb9      	adds	r1, r7, #2
          wCaptBuf *= hAux;
 8005e0a:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 8005e0c:	f880 c04a 	strb.w	ip, [r0, #74]	@ 0x4a
          wCaptBuf *= hAux;
 8005e10:	fb01 f303 	mul.w	r3, r1, r3
          pHandle->RatioDec = false;
 8005e14:	e7bb      	b.n	8005d8e <HALL_TIMx_CC_IRQHandler+0x23a>
 8005e16:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8005e18:	f8b0 60ae 	ldrh.w	r6, [r0, #174]	@ 0xae
 8005e1c:	428e      	cmp	r6, r1
 8005e1e:	d9b2      	bls.n	8005d86 <HALL_TIMx_CC_IRQHandler+0x232>
 8005e20:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8005e22:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8005e24:	62a1      	str	r1, [r4, #40]	@ 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8005e26:	2101      	movs	r1, #1
 8005e28:	f880 104b 	strb.w	r1, [r0, #75]	@ 0x4b
 8005e2c:	e7ab      	b.n	8005d86 <HALL_TIMx_CC_IRQHandler+0x232>
            pHandle->AvrElSpeedDpp = 0;
 8005e2e:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8005e32:	e7e1      	b.n	8005df8 <HALL_TIMx_CC_IRQHandler+0x2a4>
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005e34:	b2b6      	uxth	r6, r6
 8005e36:	f5b6 4faa 	cmp.w	r6, #21760	@ 0x5500
 8005e3a:	d2a4      	bcs.n	8005d86 <HALL_TIMx_CC_IRQHandler+0x232>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005e3c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8005e3e:	2900      	cmp	r1, #0
 8005e40:	d0a1      	beq.n	8005d86 <HALL_TIMx_CC_IRQHandler+0x232>
 8005e42:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8005e44:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8005e46:	62a1      	str	r1, [r4, #40]	@ 0x28
              pHandle->RatioDec = true;
 8005e48:	2101      	movs	r1, #1
 8005e4a:	f880 104a 	strb.w	r1, [r0, #74]	@ 0x4a
 8005e4e:	e79a      	b.n	8005d86 <HALL_TIMx_CC_IRQHandler+0x232>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8005e50:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8005e54:	fb93 f3f5 	sdiv	r3, r3, r5
 8005e58:	fb91 f1f3 	sdiv	r1, r1, r3
 8005e5c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8005e60:	e7ca      	b.n	8005df8 <HALL_TIMx_CC_IRQHandler+0x2a4>
        pHandle->SensorIsReliable = false;
 8005e62:	2300      	movs	r3, #0
 8005e64:	f880 3049 	strb.w	r3, [r0, #73]	@ 0x49
        break;
 8005e68:	e6c9      	b.n	8005bfe <HALL_TIMx_CC_IRQHandler+0xaa>
 8005e6a:	bf00      	nop

08005e6c <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8005e6c:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005e70:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  if ( pHandle->SensorIsReliable )
 8005e72:	b1db      	cbz	r3, 8005eac <HALL_TIMx_UP_IRQHandler+0x40>
{
 8005e74:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->OVFCounter++;
 8005e76:	f890 204e 	ldrb.w	r2, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8005e7a:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	@ 0xc0
    pHandle->OVFCounter++;
 8005e7e:	3201      	adds	r2, #1
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8005e86:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	@ 0xc2
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005e8a:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8005e8c:	f890 104e 	ldrb.w	r1, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8005e90:	fb02 f303 	mul.w	r3, r2, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8005e94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e98:	fb04 2202 	mla	r2, r4, r2, r2
 8005e9c:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	4299      	cmp	r1, r3
 8005ea4:	d204      	bcs.n	8005eb0 <HALL_TIMx_UP_IRQHandler+0x44>
}
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	bcf0      	pop	{r4, r5, r6, r7}
 8005eaa:	4770      	bx	lr
 8005eac:	2000      	movs	r0, #0
 8005eae:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005eb0:	f890 7020 	ldrb.w	r7, [r0, #32]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005eb4:	6c05      	ldr	r5, [r0, #64]	@ 0x40
      pHandle->_Super.hElSpeedDpp = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	81c3      	strh	r3, [r0, #14]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005eba:	e9d0 620e 	ldrd	r6, r2, [r0, #56]	@ 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005ebe:	e9d0 410c 	ldrd	r4, r1, [r0, #48]	@ 0x30
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005ec2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005ec4:	b9ef      	cbnz	r7, 8005f02 <HALL_TIMx_UP_IRQHandler+0x96>
 8005ec6:	692d      	ldr	r5, [r5, #16]
 8005ec8:	43ab      	bics	r3, r5
 8005eca:	6933      	ldr	r3, [r6, #16]
 8005ecc:	6924      	ldr	r4, [r4, #16]
 8005ece:	bf0c      	ite	eq
 8005ed0:	2501      	moveq	r5, #1
 8005ed2:	2500      	movne	r5, #0
 8005ed4:	ea32 0303 	bics.w	r3, r2, r3
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 8005ee4:	ea31 0404 	bics.w	r4, r1, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005ee8:	bf08      	it	eq
 8005eea:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 8005eee:	1e5a      	subs	r2, r3, #1
 8005ef0:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
 8005ef4:	2a05      	cmp	r2, #5
 8005ef6:	d867      	bhi.n	8005fc8 <HALL_TIMx_UP_IRQHandler+0x15c>
 8005ef8:	e8df f002 	tbb	[pc, r2]
 8005efc:	4a51585f 	.word	0x4a51585f
 8005f00:	1b43      	.short	0x1b43
 8005f02:	6936      	ldr	r6, [r6, #16]
 8005f04:	692d      	ldr	r5, [r5, #16]
 8005f06:	43ab      	bics	r3, r5
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2401      	moveq	r4, #1
 8005f0e:	2400      	movne	r4, #0
 8005f10:	ea31 0303 	bics.w	r3, r1, r3
 8005f14:	bf0c      	ite	eq
 8005f16:	2301      	moveq	r3, #1
 8005f18:	2300      	movne	r3, #0
 8005f1a:	ea32 0606 	bics.w	r6, r2, r6
 8005f1e:	bf0c      	ite	eq
 8005f20:	2201      	moveq	r2, #1
 8005f22:	2200      	movne	r2, #0
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005f24:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005f26:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005f2a:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	e7dd      	b.n	8005eee <HALL_TIMx_UP_IRQHandler+0x82>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8005f32:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005f34:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8005f38:	3b3f      	subs	r3, #63	@ 0x3f
 8005f3a:	b21b      	sxth	r3, r3
 8005f3c:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8005f3e:	f890 4026 	ldrb.w	r4, [r0, #38]	@ 0x26
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8005f42:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005f46:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
      pHandle->OVFCounter = 0u;
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	f880 104e 	strb.w	r1, [r0, #78]	@ 0x4e
      pHandle->FirstCapt = 0u;
 8005f50:	f880 104c 	strb.w	r1, [r0, #76]	@ 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8005f54:	b14c      	cbz	r4, 8005f6a <HALL_TIMx_UP_IRQHandler+0xfe>
 8005f56:	f100 034c 	add.w	r3, r0, #76	@ 0x4c
 8005f5a:	eb03 0184 	add.w	r1, r3, r4, lsl #2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8005f5e:	f843 2f04 	str.w	r2, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8005f62:	4299      	cmp	r1, r3
 8005f64:	d1fb      	bne.n	8005f5e <HALL_TIMx_UP_IRQHandler+0xf2>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8005f66:	fb02 f404 	mul.w	r4, r2, r4
      pHandle->BufferFilled = 0 ;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8005f70:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8005f74:	f8c0 409c 	str.w	r4, [r0, #156]	@ 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8005f78:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
}
 8005f7c:	bcf0      	pop	{r4, r5, r6, r7}
 8005f7e:	2000      	movs	r0, #0
 8005f80:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005f82:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005f84:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8005f88:	3315      	adds	r3, #21
 8005f8a:	b21b      	sxth	r3, r3
 8005f8c:	8083      	strh	r3, [r0, #4]
      break;
 8005f8e:	e7d6      	b.n	8005f3e <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005f90:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005f92:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 8005f96:	3b15      	subs	r3, #21
 8005f98:	b21b      	sxth	r3, r3
 8005f9a:	8083      	strh	r3, [r0, #4]
      break;
 8005f9c:	e7cf      	b.n	8005f3e <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005f9e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005fa0:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 8005fa4:	332a      	adds	r3, #42	@ 0x2a
 8005fa6:	b21b      	sxth	r3, r3
 8005fa8:	8083      	strh	r3, [r0, #4]
      break;
 8005faa:	e7c8      	b.n	8005f3e <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005fac:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005fae:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 8005fb2:	3b2a      	subs	r3, #42	@ 0x2a
 8005fb4:	b21b      	sxth	r3, r3
 8005fb6:	8083      	strh	r3, [r0, #4]
      break;
 8005fb8:	e7c1      	b.n	8005f3e <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8005fba:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005fbc:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8005fc0:	333f      	adds	r3, #63	@ 0x3f
 8005fc2:	b21b      	sxth	r3, r3
 8005fc4:	8083      	strh	r3, [r0, #4]
      break;
 8005fc6:	e7ba      	b.n	8005f3e <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->SensorIsReliable = false;
 8005fc8:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005fca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 8005fce:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
      break;
 8005fd2:	e7b4      	b.n	8005f3e <HALL_TIMx_UP_IRQHandler+0xd2>

08005fd4 <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005fd4:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8005fd6:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005fd8:	6a13      	ldr	r3, [r2, #32]
{
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8005fe0:	4c1d      	ldr	r4, [pc, #116]	@ (8006058 <ICS_GetPhaseCurrents+0x84>)
 8005fe2:	6213      	str	r3, [r2, #32]
 8005fe4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8005fe6:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 8005fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800605c <ICS_GetPhaseCurrents+0x88>)
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8005fea:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	1b1b      	subs	r3, r3, r4
  if ( aux < -INT16_MAX )
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	db06      	blt.n	8006002 <ICS_GetPhaseCurrents+0x2e>
  {
    pStator_Currents->a = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 8005ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ff8:	db2a      	blt.n	8006050 <ICS_GetPhaseCurrents+0x7c>
 8005ffa:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005ffe:	469e      	mov	lr, r3
 8006000:	e002      	b.n	8006008 <ICS_GetPhaseCurrents+0x34>
 8006002:	f248 0301 	movw	r3, #32769	@ 0x8001
 8006006:	4696      	mov	lr, r2
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8006008:	4a15      	ldr	r2, [pc, #84]	@ (8006060 <ICS_GetPhaseCurrents+0x8c>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 800600a:	6e04      	ldr	r4, [r0, #96]	@ 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 800600c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
    pStator_Currents->a = -INT16_MAX;
 800600e:	f8a1 e000 	strh.w	lr, [r1]
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8006012:	0052      	lsls	r2, r2, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8006014:	b292      	uxth	r2, r2
 8006016:	1b12      	subs	r2, r2, r4

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 8006018:	4c10      	ldr	r4, [pc, #64]	@ (800605c <ICS_GetPhaseCurrents+0x88>)
 800601a:	42a2      	cmp	r2, r4
 800601c:	db06      	blt.n	800602c <ICS_GetPhaseCurrents+0x58>
  {
    pStator_Currents->b = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 800601e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006022:	db11      	blt.n	8006048 <ICS_GetPhaseCurrents+0x74>
 8006024:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006028:	4694      	mov	ip, r2
 800602a:	e002      	b.n	8006032 <ICS_GetPhaseCurrents+0x5e>
 800602c:	46a4      	mov	ip, r4
 800602e:	f248 0201 	movw	r2, #32769	@ 0x8001
    pStator_Currents->b = ( int16_t )aux;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006032:	4413      	add	r3, r2
 8006034:	425b      	negs	r3, r3
    pStator_Currents->b = -INT16_MAX;
 8006036:	f8a1 c002 	strh.w	ip, [r1, #2]
  pHandle->_Super.Ia = pStator_Currents->a;
 800603a:	f8a0 e048 	strh.w	lr, [r0, #72]	@ 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 800603e:	f8a0 c04a 	strh.w	ip, [r0, #74]	@ 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006042:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c

}
 8006046:	bd10      	pop	{r4, pc}
    pStator_Currents->b = ( int16_t )aux;
 8006048:	fa0f fc82 	sxth.w	ip, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800604c:	b292      	uxth	r2, r2
 800604e:	e7f0      	b.n	8006032 <ICS_GetPhaseCurrents+0x5e>
    pStator_Currents->a = ( int16_t )aux;
 8006050:	fa0f fe83 	sxth.w	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006054:	b29b      	uxth	r3, r3
 8006056:	e7d7      	b.n	8006008 <ICS_GetPhaseCurrents+0x34>
 8006058:	40012000 	.word	0x40012000
 800605c:	ffff8001 	.word	0xffff8001
 8006060:	40012100 	.word	0x40012100

08006064 <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006064:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	6a13      	ldr	r3, [r2, #32]
 800606a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800606e:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006070:	f890 3066 	ldrb.w	r3, [r0, #102]	@ 0x66
 8006074:	2b0f      	cmp	r3, #15
 8006076:	d815      	bhi.n	80060a4 <ICS_HFCurrentsCalibration+0x40>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 8006078:	4a0c      	ldr	r2, [pc, #48]	@ (80060ac <ICS_HFCurrentsCalibration+0x48>)
 800607a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
{
 800607c:	b410      	push	{r4}
    pHandle->PhaseAOffset += ADC1->JDR1;
 800607e:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
 8006080:	4423      	add	r3, r4
 8006082:	65c3      	str	r3, [r0, #92]	@ 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006084:	f8d2 413c 	ldr.w	r4, [r2, #316]	@ 0x13c
    pHandle->PolarizationCounter++;
 8006088:	f890 3066 	ldrb.w	r3, [r0, #102]	@ 0x66
    pHandle->PhaseBOffset += ADC2->JDR1;
 800608c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
    pHandle->PolarizationCounter++;
 800608e:	3301      	adds	r3, #1
 8006090:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 8006092:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006094:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8006098:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 800609a:	6602      	str	r2, [r0, #96]	@ 0x60
  pStator_Currents->b = 0;
}
 800609c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 80060a0:	600b      	str	r3, [r1, #0]
}
 80060a2:	4770      	bx	lr
  pStator_Currents->a = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	600b      	str	r3, [r1, #0]
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40012000 	.word	0x40012000

080060b0 <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80060b0:	6f01      	ldr	r1, [r0, #112]	@ 0x70
 80060b2:	68cb      	ldr	r3, [r1, #12]
{
 80060b4:	b410      	push	{r4}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80060be:	f891 202c 	ldrb.w	r2, [r1, #44]	@ 0x2c
 80060c2:	b132      	cbz	r2, 80060d2 <ICS_Init+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80060c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060c8:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80060d0:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80060d2:	695a      	ldr	r2, [r3, #20]
 80060d4:	f042 0201 	orr.w	r2, r2, #1
 80060d8:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 80060da:	790a      	ldrb	r2, [r1, #4]
 80060dc:	2a02      	cmp	r2, #2
 80060de:	d030      	beq.n	8006142 <ICS_Init+0x92>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 80060e0:	780a      	ldrb	r2, [r1, #0]
 80060e2:	2a01      	cmp	r2, #1
 80060e4:	d030      	beq.n	8006148 <ICS_Init+0x98>
  SET_BIT(TIMx->CCER, Channels);
 80060e6:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 80060e8:	4922      	ldr	r1, [pc, #136]	@ (8006174 <ICS_Init+0xc4>)
 80060ea:	f442 62aa 	orr.w	r2, r2, #1360	@ 0x550
 80060ee:	f042 0205 	orr.w	r2, r2, #5
 80060f2:	428b      	cmp	r3, r1
 80060f4:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80060f6:	4a20      	ldr	r2, [pc, #128]	@ (8006178 <ICS_Init+0xc8>)
 80060f8:	d02b      	beq.n	8006152 <ICS_Init+0xa2>
 80060fa:	68d3      	ldr	r3, [r2, #12]
 80060fc:	f043 0302 	orr.w	r3, r3, #2
 8006100:	f44f 11f0 	mov.w	r1, #1966080	@ 0x1e0000
 8006104:	60d3      	str	r3, [r2, #12]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006106:	4b1d      	ldr	r3, [pc, #116]	@ (800617c <ICS_Init+0xcc>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8006108:	6681      	str	r1, [r0, #104]	@ 0x68
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	491c      	ldr	r1, [pc, #112]	@ (8006180 <ICS_Init+0xd0>)
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	688a      	ldr	r2, [r1, #8]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800611c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800611e:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006122:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006126:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006128:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800612a:	685a      	ldr	r2, [r3, #4]
}
 800612c:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->OverCurrentFlag = false;
 8006130:	2100      	movs	r1, #0
 8006132:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006136:	605a      	str	r2, [r3, #4]
 8006138:	f880 106c 	strb.w	r1, [r0, #108]	@ 0x6c
    pHandle->_Super.DTTest = 0u;
 800613c:	f8a0 104e 	strh.w	r1, [r0, #78]	@ 0x4e
}
 8006140:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8006142:	794a      	ldrb	r2, [r1, #5]
 8006144:	2a01      	cmp	r2, #1
 8006146:	d00b      	beq.n	8006160 <ICS_Init+0xb0>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8006148:	f8b0 2064 	ldrh.w	r2, [r0, #100]	@ 0x64
 800614c:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 800614e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006150:	e7c9      	b.n	80060e6 <ICS_Init+0x36>
 8006152:	68d3      	ldr	r3, [r2, #12]
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800615c:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 800615e:	e7d2      	b.n	8006106 <ICS_Init+0x56>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8006160:	7a09      	ldrb	r1, [r1, #8]
 8006162:	2903      	cmp	r1, #3
 8006164:	d1f0      	bne.n	8006148 <ICS_Init+0x98>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006166:	631a      	str	r2, [r3, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006170:	6319      	str	r1, [r3, #48]	@ 0x30
}
 8006172:	e7e9      	b.n	8006148 <ICS_Init+0x98>
 8006174:	40010000 	.word	0x40010000
 8006178:	e0042000 	.word	0xe0042000
 800617c:	40012000 	.word	0x40012000
 8006180:	40012100 	.word	0x40012100

08006184 <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006184:	6f01      	ldr	r1, [r0, #112]	@ 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 8006186:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800618a:	68ca      	ldr	r2, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800618c:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006190:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006192:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006196:	6353      	str	r3, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006198:	6393      	str	r3, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800619a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800619c:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800619e:	6913      	ldr	r3, [r2, #16]
 80061a0:	07db      	lsls	r3, r3, #31
 80061a2:	d5fc      	bpl.n	800619e <ICS_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80061a4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80061a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061aa:	6453      	str	r3, [r2, #68]	@ 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80061ac:	7c0b      	ldrb	r3, [r1, #16]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d000      	beq.n	80061b4 <ICS_TurnOnLowSides+0x30>
 80061b2:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80061b4:	694a      	ldr	r2, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80061b6:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80061b8:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
{
 80061ba:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80061bc:	698c      	ldr	r4, [r1, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80061be:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80061c0:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80061c2:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80061c4:	6184      	str	r4, [r0, #24]
  }
}
 80061c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ca:	619a      	str	r2, [r3, #24]
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop

080061d0 <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80061d0:	6f01      	ldr	r1, [r0, #112]	@ 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80061d2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	@ 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80061d6:	68cb      	ldr	r3, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80061d8:	f04f 0c00 	mov.w	ip, #0
{
 80061dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80061de:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80061e2:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80061e4:	6358      	str	r0, [r3, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80061e6:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 80061e8:	6398      	str	r0, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80061ea:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80061ec:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80061f0:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80061f2:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80061f4:	691a      	ldr	r2, [r3, #16]
 80061f6:	07d2      	lsls	r2, r2, #31
 80061f8:	d5fc      	bpl.n	80061f4 <ICS_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80061fa:	f06f 0201 	mvn.w	r2, #1
 80061fe:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006202:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006206:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006208:	7c0a      	ldrb	r2, [r1, #16]
 800620a:	2a02      	cmp	r2, #2
 800620c:	d007      	beq.n	800621e <ICS_SwitchOnPWM+0x4e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800620e:	f06f 0201 	mvn.w	r2, #1
 8006212:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	60da      	str	r2, [r3, #12]
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 800621c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800621e:	6a1d      	ldr	r5, [r3, #32]
 8006220:	f240 5c55 	movw	ip, #1365	@ 0x555
 8006224:	ea3c 0c05 	bics.w	ip, ip, r5
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006228:	e9d1 e405 	ldrd	lr, r4, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800622c:	e9d1 7007 	ldrd	r7, r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006230:	e9d1 6209 	ldrd	r6, r2, [r1, #36]	@ 0x24
 8006234:	d007      	beq.n	8006246 <ICS_SwitchOnPWM+0x76>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006236:	0424      	lsls	r4, r4, #16
 8006238:	0400      	lsls	r0, r0, #16
 800623a:	0412      	lsls	r2, r2, #16
 800623c:	f8ce 4018 	str.w	r4, [lr, #24]
 8006240:	61b8      	str	r0, [r7, #24]
 8006242:	61b2      	str	r2, [r6, #24]
}
 8006244:	e7e3      	b.n	800620e <ICS_SwitchOnPWM+0x3e>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006246:	f8ce 4018 	str.w	r4, [lr, #24]
 800624a:	61b8      	str	r0, [r7, #24]
 800624c:	61b2      	str	r2, [r6, #24]
}
 800624e:	e7de      	b.n	800620e <ICS_SwitchOnPWM+0x3e>

08006250 <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006250:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8006252:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006254:	68d1      	ldr	r1, [r2, #12]
 8006256:	f021 0101 	bic.w	r1, r1, #1
 800625a:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800625c:	6c51      	ldr	r1, [r2, #68]	@ 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 800625e:	f04f 0c00 	mov.w	ip, #0
 8006262:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8006266:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
 800626a:	6451      	str	r1, [r2, #68]	@ 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800626c:	7c19      	ldrb	r1, [r3, #16]
 800626e:	2902      	cmp	r1, #2
 8006270:	d009      	beq.n	8006286 <ICS_SwitchOffPWM+0x36>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006272:	f06f 0301 	mvn.w	r3, #1
 8006276:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006278:	6913      	ldr	r3, [r2, #16]
 800627a:	07db      	lsls	r3, r3, #31
 800627c:	d5fc      	bpl.n	8006278 <ICS_SwitchOffPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800627e:	f06f 0301 	mvn.w	r3, #1
 8006282:	6113      	str	r3, [r2, #16]
 8006284:	4770      	bx	lr
{
 8006286:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006288:	699c      	ldr	r4, [r3, #24]
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800628a:	695d      	ldr	r5, [r3, #20]
 800628c:	6a18      	ldr	r0, [r3, #32]
 800628e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006290:	0424      	lsls	r4, r4, #16
 8006292:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006294:	69dd      	ldr	r5, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006296:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006298:	0400      	lsls	r0, r0, #16
 800629a:	0409      	lsls	r1, r1, #16
 800629c:	f06f 0301 	mvn.w	r3, #1
 80062a0:	61a8      	str	r0, [r5, #24]
 80062a2:	61a1      	str	r1, [r4, #24]
 80062a4:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80062a6:	6913      	ldr	r3, [r2, #16]
 80062a8:	07d9      	lsls	r1, r3, #31
 80062aa:	d5fc      	bpl.n	80062a6 <ICS_SwitchOffPWM+0x56>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80062ac:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 80062b0:	bc30      	pop	{r4, r5}
 80062b2:	6113      	str	r3, [r2, #16]
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop

080062b8 <ICS_CurrentReadingCalibration>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80062b8:	6f02      	ldr	r2, [r0, #112]	@ 0x70
{
 80062ba:	b538      	push	{r3, r4, r5, lr}
  pHandle->PhaseAOffset = 0u;
 80062bc:	2300      	movs	r3, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80062be:	68d4      	ldr	r4, [r2, #12]
  pHandle->PolarizationCounter = 0u;
 80062c0:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
  pHandle->PhaseAOffset = 0u;
 80062c4:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 80062c8:	6a23      	ldr	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 80062ca:	4a21      	ldr	r2, [pc, #132]	@ (8006350 <ICS_CurrentReadingCalibration+0x98>)
 80062cc:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
{
 80062d0:	4605      	mov	r5, r0
 80062d2:	f023 0305 	bic.w	r3, r3, #5
 80062d6:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 80062d8:	6042      	str	r2, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 80062da:	f7ff ff79 	bl	80061d0 <ICS_SwitchOnPWM>
  						  pHandle->pParams_str->RepetitionCounter,
 80062de:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
  waitForPolarizationEnd( TIMx,
 80062e0:	f105 0366 	add.w	r3, r5, #102	@ 0x66
 80062e4:	7a12      	ldrb	r2, [r2, #8]
 80062e6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 fa04 	bl	80066f8 <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 80062f0:	4628      	mov	r0, r5
 80062f2:	f7ff ffad 	bl	8006250 <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80062f6:	e9d5 2317 	ldrd	r2, r3, [r5, #92]	@ 0x5c
  pHandle->PhaseAOffset >>= 3;
 80062fa:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseBOffset >>= 3;
 80062fc:	08db      	lsrs	r3, r3, #3
 80062fe:	e9c5 2317 	strd	r2, r3, [r5, #92]	@ 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006302:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8006304:	f8b5 3064 	ldrh.w	r3, [r5, #100]	@ 0x64
 8006308:	f022 0208 	bic.w	r2, r2, #8
 800630c:	61a2      	str	r2, [r4, #24]
 800630e:	69a2      	ldr	r2, [r4, #24]
 8006310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006314:	61a2      	str	r2, [r4, #24]
 8006316:	69e2      	ldr	r2, [r4, #28]
 8006318:	f022 0208 	bic.w	r2, r2, #8
 800631c:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800631e:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006320:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006322:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006324:	69a3      	ldr	r3, [r4, #24]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 8006326:	4a0b      	ldr	r2, [pc, #44]	@ (8006354 <ICS_CurrentReadingCalibration+0x9c>)
 8006328:	f043 0308 	orr.w	r3, r3, #8
 800632c:	61a3      	str	r3, [r4, #24]
 800632e:	69a3      	ldr	r3, [r4, #24]
 8006330:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006334:	61a3      	str	r3, [r4, #24]
 8006336:	69e3      	ldr	r3, [r4, #28]
 8006338:	f043 0308 	orr.w	r3, r3, #8
 800633c:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 800633e:	6a23      	ldr	r3, [r4, #32]
 8006340:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8006344:	f043 0305 	orr.w	r3, r3, #5
 8006348:	6223      	str	r3, [r4, #32]
 800634a:	606a      	str	r2, [r5, #4]
}
 800634c:	bd38      	pop	{r3, r4, r5, pc}
 800634e:	bf00      	nop
 8006350:	08006065 	.word	0x08006065
 8006354:	08005fd5 	.word	0x08005fd5

08006358 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006358:	6f03      	ldr	r3, [r0, #112]	@ 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 800635a:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800635c:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 800635e:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
{
 8006360:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 8006362:	8e44      	ldrh	r4, [r0, #50]	@ 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006364:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006366:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006368:	63da      	str	r2, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800636a:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 800636c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006370:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop

08006378 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8006378:	4922      	ldr	r1, [pc, #136]	@ (8006404 <ICS_TIMx_UP_IRQHandler+0x8c>)
 800637a:	680b      	ldr	r3, [r1, #0]
{
 800637c:	b470      	push	{r4, r5, r6}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 800637e:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006382:	6f04      	ldr	r4, [r0, #112]	@ 0x70

  if ( adcinjflags == CONV_STARTED )
 8006384:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006386:	68e2      	ldr	r2, [r4, #12]
  if ( adcinjflags == CONV_STARTED )
 8006388:	d026      	beq.n	80063d8 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 800638a:	b94b      	cbnz	r3, 80063a0 <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 800638c:	8861      	ldrh	r1, [r4, #2]
 800638e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8006390:	428b      	cmp	r3, r1
 8006392:	d3fc      	bcc.n	800638e <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8006394:	491b      	ldr	r1, [pc, #108]	@ (8006404 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8006396:	680b      	ldr	r3, [r1, #0]
 8006398:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 800639c:	2b08      	cmp	r3, #8
 800639e:	d026      	beq.n	80063ee <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 80063a0:	4e18      	ldr	r6, [pc, #96]	@ (8006404 <ICS_TIMx_UP_IRQHandler+0x8c>)
 80063a2:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80063a4:	68b3      	ldr	r3, [r6, #8]
 80063a6:	4d18      	ldr	r5, [pc, #96]	@ (8006408 <ICS_TIMx_UP_IRQHandler+0x90>)
 80063a8:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
 80063ac:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80063b0:	430b      	orrs	r3, r1
 80063b2:	60b3      	str	r3, [r6, #8]
 80063b4:	68ab      	ldr	r3, [r5, #8]
 80063b6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80063ba:	430b      	orrs	r3, r1
 80063bc:	60ab      	str	r3, [r5, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 80063be:	79a3      	ldrb	r3, [r4, #6]
 80063c0:	03db      	lsls	r3, r3, #15
 80063c2:	63b3      	str	r3, [r6, #56]	@ 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 80063c4:	79e3      	ldrb	r3, [r4, #7]
 80063c6:	03db      	lsls	r3, r3, #15
 80063c8:	63ab      	str	r3, [r5, #56]	@ 0x38
  SET_BIT(TIMx->CCER, Channels);
 80063ca:	6a13      	ldr	r3, [r2, #32]
 80063cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 80063d0:	3046      	adds	r0, #70	@ 0x46
 80063d2:	bc70      	pop	{r4, r5, r6}
 80063d4:	6213      	str	r3, [r2, #32]
 80063d6:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80063d8:	680b      	ldr	r3, [r1, #0]
 80063da:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80063de:	2b0c      	cmp	r3, #12
 80063e0:	d0de      	beq.n	80063a0 <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80063e2:	680b      	ldr	r3, [r1, #0]
 80063e4:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80063e8:	2b0c      	cmp	r3, #12
 80063ea:	d1f5      	bne.n	80063d8 <ICS_TIMx_UP_IRQHandler+0x60>
 80063ec:	e7d8      	b.n	80063a0 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80063ee:	680b      	ldr	r3, [r1, #0]
 80063f0:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80063f4:	2b0c      	cmp	r3, #12
 80063f6:	d0d3      	beq.n	80063a0 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80063f8:	680b      	ldr	r3, [r1, #0]
 80063fa:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80063fe:	2b0c      	cmp	r3, #12
 8006400:	d1f5      	bne.n	80063ee <ICS_TIMx_UP_IRQHandler+0x76>
 8006402:	e7cd      	b.n	80063a0 <ICS_TIMx_UP_IRQHandler+0x28>
 8006404:	40012000 	.word	0x40012000
 8006408:	40012100 	.word	0x40012100

0800640c <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800640c:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800640e:	7c1a      	ldrb	r2, [r3, #16]
 8006410:	2a02      	cmp	r2, #2
 8006412:	d004      	beq.n	800641e <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 8006414:	2301      	movs	r3, #1
 8006416:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c

  return &( pHandle->_Super.Motor );
}
 800641a:	3046      	adds	r0, #70	@ 0x46
 800641c:	4770      	bx	lr
{
 800641e:	b430      	push	{r4, r5}
 8006420:	699c      	ldr	r4, [r3, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006422:	695d      	ldr	r5, [r3, #20]
 8006424:	6a19      	ldr	r1, [r3, #32]
 8006426:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006428:	0424      	lsls	r4, r4, #16
 800642a:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800642c:	69dd      	ldr	r5, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800642e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006430:	0409      	lsls	r1, r1, #16
 8006432:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8006434:	2301      	movs	r3, #1
 8006436:	61a9      	str	r1, [r5, #24]
}
 8006438:	3046      	adds	r0, #70	@ 0x46
 800643a:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 800643c:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
}
 8006440:	bc30      	pop	{r4, r5}
 8006442:	4770      	bx	lr

08006444 <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8006444:	f890 306c 	ldrb.w	r3, [r0, #108]	@ 0x6c
 8006448:	b90b      	cbnz	r3, 800644e <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 800644a:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 800644c:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 800644e:	2300      	movs	r3, #0
 8006450:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
    retval = MC_BREAK_IN;
 8006454:	2040      	movs	r0, #64	@ 0x40
 8006456:	4770      	bx	lr

08006458 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8006458:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 800645a:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800645e:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8006460:	2100      	movs	r1, #0
 8006462:	f000 fe57 	bl	8007114 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8006466:	2300      	movs	r3, #0
 8006468:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 800646c:	bd10      	pop	{r4, pc}
 800646e:	bf00      	nop

08006470 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006470:	f8b0 c100 	ldrh.w	ip, [r0, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8006474:	f10c 0201 	add.w	r2, ip, #1
 8006478:	b292      	uxth	r2, r2
{
 800647a:	b510      	push	{r4, lr}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
  {
    pHandle->hNextMeasBufferIndex = 0u;
 800647c:	2a80      	cmp	r2, #128	@ 0x80
{
 800647e:	4604      	mov	r4, r0
    pHandle->hNextMeasBufferIndex = 0u;
 8006480:	bf28      	it	cs
 8006482:	2200      	movcs	r2, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006484:	f824 101c 	strh.w	r1, [r4, ip, lsl #1]
{
 8006488:	4608      	mov	r0, r1
 800648a:	f8a4 2100 	strh.w	r2, [r4, #256]	@ 0x100
 800648e:	1ea3      	subs	r3, r4, #2
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8006490:	f8a4 c102 	strh.w	ip, [r4, #258]	@ 0x102
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006494:	f104 0efe 	add.w	lr, r4, #254	@ 0xfe
  int32_t wAux = 0;
 8006498:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800649a:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800649e:	459e      	cmp	lr, r3
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80064a0:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80064a2:	d1fa      	bne.n	800649a <MPM_CalcElMotorPower+0x2a>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 80064a4:	2a00      	cmp	r2, #0
 80064a6:	bfb8      	it	lt
 80064a8:	327f      	addlt	r2, #127	@ 0x7f
 80064aa:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 80064ac:	f8a4 2104 	strh.w	r2, [r4, #260]	@ 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 80064b0:	bd10      	pop	{r4, pc}
 80064b2:	bf00      	nop

080064b4 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 80064b4:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	@ 0x104
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop

080064bc <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80064bc:	8a03      	ldrh	r3, [r0, #16]
 80064be:	8b42      	ldrh	r2, [r0, #26]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d306      	bcc.n	80064d2 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80064c4:	8b82      	ldrh	r2, [r0, #28]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d901      	bls.n	80064ce <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 80064ca:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 80064cc:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 80064ce:	8ac0      	ldrh	r0, [r0, #22]
 80064d0:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 80064d2:	2008      	movs	r0, #8
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop

080064d8 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80064d8:	2300      	movs	r3, #0
 80064da:	8203      	strh	r3, [r0, #16]
}
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop

080064e0 <NTC_Init>:
{
 80064e0:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 80064e2:	7803      	ldrb	r3, [r0, #0]
{
 80064e4:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80064e6:	b123      	cbz	r3, 80064f2 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80064e8:	8a43      	ldrh	r3, [r0, #18]
 80064ea:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 80064ec:	2200      	movs	r2, #0
 80064ee:	82c2      	strh	r2, [r0, #22]
}
 80064f0:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80064f2:	3004      	adds	r0, #4
 80064f4:	f7fb fb92 	bl	8001c1c <RCM_RegisterRegConv>
 80064f8:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
    NTC_Clear( pHandle );
 80064fc:	4620      	mov	r0, r4
 80064fe:	f7ff ffeb 	bl	80064d8 <NTC_Clear>
}
 8006502:	bd10      	pop	{r4, pc}

08006504 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8006504:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006506:	7803      	ldrb	r3, [r0, #0]
{
 8006508:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 800650a:	b113      	cbz	r3, 8006512 <NTC_CalcAvTemp+0xe>
 800650c:	2000      	movs	r0, #0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800650e:	82e0      	strh	r0, [r4, #22]
  {
    pHandle->hFaultState = MC_NO_ERROR;
  }

  return ( pHandle->hFaultState );
}
 8006510:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006512:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8006516:	f7fb fc5b 	bl	8001dd0 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 800651a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800651e:	4298      	cmp	r0, r3
 8006520:	d007      	beq.n	8006532 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006522:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8006524:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006526:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8006528:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 800652c:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8006530:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8006532:	4620      	mov	r0, r4
 8006534:	f7ff ffc2 	bl	80064bc <NTC_SetFaultState>
 8006538:	82e0      	strh	r0, [r4, #22]
}
 800653a:	bd10      	pop	{r4, pc}

0800653c <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800653c:	7803      	ldrb	r3, [r0, #0]
 800653e:	b983      	cbnz	r3, 8006562 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8006540:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006542:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8006544:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006548:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 800654a:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 800654c:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006550:	2b00      	cmp	r3, #0
 8006552:	bfbc      	itt	lt
 8006554:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8006558:	33ff      	addlt	r3, #255	@ 0xff
 800655a:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 800655e:	b200      	sxth	r0, r0
 8006560:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8006562:	8a80      	ldrh	r0, [r0, #20]
}
 8006564:	b200      	sxth	r0, r0
 8006566:	4770      	bx	lr

08006568 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8006568:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800656a:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800656c:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800656e:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006570:	8442      	strh	r2, [r0, #34]	@ 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8006572:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8006574:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8006576:	4770      	bx	lr

08006578 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8006578:	8081      	strh	r1, [r0, #4]
}
 800657a:	4770      	bx	lr

0800657c <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 800657c:	80c1      	strh	r1, [r0, #6]
}
 800657e:	4770      	bx	lr

08006580 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8006580:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop

08006588 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8006588:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop

08006590 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8006590:	6081      	str	r1, [r0, #8]

  return;
}
 8006592:	4770      	bx	lr

08006594 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8006594:	8b00      	ldrh	r0, [r0, #24]
 8006596:	4770      	bx	lr

08006598 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8006598:	8b40      	ldrh	r0, [r0, #26]
 800659a:	4770      	bx	lr

0800659c <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 800659c:	8441      	strh	r1, [r0, #34]	@ 0x22
}
 800659e:	4770      	bx	lr

080065a0 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 80065a0:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop

080065a8 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80065a8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 80065ac:	4603      	mov	r3, r0
 80065ae:	b530      	push	{r4, r5, lr}

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 80065b0:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80065b4:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80065b8:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80065bc:	fb01 f202 	mul.w	r2, r1, r2
  if ( pHandle->hKiGain == 0 )
 80065c0:	b17c      	cbz	r4, 80065e2 <PI_Controller+0x3a>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80065c2:	fb04 f101 	mul.w	r1, r4, r1
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80065c6:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
    if ( wIntegral_sum_temp < 0 )
 80065ca:	eb15 0e01 	adds.w	lr, r5, r1
 80065ce:	d41d      	bmi.n	800660c <PI_Controller+0x64>
          wIntegral_sum_temp = -INT32_MAX;
 80065d0:	420d      	tst	r5, r1
 80065d2:	4914      	ldr	r1, [pc, #80]	@ (8006624 <PI_Controller+0x7c>)
 80065d4:	bf48      	it	mi
 80065d6:	468e      	movmi	lr, r1
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80065d8:	45a6      	cmp	lr, r4
 80065da:	dc02      	bgt.n	80065e2 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80065dc:	691c      	ldr	r4, [r3, #16]
 80065de:	4574      	cmp	r4, lr
 80065e0:	dd1d      	ble.n	800661e <PI_Controller+0x76>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80065e2:	8b99      	ldrh	r1, [r3, #28]
 80065e4:	410a      	asrs	r2, r1
 80065e6:	8bd9      	ldrh	r1, [r3, #30]
 80065e8:	fa44 f101 	asr.w	r1, r4, r1
 80065ec:	440a      	add	r2, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80065ee:	4290      	cmp	r0, r2
 80065f0:	da03      	bge.n	80065fa <PI_Controller+0x52>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 80065f2:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 80065f4:	4414      	add	r4, r2
 80065f6:	609c      	str	r4, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 80065f8:	bd30      	pop	{r4, r5, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 80065fa:	4594      	cmp	ip, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
 80065fc:	bfc5      	ittet	gt
 80065fe:	ebac 0202 	subgt.w	r2, ip, r2
  pHandle->wIntegralTerm += wDischarge;
 8006602:	18a4      	addgt	r4, r4, r2
  return ( ( int16_t )( wOutput_32 ) );
 8006604:	b210      	sxthle	r0, r2
    wOutput_32 = hLowerOutputLimit;
 8006606:	4660      	movgt	r0, ip
  pHandle->wIntegralTerm += wDischarge;
 8006608:	609c      	str	r4, [r3, #8]
}
 800660a:	bd30      	pop	{r4, r5, pc}
      if ( pHandle->wIntegralTerm > 0 )
 800660c:	2d00      	cmp	r5, #0
 800660e:	dde3      	ble.n	80065d8 <PI_Controller+0x30>
        if ( wIntegral_Term > 0 )
 8006610:	2900      	cmp	r1, #0
 8006612:	dde1      	ble.n	80065d8 <PI_Controller+0x30>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006614:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006618:	428c      	cmp	r4, r1
 800661a:	d1e2      	bne.n	80065e2 <PI_Controller+0x3a>
 800661c:	46a6      	mov	lr, r4
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 800661e:	4674      	mov	r4, lr
 8006620:	e7df      	b.n	80065e2 <PI_Controller+0x3a>
 8006622:	bf00      	nop
 8006624:	80000001 	.word	0x80000001

08006628 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8006628:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
{
 800662c:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800662e:	89d1      	ldrh	r1, [r2, #14]
 8006630:	8b14      	ldrh	r4, [r2, #24]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006632:	8993      	ldrh	r3, [r2, #12]
{
 8006634:	4605      	mov	r5, r0
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006636:	8ad0      	ldrh	r0, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006638:	f8d5 6108 	ldr.w	r6, [r5, #264]	@ 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800663c:	fb11 f204 	smulbb	r2, r1, r4
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006640:	fb13 2400 	smlabb	r4, r3, r0, r2
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006644:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
 8006648:	f7ff f88c 	bl	8005764 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 800664c:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800664e:	490f      	ldr	r1, [pc, #60]	@ (800668c <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006650:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8006654:	bfb8      	it	lt
 8006656:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800665a:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 800665e:	bfb8      	it	lt
 8006660:	33ff      	addlt	r3, #255	@ 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006662:	fb81 1000 	smull	r1, r0, r1, r0
 8006666:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
  wAux /= 65536;
 800666a:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 800666c:	fb02 f303 	mul.w	r3, r2, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8006670:	4907      	ldr	r1, [pc, #28]	@ (8006690 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8006672:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006676:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8006678:	fb81 2103 	smull	r2, r1, r1, r3
 800667c:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800667e:	4628      	mov	r0, r5
 8006680:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006688:	f7ff bef2 	b.w	8006470 <MPM_CalcElMotorPower>
 800668c:	1b4e81b5 	.word	0x1b4e81b5
 8006690:	66666667 	.word	0x66666667

08006694 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8006694:	4b17      	ldr	r3, [pc, #92]	@ (80066f4 <startTimers+0x60>)
 8006696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8006698:	07d2      	lsls	r2, r2, #31
 800669a:	d415      	bmi.n	80066c8 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 800669c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80066a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80066a6:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80066a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80066ac:	f002 0201 	and.w	r2, r2, #1
 80066b0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80066b2:	9a01      	ldr	r2, [sp, #4]
 80066b4:	694a      	ldr	r2, [r1, #20]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80066bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	641a      	str	r2, [r3, #64]	@ 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 80066c4:	b002      	add	sp, #8
 80066c6:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 80066c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80066cc:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80066ce:	6859      	ldr	r1, [r3, #4]
 80066d0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80066d4:	f041 0120 	orr.w	r1, r1, #32
 80066d8:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80066da:	6959      	ldr	r1, [r3, #20]
 80066dc:	f041 0101 	orr.w	r1, r1, #1
 80066e0:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80066e2:	6859      	ldr	r1, [r3, #4]
 80066e4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80066e8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80066ec:	430a      	orrs	r2, r1
 80066ee:	605a      	str	r2, [r3, #4]
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40023800 	.word	0x40023800

080066f8 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 80066f8:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 80066fa:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 80066fc:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8006700:	f102 0201 	add.w	r2, r2, #1
 8006704:	d11b      	bne.n	800673e <waitForPolarizationEnd+0x46>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006706:	6804      	ldr	r4, [r0, #0]
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006708:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800670a:	f06f 0602 	mvn.w	r6, #2
 800670e:	0155      	lsls	r5, r2, #5
 8006710:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8006712:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8006714:	f893 c000 	ldrb.w	ip, [r3]
 8006718:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 800671c:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8006720:	d80c      	bhi.n	800673c <waitForPolarizationEnd+0x44>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006722:	6904      	ldr	r4, [r0, #16]
 8006724:	07a4      	lsls	r4, r4, #30
 8006726:	d5f5      	bpl.n	8006714 <waitForPolarizationEnd+0x1c>
      hCalibrationPeriodCounter++;
 8006728:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800672c:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800672e:	6106      	str	r6, [r0, #16]
 8006730:	d8f0      	bhi.n	8006714 <waitForPolarizationEnd+0x1c>
      {
        if (*cnt < NB_CONVERSIONS)
 8006732:	781c      	ldrb	r4, [r3, #0]
 8006734:	2c0f      	cmp	r4, #15
 8006736:	d8ed      	bhi.n	8006714 <waitForPolarizationEnd+0x1c>
        {
          *SWerror = 1u;
 8006738:	2301      	movs	r3, #1
 800673a:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 800673c:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800673e:	2c60      	cmp	r4, #96	@ 0x60
 8006740:	d0e3      	beq.n	800670a <waitForPolarizationEnd+0x12>
 8006742:	e7e1      	b.n	8006708 <waitForPolarizationEnd+0x10>

08006744 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8006744:	6843      	ldr	r3, [r0, #4]
 8006746:	4718      	bx	r3

08006748 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8006748:	b530      	push	{r4, r5, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800674a:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800674e:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006750:	ea4f 4c21 	mov.w	ip, r1, asr #16
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006754:	b20b      	sxth	r3, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006756:	fb04 fc0c 	mul.w	ip, r4, ip
 800675a:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800675e:	fb02 f303 	mul.w	r3, r2, r3

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8006762:	eb03 024c 	add.w	r2, r3, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006766:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800676a:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 800676e:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8006772:	1c55      	adds	r5, r2, #1
{
 8006774:	b083      	sub	sp, #12
  {
    if ( wZ < 0 )
    {
      pHandle->Sector = SECTOR_5;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006776:	ea4f 0494 	mov.w	r4, r4, lsr #2
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800677a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800677e:	ea4f 0161 	mov.w	r1, r1, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006782:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  if ( wY < 0 )
 8006786:	db7a      	blt.n	800687e <PWMC_SetPhaseVoltage+0x136>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8006788:	1c5d      	adds	r5, r3, #1
 800678a:	db57      	blt.n	800683c <PWMC_SetPhaseVoltage+0xf4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800678c:	ebb1 010e 	subs.w	r1, r1, lr
 8006790:	bf44      	itt	mi
 8006792:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8006796:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800679a:	2b00      	cmp	r3, #0
 800679c:	bfbc      	itt	lt
 800679e:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80067a2:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80067a6:	2a00      	cmp	r2, #0
 80067a8:	bfb8      	it	lt
 80067aa:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80067ae:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80067b2:	bfb8      	it	lt
 80067b4:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80067b8:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80067bc:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhB;
 80067c0:	fa1f fe83 	uxth.w	lr, r3
      pHandle->midDuty = wTimePhA;
 80067c4:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhC;
 80067c8:	b294      	uxth	r4, r2
 80067ca:	2501      	movs	r5, #1
        pHandle->highDuty = wTimePhA;
 80067cc:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 80067d0:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
        pHandle->Sector = SECTOR_4;
 80067d4:	f880 503a 	strb.w	r5, [r0, #58]	@ 0x3a
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 80067d8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 80067dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 80067e0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80067e4:	b289      	uxth	r1, r1
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	b292      	uxth	r2, r2
  if ( pHandle->DTTest == 1u )
 80067ea:	2c01      	cmp	r4, #1
        pHandle->lowDuty = wTimePhC;
 80067ec:	f8a0 e03c 	strh.w	lr, [r0, #60]	@ 0x3c
        pHandle->midDuty = wTimePhB;
 80067f0:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 80067f4:	8641      	strh	r1, [r0, #50]	@ 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 80067f6:	8683      	strh	r3, [r0, #52]	@ 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 80067f8:	86c2      	strh	r2, [r0, #54]	@ 0x36
  if ( pHandle->DTTest == 1u )
 80067fa:	d11a      	bne.n	8006832 <PWMC_SetPhaseVoltage+0xea>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 80067fc:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	@ 0x48
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006800:	f8b0 4054 	ldrh.w	r4, [r0, #84]	@ 0x54
    if ( pHandle->Ia > 0 )
 8006804:	2d00      	cmp	r5, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006806:	bfcc      	ite	gt
 8006808:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800680a:	1b09      	suble	r1, r1, r4
 800680c:	b289      	uxth	r1, r1
 800680e:	8641      	strh	r1, [r0, #50]	@ 0x32
    }

    if ( pHandle->Ib > 0 )
 8006810:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	@ 0x4a
 8006814:	2900      	cmp	r1, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8006816:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	@ 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 800681a:	bfcc      	ite	gt
 800681c:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800681e:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8006820:	2900      	cmp	r1, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006822:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006824:	bfcc      	ite	gt
 8006826:	18a4      	addgt	r4, r4, r2
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006828:	1b12      	suble	r2, r2, r4
 800682a:	8683      	strh	r3, [r0, #52]	@ 0x34
      pHandle->CntPhC += pHandle->DTCompCnt;
 800682c:	bfcc      	ite	gt
 800682e:	86c4      	strhgt	r4, [r0, #54]	@ 0x36
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006830:	86c2      	strhle	r2, [r0, #54]	@ 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006832:	6983      	ldr	r3, [r0, #24]
}
 8006834:	b003      	add	sp, #12
 8006836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800683a:	4718      	bx	r3
      if ( wX <= 0 )
 800683c:	f1bc 0f00 	cmp.w	ip, #0
 8006840:	dd3d      	ble.n	80068be <PWMC_SetPhaseVoltage+0x176>
        wTimePhB = wTimePhA + wZ / 131072;
 8006842:	2b00      	cmp	r3, #0
 8006844:	bfb8      	it	lt
 8006846:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800684a:	ebac 0e0e 	sub.w	lr, ip, lr
        wTimePhB = wTimePhA + wZ / 131072;
 800684e:	bfb8      	it	lt
 8006850:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8006854:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006858:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800685c:	bfb8      	it	lt
 800685e:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006862:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006866:	bfb8      	it	lt
 8006868:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 800686c:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhA;
 8006870:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhB;
 8006874:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhC;
 8006878:	b294      	uxth	r4, r2
 800687a:	2500      	movs	r5, #0
 800687c:	e7a6      	b.n	80067cc <PWMC_SetPhaseVoltage+0x84>
    if ( wZ < 0 )
 800687e:	1c5d      	adds	r5, r3, #1
 8006880:	db5d      	blt.n	800693e <PWMC_SetPhaseVoltage+0x1f6>
      if ( wX <= 0 )
 8006882:	f1bc 0f00 	cmp.w	ip, #0
 8006886:	dd38      	ble.n	80068fa <PWMC_SetPhaseVoltage+0x1b2>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006888:	ebb1 010c 	subs.w	r1, r1, ip
 800688c:	bf44      	itt	mi
 800688e:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8006892:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006896:	2a00      	cmp	r2, #0
 8006898:	bfb8      	it	lt
 800689a:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800689e:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 80068a2:	bfb8      	it	lt
 80068a4:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
 80068a8:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80068ac:	eb02 436c 	add.w	r3, r2, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 80068b0:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = wTimePhC;
 80068b4:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhA;
 80068b8:	b28c      	uxth	r4, r1
 80068ba:	2502      	movs	r5, #2
 80068bc:	e786      	b.n	80067cc <PWMC_SetPhaseVoltage+0x84>
        wTimePhC = wTimePhA - wY / 131072;
 80068be:	2a00      	cmp	r2, #0
 80068c0:	bfb8      	it	lt
 80068c2:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80068c6:	eba1 010c 	sub.w	r1, r1, ip
        wTimePhC = wTimePhA - wY / 131072;
 80068ca:	bfb8      	it	lt
 80068cc:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhC + wX / 131072;
 80068d0:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80068d4:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80068d8:	bfb8      	it	lt
 80068da:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 80068de:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80068e2:	bfb8      	it	lt
 80068e4:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 80068e8:	eb02 4363 	add.w	r3, r2, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 80068ec:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhC;
 80068f0:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhB;
 80068f4:	b29c      	uxth	r4, r3
 80068f6:	2505      	movs	r5, #5
 80068f8:	e768      	b.n	80067cc <PWMC_SetPhaseVoltage+0x84>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80068fa:	ebbc 0e0e 	subs.w	lr, ip, lr
 80068fe:	bf44      	itt	mi
 8006900:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8006904:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006908:	2b00      	cmp	r3, #0
 800690a:	bfbc      	itt	lt
 800690c:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8006910:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8006914:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006918:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800691c:	bfb8      	it	lt
 800691e:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006922:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006926:	bfb8      	it	lt
 8006928:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 800692c:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhC;
 8006930:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = wTimePhB;
 8006934:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhA;
 8006938:	b28c      	uxth	r4, r1
 800693a:	2503      	movs	r5, #3
 800693c:	e746      	b.n	80067cc <PWMC_SetPhaseVoltage+0x84>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800693e:	ebb1 010e 	subs.w	r1, r1, lr
 8006942:	bf44      	itt	mi
 8006944:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8006948:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800694c:	2b00      	cmp	r3, #0
 800694e:	bfbc      	itt	lt
 8006950:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8006954:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006958:	2a00      	cmp	r2, #0
 800695a:	bfb8      	it	lt
 800695c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006960:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006964:	bfb8      	it	lt
 8006966:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800696a:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800696e:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhC;
 8006972:	fa1f fe82 	uxth.w	lr, r2
      pHandle->midDuty = wTimePhA;
 8006976:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhB;
 800697a:	b29c      	uxth	r4, r3
 800697c:	2504      	movs	r5, #4
 800697e:	e725      	b.n	80067cc <PWMC_SetPhaseVoltage+0x84>

08006980 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006980:	6883      	ldr	r3, [r0, #8]
 8006982:	4718      	bx	r3

08006984 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006984:	b510      	push	{r4, lr}
 8006986:	4604      	mov	r4, r0
  bool retVal = false;
  if ( action == CRC_START )
 8006988:	b179      	cbz	r1, 80069aa <PWMC_CurrentReadingCalibr+0x26>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 800698a:	2901      	cmp	r1, #1
 800698c:	d001      	beq.n	8006992 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 800698e:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006990:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8006992:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8006996:	b19b      	cbz	r3, 80069c0 <PWMC_CurrentReadingCalibr+0x3c>
      pHandle->OffCalibrWaitTimeCounter--;
 8006998:	3b01      	subs	r3, #1
 800699a:	b29b      	uxth	r3, r3
 800699c:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f4      	bne.n	800698e <PWMC_CurrentReadingCalibr+0xa>
        pHandle->pFctCurrReadingCalib( pHandle );
 80069a4:	6903      	ldr	r3, [r0, #16]
 80069a6:	4798      	blx	r3
        retVal = true;
 80069a8:	e00a      	b.n	80069c0 <PWMC_CurrentReadingCalibr+0x3c>
    PWMC_SwitchOffPWM( pHandle );
 80069aa:	f7ff ffe9 	bl	8006980 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 80069ae:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80069b2:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e9      	bne.n	800698e <PWMC_CurrentReadingCalibr+0xa>
      pHandle->pFctCurrReadingCalib( pHandle );
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	4620      	mov	r0, r4
 80069be:	4798      	blx	r3
      retVal = true;
 80069c0:	2001      	movs	r0, #1
}
 80069c2:	bd10      	pop	{r4, pc}

080069c4 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 80069c4:	69c3      	ldr	r3, [r0, #28]
 80069c6:	4718      	bx	r3

080069c8 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80069c8:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 80069cc:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80069ce:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80069d0:	4494      	add	ip, r2
 80069d2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 80069d6:	b430      	push	{r4, r5}
 80069d8:	2500      	movs	r5, #0
 80069da:	f36c 050f 	bfi	r5, ip, #0, #16
 80069de:	f36c 451f 	bfi	r5, ip, #16, #16
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80069e2:	b14b      	cbz	r3, 80069f8 <RVBS_Clear+0x30>
  {
    pHandle->aBuffer[index] = aux;
 80069e4:	6a04      	ldr	r4, [r0, #32]
 80069e6:	2300      	movs	r3, #0
 80069e8:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80069ea:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 80069ec:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80069f0:	8b01      	ldrh	r1, [r0, #24]
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	4291      	cmp	r1, r2
 80069f6:	d8f7      	bhi.n	80069e8 <RVBS_Clear+0x20>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 80069f8:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 80069fa:	6045      	str	r5, [r0, #4]
  pHandle->index = 0;
 80069fc:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
}
 8006a00:	bc30      	pop	{r4, r5}
 8006a02:	4770      	bx	lr

08006a04 <RVBS_Init>:
{
 8006a04:	b510      	push	{r4, lr}
 8006a06:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006a08:	300c      	adds	r0, #12
 8006a0a:	f7fb f907 	bl	8001c1c <RCM_RegisterRegConv>
 8006a0e:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
  RVBS_Clear( pHandle );
 8006a12:	4620      	mov	r0, r4
 8006a14:	f7ff ffd8 	bl	80069c8 <RVBS_Clear>
}
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	bf00      	nop

08006a1c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8006a1c:	88c3      	ldrh	r3, [r0, #6]
 8006a1e:	8b42      	ldrh	r2, [r0, #26]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d306      	bcc.n	8006a32 <RVBS_CheckFaultState+0x16>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8006a24:	8b80      	ldrh	r0, [r0, #28]
 8006a26:	4298      	cmp	r0, r3
 8006a28:	bf94      	ite	ls
 8006a2a:	2000      	movls	r0, #0
 8006a2c:	2001      	movhi	r0, #1
 8006a2e:	0080      	lsls	r0, r0, #2
 8006a30:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8006a32:	2002      	movs	r0, #2
  else
  {
    fault = MC_NO_ERROR;
  }
  return fault;
}
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop

08006a38 <RVBS_CalcAvVbus>:
{
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006a3c:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8006a40:	f7fb f9c6 	bl	8001dd0 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8006a44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a48:	4298      	cmp	r0, r3
 8006a4a:	d01e      	beq.n	8006a8a <RVBS_CalcAvVbus+0x52>
    pHandle->aBuffer[pHandle->index] = hAux;
 8006a4c:	6a26      	ldr	r6, [r4, #32]
 8006a4e:	f894 c025 	ldrb.w	ip, [r4, #37]	@ 0x25
 8006a52:	f826 001c 	strh.w	r0, [r6, ip, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006a56:	8b25      	ldrh	r5, [r4, #24]
 8006a58:	b1e5      	cbz	r5, 8006a94 <RVBS_CalcAvVbus+0x5c>
 8006a5a:	2300      	movs	r3, #0
    wtemp = 0;
 8006a5c:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8006a5e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006a62:	3301      	adds	r3, #1
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 8006a68:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8006a6a:	d3f8      	bcc.n	8006a5e <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8006a6c:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006a70:	1e6b      	subs	r3, r5, #1
 8006a72:	459c      	cmp	ip, r3
      pHandle->index++;
 8006a74:	bfb4      	ite	lt
 8006a76:	f10c 0c01 	addlt.w	ip, ip, #1
      pHandle->index = 0;
 8006a7a:	2300      	movge	r3, #0
    pHandle->_Super.LatestConv = hAux;
 8006a7c:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006a7e:	80e2      	strh	r2, [r4, #6]
      pHandle->index++;
 8006a80:	bfb4      	ite	lt
 8006a82:	f884 c025 	strblt.w	ip, [r4, #37]	@ 0x25
      pHandle->index = 0;
 8006a86:	f884 3025 	strbge.w	r3, [r4, #37]	@ 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7ff ffc6 	bl	8006a1c <RVBS_CheckFaultState>
 8006a90:	8120      	strh	r0, [r4, #8]
}
 8006a92:	bd70      	pop	{r4, r5, r6, pc}
    wtemp /= pHandle->LowPassFilterBW;
 8006a94:	deff      	udf	#255	@ 0xff
 8006a96:	bf00      	nop

08006a98 <REMNG_Init>:
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
  pHandle->TargetFinal = 0;
 8006a98:	2300      	movs	r3, #0
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8006a9a:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8006a9c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8006aa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8006aa4:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8006aa6:	4770      	bx	lr

08006aa8 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8006aa8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006aac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006ab0:	8182      	strh	r2, [r0, #12]
}
 8006ab2:	4770      	bx	lr

08006ab4 <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006ab4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006ab8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006abc:	81c2      	strh	r2, [r0, #14]
}
 8006abe:	4770      	bx	lr

08006ac0 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8006ac0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006ac4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006ac8:	8202      	strh	r2, [r0, #16]
}
 8006aca:	4770      	bx	lr

08006acc <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8006acc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006ad0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8006ad4:	8980      	ldrh	r0, [r0, #12]
 8006ad6:	4770      	bx	lr

08006ad8 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8006ad8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006adc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8006ae0:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop

08006ae8 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8006ae8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006aec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8006af0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop

08006af8 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8006af8:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop

08006b00 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8006b00:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop

08006b08 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8006b08:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop

08006b10 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8006b10:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop

08006b18 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8006b18:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	b510      	push	{r4, lr}
  {
    hAux = -( *pMecSpeedUnit );
 8006b20:	fa1f f18c 	uxth.w	r1, ip
  if ( *pMecSpeedUnit < 0 )
 8006b24:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( *pMecSpeedUnit );
 8006b28:	bfb8      	it	lt
 8006b2a:	4249      	neglt	r1, r1
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006b2c:	f8b3 e016 	ldrh.w	lr, [r3, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006b30:	78c0      	ldrb	r0, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006b32:	781a      	ldrb	r2, [r3, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006b34:	8a9c      	ldrh	r4, [r3, #20]
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8006b36:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
    hAux = -( *pMecSpeedUnit );
 8006b3a:	bfb8      	it	lt
 8006b3c:	b289      	uxthlt	r1, r1
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006b3e:	458e      	cmp	lr, r1
 8006b40:	d816      	bhi.n	8006b70 <SPD_IsMecSpeedReliable+0x58>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 8006b42:	fa1f fe8c 	uxth.w	lr, ip
  if ( pHandle->hMecAccelUnitP < 0 )
 8006b46:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8006b4a:	bfb8      	it	lt
 8006b4c:	f1ce 0e00 	rsblt	lr, lr, #0
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006b50:	f8b3 c018 	ldrh.w	ip, [r3, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 8006b54:	bfb8      	it	lt
 8006b56:	fa1f fe8e 	uxthlt.w	lr, lr
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006b5a:	45f4      	cmp	ip, lr
 8006b5c:	d308      	bcc.n	8006b70 <SPD_IsMecSpeedReliable+0x58>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8006b5e:	428c      	cmp	r4, r1
 8006b60:	d306      	bcc.n	8006b70 <SPD_IsMecSpeedReliable+0x58>
      bSpeedErrorNumber++;
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006b62:	4290      	cmp	r0, r2
 8006b64:	d809      	bhi.n	8006b7a <SPD_IsMecSpeedReliable+0x62>
    {
      bSpeedErrorNumber = 0u;
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8006b66:	1a10      	subs	r0, r2, r0
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006b68:	701a      	strb	r2, [r3, #0]
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8006b6a:	bf18      	it	ne
 8006b6c:	2001      	movne	r0, #1

  return ( SpeedSensorReliability );
}
 8006b6e:	bd10      	pop	{r4, pc}
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006b70:	4290      	cmp	r0, r2
 8006b72:	d9f8      	bls.n	8006b66 <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber++;
 8006b74:	3201      	adds	r2, #1
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	e7f5      	b.n	8006b66 <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber = 0u;
 8006b7a:	2200      	movs	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006b7c:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8006b7e:	2001      	movs	r0, #1
}
 8006b80:	bd10      	pop	{r4, pc}
 8006b82:	bf00      	nop

08006b84 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8006b84:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006b88:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
  wAux *= INT16_MAX;
 8006b8c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006b90:	fb93 f0f2 	sdiv	r0, r3, r2
  return ( int16_t )wAux;
}
 8006b94:	b200      	sxth	r0, r0
 8006b96:	4770      	bx	lr

08006b98 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006b98:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
  pHandle->PISpeed = pPI;
 8006b9c:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006b9e:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
  pHandle->SPD = SPD_Handle;
 8006ba2:	6142      	str	r2, [r0, #20]
{
 8006ba4:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8006ba6:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8006baa:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8006bac:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006bae:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006bb2:	0409      	lsls	r1, r1, #16
 8006bb4:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8006bb8:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8006bba:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 8006bbe:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006bc0:	6183      	str	r3, [r0, #24]
}
 8006bc2:	4770      	bx	lr

08006bc4 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8006bc4:	6940      	ldr	r0, [r0, #20]
 8006bc6:	4770      	bx	lr

08006bc8 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006bc8:	7803      	ldrb	r3, [r0, #0]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d000      	beq.n	8006bd0 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8006bce:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8006bd0:	6900      	ldr	r0, [r0, #16]
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	f7ff bcdc 	b.w	8006590 <PID_SetIntegralTerm>

08006bd8 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8006bd8:	6840      	ldr	r0, [r0, #4]
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	bfbc      	itt	lt
 8006bde:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8006be2:	30ff      	addlt	r0, #255	@ 0xff
}
 8006be4:	1400      	asrs	r0, r0, #16
 8006be6:	4770      	bx	lr

08006be8 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8006be8:	6880      	ldr	r0, [r0, #8]
 8006bea:	2800      	cmp	r0, #0
 8006bec:	bfbc      	itt	lt
 8006bee:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8006bf2:	30ff      	addlt	r0, #255	@ 0xff
}
 8006bf4:	1400      	asrs	r0, r0, #16
 8006bf6:	4770      	bx	lr

08006bf8 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006bf8:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8006bfa:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006bfc:	60c3      	str	r3, [r0, #12]
}
 8006bfe:	4770      	bx	lr

08006c00 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8006c00:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006c02:	7803      	ldrb	r3, [r0, #0]
{
 8006c04:	4604      	mov	r4, r0
 8006c06:	460d      	mov	r5, r1
 8006c08:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006c0a:	b31b      	cbz	r3, 8006c54 <STC_ExecRamp+0x54>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006c0c:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006c0e:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006c10:	2800      	cmp	r0, #0
 8006c12:	bfbc      	itt	lt
 8006c14:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8006c18:	30ff      	addlt	r0, #255	@ 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006c1a:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006c1c:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006c20:	dd01      	ble.n	8006c26 <STC_ExecRamp+0x26>
 8006c22:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006c24:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8006c26:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8006c2a:	428b      	cmp	r3, r1
 8006c2c:	dcf9      	bgt.n	8006c22 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8006c2e:	8c23      	ldrh	r3, [r4, #32]
 8006c30:	4299      	cmp	r1, r3
 8006c32:	da03      	bge.n	8006c3c <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8006c34:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 8006c38:	428b      	cmp	r3, r1
 8006c3a:	dbf2      	blt.n	8006c22 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8006c3c:	b9a6      	cbnz	r6, 8006c68 <STC_ExecRamp+0x68>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006c3e:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006c40:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006c42:	2b01      	cmp	r3, #1
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006c44:	bf0c      	ite	eq
 8006c46:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8006c48:	60a5      	strne	r5, [r4, #8]
      pHandle->IncDecAmount = 0;
 8006c4a:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
 8006c4c:	61a0      	str	r0, [r4, #24]
      pHandle->RampRemainingStep++;
 8006c4e:	60e6      	str	r6, [r4, #12]
      pHandle->IncDecAmount = wAux1;
 8006c50:	2001      	movs	r0, #1
}
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8006c54:	f7ff ffc8 	bl	8006be8 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8006c58:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006c5a:	42ab      	cmp	r3, r5
 8006c5c:	dbe1      	blt.n	8006c22 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006c5e:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8006c62:	42ab      	cmp	r3, r5
 8006c64:	dcdd      	bgt.n	8006c22 <STC_ExecRamp+0x22>
 8006c66:	e7e9      	b.n	8006c3c <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006c68:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8006c6a:	4a06      	ldr	r2, [pc, #24]	@ (8006c84 <STC_ExecRamp+0x84>)
      pHandle->TargetFinal = hTargetFinal;
 8006c6c:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006c6e:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8006c72:	fba2 2303 	umull	r2, r3, r2, r3
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8006c76:	1a28      	subs	r0, r5, r0
      wAux /= 1000u;
 8006c78:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8006c7a:	1c5e      	adds	r6, r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8006c7c:	0400      	lsls	r0, r0, #16
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8006c7e:	fb90 f0f6 	sdiv	r0, r0, r6
      pHandle->IncDecAmount = wAux1;
 8006c82:	e7e3      	b.n	8006c4c <STC_ExecRamp+0x4c>
 8006c84:	10624dd3 	.word	0x10624dd3

08006c88 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006c8c:	6183      	str	r3, [r0, #24]
}
 8006c8e:	4770      	bx	lr

08006c90 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006c90:	b570      	push	{r4, r5, r6, lr}
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006c92:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006c94:	68c3      	ldr	r3, [r0, #12]
{
 8006c96:	4604      	mov	r4, r0
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006c98:	b96a      	cbnz	r2, 8006cb6 <STC_CalcTorqueReference+0x26>
  if ( pHandle->RampRemainingStep > 1u )
 8006c9a:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->TorqueRef;
 8006c9c:	6886      	ldr	r6, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 8006c9e:	d923      	bls.n	8006ce8 <STC_CalcTorqueReference+0x58>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8006ca0:	6982      	ldr	r2, [r0, #24]
 8006ca2:	4416      	add	r6, r2

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8006ca4:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006ca6:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8006ca8:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006caa:	4630      	mov	r0, r6
 8006cac:	db20      	blt.n	8006cf0 <STC_CalcTorqueReference+0x60>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006cae:	1405      	asrs	r5, r0, #16
 8006cb0:	b228      	sxth	r0, r5
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006cb2:	60a6      	str	r6, [r4, #8]
  }

  return hTorqueReference;
}
 8006cb4:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->RampRemainingStep > 1u )
 8006cb6:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->SpeedRefUnitExt;
 8006cb8:	6846      	ldr	r6, [r0, #4]
  if ( pHandle->RampRemainingStep > 1u )
 8006cba:	d91d      	bls.n	8006cf8 <STC_CalcTorqueReference+0x68>
    wCurrentReference += pHandle->IncDecAmount;
 8006cbc:	6981      	ldr	r1, [r0, #24]
 8006cbe:	440e      	add	r6, r1
    pHandle->RampRemainingStep--;
 8006cc0:	3b01      	subs	r3, #1
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006cc2:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8006cc4:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	db1a      	blt.n	8006d00 <STC_CalcTorqueReference+0x70>
 8006cca:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006ccc:	2a01      	cmp	r2, #1
 8006cce:	d1ef      	bne.n	8006cb0 <STC_CalcTorqueReference+0x20>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8006cd0:	6960      	ldr	r0, [r4, #20]
 8006cd2:	f7ff ff19 	bl	8006b08 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8006cd6:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8006cd8:	b209      	sxth	r1, r1
 8006cda:	6920      	ldr	r0, [r4, #16]
 8006cdc:	f7ff fc64 	bl	80065a8 <PI_Controller>
    pHandle->SpeedRefUnitExt = wCurrentReference;
 8006ce0:	6066      	str	r6, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006ce2:	0406      	lsls	r6, r0, #16
 8006ce4:	60a6      	str	r6, [r4, #8]
}
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8006ce8:	d014      	beq.n	8006d14 <STC_CalcTorqueReference+0x84>
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006cea:	2e00      	cmp	r6, #0
 8006cec:	4630      	mov	r0, r6
 8006cee:	dade      	bge.n	8006cae <STC_CalcTorqueReference+0x1e>
 8006cf0:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8006cf4:	30ff      	adds	r0, #255	@ 0xff
 8006cf6:	e7da      	b.n	8006cae <STC_CalcTorqueReference+0x1e>
  else if ( pHandle->RampRemainingStep == 1u )
 8006cf8:	d006      	beq.n	8006d08 <STC_CalcTorqueReference+0x78>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006cfa:	2e00      	cmp	r6, #0
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	dae4      	bge.n	8006cca <STC_CalcTorqueReference+0x3a>
 8006d00:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8006d04:	30ff      	adds	r0, #255	@ 0xff
 8006d06:	e7e0      	b.n	8006cca <STC_CalcTorqueReference+0x3a>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006d08:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8006d0c:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006d0e:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8006d10:	60c3      	str	r3, [r0, #12]
 8006d12:	e7db      	b.n	8006ccc <STC_CalcTorqueReference+0x3c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006d14:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8006d18:	60c2      	str	r2, [r0, #12]
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006d1a:	042e      	lsls	r6, r5, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006d1c:	e7c8      	b.n	8006cb0 <STC_CalcTorqueReference+0x20>
 8006d1e:	bf00      	nop

08006d20 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8006d20:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop

08006d28 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8006d28:	8bc0      	ldrh	r0, [r0, #30]
 8006d2a:	4770      	bx	lr

08006d2c <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8006d2c:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	@ 0x24
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop

08006d34 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006d34:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8006d38:	2200      	movs	r2, #0
 8006d3a:	b299      	uxth	r1, r3
 8006d3c:	f361 020f 	bfi	r2, r1, #0, #16
 8006d40:	0c1b      	lsrs	r3, r3, #16
 8006d42:	f363 421f 	bfi	r2, r3, #16, #16
{
 8006d46:	b082      	sub	sp, #8
}
 8006d48:	4610      	mov	r0, r2
 8006d4a:	b002      	add	sp, #8
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop

08006d50 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006d50:	b510      	push	{r4, lr}
 8006d52:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8006d54:	6940      	ldr	r0, [r0, #20]
 8006d56:	f7ff fed7 	bl	8006b08 <SPD_GetAvrgMecSpeedUnit>
 8006d5a:	0400      	lsls	r0, r0, #16
 8006d5c:	6060      	str	r0, [r4, #4]
}
 8006d5e:	bd10      	pop	{r4, pc}

08006d60 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006d60:	2300      	movs	r3, #0
 8006d62:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006d64:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop

08006d6c <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8006d6c:	b500      	push	{lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006d6e:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006d70:	f8b0 e004 	ldrh.w	lr, [r0, #4]
{
 8006d74:	4684      	mov	ip, r0
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006d76:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 8006d78:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006d7a:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8006d7e:	ea41 010e 	orr.w	r1, r1, lr
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006d82:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8006d84:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006d86:	f8ac 2002 	strh.w	r2, [ip, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006d8a:	f8ac 1004 	strh.w	r1, [ip, #4]
  if ( LocalState == FAULT_NOW )
 8006d8e:	d008      	beq.n	8006da2 <STM_FaultProcessing+0x36>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8006d90:	b90a      	cbnz	r2, 8006d96 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8006d92:	f85d fb04 	ldr.w	pc, [sp], #4
      pHandle->bState = FAULT_NOW;
 8006d96:	230a      	movs	r3, #10
 8006d98:	f88c 3000 	strb.w	r3, [ip]
      LocalState = FAULT_NOW;
 8006d9c:	200a      	movs	r0, #10
}
 8006d9e:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8006da2:	2a00      	cmp	r2, #0
 8006da4:	d1fa      	bne.n	8006d9c <STM_FaultProcessing+0x30>
      pHandle->bState = FAULT_OVER;
 8006da6:	200b      	movs	r0, #11
 8006da8:	f88c 0000 	strb.w	r0, [ip]
}
 8006dac:	f85d fb04 	ldr.w	pc, [sp], #4

08006db0 <STM_NextState>:
{
 8006db0:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8006db2:	7803      	ldrb	r3, [r0, #0]
 8006db4:	2b14      	cmp	r3, #20
 8006db6:	d820      	bhi.n	8006dfa <STM_NextState+0x4a>
 8006db8:	e8df f003 	tbb	[pc, r3]
 8006dbc:	530d2930 	.word	0x530d2930
 8006dc0:	260d6547 	.word	0x260d6547
 8006dc4:	1f1f421d 	.word	0x1f1f421d
 8006dc8:	3a3d0b19 	.word	0x3a3d0b19
 8006dcc:	61506937 	.word	0x61506937
 8006dd0:	5e          	.byte	0x5e
 8006dd1:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006dd2:	290e      	cmp	r1, #14
 8006dd4:	d00c      	beq.n	8006df0 <STM_NextState+0x40>
      if ( bState == ANY_STOP )
 8006dd6:	2907      	cmp	r1, #7
 8006dd8:	d00a      	beq.n	8006df0 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006dda:	f001 01fd 	and.w	r1, r1, #253	@ 0xfd
 8006dde:	2901      	cmp	r1, #1
 8006de0:	d003      	beq.n	8006dea <STM_NextState+0x3a>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8006de2:	2200      	movs	r2, #0
 8006de4:	2180      	movs	r1, #128	@ 0x80
 8006de6:	f7ff ffc1 	bl	8006d6c <STM_FaultProcessing>
 8006dea:	2000      	movs	r0, #0
}
 8006dec:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 8006dee:	b921      	cbnz	r1, 8006dfa <STM_NextState+0x4a>
    pHandle->bState = bNewState;
 8006df0:	7001      	strb	r1, [r0, #0]
 8006df2:	2001      	movs	r0, #1
}
 8006df4:	bd08      	pop	{r3, pc}
      if ( bState == STOP_IDLE )
 8006df6:	2909      	cmp	r1, #9
 8006df8:	d0fa      	beq.n	8006df0 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006dfa:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d0f3      	beq.n	8006dea <STM_NextState+0x3a>
 8006e02:	2907      	cmp	r1, #7
 8006e04:	d0f1      	beq.n	8006dea <STM_NextState+0x3a>
 8006e06:	e7ec      	b.n	8006de2 <STM_NextState+0x32>
      if ( bState == STOP )
 8006e08:	2908      	cmp	r1, #8
 8006e0a:	d1f6      	bne.n	8006dfa <STM_NextState+0x4a>
 8006e0c:	e7f0      	b.n	8006df0 <STM_NextState+0x40>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8006e0e:	2907      	cmp	r1, #7
 8006e10:	d0ee      	beq.n	8006df0 <STM_NextState+0x40>
 8006e12:	f1a1 030d 	sub.w	r3, r1, #13
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d8df      	bhi.n	8006dda <STM_NextState+0x2a>
 8006e1a:	e7e9      	b.n	8006df0 <STM_NextState+0x40>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006e1c:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d0e5      	beq.n	8006df0 <STM_NextState+0x40>
           || ( bState == ICLWAIT ) )
 8006e24:	290c      	cmp	r1, #12
 8006e26:	d1ec      	bne.n	8006e02 <STM_NextState+0x52>
 8006e28:	e7e2      	b.n	8006df0 <STM_NextState+0x40>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006e2a:	2911      	cmp	r1, #17
 8006e2c:	d1d3      	bne.n	8006dd6 <STM_NextState+0x26>
 8006e2e:	e7df      	b.n	8006df0 <STM_NextState+0x40>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8006e30:	2902      	cmp	r1, #2
 8006e32:	d1d0      	bne.n	8006dd6 <STM_NextState+0x26>
 8006e34:	e7dc      	b.n	8006df0 <STM_NextState+0x40>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8006e36:	f001 03f7 	and.w	r3, r1, #247	@ 0xf7
 8006e3a:	2b07      	cmp	r3, #7
 8006e3c:	d1cd      	bne.n	8006dda <STM_NextState+0x2a>
 8006e3e:	e7d7      	b.n	8006df0 <STM_NextState+0x40>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8006e40:	2900      	cmp	r1, #0
 8006e42:	d0d5      	beq.n	8006df0 <STM_NextState+0x40>
 8006e44:	290c      	cmp	r1, #12
 8006e46:	d1d8      	bne.n	8006dfa <STM_NextState+0x4a>
 8006e48:	e7d2      	b.n	8006df0 <STM_NextState+0x40>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006e4a:	2913      	cmp	r1, #19
 8006e4c:	d0d0      	beq.n	8006df0 <STM_NextState+0x40>
 8006e4e:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 8006e52:	2b05      	cmp	r3, #5
 8006e54:	d0cc      	beq.n	8006df0 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d1c3      	bne.n	8006de2 <STM_NextState+0x32>
 8006e5a:	e7c6      	b.n	8006dea <STM_NextState+0x3a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8006e5c:	2904      	cmp	r1, #4
 8006e5e:	d1ba      	bne.n	8006dd6 <STM_NextState+0x26>
 8006e60:	e7c6      	b.n	8006df0 <STM_NextState+0x40>
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 8006e62:	2907      	cmp	r1, #7
 8006e64:	d0c4      	beq.n	8006df0 <STM_NextState+0x40>
 8006e66:	2911      	cmp	r1, #17
 8006e68:	d8bb      	bhi.n	8006de2 <STM_NextState+0x32>
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e9c <STM_NextState+0xec>)
 8006e6c:	40cb      	lsrs	r3, r1
 8006e6e:	07da      	lsls	r2, r3, #31
 8006e70:	d4be      	bmi.n	8006df0 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006e72:	2903      	cmp	r1, #3
 8006e74:	d0b9      	beq.n	8006dea <STM_NextState+0x3a>
 8006e76:	e7b4      	b.n	8006de2 <STM_NextState+0x32>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8006e78:	2912      	cmp	r1, #18
 8006e7a:	d1ac      	bne.n	8006dd6 <STM_NextState+0x26>
 8006e7c:	e7b8      	b.n	8006df0 <STM_NextState+0x40>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006e7e:	1f0b      	subs	r3, r1, #4
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d8a8      	bhi.n	8006dd6 <STM_NextState+0x26>
 8006e84:	e7b4      	b.n	8006df0 <STM_NextState+0x40>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8006e86:	1f8b      	subs	r3, r1, #6
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d8a6      	bhi.n	8006dda <STM_NextState+0x2a>
 8006e8c:	e7b0      	b.n	8006df0 <STM_NextState+0x40>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8006e8e:	2914      	cmp	r1, #20
 8006e90:	d8a3      	bhi.n	8006dda <STM_NextState+0x2a>
 8006e92:	4b03      	ldr	r3, [pc, #12]	@ (8006ea0 <STM_NextState+0xf0>)
 8006e94:	410b      	asrs	r3, r1
 8006e96:	07db      	lsls	r3, r3, #31
 8006e98:	d5aa      	bpl.n	8006df0 <STM_NextState+0x40>
 8006e9a:	e79e      	b.n	8006dda <STM_NextState+0x2a>
 8006e9c:	00030012 	.word	0x00030012
 8006ea0:	ffebff7f 	.word	0xffebff7f

08006ea4 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8006ea4:	7800      	ldrb	r0, [r0, #0]
 8006ea6:	4770      	bx	lr

08006ea8 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8006ea8:	7803      	ldrb	r3, [r0, #0]
 8006eaa:	2b0b      	cmp	r3, #11
 8006eac:	d001      	beq.n	8006eb2 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8006eae:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8006eb0:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8006eb2:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006eb4:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8006eb6:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006eb8:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8006eba:	2001      	movs	r0, #1
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop

08006ec0 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8006ec0:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8006ec2:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8006ec4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop

08006ecc <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8006ecc:	f7fe bc80 	b.w	80057d0 <FCP_Init>

08006ed0 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8006ed0:	f890 3097 	ldrb.w	r3, [r0, #151]	@ 0x97
 8006ed4:	b17b      	cbz	r3, 8006ef6 <UFCP_TX_IRQ_Handler+0x26>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8006ed6:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006eda:	f8d0 1120 	ldr.w	r1, [r0, #288]	@ 0x120
 8006ede:	4602      	mov	r2, r0
    switch ( pBaseHandle->TxFrameLevel )
 8006ee0:	b183      	cbz	r3, 8006f04 <UFCP_TX_IRQ_Handler+0x34>
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d008      	beq.n	8006ef8 <UFCP_TX_IRQ_Handler+0x28>
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8006ee6:	7d40      	ldrb	r0, [r0, #21]
 8006ee8:	3001      	adds	r0, #1
 8006eea:	4283      	cmp	r3, r0
 8006eec:	dc10      	bgt.n	8006f10 <UFCP_TX_IRQ_Handler+0x40>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8006eee:	18d0      	adds	r0, r2, r3
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8006ef0:	7d00      	ldrb	r0, [r0, #20]
 8006ef2:	6048      	str	r0, [r1, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8006ef4:	e002      	b.n	8006efc <UFCP_TX_IRQ_Handler+0x2c>
 8006ef6:	4770      	bx	lr
 8006ef8:	7d40      	ldrb	r0, [r0, #21]
 8006efa:	6048      	str	r0, [r1, #4]
    {
      pBaseHandle->TxFrameLevel++;
 8006efc:	3301      	adds	r3, #1
 8006efe:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 8006f02:	4770      	bx	lr
 8006f04:	7d00      	ldrb	r0, [r0, #20]
 8006f06:	6048      	str	r0, [r1, #4]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 8006f0e:	4770      	bx	lr
{
 8006f10:	b410      	push	{r4}
 8006f12:	f892 3096 	ldrb.w	r3, [r2, #150]	@ 0x96
 8006f16:	604b      	str	r3, [r1, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006f18:	310c      	adds	r1, #12
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	e851 3f00 	ldrex	r3, [r1]
 8006f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	e841 3400 	strex	r4, r3, [r1]
 8006f26:	2c00      	cmp	r4, #0
 8006f28:	d1f7      	bne.n	8006f1a <UFCP_TX_IRQ_Handler+0x4a>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8006f2a:	f882 4097 	strb.w	r4, [r2, #151]	@ 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006f2e:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8006f32:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006f36:	4718      	bx	r3

08006f38 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8006f38:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 8006f3c:	b97b      	cbnz	r3, 8006f5e <UFCP_Receive+0x26>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006f3e:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f8a0 311c 	strh.w	r3, [r0, #284]	@ 0x11c
 8006f48:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	e852 3f00 	ldrex	r3, [r2]
 8006f4e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	e842 3100 	strex	r1, r3, [r2]
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d1f7      	bne.n	8006f4a <UFCP_Receive+0x12>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8006f5a:	2002      	movs	r0, #2
 8006f5c:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006f5e:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop

08006f64 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8006f68:	f890 0097 	ldrb.w	r0, [r0, #151]	@ 0x97
 8006f6c:	bb88      	cbnz	r0, 8006fd2 <UFCP_Send+0x6e>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8006f6e:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8006f70:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8006f72:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8006f74:	b2c0      	uxtb	r0, r0
 8006f76:	b19b      	cbz	r3, 8006fa0 <UFCP_Send+0x3c>
 8006f78:	2805      	cmp	r0, #5
 8006f7a:	d94e      	bls.n	800701a <UFCP_Send+0xb6>
 8006f7c:	f104 0616 	add.w	r6, r4, #22
 8006f80:	1c51      	adds	r1, r2, #1
 8006f82:	1a75      	subs	r5, r6, r1
 8006f84:	2d02      	cmp	r5, #2
 8006f86:	d826      	bhi.n	8006fd6 <UFCP_Send+0x72>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f104 0315 	add.w	r3, r4, #21
 8006f8e:	4402      	add	r2, r0
 8006f90:	e000      	b.n	8006f94 <UFCP_Send+0x30>
 8006f92:	3101      	adds	r1, #1
 8006f94:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8006f98:	f803 0f01 	strb.w	r0, [r3, #1]!
 8006f9c:	428a      	cmp	r2, r1
 8006f9e:	d1f8      	bne.n	8006f92 <UFCP_Send+0x2e>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006fa0:	f104 0014 	add.w	r0, r4, #20
 8006fa4:	f7fe fc28 	bl	80057f8 <FCP_CalcCRC>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006fa8:	f8d4 2120 	ldr.w	r2, [r4, #288]	@ 0x120
 8006fac:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96

    pHandle->TxFrameLevel = 0;
 8006fb0:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006fb2:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8006fb4:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006fb8:	f884 3097 	strb.w	r3, [r4, #151]	@ 0x97
 8006fbc:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	e852 3f00 	ldrex	r3, [r2]
 8006fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	e842 3100 	strex	r1, r3, [r2]
 8006fca:	2900      	cmp	r1, #0
 8006fcc:	d1f7      	bne.n	8006fbe <UFCP_Send+0x5a>
 8006fce:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8006fd0:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006fd2:	2001      	movs	r0, #1
}
 8006fd4:	bd70      	pop	{r4, r5, r6, pc}
 8006fd6:	089d      	lsrs	r5, r3, #2
 8006fd8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8006fdc:	4611      	mov	r1, r2
 8006fde:	46b4      	mov	ip, r6
    while ( size-- ) *dest++ = *buffer++;
 8006fe0:	f851 eb04 	ldr.w	lr, [r1], #4
 8006fe4:	f84c eb04 	str.w	lr, [ip], #4
 8006fe8:	42a9      	cmp	r1, r5
 8006fea:	d1f9      	bne.n	8006fe0 <UFCP_Send+0x7c>
 8006fec:	f003 01fc 	and.w	r1, r3, #252	@ 0xfc
 8006ff0:	1a40      	subs	r0, r0, r1
 8006ff2:	079b      	lsls	r3, r3, #30
 8006ff4:	b2c0      	uxtb	r0, r0
 8006ff6:	eb02 0c01 	add.w	ip, r2, r1
 8006ffa:	eb06 0501 	add.w	r5, r6, r1
 8006ffe:	d0cf      	beq.n	8006fa0 <UFCP_Send+0x3c>
 8007000:	5c53      	ldrb	r3, [r2, r1]
 8007002:	5473      	strb	r3, [r6, r1]
 8007004:	2800      	cmp	r0, #0
 8007006:	d0cb      	beq.n	8006fa0 <UFCP_Send+0x3c>
 8007008:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800700c:	706b      	strb	r3, [r5, #1]
 800700e:	2801      	cmp	r0, #1
 8007010:	d0c6      	beq.n	8006fa0 <UFCP_Send+0x3c>
 8007012:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8007016:	70ab      	strb	r3, [r5, #2]
 8007018:	e7c2      	b.n	8006fa0 <UFCP_Send+0x3c>
 800701a:	1c51      	adds	r1, r2, #1
 800701c:	e7b4      	b.n	8006f88 <UFCP_Send+0x24>
 800701e:	bf00      	nop

08007020 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8007020:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 8007024:	b90b      	cbnz	r3, 800702a <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007026:	482e      	ldr	r0, [pc, #184]	@ (80070e0 <UFCP_RX_IRQ_Handler+0xc0>)
}
 8007028:	4770      	bx	lr
{
 800702a:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 800702c:	f890 311d 	ldrb.w	r3, [r0, #285]	@ 0x11d
{
 8007030:	b083      	sub	sp, #12
 8007032:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8007034:	fa5f fc81 	uxtb.w	ip, r1
    switch ( pBaseHandle->RxFrameLevel )
 8007038:	b39b      	cbz	r3, 80070a2 <UFCP_RX_IRQ_Handler+0x82>
 800703a:	2b01      	cmp	r3, #1
 800703c:	d03b      	beq.n	80070b6 <UFCP_RX_IRQ_Handler+0x96>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800703e:	f890 209a 	ldrb.w	r2, [r0, #154]	@ 0x9a
 8007042:	3201      	adds	r2, #1
 8007044:	4293      	cmp	r3, r2
 8007046:	dc08      	bgt.n	800705a <UFCP_RX_IRQ_Handler+0x3a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8007048:	18c2      	adds	r2, r0, r3
          pBaseHandle->RxFrameLevel++;
 800704a:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800704c:	f882 c099 	strb.w	ip, [r2, #153]	@ 0x99
          pBaseHandle->RxFrameLevel++;
 8007050:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007054:	4822      	ldr	r0, [pc, #136]	@ (80070e0 <UFCP_RX_IRQ_Handler+0xc0>)
}
 8007056:	b003      	add	sp, #12
 8007058:	bd30      	pop	{r4, r5, pc}
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800705a:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800705e:	f880 c11b 	strb.w	ip, [r0, #283]	@ 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	8243      	strh	r3, [r0, #18]
 8007066:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	e852 3f00 	ldrex	r3, [r2]
 800706c:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007070:	e842 3100 	strex	r1, r3, [r2]
 8007074:	2900      	cmp	r1, #0
 8007076:	d1f7      	bne.n	8007068 <UFCP_RX_IRQ_Handler+0x48>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007078:	f884 111c 	strb.w	r1, [r4, #284]	@ 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800707c:	f104 0099 	add.w	r0, r4, #153	@ 0x99
 8007080:	f7fe fbba 	bl	80057f8 <FCP_CalcCRC>
 8007084:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 8007088:	4283      	cmp	r3, r0
 800708a:	d11d      	bne.n	80070c8 <UFCP_RX_IRQ_Handler+0xa8>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800708c:	68a5      	ldr	r5, [r4, #8]
 800708e:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 8007092:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 8007096:	6820      	ldr	r0, [r4, #0]
 8007098:	f104 029b 	add.w	r2, r4, #155	@ 0x9b
 800709c:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800709e:	4811      	ldr	r0, [pc, #68]	@ (80070e4 <UFCP_RX_IRQ_Handler+0xc4>)
  return ret_val;
 80070a0:	e7d9      	b.n	8007056 <UFCP_RX_IRQ_Handler+0x36>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80070a2:	8a02      	ldrh	r2, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80070a4:	4810      	ldr	r0, [pc, #64]	@ (80070e8 <UFCP_RX_IRQ_Handler+0xc8>)
        pBaseHandle->RxFrame.Code = rx_byte;
 80070a6:	f884 c099 	strb.w	ip, [r4, #153]	@ 0x99
        pBaseHandle->RxFrameLevel++;
 80070aa:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80070ac:	8262      	strh	r2, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 80070ae:	f884 311d 	strb.w	r3, [r4, #285]	@ 0x11d
}
 80070b2:	b003      	add	sp, #12
 80070b4:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80070b6:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 80070b8:	bf54      	ite	pl
 80070ba:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 80070bc:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 80070be:	f880 c09a 	strb.w	ip, [r0, #154]	@ 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 80070c2:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
 80070c6:	e7c5      	b.n	8007054 <UFCP_RX_IRQ_Handler+0x34>
            error_code = FCP_MSG_RX_BAD_CRC;
 80070c8:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80070ca:	2301      	movs	r3, #1
 80070cc:	f10d 0207 	add.w	r2, sp, #7
 80070d0:	21ff      	movs	r1, #255	@ 0xff
 80070d2:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 80070d4:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80070d8:	f7ff ff44 	bl	8006f64 <UFCP_Send>
 80070dc:	e7df      	b.n	800709e <UFCP_RX_IRQ_Handler+0x7e>
 80070de:	bf00      	nop
 80070e0:	0800759c 	.word	0x0800759c
 80070e4:	08007598 	.word	0x08007598
 80070e8:	0800759a 	.word	0x0800759a

080070ec <UFCP_OVR_IRQ_Handler>:
{
 80070ec:	b500      	push	{lr}
 80070ee:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 80070f0:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80070f4:	2301      	movs	r3, #1
 80070f6:	f10d 0207 	add.w	r2, sp, #7
 80070fa:	21ff      	movs	r1, #255	@ 0xff
  error_code = UFCP_MSG_OVERRUN;
 80070fc:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007100:	f7ff ff30 	bl	8006f64 <UFCP_Send>
}
 8007104:	b003      	add	sp, #12
 8007106:	f85d fb04 	ldr.w	pc, [sp], #4
 800710a:	bf00      	nop

0800710c <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800710c:	2300      	movs	r3, #0
 800710e:	f880 311c 	strb.w	r3, [r0, #284]	@ 0x11c
}
 8007112:	4770      	bx	lr

08007114 <memset>:
 8007114:	4402      	add	r2, r0
 8007116:	4603      	mov	r3, r0
 8007118:	4293      	cmp	r3, r2
 800711a:	d100      	bne.n	800711e <memset+0xa>
 800711c:	4770      	bx	lr
 800711e:	f803 1b01 	strb.w	r1, [r3], #1
 8007122:	e7f9      	b.n	8007118 <memset+0x4>

08007124 <_reclaim_reent>:
 8007124:	4b29      	ldr	r3, [pc, #164]	@ (80071cc <_reclaim_reent+0xa8>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4283      	cmp	r3, r0
 800712a:	b570      	push	{r4, r5, r6, lr}
 800712c:	4604      	mov	r4, r0
 800712e:	d04b      	beq.n	80071c8 <_reclaim_reent+0xa4>
 8007130:	69c3      	ldr	r3, [r0, #28]
 8007132:	b1ab      	cbz	r3, 8007160 <_reclaim_reent+0x3c>
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	b16b      	cbz	r3, 8007154 <_reclaim_reent+0x30>
 8007138:	2500      	movs	r5, #0
 800713a:	69e3      	ldr	r3, [r4, #28]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	5959      	ldr	r1, [r3, r5]
 8007140:	2900      	cmp	r1, #0
 8007142:	d13b      	bne.n	80071bc <_reclaim_reent+0x98>
 8007144:	3504      	adds	r5, #4
 8007146:	2d80      	cmp	r5, #128	@ 0x80
 8007148:	d1f7      	bne.n	800713a <_reclaim_reent+0x16>
 800714a:	69e3      	ldr	r3, [r4, #28]
 800714c:	4620      	mov	r0, r4
 800714e:	68d9      	ldr	r1, [r3, #12]
 8007150:	f000 f864 	bl	800721c <_free_r>
 8007154:	69e3      	ldr	r3, [r4, #28]
 8007156:	6819      	ldr	r1, [r3, #0]
 8007158:	b111      	cbz	r1, 8007160 <_reclaim_reent+0x3c>
 800715a:	4620      	mov	r0, r4
 800715c:	f000 f85e 	bl	800721c <_free_r>
 8007160:	6961      	ldr	r1, [r4, #20]
 8007162:	b111      	cbz	r1, 800716a <_reclaim_reent+0x46>
 8007164:	4620      	mov	r0, r4
 8007166:	f000 f859 	bl	800721c <_free_r>
 800716a:	69e1      	ldr	r1, [r4, #28]
 800716c:	b111      	cbz	r1, 8007174 <_reclaim_reent+0x50>
 800716e:	4620      	mov	r0, r4
 8007170:	f000 f854 	bl	800721c <_free_r>
 8007174:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007176:	b111      	cbz	r1, 800717e <_reclaim_reent+0x5a>
 8007178:	4620      	mov	r0, r4
 800717a:	f000 f84f 	bl	800721c <_free_r>
 800717e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007180:	b111      	cbz	r1, 8007188 <_reclaim_reent+0x64>
 8007182:	4620      	mov	r0, r4
 8007184:	f000 f84a 	bl	800721c <_free_r>
 8007188:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800718a:	b111      	cbz	r1, 8007192 <_reclaim_reent+0x6e>
 800718c:	4620      	mov	r0, r4
 800718e:	f000 f845 	bl	800721c <_free_r>
 8007192:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007194:	b111      	cbz	r1, 800719c <_reclaim_reent+0x78>
 8007196:	4620      	mov	r0, r4
 8007198:	f000 f840 	bl	800721c <_free_r>
 800719c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800719e:	b111      	cbz	r1, 80071a6 <_reclaim_reent+0x82>
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 f83b 	bl	800721c <_free_r>
 80071a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80071a8:	b111      	cbz	r1, 80071b0 <_reclaim_reent+0x8c>
 80071aa:	4620      	mov	r0, r4
 80071ac:	f000 f836 	bl	800721c <_free_r>
 80071b0:	6a23      	ldr	r3, [r4, #32]
 80071b2:	b14b      	cbz	r3, 80071c8 <_reclaim_reent+0xa4>
 80071b4:	4620      	mov	r0, r4
 80071b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071ba:	4718      	bx	r3
 80071bc:	680e      	ldr	r6, [r1, #0]
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 f82c 	bl	800721c <_free_r>
 80071c4:	4631      	mov	r1, r6
 80071c6:	e7bb      	b.n	8007140 <_reclaim_reent+0x1c>
 80071c8:	bd70      	pop	{r4, r5, r6, pc}
 80071ca:	bf00      	nop
 80071cc:	20000578 	.word	0x20000578

080071d0 <__libc_init_array>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007208 <__libc_init_array+0x38>)
 80071d4:	4c0d      	ldr	r4, [pc, #52]	@ (800720c <__libc_init_array+0x3c>)
 80071d6:	1b64      	subs	r4, r4, r5
 80071d8:	10a4      	asrs	r4, r4, #2
 80071da:	2600      	movs	r6, #0
 80071dc:	42a6      	cmp	r6, r4
 80071de:	d109      	bne.n	80071f4 <__libc_init_array+0x24>
 80071e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007210 <__libc_init_array+0x40>)
 80071e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007214 <__libc_init_array+0x44>)
 80071e4:	f000 f870 	bl	80072c8 <_init>
 80071e8:	1b64      	subs	r4, r4, r5
 80071ea:	10a4      	asrs	r4, r4, #2
 80071ec:	2600      	movs	r6, #0
 80071ee:	42a6      	cmp	r6, r4
 80071f0:	d105      	bne.n	80071fe <__libc_init_array+0x2e>
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f8:	4798      	blx	r3
 80071fa:	3601      	adds	r6, #1
 80071fc:	e7ee      	b.n	80071dc <__libc_init_array+0xc>
 80071fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007202:	4798      	blx	r3
 8007204:	3601      	adds	r6, #1
 8007206:	e7f2      	b.n	80071ee <__libc_init_array+0x1e>
 8007208:	080075a8 	.word	0x080075a8
 800720c:	080075a8 	.word	0x080075a8
 8007210:	080075a8 	.word	0x080075a8
 8007214:	080075ac 	.word	0x080075ac

08007218 <__retarget_lock_acquire_recursive>:
 8007218:	4770      	bx	lr

0800721a <__retarget_lock_release_recursive>:
 800721a:	4770      	bx	lr

0800721c <_free_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4605      	mov	r5, r0
 8007220:	2900      	cmp	r1, #0
 8007222:	d041      	beq.n	80072a8 <_free_r+0x8c>
 8007224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007228:	1f0c      	subs	r4, r1, #4
 800722a:	2b00      	cmp	r3, #0
 800722c:	bfb8      	it	lt
 800722e:	18e4      	addlt	r4, r4, r3
 8007230:	f000 f83e 	bl	80072b0 <__malloc_lock>
 8007234:	4a1d      	ldr	r2, [pc, #116]	@ (80072ac <_free_r+0x90>)
 8007236:	6813      	ldr	r3, [r2, #0]
 8007238:	b933      	cbnz	r3, 8007248 <_free_r+0x2c>
 800723a:	6063      	str	r3, [r4, #4]
 800723c:	6014      	str	r4, [r2, #0]
 800723e:	4628      	mov	r0, r5
 8007240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007244:	f000 b83a 	b.w	80072bc <__malloc_unlock>
 8007248:	42a3      	cmp	r3, r4
 800724a:	d908      	bls.n	800725e <_free_r+0x42>
 800724c:	6820      	ldr	r0, [r4, #0]
 800724e:	1821      	adds	r1, r4, r0
 8007250:	428b      	cmp	r3, r1
 8007252:	bf01      	itttt	eq
 8007254:	6819      	ldreq	r1, [r3, #0]
 8007256:	685b      	ldreq	r3, [r3, #4]
 8007258:	1809      	addeq	r1, r1, r0
 800725a:	6021      	streq	r1, [r4, #0]
 800725c:	e7ed      	b.n	800723a <_free_r+0x1e>
 800725e:	461a      	mov	r2, r3
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	b10b      	cbz	r3, 8007268 <_free_r+0x4c>
 8007264:	42a3      	cmp	r3, r4
 8007266:	d9fa      	bls.n	800725e <_free_r+0x42>
 8007268:	6811      	ldr	r1, [r2, #0]
 800726a:	1850      	adds	r0, r2, r1
 800726c:	42a0      	cmp	r0, r4
 800726e:	d10b      	bne.n	8007288 <_free_r+0x6c>
 8007270:	6820      	ldr	r0, [r4, #0]
 8007272:	4401      	add	r1, r0
 8007274:	1850      	adds	r0, r2, r1
 8007276:	4283      	cmp	r3, r0
 8007278:	6011      	str	r1, [r2, #0]
 800727a:	d1e0      	bne.n	800723e <_free_r+0x22>
 800727c:	6818      	ldr	r0, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	6053      	str	r3, [r2, #4]
 8007282:	4408      	add	r0, r1
 8007284:	6010      	str	r0, [r2, #0]
 8007286:	e7da      	b.n	800723e <_free_r+0x22>
 8007288:	d902      	bls.n	8007290 <_free_r+0x74>
 800728a:	230c      	movs	r3, #12
 800728c:	602b      	str	r3, [r5, #0]
 800728e:	e7d6      	b.n	800723e <_free_r+0x22>
 8007290:	6820      	ldr	r0, [r4, #0]
 8007292:	1821      	adds	r1, r4, r0
 8007294:	428b      	cmp	r3, r1
 8007296:	bf04      	itt	eq
 8007298:	6819      	ldreq	r1, [r3, #0]
 800729a:	685b      	ldreq	r3, [r3, #4]
 800729c:	6063      	str	r3, [r4, #4]
 800729e:	bf04      	itt	eq
 80072a0:	1809      	addeq	r1, r1, r0
 80072a2:	6021      	streq	r1, [r4, #0]
 80072a4:	6054      	str	r4, [r2, #4]
 80072a6:	e7ca      	b.n	800723e <_free_r+0x22>
 80072a8:	bd38      	pop	{r3, r4, r5, pc}
 80072aa:	bf00      	nop
 80072ac:	20004ac8 	.word	0x20004ac8

080072b0 <__malloc_lock>:
 80072b0:	4801      	ldr	r0, [pc, #4]	@ (80072b8 <__malloc_lock+0x8>)
 80072b2:	f7ff bfb1 	b.w	8007218 <__retarget_lock_acquire_recursive>
 80072b6:	bf00      	nop
 80072b8:	20004ac4 	.word	0x20004ac4

080072bc <__malloc_unlock>:
 80072bc:	4801      	ldr	r0, [pc, #4]	@ (80072c4 <__malloc_unlock+0x8>)
 80072be:	f7ff bfac 	b.w	800721a <__retarget_lock_release_recursive>
 80072c2:	bf00      	nop
 80072c4:	20004ac4 	.word	0x20004ac4

080072c8 <_init>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	bf00      	nop
 80072cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ce:	bc08      	pop	{r3}
 80072d0:	469e      	mov	lr, r3
 80072d2:	4770      	bx	lr

080072d4 <_fini>:
 80072d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d6:	bf00      	nop
 80072d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072da:	bc08      	pop	{r3}
 80072dc:	469e      	mov	lr, r3
 80072de:	4770      	bx	lr
