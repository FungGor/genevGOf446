
genevGOf446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d88  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08009f58  08009f58  0000af58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a24c  0800a24c  0000c64c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a24c  0800a24c  0000b24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a254  0800a254  0000c64c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a254  0800a254  0000b254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a258  0800a258  0000b258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000064c  20000000  0800a25c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005254  20000650  0800a8a8  0000c650  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200058a4  0800a8a8  0000c8a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c64c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00051a08  00000000  00000000  0000c67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ab6f  00000000  00000000  0005e084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002448  00000000  00000000  00068bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00003065  00000000  00000000  0006b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000328da  00000000  00000000  0006e0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00052f32  00000000  00000000  000a097f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcc22  00000000  00000000  000f38b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f04d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006224  00000000  00000000  001f0518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00017da8  00000000  00000000  001f673c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  0020e4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000650 	.word	0x20000650
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009f40 	.word	0x08009f40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000654 	.word	0x20000654
 800020c:	08009f40 	.word	0x08009f40

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b96a 	b.w	8000d38 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	460c      	mov	r4, r1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d14e      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a88:	4694      	mov	ip, r2
 8000a8a:	458c      	cmp	ip, r1
 8000a8c:	4686      	mov	lr, r0
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	d962      	bls.n	8000b5a <__udivmoddi4+0xde>
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0320 	rsb	r3, r2, #32
 8000a9a:	4091      	lsls	r1, r2
 8000a9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa4:	4319      	orrs	r1, r3
 8000aa6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aaa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aae:	fa1f f68c 	uxth.w	r6, ip
 8000ab2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ab6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aba:	fb07 1114 	mls	r1, r7, r4, r1
 8000abe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac2:	fb04 f106 	mul.w	r1, r4, r6
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ad2:	f080 8112 	bcs.w	8000cfa <__udivmoddi4+0x27e>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 810f 	bls.w	8000cfa <__udivmoddi4+0x27e>
 8000adc:	3c02      	subs	r4, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a59      	subs	r1, r3, r1
 8000ae2:	fa1f f38e 	uxth.w	r3, lr
 8000ae6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aea:	fb07 1110 	mls	r1, r7, r0, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb00 f606 	mul.w	r6, r0, r6
 8000af6:	429e      	cmp	r6, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x94>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b02:	f080 80fc 	bcs.w	8000cfe <__udivmoddi4+0x282>
 8000b06:	429e      	cmp	r6, r3
 8000b08:	f240 80f9 	bls.w	8000cfe <__udivmoddi4+0x282>
 8000b0c:	4463      	add	r3, ip
 8000b0e:	3802      	subs	r0, #2
 8000b10:	1b9b      	subs	r3, r3, r6
 8000b12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b16:	2100      	movs	r1, #0
 8000b18:	b11d      	cbz	r5, 8000b22 <__udivmoddi4+0xa6>
 8000b1a:	40d3      	lsrs	r3, r2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d905      	bls.n	8000b36 <__udivmoddi4+0xba>
 8000b2a:	b10d      	cbz	r5, 8000b30 <__udivmoddi4+0xb4>
 8000b2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b30:	2100      	movs	r1, #0
 8000b32:	4608      	mov	r0, r1
 8000b34:	e7f5      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000b36:	fab3 f183 	clz	r1, r3
 8000b3a:	2900      	cmp	r1, #0
 8000b3c:	d146      	bne.n	8000bcc <__udivmoddi4+0x150>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xcc>
 8000b42:	4290      	cmp	r0, r2
 8000b44:	f0c0 80f0 	bcc.w	8000d28 <__udivmoddi4+0x2ac>
 8000b48:	1a86      	subs	r6, r0, r2
 8000b4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d0e6      	beq.n	8000b22 <__udivmoddi4+0xa6>
 8000b54:	e9c5 6300 	strd	r6, r3, [r5]
 8000b58:	e7e3      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000b5a:	2a00      	cmp	r2, #0
 8000b5c:	f040 8090 	bne.w	8000c80 <__udivmoddi4+0x204>
 8000b60:	eba1 040c 	sub.w	r4, r1, ip
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	fa1f f78c 	uxth.w	r7, ip
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b76:	fb08 4416 	mls	r4, r8, r6, r4
 8000b7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b7e:	fb07 f006 	mul.w	r0, r7, r6
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x11c>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x11a>
 8000b90:	4298      	cmp	r0, r3
 8000b92:	f200 80cd 	bhi.w	8000d30 <__udivmoddi4+0x2b4>
 8000b96:	4626      	mov	r6, r4
 8000b98:	1a1c      	subs	r4, r3, r0
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ba2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ba6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000baa:	fb00 f707 	mul.w	r7, r0, r7
 8000bae:	429f      	cmp	r7, r3
 8000bb0:	d908      	bls.n	8000bc4 <__udivmoddi4+0x148>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bba:	d202      	bcs.n	8000bc2 <__udivmoddi4+0x146>
 8000bbc:	429f      	cmp	r7, r3
 8000bbe:	f200 80b0 	bhi.w	8000d22 <__udivmoddi4+0x2a6>
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	1bdb      	subs	r3, r3, r7
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	e7a5      	b.n	8000b18 <__udivmoddi4+0x9c>
 8000bcc:	f1c1 0620 	rsb	r6, r1, #32
 8000bd0:	408b      	lsls	r3, r1
 8000bd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd6:	431f      	orrs	r7, r3
 8000bd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bdc:	fa04 f301 	lsl.w	r3, r4, r1
 8000be0:	ea43 030c 	orr.w	r3, r3, ip
 8000be4:	40f4      	lsrs	r4, r6
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	0c38      	lsrs	r0, r7, #16
 8000bec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bf4:	fa1f fc87 	uxth.w	ip, r7
 8000bf8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c00:	fb0e f90c 	mul.w	r9, lr, ip
 8000c04:	45a1      	cmp	r9, r4
 8000c06:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0a:	d90a      	bls.n	8000c22 <__udivmoddi4+0x1a6>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c12:	f080 8084 	bcs.w	8000d1e <__udivmoddi4+0x2a2>
 8000c16:	45a1      	cmp	r9, r4
 8000c18:	f240 8081 	bls.w	8000d1e <__udivmoddi4+0x2a2>
 8000c1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c20:	443c      	add	r4, r7
 8000c22:	eba4 0409 	sub.w	r4, r4, r9
 8000c26:	fa1f f983 	uxth.w	r9, r3
 8000c2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d907      	bls.n	8000c4e <__udivmoddi4+0x1d2>
 8000c3e:	193c      	adds	r4, r7, r4
 8000c40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c44:	d267      	bcs.n	8000d16 <__udivmoddi4+0x29a>
 8000c46:	45a4      	cmp	ip, r4
 8000c48:	d965      	bls.n	8000d16 <__udivmoddi4+0x29a>
 8000c4a:	3b02      	subs	r3, #2
 8000c4c:	443c      	add	r4, r7
 8000c4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c52:	fba0 9302 	umull	r9, r3, r0, r2
 8000c56:	eba4 040c 	sub.w	r4, r4, ip
 8000c5a:	429c      	cmp	r4, r3
 8000c5c:	46ce      	mov	lr, r9
 8000c5e:	469c      	mov	ip, r3
 8000c60:	d351      	bcc.n	8000d06 <__udivmoddi4+0x28a>
 8000c62:	d04e      	beq.n	8000d02 <__udivmoddi4+0x286>
 8000c64:	b155      	cbz	r5, 8000c7c <__udivmoddi4+0x200>
 8000c66:	ebb8 030e 	subs.w	r3, r8, lr
 8000c6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c72:	40cb      	lsrs	r3, r1
 8000c74:	431e      	orrs	r6, r3
 8000c76:	40cc      	lsrs	r4, r1
 8000c78:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	e750      	b.n	8000b22 <__udivmoddi4+0xa6>
 8000c80:	f1c2 0320 	rsb	r3, r2, #32
 8000c84:	fa20 f103 	lsr.w	r1, r0, r3
 8000c88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c90:	4094      	lsls	r4, r2
 8000c92:	430c      	orrs	r4, r1
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c9c:	fa1f f78c 	uxth.w	r7, ip
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ca8:	0c23      	lsrs	r3, r4, #16
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f107 	mul.w	r1, r0, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x24c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cbe:	d22c      	bcs.n	8000d1a <__udivmoddi4+0x29e>
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d92a      	bls.n	8000d1a <__udivmoddi4+0x29e>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb01 f307 	mul.w	r3, r1, r7
 8000cdc:	42a3      	cmp	r3, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x276>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ce8:	d213      	bcs.n	8000d12 <__udivmoddi4+0x296>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d911      	bls.n	8000d12 <__udivmoddi4+0x296>
 8000cee:	3902      	subs	r1, #2
 8000cf0:	4464      	add	r4, ip
 8000cf2:	1ae4      	subs	r4, r4, r3
 8000cf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf8:	e739      	b.n	8000b6e <__udivmoddi4+0xf2>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	e6f0      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e706      	b.n	8000b10 <__udivmoddi4+0x94>
 8000d02:	45c8      	cmp	r8, r9
 8000d04:	d2ae      	bcs.n	8000c64 <__udivmoddi4+0x1e8>
 8000d06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d0e:	3801      	subs	r0, #1
 8000d10:	e7a8      	b.n	8000c64 <__udivmoddi4+0x1e8>
 8000d12:	4631      	mov	r1, r6
 8000d14:	e7ed      	b.n	8000cf2 <__udivmoddi4+0x276>
 8000d16:	4603      	mov	r3, r0
 8000d18:	e799      	b.n	8000c4e <__udivmoddi4+0x1d2>
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	e7d4      	b.n	8000cc8 <__udivmoddi4+0x24c>
 8000d1e:	46d6      	mov	lr, sl
 8000d20:	e77f      	b.n	8000c22 <__udivmoddi4+0x1a6>
 8000d22:	4463      	add	r3, ip
 8000d24:	3802      	subs	r0, #2
 8000d26:	e74d      	b.n	8000bc4 <__udivmoddi4+0x148>
 8000d28:	4606      	mov	r6, r0
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e70f      	b.n	8000b50 <__udivmoddi4+0xd4>
 8000d30:	3e02      	subs	r6, #2
 8000d32:	4463      	add	r3, ip
 8000d34:	e730      	b.n	8000b98 <__udivmoddi4+0x11c>
 8000d36:	bf00      	nop

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <powerModeInit>:

static bool POWER_ON = true;

void powerModeInit()
{
	go_powerOnRegister(&POWER_ON);
 8000d3c:	4801      	ldr	r0, [pc, #4]	@ (8000d44 <powerModeInit+0x8>)
 8000d3e:	f000 bac7 	b.w	80012d0 <go_powerOnRegister>
 8000d42:	bf00      	nop
 8000d44:	20000000 	.word	0x20000000

08000d48 <changePowerMode>:
}

void changePowerMode()
{
	if(POWER_ON == true)
 8000d48:	4b02      	ldr	r3, [pc, #8]	@ (8000d54 <changePowerMode+0xc>)
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	b10a      	cbz	r2, 8000d52 <changePowerMode+0xa>
	{
		POWER_ON = false;
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
	}
}
 8000d52:	4770      	bx	lr
 8000d54:	20000000 	.word	0x20000000

08000d58 <gotoSLEEP>:
	return POWER_ON;
}

void gotoSLEEP()
{
	ShutDownTask();
 8000d58:	f008 bef8 	b.w	8009b4c <ShutDownTask>

08000d5c <wakeUp>:
}

void wakeUp()
{
	bootStart();
 8000d5c:	f008 bf0a 	b.w	8009b74 <bootStart>

08000d60 <brake_and_throttle_init>:
brakeAndThrottle_t ptr_brakeAndThrottle;
int16_t torque = 0;

void brake_and_throttle_init()
{
	ptr_brakeAndThrottle.IQ_applied = 0;
 8000d60:	4b02      	ldr	r3, [pc, #8]	@ (8000d6c <brake_and_throttle_init+0xc>)
 8000d62:	2200      	movs	r2, #0
	ptr_brakeAndThrottle.throttlePercent = 0;
	ptr_brakeAndThrottle.throttleTriggered = false;
 8000d64:	e9c3 2200 	strd	r2, r2, [r3]
	ptr_brakeAndThrottle.brakeTriggered   = false;
	ptr_brakeAndThrottle.allowable_rpm = 0;
 8000d68:	609a      	str	r2, [r3, #8]
	ptr_brakeAndThrottle.speed_mode_IQmax = 0;
	ptr_brakeAndThrottle.ramp_rate  = 0;
}
 8000d6a:	4770      	bx	lr
 8000d6c:	20000670 	.word	0x20000670

08000d70 <setIQ>:

void setIQ(int16_t IQ)
{
	ptr_brakeAndThrottle.IQ_applied = IQ;
 8000d70:	4b01      	ldr	r3, [pc, #4]	@ (8000d78 <setIQ+0x8>)
 8000d72:	8018      	strh	r0, [r3, #0]
}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000670 	.word	0x20000670

08000d7c <set_ThrottlePercent>:
	return ptr_brakeAndThrottle.IQ_applied;
}

void set_ThrottlePercent(uint16_t percentage)
{
	ptr_brakeAndThrottle.throttlePercent = percentage;
 8000d7c:	4b01      	ldr	r3, [pc, #4]	@ (8000d84 <set_ThrottlePercent+0x8>)
 8000d7e:	8058      	strh	r0, [r3, #2]
}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000670 	.word	0x20000670

08000d88 <throttleSignalInput>:
	return ptr_brakeAndThrottle.throttlePercent;
}

void throttleSignalInput()
{
	accelerateIQMotor(ptr_brakeAndThrottle.IQ_applied,0);
 8000d88:	4b02      	ldr	r3, [pc, #8]	@ (8000d94 <throttleSignalInput+0xc>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000d90:	f008 be8a 	b.w	8009aa8 <accelerateIQMotor>
 8000d94:	20000670 	.word	0x20000670

08000d98 <refreshThrottleStatus>:
	return ptr_brakeAndThrottle.IQ_applied;
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <refreshThrottleStatus+0x14>)
 8000d9a:	f9b3 2000 	ldrsh.w	r2, [r3]
#endif
}

void refreshThrottleStatus()
{
	if (getIQ() == 0)
 8000d9e:	2a00      	cmp	r2, #0
 8000da0:	d001      	beq.n	8000da6 <refreshThrottleStatus+0xe>
	{
		ptr_brakeAndThrottle.throttleTriggered = false;
	}
	else if(getIQ() > 0)
 8000da2:	dd01      	ble.n	8000da8 <refreshThrottleStatus+0x10>
	{
		ptr_brakeAndThrottle.throttleTriggered = true;
 8000da4:	2201      	movs	r2, #1
 8000da6:	711a      	strb	r2, [r3, #4]
	}
}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000670 	.word	0x20000670

08000db0 <updateBrakeStatus>:
	return ptr_brakeAndThrottle.throttleTriggered;
}

void updateBrakeStatus(bool status)
{
	ptr_brakeAndThrottle.brakeTriggered = status;
 8000db0:	4b01      	ldr	r3, [pc, #4]	@ (8000db8 <updateBrakeStatus+0x8>)
 8000db2:	7158      	strb	r0, [r3, #5]
}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000670 	.word	0x20000670

08000dbc <getBrakeStatus>:

bool getBrakeStatus()
{
	return ptr_brakeAndThrottle.brakeTriggered;
 8000dbc:	4b01      	ldr	r3, [pc, #4]	@ (8000dc4 <getBrakeStatus+0x8>)
}
 8000dbe:	7958      	ldrb	r0, [r3, #5]
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000670 	.word	0x20000670

08000dc8 <changeSpeedMode>:

void changeSpeedMode(int16_t speed_mode_IQmax, int16_t allowable_rpm, uint16_t ramp_rate)
{
	ptr_brakeAndThrottle.speed_mode_IQmax = speed_mode_IQmax;
 8000dc8:	4b02      	ldr	r3, [pc, #8]	@ (8000dd4 <changeSpeedMode+0xc>)
 8000dca:	8118      	strh	r0, [r3, #8]
	ptr_brakeAndThrottle.allowable_rpm    = allowable_rpm;
 8000dcc:	80d9      	strh	r1, [r3, #6]
	ptr_brakeAndThrottle.ramp_rate        = ramp_rate;
 8000dce:	815a      	strh	r2, [r3, #10]
}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000670 	.word	0x20000670

08000dd8 <get_ThrottleInformation>:
	return ptr_brakeAndThrottle.IQ_applied;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	@ (8000de8 <get_ThrottleInformation+0x10>)

int16_t Iq_applied = 0;
uint16_t Iq_Percentage = 0;
void get_ThrottleInformation()
{
    Iq_applied = getIQ();
 8000dda:	4904      	ldr	r1, [pc, #16]	@ (8000dec <get_ThrottleInformation+0x14>)
    Iq_Percentage = getThrottlePercent();
 8000ddc:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <get_ThrottleInformation+0x18>)
    Iq_applied = getIQ();
 8000dde:	8818      	ldrh	r0, [r3, #0]
    Iq_Percentage = getThrottlePercent();
 8000de0:	885b      	ldrh	r3, [r3, #2]
    Iq_applied = getIQ();
 8000de2:	8008      	strh	r0, [r1, #0]
    Iq_Percentage = getThrottlePercent();
 8000de4:	8013      	strh	r3, [r2, #0]
}
 8000de6:	4770      	bx	lr
 8000de8:	20000670 	.word	0x20000670
 8000dec:	2000066e 	.word	0x2000066e
 8000df0:	2000066c 	.word	0x2000066c

08000df4 <driveStop>:

void driveStop()
{
	motorStop();
 8000df4:	f008 be60 	b.w	8009ab8 <motorStop>

08000df8 <getLightSensorStatus>:
    lightSensor = lightStatus;
}

uint8_t getLightSensorStatus()
{
	return lightSensor;
 8000df8:	4b01      	ldr	r3, [pc, #4]	@ (8000e00 <getLightSensorStatus+0x8>)
}
 8000dfa:	7818      	ldrb	r0, [r3, #0]
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000001 	.word	0x20000001

08000e04 <motor_param_init>:

MOTOR ptrMotor;

void motor_param_init()
{
	ptrMotor.SPEED = 0;
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <motor_param_init+0x18>)
 8000e06:	2200      	movs	r2, #0
	ptrMotor.CURRENT = 0;
	ptrMotor.VBUS = 0;
	ptrMotor.POWERmW = 0;
 8000e08:	2000      	movs	r0, #0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	e9c3 0104 	strd	r0, r1, [r3, #16]
	ptrMotor.VBUS = 0;
 8000e10:	e9c3 2201 	strd	r2, r2, [r3, #4]
	ptrMotor.SPEED = 0;
 8000e14:	801a      	strh	r2, [r3, #0]
	ptrMotor.Iq = 0;
	ptrMotor.Id = 0;
 8000e16:	619a      	str	r2, [r3, #24]
	ptrMotor.milliAmpere = 0;
 8000e18:	839a      	strh	r2, [r3, #28]
}
 8000e1a:	4770      	bx	lr
 8000e1c:	20000680 	.word	0x20000680

08000e20 <motor_speed>:

void motor_speed()
{
 8000e20:	b508      	push	{r3, lr}
	ptrMotor.SPEED = getSpeed();
 8000e22:	f008 fe4b 	bl	8009abc <getSpeed>
 8000e26:	4b01      	ldr	r3, [pc, #4]	@ (8000e2c <motor_speed+0xc>)
 8000e28:	8018      	strh	r0, [r3, #0]
}
 8000e2a:	bd08      	pop	{r3, pc}
 8000e2c:	20000680 	.word	0x20000680

08000e30 <motor_rms_current>:
{
	ptrMotor.CURRENT = getCurrent();
}

void motor_rms_current()
{
 8000e30:	b508      	push	{r3, lr}
	ptrMotor.RMS_CURRENT = getRMSCurrent();
 8000e32:	f008 fe4d 	bl	8009ad0 <getRMSCurrent>
 8000e36:	4b02      	ldr	r3, [pc, #8]	@ (8000e40 <motor_rms_current+0x10>)
 8000e38:	ed83 0a03 	vstr	s0, [r3, #12]

}
 8000e3c:	bd08      	pop	{r3, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000680 	.word	0x20000680

08000e44 <setDCVoltage>:

void setDCVoltage(uint32_t voltage)
{
	ptrMotor.VBUS = voltage;
 8000e44:	4b01      	ldr	r3, [pc, #4]	@ (8000e4c <setDCVoltage+0x8>)
 8000e46:	6098      	str	r0, [r3, #8]
}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000680 	.word	0x20000680

08000e50 <setMOTORPower>:
	return ptrMotor.SPEED;
}

void setMOTORPower(int32_t powerSet)
{
	ptrMotor.POWERmW = powerSet*1000;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <setMOTORPower+0x10>)
 8000e52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e56:	fb02 f000 	mul.w	r0, r2, r0
 8000e5a:	6118      	str	r0, [r3, #16]
}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000680 	.word	0x20000680

08000e64 <getIqIdMotor>:
{
	return ptrMotor.POWERmW;
}

void getIqIdMotor()
{
 8000e64:	b500      	push	{lr}
 8000e66:	b083      	sub	sp, #12
	qd_t torqueCurrent;
	torqueCurrent = MC_GetIqdMotor1();
 8000e68:	f000 fd10 	bl	800188c <MC_GetIqdMotor1>
	ptrMotor.Iq = (int32_t)torqueCurrent.q;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <getIqIdMotor+0x18>)
 8000e6e:	b202      	sxth	r2, r0
	ptrMotor.Id = (int32_t)torqueCurrent.d;
 8000e70:	1400      	asrs	r0, r0, #16
 8000e72:	e9c3 2005 	strd	r2, r0, [r3, #20]
}
 8000e76:	b003      	add	sp, #12
 8000e78:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e7c:	20000680 	.word	0x20000680

08000e80 <calcDC>:

void calcDC()
{
	ptrMotor.milliAmpere = ptrMotor.POWERmW / ptrMotor.VBUS;
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <calcDC+0x10>)
 8000e82:	691a      	ldr	r2, [r3, #16]
 8000e84:	6899      	ldr	r1, [r3, #8]
 8000e86:	fbb2 f2f1 	udiv	r2, r2, r1
 8000e8a:	839a      	strh	r2, [r3, #28]
	ptrMotor.milliAmpere = (uint16_t) ptrMotor.milliAmpere;
	/*Apply Moving average filtering (Optional)*/
}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000680 	.word	0x20000680

08000e94 <getDC>:

int32_t getDC()
{
	return (int32_t)ptrMotor.milliAmpere;
 8000e94:	4b01      	ldr	r3, [pc, #4]	@ (8000e9c <getDC+0x8>)
}
 8000e96:	8b98      	ldrh	r0, [r3, #28]
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000680 	.word	0x20000680

08000ea0 <set_tail_light_on>:
	tail_light_flash();
}

void set_tail_light_on()
{
	tail_light_turnon();
 8000ea0:	f008 bdf2 	b.w	8009a88 <tail_light_turnon>

08000ea4 <set_tail_light_off>:
}

void set_tail_light_off()
{
    /*The tail light is turned off when we release the brake*/
	tail_light_turnoff();
 8000ea4:	f008 bdf8 	b.w	8009a98 <tail_light_turnoff>

08000ea8 <led_indicator_on>:
}

uint8_t led_indicator_on()
{
 8000ea8:	b508      	push	{r3, lr}
	dashboard_indicator_on();
 8000eaa:	f008 fdcd 	bl	8009a48 <dashboard_indicator_on>
	return 0x01;
}
 8000eae:	2001      	movs	r0, #1
 8000eb0:	bd08      	pop	{r3, pc}
 8000eb2:	bf00      	nop

08000eb4 <led_indicator_off>:

uint8_t led_indicator_off()
{
 8000eb4:	b508      	push	{r3, lr}
	dashboard_indicator_off();
 8000eb6:	f008 fdd7 	bl	8009a68 <dashboard_indicator_off>
	return 0x00;
}
 8000eba:	2000      	movs	r0, #0
 8000ebc:	bd08      	pop	{r3, pc}
 8000ebe:	bf00      	nop

08000ec0 <error_indicator_on>:

void error_indicator_on()
{
	fault_warning_on();
 8000ec0:	f008 bdca 	b.w	8009a58 <fault_warning_on>

08000ec4 <error_indicator_off>:
}

void error_indicator_off()
{
	fault_warning_off();
 8000ec4:	f008 bdd8 	b.w	8009a78 <fault_warning_off>

08000ec8 <set_tail_light_status>:
}

void set_tail_light_status(uint8_t status)
{
	lightStatus = status;
 8000ec8:	4b01      	ldr	r3, [pc, #4]	@ (8000ed0 <set_tail_light_status+0x8>)
 8000eca:	7018      	strb	r0, [r3, #0]

}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200006a0 	.word	0x200006a0

08000ed4 <get_tail_light_status>:

uint8_t get_tail_light_status()
{
	return lightStatus;
 8000ed4:	4b01      	ldr	r3, [pc, #4]	@ (8000edc <get_tail_light_status+0x8>)
}
 8000ed6:	7818      	ldrb	r0, [r3, #0]
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200006a0 	.word	0x200006a0

08000ee0 <get_tail_light_mode>:

uint8_t get_tail_light_mode()
{
 8000ee0:	b508      	push	{r3, lr}
	uint8_t mode = 0xFF;
	if(getBrakeStatus() == 0x01)
 8000ee2:	f7ff ff6b 	bl	8000dbc <getBrakeStatus>
 8000ee6:	b108      	cbz	r0, 8000eec <get_tail_light_mode+0xc>
	{
		mode = ESCOOTER_TOGGLE_TAIL_LIGHT;
 8000ee8:	2005      	movs	r0, #5
			mode = ESCOOTER_TAIL_LIGHT_OFF;
		}

	}
	return mode;
}
 8000eea:	bd08      	pop	{r3, pc}
	else if(getBrakeStatus() == 0x00)
 8000eec:	f7ff ff66 	bl	8000dbc <getBrakeStatus>
 8000ef0:	b940      	cbnz	r0, 8000f04 <get_tail_light_mode+0x24>
		if(lightStatus == 0x01)
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <get_tail_light_mode+0x2c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d006      	beq.n	8000f08 <get_tail_light_mode+0x28>
			mode = ESCOOTER_TAIL_LIGHT_OFF;
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf14      	ite	ne
 8000efe:	20ff      	movne	r0, #255	@ 0xff
 8000f00:	2006      	moveq	r0, #6
}
 8000f02:	bd08      	pop	{r3, pc}
	uint8_t mode = 0xFF;
 8000f04:	20ff      	movs	r0, #255	@ 0xff
}
 8000f06:	bd08      	pop	{r3, pc}
			mode = ESCOOTER_TAIL_LIGHT_ON;
 8000f08:	2008      	movs	r0, #8
}
 8000f0a:	bd08      	pop	{r3, pc}
 8000f0c:	200006a0 	.word	0x200006a0

08000f10 <toggle_tail_light>:

uint8_t toggle_tail_light(uint8_t tailLightStatusOld)
{
 8000f10:	b508      	push	{r3, lr}
	// toggling between tail light On and Off occurs at a rate of N2_TIME
	if(tailLightStatusOld == 0) //if tail light is OFF, toggle tail light ON
 8000f12:	b918      	cbnz	r0, 8000f1c <toggle_tail_light+0xc>
	{
		tail_light_turnon();
 8000f14:	f008 fdb8 	bl	8009a88 <tail_light_turnon>
		tailLightStatusOld = 1;
 8000f18:	2001      	movs	r0, #1
	{
		set_tail_light_off();
		tailLightStatusOld = 0;
	}
	return tailLightStatusOld;
}
 8000f1a:	bd08      	pop	{r3, pc}
	tail_light_turnoff();
 8000f1c:	f008 fdbc 	bl	8009a98 <tail_light_turnoff>
		tailLightStatusOld = 0;
 8000f20:	2000      	movs	r0, #0
}
 8000f22:	bd08      	pop	{r3, pc}

08000f24 <lightSensorStateChange>:

void lightSensorStateChange()
{
 8000f24:	b508      	push	{r3, lr}
   if(getLightSensorStatus() == 0x01)
 8000f26:	f7ff ff67 	bl	8000df8 <getLightSensorStatus>
 8000f2a:	2801      	cmp	r0, #1
 8000f2c:	d007      	beq.n	8000f3e <lightSensorStateChange+0x1a>
   {
	   tail_light_turnon();
   }
   else if(getLightSensorStatus() == 0x00)
 8000f2e:	f7ff ff63 	bl	8000df8 <getLightSensorStatus>
 8000f32:	b100      	cbz	r0, 8000f36 <lightSensorStateChange+0x12>
   {
	   set_tail_light_off();
   }
}
 8000f34:	bd08      	pop	{r3, pc}
 8000f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tail_light_turnoff();
 8000f3a:	f008 bdad 	b.w	8009a98 <tail_light_turnoff>
}
 8000f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	   tail_light_turnon();
 8000f42:	f008 bda1 	b.w	8009a88 <tail_light_turnon>
 8000f46:	bf00      	nop

08000f48 <BATTERYCURRENT_Clear>:
{
	pHandle->avBatteryCurrent_s16A = 0u;
	pHandle->rawCurrent = 0u;
	pHandle->sum_current_s16A = 0u;
	pHandle->old_sample_current_s16A = 0u;
	pHandle->currentBuffer[pHandle->LowPassFilterBW] = (uint16_t){0};
 8000f48:	8c01      	ldrh	r1, [r0, #32]
 8000f4a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
	pHandle->rawCurrent = 0u;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e9c0 3306 	strd	r3, r3, [r0, #24]
	pHandle->currentBuffer[pHandle->LowPassFilterBW] = (uint16_t){0};
 8000f52:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	pHandle->index = 0u;
 8000f56:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
	pHandle->elem = 0u;
 8000f5a:	8503      	strh	r3, [r0, #40]	@ 0x28

	pHandle->_Super.AvBusCurrent_mA = 0u;
	pHandle->_Super.LatestConv = 0u;
 8000f5c:	f8c0 3002 	str.w	r3, [r0, #2]
	pHandle->_Super.FaultState = 0;
 8000f60:	8103      	strh	r3, [r0, #8]

}
 8000f62:	4770      	bx	lr

08000f64 <BATTERYCURRENT_Init>:
{
 8000f64:	b510      	push	{r4, lr}
 8000f66:	4604      	mov	r4, r0
	pHandle->convHandle = RCM_RegisterRegConv(&pHandle->batteryCurrentRegConv);
 8000f68:	300c      	adds	r0, #12
 8000f6a:	f001 feb9 	bl	8002ce0 <RCM_RegisterRegConv>
 8000f6e:	f884 002b 	strb.w	r0, [r4, #43]	@ 0x2b
	BATTERYCURRENT_Clear(pHandle);
 8000f72:	4620      	mov	r0, r4
 8000f74:	f7ff ffe8 	bl	8000f48 <BATTERYCURRENT_Clear>
}
 8000f78:	bd10      	pop	{r4, pc}
 8000f7a:	bf00      	nop

08000f7c <BATTERYCURRENT_CalcAvCurrentOrigin>:
  *
  *  @r Fault status : Error reported in case of an over current detection (if necessary)
  */
uint16_t dllmcfh = 0;
__weak uint16_t BATTERYCURRENT_CalcAvCurrentOrigin(BatteryCurrent_Handle_t *pHandle)
{
 8000f7c:	b570      	push	{r4, r5, r6, lr}
 8000f7e:	4605      	mov	r5, r0
	uint32_t wTemp; /*Final result of raw ADC samples*/
	uint16_t hAux; /*Raw ADC Values of Current Sensor ZXCT1084E5TA*/
	uint8_t i;

	/*Performs ADC Conversion to get the raw data*/
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8000f80:	f890 002b 	ldrb.w	r0, [r0, #43]	@ 0x2b
 8000f84:	f001 ff86 	bl	8002e94 <RCM_ExecRegularConv>
    dllmcfh = hAux;
 8000f88:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <BATTERYCURRENT_CalcAvCurrentOrigin+0x60>)
    if( hAux != 0xFFFFu)
 8000f8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f8e:	4298      	cmp	r0, r3
    dllmcfh = hAux;
 8000f90:	8010      	strh	r0, [r2, #0]
    if( hAux != 0xFFFFu)
 8000f92:	d01f      	beq.n	8000fd4 <BATTERYCURRENT_CalcAvCurrentOrigin+0x58>
    {
    	/*Put all raw ADC values (Samples) of ZXCT1084E5TA into currentBuffer samples */
    	pHandle->currentBuffer[pHandle->index] = hAux;
 8000f94:	4684      	mov	ip, r0
 8000f96:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8000f98:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8000f9c:	f826 c010 	strh.w	ip, [r6, r0, lsl #1]
    	wTemp = 0;
    	for(i = 0; i < pHandle->LowPassFilterBW; i++)
 8000fa0:	8c2c      	ldrh	r4, [r5, #32]
 8000fa2:	b1cc      	cbz	r4, 8000fd8 <BATTERYCURRENT_CalcAvCurrentOrigin+0x5c>
 8000fa4:	2300      	movs	r3, #0
    	wTemp = 0;
 8000fa6:	461a      	mov	r2, r3
    	{
    		/*Sum the samples of raw ADC data*/
    		wTemp += pHandle->currentBuffer[i];
 8000fa8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    	for(i = 0; i < pHandle->LowPassFilterBW; i++)
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	42a3      	cmp	r3, r4
    		wTemp += pHandle->currentBuffer[i];
 8000fb2:	440a      	add	r2, r1
    	for(i = 0; i < pHandle->LowPassFilterBW; i++)
 8000fb4:	d3f8      	bcc.n	8000fa8 <BATTERYCURRENT_CalcAvCurrentOrigin+0x2c>
    	}
    	/*Final Result*/
    	wTemp = wTemp / pHandle->LowPassFilterBW;
 8000fb6:	fbb2 f2f4 	udiv	r2, r2, r4
    	pHandle->_Super.AvBusCurrent_s16A = ( uint16_t ) wTemp;
    	pHandle->_Super.LatestConv = hAux;

    	if(pHandle->index < pHandle->LowPassFilterBW - 1)
 8000fba:	1e63      	subs	r3, r4, #1
 8000fbc:	4298      	cmp	r0, r3
    	{
    		pHandle->index ++;
 8000fbe:	bfba      	itte	lt
 8000fc0:	3001      	addlt	r0, #1
 8000fc2:	b2c3      	uxtblt	r3, r0
 8000fc4:	2300      	movge	r3, #0
    	pHandle->_Super.AvBusCurrent_s16A = ( uint16_t ) wTemp;
 8000fc6:	b290      	uxth	r0, r2
    		pHandle->index ++;
 8000fc8:	f885 302a 	strb.w	r3, [r5, #42]	@ 0x2a
    	pHandle->_Super.AvBusCurrent_s16A = ( uint16_t ) wTemp;
 8000fcc:	80e8      	strh	r0, [r5, #6]
    	pHandle->_Super.LatestConv = hAux;
 8000fce:	f8a5 c002 	strh.w	ip, [r5, #2]
    		pHandle->index = 0;
    	}
    }
    //BATTERYCURRENT_SetRawCurrent(pHandle->_Super.AvBusCurrent_s16A);
    return (pHandle->_Super.AvBusCurrent_s16A) ; /*Should return pHandle->_Super.AvBusCurrent_s16A */
}
 8000fd2:	bd70      	pop	{r4, r5, r6, pc}
    return (pHandle->_Super.AvBusCurrent_s16A) ; /*Should return pHandle->_Super.AvBusCurrent_s16A */
 8000fd4:	88e8      	ldrh	r0, [r5, #6]
}
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
    	wTemp = wTemp / pHandle->LowPassFilterBW;
 8000fd8:	deff      	udf	#255	@ 0xff
 8000fda:	bf00      	nop
 8000fdc:	200006a2 	.word	0x200006a2

08000fe0 <MOTORTEMP_Clear>:
__weak void MOTORTEMP_Clear(MotorTemp_Handle_t *pHandle)
{
	pHandle->avgNTCVoltage = 0u;
	pHandle->avgMotorTemp = 0u;
	pHandle->avgNTCResistance = 0u;
	pHandle->temperatureVoltageBuffer[pHandle->lowPassFilterBandwidth] = (uint16_t){0};
 8000fe0:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8000fe2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
	pHandle->avgNTCVoltage = 0u;
 8000fe4:	2300      	movs	r3, #0
	pHandle->avgNTCResistance = 0u;
 8000fe6:	e9c0 3308 	strd	r3, r3, [r0, #32]
	pHandle->temperatureVoltageBuffer[pHandle->lowPassFilterBandwidth] = (uint16_t){0};
 8000fea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]


	pHandle->_Super.AvOutputVoltage = 0u;
	pHandle->_Super.AvTemp = 0u;
	pHandle->_Super.AvTemp_s16R = 0u;
	pHandle->_Super.AvResistance_R = 0u;
 8000fee:	60c3      	str	r3, [r0, #12]
	pHandle->_Super.LatestConv = 0u;
 8000ff0:	f8c0 3002 	str.w	r3, [r0, #2]
 8000ff4:	f8c0 3006 	str.w	r3, [r0, #6]
	pHandle->_Super.FaultState = 0u;
 8000ff8:	8203      	strh	r3, [r0, #16]
}
 8000ffa:	4770      	bx	lr

08000ffc <MOTORTEMP_Init>:
{
 8000ffc:	b510      	push	{r4, lr}
 8000ffe:	4604      	mov	r4, r0
	pHandle->convHandle = RCM_RegisterRegConv(&pHandle->motorTemp);
 8001000:	3014      	adds	r0, #20
 8001002:	f001 fe6d 	bl	8002ce0 <RCM_RegisterRegConv>
 8001006:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
	MOTORTEMP_Clear(pHandle);
 800100a:	4620      	mov	r0, r4
 800100c:	f7ff ffe8 	bl	8000fe0 <MOTORTEMP_Clear>
}
 8001010:	bd10      	pop	{r4, pc}
 8001012:	bf00      	nop

08001014 <MOTORTEMP_CalcAvOutputVoltageOrigin>:
  *  @p pHandle : Pointer on Handle structure of MotorTemp_Handle_t component
  *
  *  @r Fault status : Error reported in case of an over temperature detection (if necessary)
  */
__weak uint16_t MOTORTEMP_CalcAvOutputVoltageOrigin(MotorTemp_Handle_t *pHandle)
{
 8001014:	b570      	push	{r4, r5, r6, lr}
 8001016:	4604      	mov	r4, r0
	uint32_t wTemp; /*Final result of raw ADC samples*/
	uint16_t hAux; /*Raw ADC Values of NTC CMFAX103F3950FB*/
	uint8_t i;
	/*Performs ADC Conversion to get the raw data*/
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8001018:	f890 0046 	ldrb.w	r0, [r0, #70]	@ 0x46
 800101c:	f001 ff3a 	bl	8002e94 <RCM_ExecRegularConv>
    if( hAux != 0xFFFFu)
 8001020:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001024:	4298      	cmp	r0, r3
 8001026:	d020      	beq.n	800106a <MOTORTEMP_CalcAvOutputVoltageOrigin+0x56>
    {
    	/*Put all raw ADC values (Samples) of NTC CMFAX103F3950FB into currentBuffer samples */
    	pHandle->temperatureVoltageBuffer[pHandle->index] = hAux;
 8001028:	4684      	mov	ip, r0
 800102a:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800102c:	f894 003a 	ldrb.w	r0, [r4, #58]	@ 0x3a
 8001030:	f826 c010 	strh.w	ip, [r6, r0, lsl #1]
    	wTemp = 0;
    	for(i = 0; i < pHandle->lowPassFilterBandwidth; i++)
 8001034:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
 8001036:	b1d5      	cbz	r5, 800106e <MOTORTEMP_CalcAvOutputVoltageOrigin+0x5a>
 8001038:	2300      	movs	r3, #0
    	wTemp = 0;
 800103a:	461a      	mov	r2, r3
    	{
    		/*Sum the samples of raw ADC data*/
    		wTemp += pHandle->temperatureVoltageBuffer[i];
 800103c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    	for(i = 0; i < pHandle->lowPassFilterBandwidth; i++)
 8001040:	3301      	adds	r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	42ab      	cmp	r3, r5
    		wTemp += pHandle->temperatureVoltageBuffer[i];
 8001046:	440a      	add	r2, r1
    	for(i = 0; i < pHandle->lowPassFilterBandwidth; i++)
 8001048:	d3f8      	bcc.n	800103c <MOTORTEMP_CalcAvOutputVoltageOrigin+0x28>
    	}
    	/*Final Result*/
    	wTemp = wTemp / pHandle->lowPassFilterBandwidth;
 800104a:	fbb2 f2f5 	udiv	r2, r2, r5
    	pHandle->avgNTCVoltage = (uint16_t) wTemp;
    	pHandle->_Super.AvOutputVoltage = ( uint16_t ) wTemp;
    	pHandle->_Super.LatestConv = hAux;

    	if(pHandle->index < pHandle->lowPassFilterBandwidth - 1)
 800104e:	1e6b      	subs	r3, r5, #1
 8001050:	4298      	cmp	r0, r3
    	{
    		pHandle->index ++;
 8001052:	bfba      	itte	lt
 8001054:	3001      	addlt	r0, #1
 8001056:	b2c3      	uxtblt	r3, r0
 8001058:	2300      	movge	r3, #0
    	pHandle->avgNTCVoltage = (uint16_t) wTemp;
 800105a:	b290      	uxth	r0, r2
    		pHandle->index ++;
 800105c:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    	pHandle->avgNTCVoltage = (uint16_t) wTemp;
 8001060:	8420      	strh	r0, [r4, #32]
    	pHandle->_Super.AvOutputVoltage = ( uint16_t ) wTemp;
 8001062:	80a0      	strh	r0, [r4, #4]
    	pHandle->_Super.LatestConv = hAux;
 8001064:	f8a4 c002 	strh.w	ip, [r4, #2]
    	{
    		pHandle->index = 0;
    	}
    }
    return (pHandle->avgNTCVoltage);
}
 8001068:	bd70      	pop	{r4, r5, r6, pc}
    return (pHandle->avgNTCVoltage);
 800106a:	8c20      	ldrh	r0, [r4, #32]
}
 800106c:	bd70      	pop	{r4, r5, r6, pc}
    	wTemp = wTemp / pHandle->lowPassFilterBandwidth;
 800106e:	deff      	udf	#255	@ 0xff

08001070 <STM32MCP_registerTimer>:
 *
 * @return  None
 */
void STM32MCP_registerTimer(STM32MCP_protocolHandle_t *STM32MCP_CBs)
{
	STM32MCP_protocolHandle = STM32MCP_CBs;
 8001070:	4b01      	ldr	r3, [pc, #4]	@ (8001078 <STM32MCP_registerTimer+0x8>)
 8001072:	6018      	str	r0, [r3, #0]
}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200006a8 	.word	0x200006a8

0800107c <timeOutStart>:
 *
 * @return  None
 */
void timeOutStart()
{
	STM32MCP_protocolHandle->timerStart();
 800107c:	4b01      	ldr	r3, [pc, #4]	@ (8001084 <timeOutStart+0x8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4718      	bx	r3
 8001084:	200006a8 	.word	0x200006a8

08001088 <timeOutStop>:
 *
 * @return  None
 */
void timeOutStop()
{
	STM32MCP_protocolHandle->timerStop();
 8001088:	4b01      	ldr	r3, [pc, #4]	@ (8001090 <timeOutStop+0x8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4718      	bx	r3
 8001090:	200006a8 	.word	0x200006a8

08001094 <timeOutHandler>:
 * @param   None
 *
 * @return  None
 */
void timeOutHandler()
{
 8001094:	b508      	push	{r3, lr}
	expiration++;
 8001096:	4913      	ldr	r1, [pc, #76]	@ (80010e4 <timeOutHandler+0x50>)
 8001098:	780a      	ldrb	r2, [r1, #0]
 800109a:	3201      	adds	r2, #1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 80010a2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80010a6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
	if( (expiration%3) == 0)
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b55      	cmp	r3, #85	@ 0x55
	expiration++;
 80010ae:	700a      	strb	r2, [r1, #0]
	{
		payLoad = 0x00;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <timeOutHandler+0x54>)
	if( (expiration%3) == 0)
 80010b2:	d809      	bhi.n	80010c8 <timeOutHandler+0x34>
		payLoad = 0x00;
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
	}
	if(payLoad == 0x00)
	{
		packetLoss ++;
 80010b8:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <timeOutHandler+0x58>)
 80010ba:	7813      	ldrb	r3, [r2, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	b2db      	uxtb	r3, r3
		if(packetLoss > MAXIMUM_NUMBER_OF_LOST_PACKETS)
 80010c0:	2b0a      	cmp	r3, #10
		packetLoss ++;
 80010c2:	7013      	strb	r3, [r2, #0]
		if(packetLoss > MAXIMUM_NUMBER_OF_LOST_PACKETS)
 80010c4:	d807      	bhi.n	80010d6 <timeOutHandler+0x42>
	}
	else if(payLoad > 0)
	{
		packetLoss = 0;
	}
}
 80010c6:	bd08      	pop	{r3, pc}
	if(payLoad == 0x00)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f4      	beq.n	80010b8 <timeOutHandler+0x24>
		packetLoss = 0;
 80010ce:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <timeOutHandler+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
}
 80010d4:	bd08      	pop	{r3, pc}
			SEND_SOFTWARE_ERROR_REPORT(TIMEOUT_EXPIRATION);
 80010d6:	200a      	movs	r0, #10
 80010d8:	f000 f954 	bl	8001384 <SEND_SOFTWARE_ERROR_REPORT>
    timeOutStop();
}

void updateConnectionStatus(bool received, uint8_t packageCount)
{
	inConnection = received;
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <timeOutHandler+0x5c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
}
 80010e2:	bd08      	pop	{r3, pc}
 80010e4:	200006a6 	.word	0x200006a6
 80010e8:	200006a5 	.word	0x200006a5
 80010ec:	200006a7 	.word	0x200006a7
 80010f0:	200006a4 	.word	0x200006a4

080010f4 <updateConnectionStatus>:
	inConnection = received;
 80010f4:	4a02      	ldr	r2, [pc, #8]	@ (8001100 <updateConnectionStatus+0xc>)
	payLoad = packageCount;
 80010f6:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <updateConnectionStatus+0x10>)
	inConnection = received;
 80010f8:	7010      	strb	r0, [r2, #0]
	payLoad = packageCount;
 80010fa:	7019      	strb	r1, [r3, #0]
}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200006a4 	.word	0x200006a4
 8001104:	200006a5 	.word	0x200006a5

08001108 <checkConnectionStatus>:

bool getConnectionStatus()
{
	return inConnection;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <checkConnectionStatus+0x10>)
 800110a:	4a04      	ldr	r2, [pc, #16]	@ (800111c <checkConnectionStatus+0x14>)
}

uint8_t connectSkin = 0xFF;
void checkConnectionStatus()
{
	if (getConnectionStatus() == true)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f083 0301 	eor.w	r3, r3, #1
 8001112:	7013      	strb	r3, [r2, #0]
	}
	else if(getConnectionStatus() == false)
	{
		connectSkin = 0x01;
	}
}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200006a4 	.word	0x200006a4
 800111c:	20000002 	.word	0x20000002

08001120 <GeneralTasks>:
}

/*MAIN TASKS*/
int32_t DC_CURRENT = 0;
void GeneralTasks(void const * argument)
{
 8001120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	priority = osThreadGetPriority(NULL);
 8001124:	2000      	movs	r0, #0
 8001126:	f004 fcf7 	bl	8005b18 <osThreadGetPriority>
 800112a:	4b5d      	ldr	r3, [pc, #372]	@ (80012a0 <GeneralTasks+0x180>)
 800112c:	4f5d      	ldr	r7, [pc, #372]	@ (80012a4 <GeneralTasks+0x184>)
 800112e:	4e5e      	ldr	r6, [pc, #376]	@ (80012a8 <GeneralTasks+0x188>)
	       *
	       * if GeneralTasks_TIME = 0.02 seconds, N1_TIME = 0.100 seconds, then N_1 = 5
	       * The following loop is refreshed/executed every N_1 loops
	       *
	       **************************************************************/
		   if((taskSleepCount % N1_ticks) == 0)
 8001130:	4d5e      	ldr	r5, [pc, #376]	@ (80012ac <GeneralTasks+0x18c>)
 8001132:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 80012c8 <GeneralTasks+0x1a8>
	        *
	        * if GeneralTasks_TIME = 0.02 seconds, N2_TIME = 0.200 seconds, then N_2 = 10
	        * The following loop is refreshed/executed every N_2 loops
	        *
	        **************************************************************/
		    if((taskSleepCount % N2_ticks) == 0)
 8001136:	f8df 8194 	ldr.w	r8, [pc, #404]	@ 80012cc <GeneralTasks+0x1ac>
	updateConnectionStatus(false,0);
 800113a:	2100      	movs	r1, #0
	priority = osThreadGetPriority(NULL);
 800113c:	4602      	mov	r2, r0
	updateConnectionStatus(false,0);
 800113e:	4608      	mov	r0, r1
	priority = osThreadGetPriority(NULL);
 8001140:	801a      	strh	r2, [r3, #0]
	updateConnectionStatus(false,0);
 8001142:	f7ff ffd7 	bl	80010f4 <updateConnectionStatus>
	timeOutStart();
 8001146:	f7ff ff99 	bl	800107c <timeOutStart>
		osDelay(GeneralTask_TIME);
 800114a:	2014      	movs	r0, #20
 800114c:	f004 fcf6 	bl	8005b3c <osDelay>
	if(*ptr_drive_POWER_ON == true)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	781c      	ldrb	r4, [r3, #0]
 8001154:	2c00      	cmp	r4, #0
 8001156:	d035      	beq.n	80011c4 <GeneralTasks+0xa4>
			if(ledIndicatorStatus == 0)
 8001158:	7833      	ldrb	r3, [r6, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8083 	beq.w	8001266 <GeneralTasks+0x146>
			CHECK_MOTOR_STATUS();
 8001160:	f000 f908 	bl	8001374 <CHECK_MOTOR_STATUS>
			refreshThrottleStatus();
 8001164:	f7ff fe18 	bl	8000d98 <refreshThrottleStatus>
			lightSensorStateChange();
 8001168:	f7ff fedc 	bl	8000f24 <lightSensorStateChange>
			get_ThrottleInformation();
 800116c:	f7ff fe34 	bl	8000dd8 <get_ThrottleInformation>
			motor_speed();
 8001170:	f7ff fe56 	bl	8000e20 <motor_speed>
			motor_rms_current();
 8001174:	f7ff fe5c 	bl	8000e30 <motor_rms_current>
		   if((taskSleepCount % N1_ticks) == 0)
 8001178:	882b      	ldrh	r3, [r5, #0]
 800117a:	f899 1000 	ldrb.w	r1, [r9]
 800117e:	fbb3 f2f1 	udiv	r2, r3, r1
 8001182:	fb01 3212 	mls	r2, r1, r2, r3
 8001186:	2a00      	cmp	r2, #0
 8001188:	d063      	beq.n	8001252 <GeneralTasks+0x132>
		    if((taskSleepCount % N2_ticks) == 0)
 800118a:	f898 1000 	ldrb.w	r1, [r8]
 800118e:	fbb3 f2f1 	udiv	r2, r3, r1
 8001192:	fb01 3212 	mls	r2, r1, r2, r3
 8001196:	2a00      	cmp	r2, #0
 8001198:	d048      	beq.n	800122c <GeneralTasks+0x10c>
	         *
	         * if GeneralTasks_TIME = 0.02 seconds, N3_TIME = 0.500 seconds, then N_3 = 25
	         * The following loop is refreshed/executed every N_3 loops
	         *
	         **************************************************************/
		    if((taskSleepCount % N3_ticks) == 0)
 800119a:	4a45      	ldr	r2, [pc, #276]	@ (80012b0 <GeneralTasks+0x190>)
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	fbb3 f1f2 	udiv	r1, r3, r2
 80011a2:	fb02 3311 	mls	r3, r2, r1, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d03d      	beq.n	8001226 <GeneralTasks+0x106>
		    	//DC = BATTERYCURRENT_getRawCurrent();
				checkConnectionStatus();
				//showDC();
		    }

		    if(GET_SOFTWARE_ERROR_REPORT() != 0x00)
 80011aa:	f000 f90b 	bl	80013c4 <GET_SOFTWARE_ERROR_REPORT>
 80011ae:	bb68      	cbnz	r0, 800120c <GeneralTasks+0xec>
				driveStop(); /*Neutral Gear*/
		    	error_indicator_on();
		    }


			if(*ptr_error_report == 0x00)
 80011b0:	4b40      	ldr	r3, [pc, #256]	@ (80012b4 <GeneralTasks+0x194>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b9e3      	cbnz	r3, 80011f2 <GeneralTasks+0xd2>
				/*E-SCOOTER is fully stopped if no any IQ is received*/
				/*Throttle error happens in the following situations:
				 * 1) PWM Common mode noise in 50% duty cycle might couples with throttle signal although the motor is "STOPPED" (Partial Stop)
				 * 2) Voltage Transient which might randomly interfere the throttle signal affecting signal level stability.
				 * */
				throttleSignalInput();
 80011b8:	f7ff fde6 	bl	8000d88 <throttleSignalInput>
			error_indicator_off();
			timeOutStop();
			break;
			/*Try to create a new RTOS Task which handles LOW POWER MODE*/
		}
		taskSleepCount++;
 80011bc:	882b      	ldrh	r3, [r5, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	802b      	strh	r3, [r5, #0]
		osDelay(GeneralTask_TIME);
 80011c2:	e7c2      	b.n	800114a <GeneralTasks+0x2a>
			setIQ(0);
 80011c4:	4620      	mov	r0, r4
 80011c6:	f7ff fdd3 	bl	8000d70 <setIQ>
			set_ThrottlePercent(0);
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff fdd6 	bl	8000d7c <set_ThrottlePercent>
			throttleSignalInput();
 80011d0:	f7ff fdda 	bl	8000d88 <throttleSignalInput>
			driveStop(); /*Ensure it is in Neutral Gear*/
 80011d4:	f7ff fe0e 	bl	8000df4 <driveStop>
			ledIndicatorStatus = led_indicator_off();
 80011d8:	f7ff fe6c 	bl	8000eb4 <led_indicator_off>
 80011dc:	7030      	strb	r0, [r6, #0]
			set_tail_light_off();
 80011de:	f7ff fe61 	bl	8000ea4 <set_tail_light_off>
			error_indicator_off();
 80011e2:	f7ff fe6f 	bl	8000ec4 <error_indicator_off>
			timeOutStop();
 80011e6:	f7ff ff4f 	bl	8001088 <timeOutStop>
	}
	/*Shut Down Process Begins*/
	gotoSLEEP();
}
 80011ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gotoSLEEP();
 80011ee:	f7ff bdb3 	b.w	8000d58 <gotoSLEEP>
				setIQ(0);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fdbc 	bl	8000d70 <setIQ>
				set_ThrottlePercent(0);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fdbf 	bl	8000d7c <set_ThrottlePercent>
				throttleSignalInput();
 80011fe:	f7ff fdc3 	bl	8000d88 <throttleSignalInput>
				driveStop(); /*Neutral Gear*/
 8001202:	f7ff fdf7 	bl	8000df4 <driveStop>
				error_indicator_on();
 8001206:	f7ff fe5b 	bl	8000ec0 <error_indicator_on>
 800120a:	e7d7      	b.n	80011bc <GeneralTasks+0x9c>
				setIQ(0);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fdaf 	bl	8000d70 <setIQ>
				set_ThrottlePercent(0);
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff fdb2 	bl	8000d7c <set_ThrottlePercent>
				throttleSignalInput();
 8001218:	f7ff fdb6 	bl	8000d88 <throttleSignalInput>
				driveStop(); /*Neutral Gear*/
 800121c:	f7ff fdea 	bl	8000df4 <driveStop>
		    	error_indicator_on();
 8001220:	f7ff fe4e 	bl	8000ec0 <error_indicator_on>
 8001224:	e7c4      	b.n	80011b0 <GeneralTasks+0x90>
				checkConnectionStatus();
 8001226:	f7ff ff6f 	bl	8001108 <checkConnectionStatus>
 800122a:	e7be      	b.n	80011aa <GeneralTasks+0x8a>
		    	tail_light_mode = get_tail_light_mode();
 800122c:	f7ff fe58 	bl	8000ee0 <get_tail_light_mode>
 8001230:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <GeneralTasks+0x198>)
		    	if(tail_light_mode == ESCOOTER_TOGGLE_TAIL_LIGHT)
 8001232:	2805      	cmp	r0, #5
		    	tail_light_mode = get_tail_light_mode();
 8001234:	4604      	mov	r4, r0
 8001236:	7018      	strb	r0, [r3, #0]
		    	if(tail_light_mode == ESCOOTER_TOGGLE_TAIL_LIGHT)
 8001238:	d019      	beq.n	800126e <GeneralTasks+0x14e>
		    		if(tail_light_mode_old != tail_light_mode)
 800123a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80012c0 <GeneralTasks+0x1a0>
 800123e:	f89a 3000 	ldrb.w	r3, [sl]
 8001242:	4283      	cmp	r3, r0
 8001244:	d003      	beq.n	800124e <GeneralTasks+0x12e>
		    			if(tail_light_mode == ESCOOTER_TAIL_LIGHT_OFF)
 8001246:	2806      	cmp	r0, #6
 8001248:	d026      	beq.n	8001298 <GeneralTasks+0x178>
		    			else if(tail_light_mode == ESCOOTER_TAIL_LIGHT_ON)
 800124a:	2808      	cmp	r0, #8
 800124c:	d01b      	beq.n	8001286 <GeneralTasks+0x166>
		    if((taskSleepCount % N3_ticks) == 0)
 800124e:	882b      	ldrh	r3, [r5, #0]
 8001250:	e7a3      	b.n	800119a <GeneralTasks+0x7a>
			   getIqIdMotor();
 8001252:	f7ff fe07 	bl	8000e64 <getIqIdMotor>
			   calcDC();
 8001256:	f7ff fe13 	bl	8000e80 <calcDC>
			   DC_CURRENT = getDC(); //Just for debugging the data type
 800125a:	f7ff fe1b 	bl	8000e94 <getDC>
 800125e:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <GeneralTasks+0x19c>)
 8001260:	6018      	str	r0, [r3, #0]
		    if((taskSleepCount % N2_ticks) == 0)
 8001262:	882b      	ldrh	r3, [r5, #0]
 8001264:	e791      	b.n	800118a <GeneralTasks+0x6a>
				ledIndicatorStatus = led_indicator_on();
 8001266:	f7ff fe1f 	bl	8000ea8 <led_indicator_on>
 800126a:	7030      	strb	r0, [r6, #0]
 800126c:	e778      	b.n	8001160 <GeneralTasks+0x40>
		    		tail_light_status_old = toggle_tail_light(tail_light_status_old);
 800126e:	f8df a054 	ldr.w	sl, [pc, #84]	@ 80012c4 <GeneralTasks+0x1a4>
 8001272:	f89a 0000 	ldrb.w	r0, [sl]
 8001276:	f7ff fe4b 	bl	8000f10 <toggle_tail_light>
		    		tail_light_mode_old = ESCOOTER_TOGGLE_TAIL_LIGHT;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <GeneralTasks+0x1a0>)
		    		tail_light_status_old = toggle_tail_light(tail_light_status_old);
 800127c:	f88a 0000 	strb.w	r0, [sl]
		    		tail_light_mode_old = ESCOOTER_TOGGLE_TAIL_LIGHT;
 8001280:	701c      	strb	r4, [r3, #0]
		    if((taskSleepCount % N3_ticks) == 0)
 8001282:	882b      	ldrh	r3, [r5, #0]
 8001284:	e789      	b.n	800119a <GeneralTasks+0x7a>
		    				set_tail_light_on();
 8001286:	f7ff fe0b 	bl	8000ea0 <set_tail_light_on>
		    				tail_light_status_old = get_tail_light_status(); // either: 1 = ON   or 0 = OFF CAUTION: THIS PARAMETER IS CONTROLLED BY UART
 800128a:	f7ff fe23 	bl	8000ed4 <get_tail_light_status>
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <GeneralTasks+0x1a4>)
		    				tail_light_mode_old = ESCOOTER_TAIL_LIGHT_ON;
 8001290:	f88a 4000 	strb.w	r4, [sl]
		    				tail_light_status_old = get_tail_light_status(); // either: 1 = ON   or 0 = OFF CAUTION: THIS PARAMETER IS CONTROLLED BY UART
 8001294:	7018      	strb	r0, [r3, #0]
 8001296:	e7da      	b.n	800124e <GeneralTasks+0x12e>
		    				set_tail_light_off();
 8001298:	f7ff fe04 	bl	8000ea4 <set_tail_light_off>
		    				tail_light_status_old = get_tail_light_status(); // either: 1 = ON   or 0 = OFF CAUTION: THIS PARAMETER IS CONTROLLED BY UART
 800129c:	e7f5      	b.n	800128a <GeneralTasks+0x16a>
 800129e:	bf00      	nop
 80012a0:	200006c0 	.word	0x200006c0
 80012a4:	200006b4 	.word	0x200006b4
 80012a8:	200006b8 	.word	0x200006b8
 80012ac:	200006ba 	.word	0x200006ba
 80012b0:	200006bd 	.word	0x200006bd
 80012b4:	200006b0 	.word	0x200006b0
 80012b8:	20000004 	.word	0x20000004
 80012bc:	200006ac 	.word	0x200006ac
 80012c0:	20000003 	.word	0x20000003
 80012c4:	200006bc 	.word	0x200006bc
 80012c8:	200006bf 	.word	0x200006bf
 80012cc:	200006be 	.word	0x200006be

080012d0 <go_powerOnRegister>:
	ptr_drive_POWER_ON = ptrpowerOn;
 80012d0:	4b01      	ldr	r3, [pc, #4]	@ (80012d8 <go_powerOnRegister+0x8>)
 80012d2:	6018      	str	r0, [r3, #0]
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	200006b4 	.word	0x200006b4

080012dc <go_errorReportRegister>:
	ptr_error_report = report;
 80012dc:	4b01      	ldr	r3, [pc, #4]	@ (80012e4 <go_errorReportRegister+0x8>)
 80012de:	6018      	str	r0, [r3, #0]
}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200006b0 	.word	0x200006b0

080012e8 <software_errorReportRegister>:
}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop

080012ec <GoInit>:
{
 80012ec:	b510      	push	{r4, lr}
	osThreadDef(drive, GeneralTasks,osPriorityBelowNormal,0,128);
 80012ee:	4c16      	ldr	r4, [pc, #88]	@ (8001348 <GoInit+0x5c>)
{
 80012f0:	b088      	sub	sp, #32
	powerModeInit();
 80012f2:	f7ff fd23 	bl	8000d3c <powerModeInit>
	ERROR_REPORT_INIT();
 80012f6:	f000 f831 	bl	800135c <ERROR_REPORT_INIT>
	SOFTWARE_ERROR_REPORT_INIT();
 80012fa:	f000 f835 	bl	8001368 <SOFTWARE_ERROR_REPORT_INIT>
	brake_and_throttle_init();
 80012fe:	f7ff fd2f 	bl	8000d60 <brake_and_throttle_init>
	motor_param_init();
 8001302:	f7ff fd7f 	bl	8000e04 <motor_param_init>
	set_tail_light_off();
 8001306:	f7ff fdcd 	bl	8000ea4 <set_tail_light_off>
	UDHAL_TIMEOUT_init();
 800130a:	f008 fce5 	bl	8009cd8 <UDHAL_TIMEOUT_init>
	osThreadDef(drive, GeneralTasks,osPriorityBelowNormal,0,128);
 800130e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001310:	f10d 0c04 	add.w	ip, sp, #4
 8001314:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001318:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800131c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	driveHandle = osThreadCreate(osThread(drive), NULL);
 8001320:	2100      	movs	r1, #0
 8001322:	a801      	add	r0, sp, #4
 8001324:	f004 fbc8 	bl	8005ab8 <osThreadCreate>
	N1_ticks = N1_TIME / GeneralTask_TIME;
 8001328:	4908      	ldr	r1, [pc, #32]	@ (800134c <GoInit+0x60>)
	N2_ticks = N2_TIME / GeneralTask_TIME;
 800132a:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <GoInit+0x64>)
	driveHandle = osThreadCreate(osThread(drive), NULL);
 800132c:	4c09      	ldr	r4, [pc, #36]	@ (8001354 <GoInit+0x68>)
	N3_ticks = N3_TIME / GeneralTask_TIME;
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <GoInit+0x6c>)
	driveHandle = osThreadCreate(osThread(drive), NULL);
 8001330:	6020      	str	r0, [r4, #0]
	N1_ticks = N1_TIME / GeneralTask_TIME;
 8001332:	f04f 0c05 	mov.w	ip, #5
 8001336:	f881 c000 	strb.w	ip, [r1]
	N2_ticks = N2_TIME / GeneralTask_TIME;
 800133a:	210a      	movs	r1, #10
 800133c:	7011      	strb	r1, [r2, #0]
	N3_ticks = N3_TIME / GeneralTask_TIME;
 800133e:	220f      	movs	r2, #15
 8001340:	701a      	strb	r2, [r3, #0]
}
 8001342:	b008      	add	sp, #32
 8001344:	bd10      	pop	{r4, pc}
 8001346:	bf00      	nop
 8001348:	08009f58 	.word	0x08009f58
 800134c:	200006bf 	.word	0x200006bf
 8001350:	200006be 	.word	0x200006be
 8001354:	200006c4 	.word	0x200006c4
 8001358:	200006bd 	.word	0x200006bd

0800135c <ERROR_REPORT_INIT>:
uint8_t ERROR_CODE = SYSTEM_NORMAL;
uint8_t SOFTWARE_ERROR = SOFTWARE_OK;

void ERROR_REPORT_INIT()
{
	go_errorReportRegister(&ERROR_OCCURRED);
 800135c:	4801      	ldr	r0, [pc, #4]	@ (8001364 <ERROR_REPORT_INIT+0x8>)
 800135e:	f7ff bfbd 	b.w	80012dc <go_errorReportRegister>
 8001362:	bf00      	nop
 8001364:	200006ca 	.word	0x200006ca

08001368 <SOFTWARE_ERROR_REPORT_INIT>:
}

void SOFTWARE_ERROR_REPORT_INIT()
{
	software_errorReportRegister(&SOFTWARE_ERROR);
 8001368:	4801      	ldr	r0, [pc, #4]	@ (8001370 <SOFTWARE_ERROR_REPORT_INIT+0x8>)
 800136a:	f7ff bfbd 	b.w	80012e8 <software_errorReportRegister>
 800136e:	bf00      	nop
 8001370:	200006c8 	.word	0x200006c8

08001374 <CHECK_MOTOR_STATUS>:
 * @param   None
 *
 * @return  None
 */
void CHECK_MOTOR_STATUS()
{
 8001374:	b508      	push	{r3, lr}
     uint16_t status = MC_GetOccurredFaultsMotor1();
 8001376:	f000 fa91 	bl	800189c <MC_GetOccurredFaultsMotor1>
     SEND_MOTOR_ERROR_REPORT(status);
}

void SEND_MOTOR_ERROR_REPORT(uint16_t error_code)
{
    ERROR_OCCURRED = (uint8_t)error_code;
 800137a:	4b01      	ldr	r3, [pc, #4]	@ (8001380 <CHECK_MOTOR_STATUS+0xc>)
 800137c:	7018      	strb	r0, [r3, #0]
}
 800137e:	bd08      	pop	{r3, pc}
 8001380:	200006ca 	.word	0x200006ca

08001384 <SEND_SOFTWARE_ERROR_REPORT>:
}

void SEND_SOFTWARE_ERROR_REPORT(uint8_t fault)
{
	SOFTWARE_ERROR = fault;
 8001384:	4b01      	ldr	r3, [pc, #4]	@ (800138c <SEND_SOFTWARE_ERROR_REPORT+0x8>)
 8001386:	7018      	strb	r0, [r3, #0]
}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200006c8 	.word	0x200006c8

08001390 <GET_MOTOR_ERROR_REPORT>:

uint8_t GET_MOTOR_ERROR_REPORT()
{
	if(ERROR_OCCURRED == MC_NO_ERROR)
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <GET_MOTOR_ERROR_REPORT+0x2c>)
 8001392:	7818      	ldrb	r0, [r3, #0]
	{
		ERROR_CODE = SYSTEM_NORMAL;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <GET_MOTOR_ERROR_REPORT+0x30>)
	if(ERROR_OCCURRED == MC_NO_ERROR)
 8001396:	b140      	cbz	r0, 80013aa <GET_MOTOR_ERROR_REPORT+0x1a>
	}
	else if(ERROR_OCCURRED == MC_SPEED_FDBK)
 8001398:	2820      	cmp	r0, #32
 800139a:	d008      	beq.n	80013ae <GET_MOTOR_ERROR_REPORT+0x1e>
	{
		ERROR_CODE = HALL_SENSOR_ERROR_CODE;
	}
	else if(ERROR_OCCURRED == MC_UNDER_VOLT)
 800139c:	2804      	cmp	r0, #4
 800139e:	d009      	beq.n	80013b4 <GET_MOTOR_ERROR_REPORT+0x24>
	{
		ERROR_CODE = ABNORMAL_CURRENT;
	}
	else if(ERROR_OCCURRED == MC_OVER_TEMP)
 80013a0:	2808      	cmp	r0, #8
 80013a2:	d001      	beq.n	80013a8 <GET_MOTOR_ERROR_REPORT+0x18>
	{
		ERROR_CODE  = BATTERY_TEMP_ERROR_CODE;
	}
	return ERROR_CODE;
 80013a4:	7818      	ldrb	r0, [r3, #0]
 80013a6:	4770      	bx	lr
		ERROR_CODE  = BATTERY_TEMP_ERROR_CODE;
 80013a8:	201a      	movs	r0, #26
 80013aa:	7018      	strb	r0, [r3, #0]
}
 80013ac:	4770      	bx	lr
		ERROR_CODE = HALL_SENSOR_ERROR_CODE;
 80013ae:	203a      	movs	r0, #58	@ 0x3a
 80013b0:	7018      	strb	r0, [r3, #0]
 80013b2:	4770      	bx	lr
		ERROR_CODE = ABNORMAL_CURRENT;
 80013b4:	202a      	movs	r0, #42	@ 0x2a
 80013b6:	7018      	strb	r0, [r3, #0]
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200006ca 	.word	0x200006ca
 80013c0:	200006c9 	.word	0x200006c9

080013c4 <GET_SOFTWARE_ERROR_REPORT>:

uint8_t GET_SOFTWARE_ERROR_REPORT()
{
	return SOFTWARE_ERROR;
 80013c4:	4b01      	ldr	r3, [pc, #4]	@ (80013cc <GET_SOFTWARE_ERROR_REPORT+0x8>)
}
 80013c6:	7818      	ldrb	r0, [r3, #0]
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200006c8 	.word	0x200006c8

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001408 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d4:	480d      	ldr	r0, [pc, #52]	@ (800140c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013d6:	490e      	ldr	r1, [pc, #56]	@ (8001410 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001418 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013ec:	4c0b      	ldr	r4, [pc, #44]	@ (800141c <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013fa:	f002 fc5f 	bl	8003cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f008 fd15 	bl	8009e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f000 f82d 	bl	8001460 <main>
  bx  lr    
 8001406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	2000064c 	.word	0x2000064c
  ldr r2, =_sidata
 8001414:	0800a25c 	.word	0x0800a25c
  ldr r2, =_sbss
 8001418:	20000650 	.word	0x20000650
  ldr r4, =_ebss
 800141c:	200058a4 	.word	0x200058a4

08001420 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <BusFault_Handler>
	...

08001424 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001424:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <vApplicationGetIdleTaskMemory+0x14>)
 8001426:	6003      	str	r3, [r0, #0]
{
 8001428:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800142a:	2380      	movs	r3, #128	@ 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800142c:	4c03      	ldr	r4, [pc, #12]	@ (800143c <vApplicationGetIdleTaskMemory+0x18>)
 800142e:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8001430:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001434:	6013      	str	r3, [r2, #0]
}
 8001436:	4770      	bx	lr
 8001438:	20000d6c 	.word	0x20000d6c
 800143c:	20000b6c 	.word	0x20000b6c

08001440 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <vApplicationGetTimerTaskMemory+0x18>)
 8001442:	6003      	str	r3, [r0, #0]
{
 8001444:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001446:	f44f 7380 	mov.w	r3, #256	@ 0x100
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800144a:	4c04      	ldr	r4, [pc, #16]	@ (800145c <vApplicationGetTimerTaskMemory+0x1c>)
 800144c:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 800144e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000acc 	.word	0x20000acc
 800145c:	200006cc 	.word	0x200006cc

08001460 <main>:
extern void StartSafetyTask(void const * argument);

static void MX_NVIC_Init(void);

int main(void)
{
 8001460:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001464:	2620      	movs	r6, #32
{
 8001466:	b097      	sub	sp, #92	@ 0x5c

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001468:	4c9e      	ldr	r4, [pc, #632]	@ (80016e4 <main+0x284>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146a:	f8df 828c 	ldr.w	r8, [pc, #652]	@ 80016f8 <main+0x298>
  HAL_Init();
 800146e:	f002 fc2f 	bl	8003cd0 <HAL_Init>
  SystemClock();
 8001472:	f008 fbb9 	bl	8009be8 <SystemClock>
  GPIO_Init();
 8001476:	f008 fa4f 	bl	8009918 <GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800147a:	4632      	mov	r2, r6
 800147c:	2100      	movs	r1, #0
 800147e:	a80e      	add	r0, sp, #56	@ 0x38
 8001480:	f008 fc76 	bl	8009d70 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001484:	2300      	movs	r3, #0
 8001486:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800148a:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800148e:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001490:	7623      	strb	r3, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001492:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001496:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001498:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc1.Instance = ADC1;
 800149c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
  hadc1.Init.ScanConvMode = ENABLE;
 80014a0:	2501      	movs	r5, #1
  hadc1.Instance = ADC1;
 80014a2:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014a6:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80014aa:	f44f 6700 	mov.w	r7, #2048	@ 0x800
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ae:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ENABLE;
 80014b0:	6125      	str	r5, [r4, #16]
  hadc1.Init.NbrOfConversion = 1;
 80014b2:	61e5      	str	r5, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b4:	6165      	str	r5, [r4, #20]
  hadc1.Instance = ADC1;
 80014b6:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b8:	f8c4 8028 	str.w	r8, [r4, #40]	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014bc:	f8c4 9004 	str.w	r9, [r4, #4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80014c0:	60e7      	str	r7, [r4, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c2:	f002 fc31 	bl	8003d28 <HAL_ADC_Init>
 80014c6:	b108      	cbz	r0, 80014cc <main+0x6c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ca:	e7fe      	b.n	80014ca <main+0x6a>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014cc:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80014ce:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80014d0:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
  sConfigInjected.InjectedOffset = 0;
 80014d4:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80014d6:	2307      	movs	r3, #7
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80014d8:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014dc:	a90e      	add	r1, sp, #56	@ 0x38
 80014de:	4620      	mov	r0, r4
  sConfigInjected.InjectedRank = 1;
 80014e0:	950f      	str	r5, [sp, #60]	@ 0x3c
  sConfigInjected.InjectedNbrOfConversion = 1;
 80014e2:	9512      	str	r5, [sp, #72]	@ 0x48
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80014e4:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80014e6:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80014ea:	f002 fd7f 	bl	8003fec <HAL_ADCEx_InjectedConfigChannel>
 80014ee:	b108      	cbz	r0, 80014f4 <main+0x94>
 80014f0:	b672      	cpsid	i
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <main+0x92>
  sConfig.Rank = 1;
 80014f4:	e9cd 5008 	strd	r5, r0, [sp, #32]
  sConfig.Channel = ADC_CHANNEL_3;
 80014f8:	f04f 0b03 	mov.w	fp, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	a907      	add	r1, sp, #28
 80014fe:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001500:	f8cd b01c 	str.w	fp, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001504:	f002 fcbc 	bl	8003e80 <HAL_ADC_ConfigChannel>
 8001508:	b108      	cbz	r0, 800150e <main+0xae>
 800150a:	b672      	cpsid	i
  while (1)
 800150c:	e7fe      	b.n	800150c <main+0xac>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800150e:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfig.Rank = 2;
 8001510:	f04f 0e0a 	mov.w	lr, #10
 8001514:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001516:	a907      	add	r1, sp, #28
 8001518:	4620      	mov	r0, r4
  sConfig.Rank = 2;
 800151a:	e9cd e307 	strd	lr, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151e:	f002 fcaf 	bl	8003e80 <HAL_ADC_ConfigChannel>
 8001522:	b108      	cbz	r0, 8001528 <main+0xc8>
 8001524:	b672      	cpsid	i
  while (1)
 8001526:	e7fe      	b.n	8001526 <main+0xc6>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001528:	e9cd b008 	strd	fp, r0, [sp, #32]
  sConfig.Channel = ADC_CHANNEL_12;
 800152c:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152e:	a907      	add	r1, sp, #28
 8001530:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_12;
 8001532:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	f002 fca4 	bl	8003e80 <HAL_ADC_ConfigChannel>
 8001538:	b108      	cbz	r0, 800153e <main+0xde>
 800153a:	b672      	cpsid	i
  while (1)
 800153c:	e7fe      	b.n	800153c <main+0xdc>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800153e:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfig.Rank = 4;
 8001540:	f04f 0c08 	mov.w	ip, #8
 8001544:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001546:	4620      	mov	r0, r4
 8001548:	a907      	add	r1, sp, #28
  sConfig.Rank = 4;
 800154a:	e9cd c307 	strd	ip, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154e:	f002 fc97 	bl	8003e80 <HAL_ADC_ConfigChannel>
 8001552:	4683      	mov	fp, r0
 8001554:	b108      	cbz	r0, 800155a <main+0xfa>
 8001556:	b672      	cpsid	i
  while (1)
 8001558:	e7fe      	b.n	8001558 <main+0xf8>
  hadc2.Instance = ADC2;
 800155a:	4c63      	ldr	r4, [pc, #396]	@ (80016e8 <main+0x288>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800155c:	4601      	mov	r1, r0
 800155e:	4632      	mov	r2, r6
 8001560:	a80e      	add	r0, sp, #56	@ 0x38
 8001562:	f008 fc05 	bl	8009d70 <memset>
  hadc2.Instance = ADC2;
 8001566:	4b61      	ldr	r3, [pc, #388]	@ (80016ec <main+0x28c>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001568:	f8c4 9004 	str.w	r9, [r4, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800156c:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 800156e:	e9cd bb07 	strd	fp, fp, [sp, #28]
 8001572:	e9cd bb09 	strd	fp, fp, [sp, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001576:	f8c4 8028 	str.w	r8, [r4, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800157a:	60e7      	str	r7, [r4, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800157c:	f8c4 b008 	str.w	fp, [r4, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001580:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001582:	f884 b018 	strb.w	fp, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001586:	f884 b020 	strb.w	fp, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800158a:	f8c4 b02c 	str.w	fp, [r4, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800158e:	f884 b030 	strb.w	fp, [r4, #48]	@ 0x30
  hadc2.Init.NbrOfConversion = 1;
 8001592:	61e5      	str	r5, [r4, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001594:	6165      	str	r5, [r4, #20]
  hadc2.Instance = ADC2;
 8001596:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001598:	f002 fbc6 	bl	8003d28 <HAL_ADC_Init>
 800159c:	b108      	cbz	r0, 80015a2 <main+0x142>
 800159e:	b672      	cpsid	i
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <main+0x140>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015a2:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80015a4:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80015a6:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
  sConfigInjected.InjectedOffset = 0;
 80015aa:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80015ac:	270e      	movs	r7, #14
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80015ae:	a90e      	add	r1, sp, #56	@ 0x38
 80015b0:	4620      	mov	r0, r4
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80015b2:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
  sConfigInjected.InjectedRank = 1;
 80015b6:	950f      	str	r5, [sp, #60]	@ 0x3c
  sConfigInjected.InjectedNbrOfConversion = 1;
 80015b8:	9512      	str	r5, [sp, #72]	@ 0x48
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80015ba:	970e      	str	r7, [sp, #56]	@ 0x38
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80015bc:	f002 fd16 	bl	8003fec <HAL_ADCEx_InjectedConfigChannel>
 80015c0:	b108      	cbz	r0, 80015c6 <main+0x166>
 80015c2:	b672      	cpsid	i
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <main+0x164>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015c6:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015c8:	a907      	add	r1, sp, #28
 80015ca:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 80015cc:	9707      	str	r7, [sp, #28]
  sConfig.Rank = 1;
 80015ce:	9508      	str	r5, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015d0:	f002 fc56 	bl	8003e80 <HAL_ADC_ConfigChannel>
 80015d4:	4604      	mov	r4, r0
 80015d6:	b108      	cbz	r0, 80015dc <main+0x17c>
 80015d8:	b672      	cpsid	i
  while (1)
 80015da:	e7fe      	b.n	80015da <main+0x17a>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015dc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80015e0:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80015e4:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015e8:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80015ec:	e9cd 0005 	strd	r0, r0, [sp, #20]
 80015f0:	9002      	str	r0, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f2:	9000      	str	r0, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f4:	900d      	str	r0, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f6:	9001      	str	r0, [sp, #4]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015f8:	4601      	mov	r1, r0
 80015fa:	4632      	mov	r2, r6
 80015fc:	a80e      	add	r0, sp, #56	@ 0x38
 80015fe:	f008 fbb7 	bl	8009d70 <memset>
  htim1.Instance = TIM1;
 8001602:	483b      	ldr	r0, [pc, #236]	@ (80016f0 <main+0x290>)
 8001604:	4b3b      	ldr	r3, [pc, #236]	@ (80016f4 <main+0x294>)
 8001606:	6003      	str	r3, [r0, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001608:	f640 7749 	movw	r7, #3913	@ 0xf49
 800160c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001610:	e9c0 7303 	strd	r7, r3, [r0, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001614:	6086      	str	r6, [r0, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001616:	6145      	str	r5, [r0, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001618:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800161c:	f003 fb9c 	bl	8004d58 <HAL_TIM_Base_Init>
 8001620:	b108      	cbz	r0, 8001626 <main+0x1c6>
 8001622:	b672      	cpsid	i
  while (1)
 8001624:	e7fe      	b.n	8001624 <main+0x1c4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001626:	4832      	ldr	r0, [pc, #200]	@ (80016f0 <main+0x290>)
 8001628:	f003 fc62 	bl	8004ef0 <HAL_TIM_PWM_Init>
 800162c:	b108      	cbz	r0, 8001632 <main+0x1d2>
 800162e:	b672      	cpsid	i
  while (1)
 8001630:	e7fe      	b.n	8001630 <main+0x1d0>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001632:	2506      	movs	r5, #6
 8001634:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001636:	482e      	ldr	r0, [pc, #184]	@ (80016f0 <main+0x290>)
 8001638:	a902      	add	r1, sp, #8
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800163a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800163e:	f003 fe95 	bl	800536c <HAL_TIM_SlaveConfigSynchro>
 8001642:	b108      	cbz	r0, 8001648 <main+0x1e8>
 8001644:	b672      	cpsid	i
  while (1)
 8001646:	e7fe      	b.n	8001646 <main+0x1e6>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001648:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800164a:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800164c:	4828      	ldr	r0, [pc, #160]	@ (80016f0 <main+0x290>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800164e:	9300      	str	r3, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001650:	4669      	mov	r1, sp
 8001652:	f004 f911 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 8001656:	4602      	mov	r2, r0
 8001658:	b108      	cbz	r0, 800165e <main+0x1fe>
 800165a:	b672      	cpsid	i
  while (1)
 800165c:	e7fe      	b.n	800165c <main+0x1fc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165e:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8001660:	e9cd 3007 	strd	r3, r0, [sp, #28]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001664:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001668:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800166c:	900d      	str	r0, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166e:	a907      	add	r1, sp, #28
 8001670:	481f      	ldr	r0, [pc, #124]	@ (80016f0 <main+0x290>)
 8001672:	f003 fccd 	bl	8005010 <HAL_TIM_PWM_ConfigChannel>
 8001676:	b108      	cbz	r0, 800167c <main+0x21c>
 8001678:	b672      	cpsid	i
  while (1)
 800167a:	e7fe      	b.n	800167a <main+0x21a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800167c:	481c      	ldr	r0, [pc, #112]	@ (80016f0 <main+0x290>)
 800167e:	2204      	movs	r2, #4
 8001680:	a907      	add	r1, sp, #28
 8001682:	f003 fcc5 	bl	8005010 <HAL_TIM_PWM_ConfigChannel>
 8001686:	b108      	cbz	r0, 800168c <main+0x22c>
 8001688:	b672      	cpsid	i
  while (1)
 800168a:	e7fe      	b.n	800168a <main+0x22a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800168c:	4818      	ldr	r0, [pc, #96]	@ (80016f0 <main+0x290>)
 800168e:	2208      	movs	r2, #8
 8001690:	a907      	add	r1, sp, #28
 8001692:	f003 fcbd 	bl	8005010 <HAL_TIM_PWM_ConfigChannel>
 8001696:	b108      	cbz	r0, 800169c <main+0x23c>
 8001698:	b672      	cpsid	i
  while (1)
 800169a:	e7fe      	b.n	800169a <main+0x23a>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800169c:	2270      	movs	r2, #112	@ 0x70
 800169e:	f640 7348 	movw	r3, #3912	@ 0xf48
 80016a2:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016a6:	4812      	ldr	r0, [pc, #72]	@ (80016f0 <main+0x290>)
 80016a8:	220c      	movs	r2, #12
 80016aa:	a907      	add	r1, sp, #28
 80016ac:	f003 fcb0 	bl	8005010 <HAL_TIM_PWM_ConfigChannel>
 80016b0:	b108      	cbz	r0, 80016b6 <main+0x256>
 80016b2:	b672      	cpsid	i
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <main+0x254>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80016b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016be:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80016c2:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80016c6:	f44f 7480 	mov.w	r4, #256	@ 0x100
 80016ca:	2248      	movs	r2, #72	@ 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016cc:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016ce:	a90e      	add	r1, sp, #56	@ 0x38
 80016d0:	4807      	ldr	r0, [pc, #28]	@ (80016f0 <main+0x290>)
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80016d2:	e9cd 4210 	strd	r4, r2, [sp, #64]	@ 0x40
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016d6:	f004 f90f 	bl	80058f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80016da:	4604      	mov	r4, r0
 80016dc:	b170      	cbz	r0, 80016fc <main+0x29c>
 80016de:	b672      	cpsid	i
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <main+0x280>
 80016e2:	bf00      	nop
 80016e4:	20000eec 	.word	0x20000eec
 80016e8:	20000ea4 	.word	0x20000ea4
 80016ec:	40012100 	.word	0x40012100
 80016f0:	20000e5c 	.word	0x20000e5c
 80016f4:	40010000 	.word	0x40010000
 80016f8:	0f000001 	.word	0x0f000001
  htim2.Instance = TIM2;
 80016fc:	4d46      	ldr	r5, [pc, #280]	@ (8001818 <main+0x3b8>)
  HAL_TIM_MspPostInit(&htim1);
 80016fe:	4847      	ldr	r0, [pc, #284]	@ (800181c <main+0x3bc>)
 8001700:	f001 fd18 	bl	8003134 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8001704:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001708:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170a:	4628      	mov	r0, r5
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 800170c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001710:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001714:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001718:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 800171c:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	e9cd 4402 	strd	r4, r4, [sp, #8]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 800172c:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800172e:	f003 fb13 	bl	8004d58 <HAL_TIM_Base_Init>
 8001732:	b108      	cbz	r0, 8001738 <main+0x2d8>
 8001734:	b672      	cpsid	i
  while (1)
 8001736:	e7fe      	b.n	8001736 <main+0x2d6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800173c:	4628      	mov	r0, r5
 800173e:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001740:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001742:	f003 fd69 	bl	8005218 <HAL_TIM_ConfigClockSource>
 8001746:	b108      	cbz	r0, 800174c <main+0x2ec>
 8001748:	b672      	cpsid	i
  while (1)
 800174a:	e7fe      	b.n	800174a <main+0x2ea>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800174c:	2300      	movs	r3, #0
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 800174e:	220f      	movs	r2, #15
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001750:	4831      	ldr	r0, [pc, #196]	@ (8001818 <main+0x3b8>)
  sConfig.Commutation_Delay = 0;
 8001752:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001754:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001756:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 800175a:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 800175c:	f004 f828 	bl	80057b0 <HAL_TIMEx_HallSensor_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	b108      	cbz	r0, 8001768 <main+0x308>
 8001764:	b672      	cpsid	i
  while (1)
 8001766:	e7fe      	b.n	8001766 <main+0x306>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001768:	2250      	movs	r2, #80	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800176a:	482b      	ldr	r0, [pc, #172]	@ (8001818 <main+0x3b8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800176c:	9202      	str	r2, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800176e:	a902      	add	r1, sp, #8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001772:	f004 f881 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4605      	mov	r5, r0
 8001778:	b108      	cbz	r0, 800177e <main+0x31e>
 800177a:	b672      	cpsid	i
  while (1)
 800177c:	e7fe      	b.n	800177c <main+0x31c>
  UART_Init();
 800177e:	f008 fac3 	bl	8009d08 <UART_Init>
  MX_MotorControl_Init();
 8001782:	f001 fa83 	bl	8002c8c <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8001786:	462a      	mov	r2, r5
 8001788:	2102      	movs	r1, #2
 800178a:	2012      	movs	r0, #18
 800178c:	f002 fd14 	bl	80041b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001790:	2012      	movs	r0, #18
 8001792:	f002 fd4d 	bl	8004230 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001796:	462a      	mov	r2, r5
 8001798:	4629      	mov	r1, r5
 800179a:	2019      	movs	r0, #25
 800179c:	f002 fd0c 	bl	80041b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017a0:	2019      	movs	r0, #25
 80017a2:	f002 fd45 	bl	8004230 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 0);
 80017a6:	462a      	mov	r2, r5
 80017a8:	2104      	movs	r1, #4
 80017aa:	2018      	movs	r0, #24
 80017ac:	f002 fd04 	bl	80041b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017b0:	2018      	movs	r0, #24
 80017b2:	f002 fd3d 	bl	8004230 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80017b6:	462a      	mov	r2, r5
 80017b8:	2103      	movs	r1, #3
 80017ba:	201c      	movs	r0, #28
 80017bc:	f002 fcfc 	bl	80041b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017c0:	201c      	movs	r0, #28
 80017c2:	f002 fd35 	bl	8004230 <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 80017c6:	4c16      	ldr	r4, [pc, #88]	@ (8001820 <main+0x3c0>)
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80017c8:	462a      	mov	r2, r5
 80017ca:	2103      	movs	r1, #3
 80017cc:	2025      	movs	r0, #37	@ 0x25
 80017ce:	f002 fcf3 	bl	80041b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017d2:	2025      	movs	r0, #37	@ 0x25
 80017d4:	f002 fd2c 	bl	8004230 <HAL_NVIC_EnableIRQ>
  GoInit();
 80017d8:	f7ff fd88 	bl	80012ec <GoInit>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 80017dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017de:	ae07      	add	r6, sp, #28
 80017e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80017e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017e6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 80017ea:	4629      	mov	r1, r5
 80017ec:	a807      	add	r0, sp, #28
 80017ee:	f004 f963 	bl	8005ab8 <osThreadCreate>
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <main+0x3c4>)
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 80017f4:	340c      	adds	r4, #12
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 80017f6:	6018      	str	r0, [r3, #0]
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 80017f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fa:	ae0e      	add	r6, sp, #56	@ 0x38
 80017fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80017fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001802:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  safetyHandle = osThreadCreate(osThread(safety), NULL);
 8001806:	4629      	mov	r1, r5
 8001808:	a80e      	add	r0, sp, #56	@ 0x38
 800180a:	f004 f955 	bl	8005ab8 <osThreadCreate>
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <main+0x3c8>)
 8001810:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001812:	f004 f94b 	bl	8005aac <osKernelStart>
  while (1)
 8001816:	e7fe      	b.n	8001816 <main+0x3b6>
 8001818:	20000e14 	.word	0x20000e14
 800181c:	20000e5c 	.word	0x20000e5c
 8001820:	08009f74 	.word	0x08009f74
 8001824:	20000e10 	.word	0x20000e10
 8001828:	20000e0c 	.word	0x20000e0c

0800182c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800182e:	6802      	ldr	r2, [r0, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d000      	beq.n	8001836 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001834:	4770      	bx	lr
    HAL_IncTick();
 8001836:	f002 ba65 	b.w	8003d04 <HAL_IncTick>
 800183a:	bf00      	nop
 800183c:	40001000 	.word	0x40001000

08001840 <Error_Handler>:
 8001840:	b672      	cpsid	i
  while (1)
 8001842:	e7fe      	b.n	8001842 <Error_Handler+0x2>

08001844 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001844:	4b01      	ldr	r3, [pc, #4]	@ (800184c <MC_StartMotor1+0x8>)
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	f000 b85a 	b.w	8001900 <MCI_StartMotor>
 800184c:	2000136c 	.word	0x2000136c

08001850 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001850:	4b01      	ldr	r3, [pc, #4]	@ (8001858 <MC_StopMotor1+0x8>)
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	f000 b85e 	b.w	8001914 <MCI_StopMotor>
 8001858:	2000136c 	.word	0x2000136c

0800185c <MC_ProgramTorqueRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1( int16_t hFinalTorque, uint16_t hDurationms )
{
 800185c:	b410      	push	{r4}
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 800185e:	4c04      	ldr	r4, [pc, #16]	@ (8001870 <MC_ProgramTorqueRampMotor1+0x14>)
{
 8001860:	4603      	mov	r3, r0
 8001862:	460a      	mov	r2, r1
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8001864:	6820      	ldr	r0, [r4, #0]
}
 8001866:	f85d 4b04 	ldr.w	r4, [sp], #4
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 800186a:	4619      	mov	r1, r3
 800186c:	f000 b834 	b.w	80018d8 <MCI_ExecTorqueRamp>
 8001870:	2000136c 	.word	0x2000136c

08001874 <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 8001874:	4b01      	ldr	r3, [pc, #4]	@ (800187c <MC_GetMecSpeedAverageMotor1+0x8>)
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	f000 b8ac 	b.w	80019d4 <MCI_GetAvrgMecSpeedUnit>
 800187c:	2000136c 	.word	0x2000136c

08001880 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8001880:	4b01      	ldr	r3, [pc, #4]	@ (8001888 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f000 b90a 	b.w	8001a9c <MCI_GetPhaseCurrentAmplitude>
 8001888:	2000136c 	.word	0x2000136c

0800188c <MC_GetIqdMotor1>:
/**
 * @brief returns Iq and Id current values for Motor 1 in qd_t format
 */
__weak qd_t MC_GetIqdMotor1(void)
{
	return MCI_GetIqd( pMCI[M1] );
 800188c:	4b02      	ldr	r3, [pc, #8]	@ (8001898 <MC_GetIqdMotor1+0xc>)
 800188e:	6818      	ldr	r0, [r3, #0]
{
 8001890:	b082      	sub	sp, #8
}
 8001892:	b002      	add	sp, #8
	return MCI_GetIqd( pMCI[M1] );
 8001894:	f000 b8c6 	b.w	8001a24 <MCI_GetIqd>
 8001898:	2000136c 	.word	0x2000136c

0800189c <MC_GetOccurredFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 800189c:	4b01      	ldr	r3, [pc, #4]	@ (80018a4 <MC_GetOccurredFaultsMotor1+0x8>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	f000 b884 	b.w	80019ac <MCI_GetOccurredFaults>
 80018a4:	2000136c 	.word	0x2000136c

080018a8 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80018a8:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 80018ac:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 80018b0:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80018b2:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 80018b6:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 80018ba:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 80018be:	f880 c018 	strb.w	ip, [r0, #24]
}
 80018c2:	4770      	bx	lr

080018c4 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80018c4:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018c8:	f240 1301 	movw	r3, #257	@ 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80018cc:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 80018d0:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 80018d2:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018d4:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 80018d6:	4770      	bx	lr

080018d8 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 80018d8:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018dc:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 80018de:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 80018e2:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 80018e4:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018e6:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop

080018ec <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 80018ec:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80018ee:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018f0:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80018f2:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 80018f4:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018f8:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80018fa:	b002      	add	sp, #8
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8001900:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001902:	2103      	movs	r1, #3
{
 8001904:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001906:	6800      	ldr	r0, [r0, #0]
 8001908:	f007 fe54 	bl	80095b4 <STM_NextState>

  if ( RetVal == true )
 800190c:	b108      	cbz	r0, 8001912 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800190e:	2301      	movs	r3, #1
 8001910:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8001912:	bd10      	pop	{r4, pc}

08001914 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8001914:	6800      	ldr	r0, [r0, #0]
 8001916:	2107      	movs	r1, #7
 8001918:	f007 be4c 	b.w	80095b4 <STM_NextState>

0800191c <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 800191c:	6800      	ldr	r0, [r0, #0]
 800191e:	f007 bec5 	b.w	80096ac <STM_FaultAcknowledged>
 8001922:	bf00      	nop

08001924 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8001924:	6800      	ldr	r0, [r0, #0]
 8001926:	2101      	movs	r1, #1
 8001928:	f007 be44 	b.w	80095b4 <STM_NextState>

0800192c <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 800192c:	b178      	cbz	r0, 800194e <MCI_ExecBufferedCommands+0x22>
{
 800192e:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001930:	7e03      	ldrb	r3, [r0, #24]
 8001932:	2b01      	cmp	r3, #1
 8001934:	4604      	mov	r4, r0
 8001936:	d000      	beq.n	800193a <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8001938:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 800193a:	7b01      	ldrb	r1, [r0, #12]
 800193c:	2902      	cmp	r1, #2
 800193e:	d020      	beq.n	8001982 <MCI_ExecBufferedCommands+0x56>
 8001940:	2903      	cmp	r1, #3
 8001942:	d005      	beq.n	8001950 <MCI_ExecBufferedCommands+0x24>
 8001944:	2901      	cmp	r1, #1
 8001946:	d00c      	beq.n	8001962 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001948:	2303      	movs	r3, #3
 800194a:	7623      	strb	r3, [r4, #24]
}
 800194c:	bd10      	pop	{r4, pc}
 800194e:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001950:	6882      	ldr	r2, [r0, #8]
 8001952:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001956:	f8d0 3012 	ldr.w	r3, [r0, #18]
 800195a:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 800195c:	2302      	movs	r3, #2
 800195e:	7623      	strb	r3, [r4, #24]
}
 8001960:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001962:	6883      	ldr	r3, [r0, #8]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 800196a:	6840      	ldr	r0, [r0, #4]
 800196c:	f007 fd46 	bl	80093fc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001970:	8ae2      	ldrh	r2, [r4, #22]
 8001972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001976:	6860      	ldr	r0, [r4, #4]
 8001978:	f007 fd44 	bl	8009404 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800197c:	2800      	cmp	r0, #0
 800197e:	d0e3      	beq.n	8001948 <MCI_ExecBufferedCommands+0x1c>
 8001980:	e7ec      	b.n	800195c <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001982:	6883      	ldr	r3, [r0, #8]
 8001984:	2100      	movs	r1, #0
 8001986:	f883 1024 	strb.w	r1, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800198a:	6840      	ldr	r0, [r0, #4]
 800198c:	f007 fd36 	bl	80093fc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001990:	8ae2      	ldrh	r2, [r4, #22]
 8001992:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001996:	6860      	ldr	r0, [r4, #4]
 8001998:	f007 fd34 	bl	8009404 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800199c:	2800      	cmp	r0, #0
 800199e:	d0d3      	beq.n	8001948 <MCI_ExecBufferedCommands+0x1c>
 80019a0:	e7dc      	b.n	800195c <MCI_ExecBufferedCommands+0x30>
 80019a2:	bf00      	nop

080019a4 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 80019a4:	6800      	ldr	r0, [r0, #0]
 80019a6:	f007 be7f 	b.w	80096a8 <STM_GetState>
 80019aa:	bf00      	nop

080019ac <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 80019ac:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 80019ae:	6800      	ldr	r0, [r0, #0]
 80019b0:	f007 fe88 	bl	80096c4 <STM_GetFaultState>
}
 80019b4:	b280      	uxth	r0, r0
 80019b6:	bd08      	pop	{r3, pc}

080019b8 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 80019b8:	7e40      	ldrb	r0, [r0, #25]
 80019ba:	4770      	bx	lr

080019bc <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 80019bc:	7b03      	ldrb	r3, [r0, #12]
 80019be:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 80019c0:	bf0c      	ite	eq
 80019c2:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 80019c6:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop

080019cc <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 80019cc:	6840      	ldr	r0, [r0, #4]
 80019ce:	f007 bd5d 	b.w	800948c <STC_StopRamp>
 80019d2:	bf00      	nop

080019d4 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 80019d4:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 80019d6:	6840      	ldr	r0, [r0, #4]
 80019d8:	f007 fcf6 	bl	80093c8 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 80019dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80019e0:	f007 bc94 	b.w	800930c <SPD_GetAvrgMecSpeedUnit>

080019e4 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80019e4:	6840      	ldr	r0, [r0, #4]
 80019e6:	f007 bcf9 	b.w	80093dc <STC_GetMecSpeedRefUnit>
 80019ea:	bf00      	nop

080019ec <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 80019ec:	6882      	ldr	r2, [r0, #8]
 80019ee:	6810      	ldr	r0, [r2, #0]
 80019f0:	2300      	movs	r3, #0
 80019f2:	b282      	uxth	r2, r0
 80019f4:	f362 030f 	bfi	r3, r2, #0, #16
 80019f8:	0c00      	lsrs	r0, r0, #16
 80019fa:	f360 431f 	bfi	r3, r0, #16, #16
{
 80019fe:	b082      	sub	sp, #8
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	b002      	add	sp, #8
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8001a08:	6882      	ldr	r2, [r0, #8]
 8001a0a:	6850      	ldr	r0, [r2, #4]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	b282      	uxth	r2, r0
 8001a10:	f362 030f 	bfi	r3, r2, #0, #16
 8001a14:	0c00      	lsrs	r0, r0, #16
 8001a16:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001a1a:	b082      	sub	sp, #8
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	b002      	add	sp, #8
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop

08001a24 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8001a24:	6882      	ldr	r2, [r0, #8]
 8001a26:	68d0      	ldr	r0, [r2, #12]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	b282      	uxth	r2, r0
 8001a2c:	f362 030f 	bfi	r3, r2, #0, #16
 8001a30:	0c00      	lsrs	r0, r0, #16
 8001a32:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001a36:	b082      	sub	sp, #8
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	b002      	add	sp, #8
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop

08001a40 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8001a40:	6882      	ldr	r2, [r0, #8]
 8001a42:	6910      	ldr	r0, [r2, #16]
 8001a44:	2300      	movs	r3, #0
 8001a46:	b282      	uxth	r2, r0
 8001a48:	f362 030f 	bfi	r3, r2, #0, #16
 8001a4c:	0c00      	lsrs	r0, r0, #16
 8001a4e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001a52:	b082      	sub	sp, #8
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	b002      	add	sp, #8
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop

08001a5c <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8001a5c:	6882      	ldr	r2, [r0, #8]
 8001a5e:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001a62:	2300      	movs	r3, #0
 8001a64:	b282      	uxth	r2, r0
 8001a66:	f362 030f 	bfi	r3, r2, #0, #16
 8001a6a:	0c00      	lsrs	r0, r0, #16
 8001a6c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001a70:	b082      	sub	sp, #8
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	b002      	add	sp, #8
 8001a76:	4770      	bx	lr

08001a78 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8001a78:	6882      	ldr	r2, [r0, #8]
 8001a7a:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	b282      	uxth	r2, r0
 8001a82:	f362 030f 	bfi	r3, r2, #0, #16
 8001a86:	0c00      	lsrs	r0, r0, #16
 8001a88:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001a8c:	b082      	sub	sp, #8
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	b002      	add	sp, #8
 8001a92:	4770      	bx	lr

08001a94 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8001a94:	6883      	ldr	r3, [r0, #8]
}
 8001a96:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001a9a:	4770      	bx	lr

08001a9c <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8001a9c:	6882      	ldr	r2, [r0, #8]
{
 8001a9e:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8001aa0:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8001aa4:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 8001aa8:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8001aac:	fb00 3000 	mla	r0, r0, r0, r3
 8001ab0:	f000 f8f2 	bl	8001c98 <MCM_Sqrt>

  if ( wAux1 > INT16_MAX )
 8001ab4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001ab8:	4298      	cmp	r0, r3
 8001aba:	bfa8      	it	ge
 8001abc:	4618      	movge	r0, r3
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
}
 8001abe:	b200      	sxth	r0, r0
 8001ac0:	bd08      	pop	{r3, pc}
 8001ac2:	bf00      	nop

08001ac4 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	6882      	ldr	r2, [r0, #8]
 8001ac8:	f361 030f 	bfi	r3, r1, #0, #16
 8001acc:	f361 431f 	bfi	r3, r1, #16, #16
 8001ad0:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop

08001ad8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001ad8:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8001ada:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8001ade:	f007 fd2b 	bl	8009538 <STC_GetDefaultIqdref>
 8001ae2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001ae6:	8220      	strh	r0, [r4, #16]
 8001ae8:	8263      	strh	r3, [r4, #18]
}
 8001aea:	bd10      	pop	{r4, pc}

08001aec <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8001aec:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001af0:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001af4:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001af8:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001afc:	fb10 f202 	smulbb	r2, r0, r2
 8001b00:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8001b04:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8001b08:	b084      	sub	sp, #16
 8001b0a:	b203      	sxth	r3, r0
  if ( wbeta_tmp > INT16_MAX )
 8001b0c:	da05      	bge.n	8001b1a <MCM_Clarke+0x2e>
 8001b0e:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8001b10:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8001b14:	da0c      	bge.n	8001b30 <MCM_Clarke+0x44>
 8001b16:	4a09      	ldr	r2, [pc, #36]	@ (8001b3c <MCM_Clarke+0x50>)
 8001b18:	e001      	b.n	8001b1e <MCM_Clarke+0x32>
 8001b1a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	2000      	movs	r0, #0
 8001b22:	f363 000f 	bfi	r0, r3, #0, #16
 8001b26:	b293      	uxth	r3, r2
 8001b28:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001b2c:	b004      	add	sp, #16
 8001b2e:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <MCM_Clarke+0x50>)
 8001b32:	b20a      	sxth	r2, r1
 8001b34:	4282      	cmp	r2, r0
 8001b36:	bfb8      	it	lt
 8001b38:	4602      	movlt	r2, r0
 8001b3a:	e7f0      	b.n	8001b1e <MCM_Clarke+0x32>
 8001b3c:	ffff8001 	.word	0xffff8001

08001b40 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8001b40:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8001b44:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001b48:	f400 7140 	and.w	r1, r0, #768	@ 0x300
 8001b4c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 8001b50:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001b52:	d028      	beq.n	8001ba6 <MCM_Trig_Functions+0x66>
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	d816      	bhi.n	8001b8a <MCM_Trig_Functions+0x4a>
 8001b5c:	b361      	cbz	r1, 8001bb8 <MCM_Trig_Functions+0x78>
 8001b5e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001b62:	d109      	bne.n	8001b78 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001b64:	b2c0      	uxtb	r0, r0
 8001b66:	43c2      	mvns	r2, r0
 8001b68:	491a      	ldr	r1, [pc, #104]	@ (8001bd4 <MCM_Trig_Functions+0x94>)
 8001b6a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001b6c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001b70:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001b74:	4252      	negs	r2, r2
 8001b76:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f363 000f 	bfi	r0, r3, #0, #16
 8001b80:	b292      	uxth	r2, r2
 8001b82:	f362 401f 	bfi	r0, r2, #16, #16
}
 8001b86:	b002      	add	sp, #8
 8001b88:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001b8a:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8001b8e:	d1f3      	bne.n	8001b78 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001b90:	4910      	ldr	r1, [pc, #64]	@ (8001bd4 <MCM_Trig_Functions+0x94>)
 8001b92:	b2c0      	uxtb	r0, r0
 8001b94:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001b96:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001b9a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001b9c:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001b9e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001ba2:	b21b      	sxth	r3, r3
      break;
 8001ba4:	e7e8      	b.n	8001b78 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001ba6:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001ba8:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001baa:	490a      	ldr	r1, [pc, #40]	@ (8001bd4 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001bac:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001bae:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001bb2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8001bb6:	e7df      	b.n	8001b78 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001bb8:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001bba:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001bbc:	4905      	ldr	r1, [pc, #20]	@ (8001bd4 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001bbe:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001bc0:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001bc4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001bc8:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001bca:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001bcc:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001bce:	b21b      	sxth	r3, r3
      break;
 8001bd0:	e7d2      	b.n	8001b78 <MCM_Trig_Functions+0x38>
 8001bd2:	bf00      	nop
 8001bd4:	08009fcc 	.word	0x08009fcc

08001bd8 <MCM_Park>:
{
 8001bd8:	b530      	push	{r4, r5, lr}
 8001bda:	4605      	mov	r5, r0
 8001bdc:	4604      	mov	r4, r0
 8001bde:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001be0:	4608      	mov	r0, r1
 8001be2:	f7ff ffad 	bl	8001b40 <MCM_Trig_Functions>
 8001be6:	b22d      	sxth	r5, r5
 8001be8:	b201      	sxth	r1, r0
 8001bea:	1424      	asrs	r4, r4, #16
 8001bec:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001bee:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001bf2:	fb04 3310 	mls	r3, r4, r0, r3
  if ( wqd_tmp > INT16_MAX )
 8001bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfa:	da05      	bge.n	8001c08 <MCM_Park+0x30>
 8001bfc:	13da      	asrs	r2, r3, #15
  else if ( wqd_tmp < ( -32768 ) )
 8001bfe:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8001c02:	da22      	bge.n	8001c4a <MCM_Park+0x72>
 8001c04:	4a14      	ldr	r2, [pc, #80]	@ (8001c58 <MCM_Park+0x80>)
 8001c06:	e001      	b.n	8001c0c <MCM_Park+0x34>
 8001c08:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8001c0c:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001c10:	fb05 4400 	mla	r4, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8001c14:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001c18:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8001c1c:	da04      	bge.n	8001c28 <MCM_Park+0x50>
  else if ( wqd_tmp < ( -32768 ) )
 8001c1e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001c22:	da0c      	bge.n	8001c3e <MCM_Park+0x66>
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <MCM_Park+0x80>)
 8001c26:	e001      	b.n	8001c2c <MCM_Park+0x54>
 8001c28:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return ( Output );
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f362 000f 	bfi	r0, r2, #0, #16
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001c3a:	b005      	add	sp, #20
 8001c3c:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001c3e:	4906      	ldr	r1, [pc, #24]	@ (8001c58 <MCM_Park+0x80>)
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	428b      	cmp	r3, r1
 8001c44:	bfb8      	it	lt
 8001c46:	460b      	movlt	r3, r1
 8001c48:	e7f0      	b.n	8001c2c <MCM_Park+0x54>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001c4a:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <MCM_Park+0x80>)
 8001c4c:	b212      	sxth	r2, r2
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	bfb8      	it	lt
 8001c52:	461a      	movlt	r2, r3
 8001c54:	e7da      	b.n	8001c0c <MCM_Park+0x34>
 8001c56:	bf00      	nop
 8001c58:	ffff8001 	.word	0xffff8001

08001c5c <MCM_Rev_Park>:
{
 8001c5c:	b530      	push	{r4, r5, lr}
 8001c5e:	4605      	mov	r5, r0
 8001c60:	b085      	sub	sp, #20
 8001c62:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001c64:	4608      	mov	r0, r1
 8001c66:	f7ff ff6b 	bl	8001b40 <MCM_Trig_Functions>
 8001c6a:	1424      	asrs	r4, r4, #16
 8001c6c:	1402      	asrs	r2, r0, #16
 8001c6e:	b22d      	sxth	r5, r5
 8001c70:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001c72:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001c76:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001c7a:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001c7e:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8001c82:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001c86:	2000      	movs	r0, #0
 8001c88:	f363 000f 	bfi	r0, r3, #0, #16
 8001c8c:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001c90:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001c94:	b005      	add	sp, #20
 8001c96:	bd30      	pop	{r4, r5, pc}

08001c98 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	dd32      	ble.n	8001d02 <MCM_Sqrt+0x6a>
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 8001c9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ca0:	bfd4      	ite	le
 8001ca2:	2180      	movle	r1, #128	@ 0x80
 8001ca4:	f44f 5100 	movgt.w	r1, #8192	@ 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001ca8:	fb93 f2f1 	sdiv	r2, r3, r1
 8001cac:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8001cae:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001cb2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001cb6:	d025      	beq.n	8001d04 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001cb8:	fb93 f2f0 	sdiv	r2, r3, r0
 8001cbc:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8001cbe:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001cc2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001cc6:	d01d      	beq.n	8001d04 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001cc8:	fb93 f2f1 	sdiv	r2, r3, r1
 8001ccc:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8001cce:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001cd2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001cd6:	d015      	beq.n	8001d04 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001cd8:	fb93 f2f0 	sdiv	r2, r3, r0
 8001cdc:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8001cde:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001ce2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001ce6:	d00d      	beq.n	8001d04 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001ce8:	fb93 f2f1 	sdiv	r2, r3, r1
 8001cec:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8001cee:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001cf2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001cf6:	d005      	beq.n	8001d04 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001cf8:	fb93 f3f0 	sdiv	r3, r3, r0
 8001cfc:	4418      	add	r0, r3
 8001cfe:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 8001d00:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 8001d02:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop

08001d08 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001d08:	b538      	push	{r3, r4, r5, lr}
 8001d0a:	2326      	movs	r3, #38	@ 0x26
 8001d0c:	4916      	ldr	r1, [pc, #88]	@ (8001d68 <FOC_Clear+0x60>)
 8001d0e:	fb00 f303 	mul.w	r3, r0, r3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8001d12:	2400      	movs	r4, #0
 8001d14:	50cc      	str	r4, [r1, r3]
{
 8001d16:	4605      	mov	r5, r0
 8001d18:	f103 0208 	add.w	r2, r3, #8
 8001d1c:	1858      	adds	r0, r3, r1
 8001d1e:	3310      	adds	r3, #16
 8001d20:	440a      	add	r2, r1
 8001d22:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001d24:	4911      	ldr	r1, [pc, #68]	@ (8001d6c <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001d26:	6044      	str	r4, [r0, #4]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001d28:	6054      	str	r4, [r2, #4]
 8001d2a:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001d2c:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001d30:	f8c3 400a 	str.w	r4, [r3, #10]
 8001d34:	f8c3 4006 	str.w	r4, [r3, #6]
 8001d38:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	f007 f825 	bl	8008d8c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <FOC_Clear+0x68>)
 8001d44:	4621      	mov	r1, r4
 8001d46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001d4a:	f007 f81f 	bl	8008d8c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <FOC_Clear+0x6c>)
 8001d50:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001d54:	f007 fb3a 	bl	80093cc <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d58:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <FOC_Clear+0x70>)
 8001d5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d62:	f007 ba0b 	b.w	800917c <PWMC_SwitchOffPWM>
 8001d66:	bf00      	nop
 8001d68:	20001338 	.word	0x20001338
 8001d6c:	200012b0 	.word	0x200012b0
 8001d70:	200012ac 	.word	0x200012ac
 8001d74:	200012b8 	.word	0x200012b8
 8001d78:	20001298 	.word	0x20001298

08001d7c <MCboot>:
{
 8001d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8001d80:	f8df a1d0 	ldr.w	sl, [pc, #464]	@ 8001f54 <MCboot+0x1d8>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001d84:	4e5b      	ldr	r6, [pc, #364]	@ (8001ef4 <MCboot+0x178>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001d86:	4d5c      	ldr	r5, [pc, #368]	@ (8001ef8 <MCboot+0x17c>)
  HALL_Init (&HALL_M1);
 8001d88:	f8df b1cc 	ldr.w	fp, [pc, #460]	@ 8001f58 <MCboot+0x1dc>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001d8c:	4f5b      	ldr	r7, [pc, #364]	@ (8001efc <MCboot+0x180>)
  PID_HandleInit(&PIDIqHandle_M1);
 8001d8e:	f8df 91cc 	ldr.w	r9, [pc, #460]	@ 8001f5c <MCboot+0x1e0>
  PID_HandleInit(&PIDIdHandle_M1);
 8001d92:	f8df 81cc 	ldr.w	r8, [pc, #460]	@ 8001f60 <MCboot+0x1e4>
{
 8001d96:	b087      	sub	sp, #28
 8001d98:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 8001d9a:	4650      	mov	r0, sl
{
 8001d9c:	e9cd 3102 	strd	r3, r1, [sp, #8]
  STM_Init(&STM[M1]);
 8001da0:	f007 fbe0 	bl	8009564 <STM_Init>
  bMCBootCompleted = 0;
 8001da4:	4a56      	ldr	r2, [pc, #344]	@ (8001f00 <MCboot+0x184>)
  pCLM[M1] = &CircleLimitationM1;
 8001da6:	4b57      	ldr	r3, [pc, #348]	@ (8001f04 <MCboot+0x188>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001da8:	4857      	ldr	r0, [pc, #348]	@ (8001f08 <MCboot+0x18c>)
 8001daa:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 8001dac:	2400      	movs	r4, #0
 8001dae:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 8001db0:	4a56      	ldr	r2, [pc, #344]	@ (8001f0c <MCboot+0x190>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001db2:	4d57      	ldr	r5, [pc, #348]	@ (8001f10 <MCboot+0x194>)
  pCLM[M1] = &CircleLimitationM1;
 8001db4:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8001db6:	f006 fd77 	bl	80088a8 <ICS_Init>
  startTimers();
 8001dba:	f007 f869 	bl	8008e90 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f006 ffd0 	bl	8008d64 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001dc4:	4b53      	ldr	r3, [pc, #332]	@ (8001f14 <MCboot+0x198>)
 8001dc6:	602b      	str	r3, [r5, #0]
  HALL_Init (&HALL_M1);
 8001dc8:	4658      	mov	r0, fp
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001dca:	603e      	str	r6, [r7, #0]
  HALL_Init (&HALL_M1);
 8001dcc:	f006 f922 	bl	8008014 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8001dd0:	465a      	mov	r2, fp
 8001dd2:	6839      	ldr	r1, [r7, #0]
 8001dd4:	6828      	ldr	r0, [r5, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001dd6:	4e50      	ldr	r6, [pc, #320]	@ (8001f18 <MCboot+0x19c>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8001dd8:	f007 fae0 	bl	800939c <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8001ddc:	4648      	mov	r0, r9
 8001dde:	f006 ffc1 	bl	8008d64 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001de2:	4640      	mov	r0, r8
 8001de4:	f006 ffbe 	bl	8008d64 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001de8:	494c      	ldr	r1, [pc, #304]	@ (8001f1c <MCboot+0x1a0>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8001dea:	4b4d      	ldr	r3, [pc, #308]	@ (8001f20 <MCboot+0x1a4>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001dec:	484d      	ldr	r0, [pc, #308]	@ (8001f24 <MCboot+0x1a8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001dee:	f8c1 9000 	str.w	r9, [r1]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001df2:	6030      	str	r0, [r6, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8001df4:	f8c3 8000 	str.w	r8, [r3]
  RVBS_Init(pBusSensorM1);
 8001df8:	f007 fa02 	bl	8009200 <RVBS_Init>
  pCurrentSensorM1 = &RealBatteryCurrentSensorParamsM1;
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <MCboot+0x1ac>)
 8001dfe:	484b      	ldr	r0, [pc, #300]	@ (8001f2c <MCboot+0x1b0>)
 8001e00:	6018      	str	r0, [r3, #0]
  BATTERYCURRENT_Init(pCurrentSensorM1);
 8001e02:	f7ff f8af 	bl	8000f64 <BATTERYCURRENT_Init>
  pMotorTemperatureSensorM1 = &RealMotorTemperatureSensorParamsM1;
 8001e06:	4b4a      	ldr	r3, [pc, #296]	@ (8001f30 <MCboot+0x1b4>)
 8001e08:	484a      	ldr	r0, [pc, #296]	@ (8001f34 <MCboot+0x1b8>)
  NTC_Init(&TempSensorParamsM1);
 8001e0a:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 8001f64 <MCboot+0x1e8>
  pMotorTemperatureSensorM1 = &RealMotorTemperatureSensorParamsM1;
 8001e0e:	6018      	str	r0, [r3, #0]
  MOTORTEMP_Init(pMotorTemperatureSensorM1);
 8001e10:	f7ff f8f4 	bl	8000ffc <MOTORTEMP_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001e14:	4a48      	ldr	r2, [pc, #288]	@ (8001f38 <MCboot+0x1bc>)
 8001e16:	4b49      	ldr	r3, [pc, #292]	@ (8001f3c <MCboot+0x1c0>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001e18:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 8001f68 <MCboot+0x1ec>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001e1c:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 8001e1e:	4648      	mov	r0, r9
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001e20:	6832      	ldr	r2, [r6, #0]
 8001e22:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001e26:	f8c3 810c 	str.w	r8, [r3, #268]	@ 0x10c
  NTC_Init(&TempSensorParamsM1);
 8001e2a:	f006 ff57 	bl	8008cdc <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001e2e:	4944      	ldr	r1, [pc, #272]	@ (8001f40 <MCboot+0x1c4>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001e30:	4b44      	ldr	r3, [pc, #272]	@ (8001f44 <MCboot+0x1c8>)
 8001e32:	4845      	ldr	r0, [pc, #276]	@ (8001f48 <MCboot+0x1cc>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001e34:	f8c1 9000 	str.w	r9, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001e38:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8001e3a:	f007 fa2f 	bl	800929c <REMNG_Init>
  FOC_Clear(M1);
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7ff ff62 	bl	8001d08 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001e44:	f04f 0901 	mov.w	r9, #1
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001e48:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001e4a:	f888 9024 	strb.w	r9, [r8, #36]	@ 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001e4e:	f007 fb73 	bl	8009538 <STC_GetDefaultIqdref>
 8001e52:	f8c8 0010 	str.w	r0, [r8, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001e56:	6828      	ldr	r0, [r5, #0]
 8001e58:	f007 fb6e 	bl	8009538 <STC_GetDefaultIqdref>
 8001e5c:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001e60:	4643      	mov	r3, r8
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001e62:	f8a8 0014 	strh.w	r0, [r8, #20]
  oMCInterface[M1] = & Mci[M1];
 8001e66:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 8001f6c <MCboot+0x1f0>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001e6a:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8001e6c:	4837      	ldr	r0, [pc, #220]	@ (8001f4c <MCboot+0x1d0>)
 8001e6e:	f8c8 0000 	str.w	r0, [r8]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001e72:	4651      	mov	r1, sl
 8001e74:	f7ff fd18 	bl	80018a8 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001e78:	f8d8 0000 	ldr.w	r0, [r8]
 8001e7c:	9001      	str	r0, [sp, #4]
 8001e7e:	6828      	ldr	r0, [r5, #0]
 8001e80:	f007 fb50 	bl	8009524 <STC_GetMecSpeedRefUnitDefault>
 8001e84:	4622      	mov	r2, r4
 8001e86:	4601      	mov	r1, r0
 8001e88:	9801      	ldr	r0, [sp, #4]
 8001e8a:	f7ff fd1b 	bl	80018c4 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8001e8e:	9802      	ldr	r0, [sp, #8]
 8001e90:	f8d8 3000 	ldr.w	r3, [r8]
 8001e94:	6003      	str	r3, [r0, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001e96:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <MCboot+0x17c>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001e98:	4820      	ldr	r0, [pc, #128]	@ (8001f1c <MCboot+0x1a0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001e9a:	6819      	ldr	r1, [r3, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001e9c:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <MCboot+0x1bc>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001ea0:	4d27      	ldr	r5, [pc, #156]	@ (8001f40 <MCboot+0x1c4>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001ea2:	f8d7 c000 	ldr.w	ip, [r7]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001ea6:	6807      	ldr	r7, [r0, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8001ea8:	481d      	ldr	r0, [pc, #116]	@ (8001f20 <MCboot+0x1a4>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001eaa:	f8d3 e000 	ldr.w	lr, [r3]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001eae:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001eb0:	4b27      	ldr	r3, [pc, #156]	@ (8001f50 <MCboot+0x1d4>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001eb2:	6836      	ldr	r6, [r6, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8001eb4:	6800      	ldr	r0, [r0, #0]
 8001eb6:	6098      	str	r0, [r3, #8]
  MCT[M1].pStateMachine = &STM[M1];
 8001eb8:	e9c3 2a09 	strd	r2, sl, [r3, #36]	@ 0x24
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001ebc:	e9c3 c700 	strd	ip, r7, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001ec0:	e9c3 560b 	strd	r5, r6, [r3, #44]	@ 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8001ec4:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001ec8:	e9c3 440d 	strd	r4, r4, [r3, #52]	@ 0x34
  MCT[M1].pFF = MC_NULL;
 8001ecc:	e9c3 4410 	strd	r4, r4, [r3, #64]	@ 0x40
  MCT[M1].pSCC = MC_NULL;
 8001ed0:	e9c3 4412 	strd	r4, r4, [r3, #72]	@ 0x48
  bMCBootCompleted = 1;
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <MCboot+0x184>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001ed6:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8001ed8:	f8c3 b018 	str.w	fp, [r3, #24]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001edc:	f8c3 e03c 	str.w	lr, [r3, #60]	@ 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8001ee0:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8001ee2:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 8001ee4:	651c      	str	r4, [r3, #80]	@ 0x50
  pMCTList[M1] = &MCT[M1];
 8001ee6:	9903      	ldr	r1, [sp, #12]
  bMCBootCompleted = 1;
 8001ee8:	f882 9000 	strb.w	r9, [r2]
  pMCTList[M1] = &MCT[M1];
 8001eec:	600b      	str	r3, [r1, #0]
}
 8001eee:	b007      	add	sp, #28
 8001ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ef4:	2000049c 	.word	0x2000049c
 8001ef8:	20001298 	.word	0x20001298
 8001efc:	200012b4 	.word	0x200012b4
 8001f00:	20001284 	.word	0x20001284
 8001f04:	20001290 	.word	0x20001290
 8001f08:	2000039c 	.word	0x2000039c
 8001f0c:	20000144 	.word	0x20000144
 8001f10:	200012b8 	.word	0x200012b8
 8001f14:	20000410 	.word	0x20000410
 8001f18:	200012a8 	.word	0x200012a8
 8001f1c:	200012b0 	.word	0x200012b0
 8001f20:	200012ac 	.word	0x200012ac
 8001f24:	20000284 	.word	0x20000284
 8001f28:	200012a4 	.word	0x200012a4
 8001f2c:	20000258 	.word	0x20000258
 8001f30:	200012a0 	.word	0x200012a0
 8001f34:	20000210 	.word	0x20000210
 8001f38:	20001294 	.word	0x20001294
 8001f3c:	200004c8 	.word	0x200004c8
 8001f40:	2000129c 	.word	0x2000129c
 8001f44:	2000128c 	.word	0x2000128c
 8001f48:	200001f8 	.word	0x200001f8
 8001f4c:	2000131c 	.word	0x2000131c
 8001f50:	200012c4 	.word	0x200012c4
 8001f54:	200012bc 	.word	0x200012bc
 8001f58:	200002d4 	.word	0x200002d4
 8001f5c:	20000470 	.word	0x20000470
 8001f60:	20000444 	.word	0x20000444
 8001f64:	200002ac 	.word	0x200002ac
 8001f68:	20001338 	.word	0x20001338
 8001f6c:	20001318 	.word	0x20001318

08001f70 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop

08001f74 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001f74:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001f76:	4c08      	ldr	r4, [pc, #32]	@ (8001f98 <FOC_CalcCurrRef+0x24>)
 8001f78:	2326      	movs	r3, #38	@ 0x26
 8001f7a:	fb03 4400 	mla	r4, r3, r0, r4
 8001f7e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001f82:	b103      	cbz	r3, 8001f86 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001f84:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <FOC_CalcCurrRef+0x28>)
 8001f88:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001f8c:	f007 fa82 	bl	8009494 <STC_CalcTorqueReference>
 8001f90:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001f92:	8220      	strh	r0, [r4, #16]
}
 8001f94:	bd10      	pop	{r4, pc}
 8001f96:	bf00      	nop
 8001f98:	20001338 	.word	0x20001338
 8001f9c:	200012b8 	.word	0x200012b8

08001fa0 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001fa0:	4b01      	ldr	r3, [pc, #4]	@ (8001fa8 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001fa2:	8018      	strh	r0, [r3, #0]
}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20001288 	.word	0x20001288

08001fac <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001fae:	8818      	ldrh	r0, [r3, #0]
 8001fb0:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001fb2:	fab0 f080 	clz	r0, r0
 8001fb6:	0940      	lsrs	r0, r0, #5
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20001288 	.word	0x20001288

08001fc0 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001fc0:	4b01      	ldr	r3, [pc, #4]	@ (8001fc8 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001fc2:	8018      	strh	r0, [r3, #0]
}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20001286 	.word	0x20001286

08001fcc <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001fcc:	4b03      	ldr	r3, [pc, #12]	@ (8001fdc <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001fce:	8818      	ldrh	r0, [r3, #0]
 8001fd0:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001fd2:	fab0 f080 	clz	r0, r0
 8001fd6:	0940      	lsrs	r0, r0, #5
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20001286 	.word	0x20001286

08001fe0 <TSK_MediumFrequencyTaskM1>:
{
 8001fe0:	b530      	push	{r4, r5, lr}
 8001fe2:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001fe4:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001fe6:	f10d 0106 	add.w	r1, sp, #6
 8001fea:	484d      	ldr	r0, [pc, #308]	@ (8002120 <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 8001fec:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001ff0:	f006 f960 	bl	80082b4 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001ff4:	4d4b      	ldr	r5, [pc, #300]	@ (8002124 <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001ff6:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8001ff8:	6828      	ldr	r0, [r5, #0]
 8001ffa:	f006 ff13 	bl	8008e24 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001ffe:	484a      	ldr	r0, [pc, #296]	@ (8002128 <TSK_MediumFrequencyTaskM1+0x148>)
 8002000:	f007 fb52 	bl	80096a8 <STM_GetState>
  switch ( StateM1 )
 8002004:	1ec3      	subs	r3, r0, #3
 8002006:	2b0f      	cmp	r3, #15
 8002008:	d81b      	bhi.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
 800200a:	e8df f003 	tbb	[pc, r3]
 800200e:	392d      	.short	0x392d
 8002010:	6008513e 	.word	0x6008513e
 8002014:	1a1a1a69 	.word	0x1a1a1a69
 8002018:	6e1a1a1a 	.word	0x6e1a1a1a
 800201c:	1c7c      	.short	0x1c7c
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 800201e:	4b43      	ldr	r3, [pc, #268]	@ (800212c <TSK_MediumFrequencyTaskM1+0x14c>)
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	f006 fd11 	bl	8008a48 <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff fe6e 	bl	8001d08 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800202c:	6828      	ldr	r0, [r5, #0]
 800202e:	f006 fe0f 	bl	8008c50 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8002032:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002036:	f7ff ffc3 	bl	8001fc0 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800203a:	483b      	ldr	r0, [pc, #236]	@ (8002128 <TSK_MediumFrequencyTaskM1+0x148>)
 800203c:	2108      	movs	r1, #8
 800203e:	f007 fab9 	bl	80095b4 <STM_NextState>
}
 8002042:	b003      	add	sp, #12
 8002044:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 8002046:	4836      	ldr	r0, [pc, #216]	@ (8002120 <TSK_MediumFrequencyTaskM1+0x140>)
 8002048:	f006 f86e 	bl	8008128 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 800204c:	4836      	ldr	r0, [pc, #216]	@ (8002128 <TSK_MediumFrequencyTaskM1+0x148>)
 800204e:	2104      	movs	r1, #4
 8002050:	f007 fab0 	bl	80095b4 <STM_NextState>
 8002054:	2800      	cmp	r0, #0
 8002056:	d0f4      	beq.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
      FOC_Clear( M1 );
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff fe55 	bl	8001d08 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 800205e:	4b33      	ldr	r3, [pc, #204]	@ (800212c <TSK_MediumFrequencyTaskM1+0x14c>)
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	f006 fcb1 	bl	80089c8 <ICS_SwitchOnPWM>
 8002066:	e7ec      	b.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 8002068:	4b30      	ldr	r3, [pc, #192]	@ (800212c <TSK_MediumFrequencyTaskM1+0x14c>)
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	f006 fc86 	bl	800897c <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8002070:	2014      	movs	r0, #20
 8002072:	f7ff ff95 	bl	8001fa0 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8002076:	2110      	movs	r1, #16
 8002078:	482b      	ldr	r0, [pc, #172]	@ (8002128 <TSK_MediumFrequencyTaskM1+0x148>)
 800207a:	f007 fa9b 	bl	80095b4 <STM_NextState>
    break;
 800207e:	e7e0      	b.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8002080:	2105      	movs	r1, #5
 8002082:	4829      	ldr	r0, [pc, #164]	@ (8002128 <TSK_MediumFrequencyTaskM1+0x148>)
 8002084:	f007 fa96 	bl	80095b4 <STM_NextState>
    break;
 8002088:	e7db      	b.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
	  FOC_InitAdditionalMethods(M1);
 800208a:	2000      	movs	r0, #0
 800208c:	f7ff ff70 	bl	8001f70 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8002090:	2000      	movs	r0, #0
 8002092:	f7ff ff6f 	bl	8001f74 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8002096:	2106      	movs	r1, #6
 8002098:	4823      	ldr	r0, [pc, #140]	@ (8002128 <TSK_MediumFrequencyTaskM1+0x148>)
 800209a:	f007 fa8b 	bl	80095b4 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 800209e:	4b24      	ldr	r3, [pc, #144]	@ (8002130 <TSK_MediumFrequencyTaskM1+0x150>)
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	f007 fa57 	bl	8009554 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 80020a6:	4b23      	ldr	r3, [pc, #140]	@ (8002134 <TSK_MediumFrequencyTaskM1+0x154>)
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	f7ff fc3f 	bl	800192c <MCI_ExecBufferedCommands>
    break;
 80020ae:	e7c8      	b.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 80020b0:	4b20      	ldr	r3, [pc, #128]	@ (8002134 <TSK_MediumFrequencyTaskM1+0x154>)
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	f7ff fc3a 	bl	800192c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff ff5b 	bl	8001f74 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 80020be:	2c00      	cmp	r4, #0
 80020c0:	d1bf      	bne.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80020c2:	4622      	mov	r2, r4
 80020c4:	2120      	movs	r1, #32
 80020c6:	4818      	ldr	r0, [pc, #96]	@ (8002128 <TSK_MediumFrequencyTaskM1+0x148>)
 80020c8:	f007 fa52 	bl	8009570 <STM_FaultProcessing>
 80020cc:	e7b9      	b.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80020ce:	f7ff ff7d 	bl	8001fcc <TSK_StopPermanencyTimeHasElapsedM1>
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d0b5      	beq.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
      STM_NextState( &STM[M1], STOP_IDLE );
 80020d6:	2109      	movs	r1, #9
 80020d8:	4813      	ldr	r0, [pc, #76]	@ (8002128 <TSK_MediumFrequencyTaskM1+0x148>)
 80020da:	f007 fa6b 	bl	80095b4 <STM_NextState>
 80020de:	e7b0      	b.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
    STM_NextState( &STM[M1], IDLE );
 80020e0:	2100      	movs	r1, #0
 80020e2:	4811      	ldr	r0, [pc, #68]	@ (8002128 <TSK_MediumFrequencyTaskM1+0x148>)
 80020e4:	f007 fa66 	bl	80095b4 <STM_NextState>
}
 80020e8:	e7ab      	b.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80020ea:	f7ff ff5f 	bl	8001fac <TSK_ChargeBootCapDelayHasElapsedM1>
 80020ee:	2800      	cmp	r0, #0
 80020f0:	d0a7      	beq.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <TSK_MediumFrequencyTaskM1+0x14c>)
 80020f4:	2100      	movs	r1, #0
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	f007 f842 	bl	8009180 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80020fc:	2111      	movs	r1, #17
 80020fe:	480a      	ldr	r0, [pc, #40]	@ (8002128 <TSK_MediumFrequencyTaskM1+0x148>)
 8002100:	f007 fa58 	bl	80095b4 <STM_NextState>
 8002104:	e79d      	b.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <TSK_MediumFrequencyTaskM1+0x14c>)
 8002108:	2101      	movs	r1, #1
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	f007 f838 	bl	8009180 <PWMC_CurrentReadingCalibr>
 8002110:	2800      	cmp	r0, #0
 8002112:	d096      	beq.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
      STM_NextState( &STM[M1], CLEAR );
 8002114:	2112      	movs	r1, #18
 8002116:	4804      	ldr	r0, [pc, #16]	@ (8002128 <TSK_MediumFrequencyTaskM1+0x148>)
 8002118:	f007 fa4c 	bl	80095b4 <STM_NextState>
 800211c:	e791      	b.n	8002042 <TSK_MediumFrequencyTaskM1+0x62>
 800211e:	bf00      	nop
 8002120:	200002d4 	.word	0x200002d4
 8002124:	20001294 	.word	0x20001294
 8002128:	200012bc 	.word	0x200012bc
 800212c:	20001298 	.word	0x20001298
 8002130:	200012b8 	.word	0x200012b8
 8002134:	20001318 	.word	0x20001318

08002138 <MC_Scheduler>:
{
 8002138:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800213a:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <MC_Scheduler+0x48>)
 800213c:	781c      	ldrb	r4, [r3, #0]
 800213e:	2c01      	cmp	r4, #1
 8002140:	d000      	beq.n	8002144 <MC_Scheduler+0xc>
}
 8002142:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8002144:	4d0f      	ldr	r5, [pc, #60]	@ (8002184 <MC_Scheduler+0x4c>)
 8002146:	882b      	ldrh	r3, [r5, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	b1ab      	cbz	r3, 8002178 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 800214c:	882b      	ldrh	r3, [r5, #0]
 800214e:	3b01      	subs	r3, #1
 8002150:	b29b      	uxth	r3, r3
 8002152:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8002154:	4a0c      	ldr	r2, [pc, #48]	@ (8002188 <MC_Scheduler+0x50>)
 8002156:	8813      	ldrh	r3, [r2, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	b11b      	cbz	r3, 8002164 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 800215c:	8813      	ldrh	r3, [r2, #0]
 800215e:	3b01      	subs	r3, #1
 8002160:	b29b      	uxth	r3, r3
 8002162:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8002164:	4a09      	ldr	r2, [pc, #36]	@ (800218c <MC_Scheduler+0x54>)
 8002166:	8813      	ldrh	r3, [r2, #0]
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0e9      	beq.n	8002142 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800216e:	8813      	ldrh	r3, [r2, #0]
 8002170:	3b01      	subs	r3, #1
 8002172:	b29b      	uxth	r3, r3
 8002174:	8013      	strh	r3, [r2, #0]
}
 8002176:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8002178:	f7ff ff32 	bl	8001fe0 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800217c:	802c      	strh	r4, [r5, #0]
 800217e:	e7e9      	b.n	8002154 <MC_Scheduler+0x1c>
 8002180:	20001284 	.word	0x20001284
 8002184:	2000128a 	.word	0x2000128a
 8002188:	20001288 	.word	0x20001288
 800218c:	20001286 	.word	0x20001286

08002190 <MC_RunMotorControlTasks>:
{
 8002190:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8002192:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <MC_RunMotorControlTasks+0x18>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b903      	cbnz	r3, 800219a <MC_RunMotorControlTasks+0xa>
}
 8002198:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800219a:	f7ff ffcd 	bl	8002138 <MC_Scheduler>
}
 800219e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 80021a2:	f001 b9ed 	b.w	8003580 <UI_Scheduler>
 80021a6:	bf00      	nop
 80021a8:	20001284 	.word	0x20001284

080021ac <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80021ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 80021b0:	4830      	ldr	r0, [pc, #192]	@ (8002274 <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80021b2:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8002290 <TSK_HighFrequencyTask+0xe4>
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80021b6:	4c30      	ldr	r4, [pc, #192]	@ (8002278 <TSK_HighFrequencyTask+0xcc>)
{
 80021b8:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 80021ba:	f006 f85d 	bl	8008278 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80021be:	4b2f      	ldr	r3, [pc, #188]	@ (800227c <TSK_HighFrequencyTask+0xd0>)
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	f007 f901 	bl	80093c8 <STC_GetSpeedSensor>
 80021c6:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80021c8:	f007 f89c 	bl	8009304 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80021cc:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 80021ce:	4605      	mov	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80021d0:	f8d8 0000 	ldr.w	r0, [r8]
 80021d4:	f006 feb4 	bl	8008f40 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80021d8:	9803      	ldr	r0, [sp, #12]
 80021da:	f7ff fc87 	bl	8001aec <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80021de:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 80021e0:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80021e2:	f7ff fcf9 	bl	8001bd8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 80021e6:	4b26      	ldr	r3, [pc, #152]	@ (8002280 <TSK_HighFrequencyTask+0xd4>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80021e8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80021ec:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80021ee:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80021f0:	1a09      	subs	r1, r1, r0
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	f006 fdd6 	bl	8008da4 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80021f8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80021fc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 8002200:	1ac9      	subs	r1, r1, r3
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <TSK_HighFrequencyTask+0xd8>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002204:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	f006 fdcc 	bl	8008da4 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800220c:	4b1e      	ldr	r3, [pc, #120]	@ (8002288 <TSK_HighFrequencyTask+0xdc>)
 800220e:	f8ad 6008 	strh.w	r6, [sp, #8]
 8002212:	f8ad 000a 	strh.w	r0, [sp, #10]
 8002216:	9902      	ldr	r1, [sp, #8]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	f005 fea5 	bl	8007f68 <Circle_Limitation>
 800221e:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002220:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002222:	9602      	str	r6, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002224:	f007 f876 	bl	8009314 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002228:	4629      	mov	r1, r5
 800222a:	9802      	ldr	r0, [sp, #8]
 800222c:	f7ff fd16 	bl	8001c5c <MCM_Rev_Park>
 8002230:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002232:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002236:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002238:	f006 fe84 	bl	8008f44 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800223c:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800223e:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 8002240:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002242:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8002244:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002246:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8002248:	f8c4 6016 	str.w	r6, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 800224c:	2901      	cmp	r1, #1
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800224e:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002250:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002252:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8002256:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8002258:	d003      	beq.n	8002262 <TSK_HighFrequencyTask+0xb6>
}
 800225a:	2000      	movs	r0, #0
 800225c:	b006      	add	sp, #24
 800225e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	4809      	ldr	r0, [pc, #36]	@ (800228c <TSK_HighFrequencyTask+0xe0>)
 8002266:	f007 f983 	bl	8009570 <STM_FaultProcessing>
}
 800226a:	2000      	movs	r0, #0
 800226c:	b006      	add	sp, #24
 800226e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002272:	bf00      	nop
 8002274:	200002d4 	.word	0x200002d4
 8002278:	20001338 	.word	0x20001338
 800227c:	200012b8 	.word	0x200012b8
 8002280:	200012b0 	.word	0x200012b0
 8002284:	200012ac 	.word	0x200012ac
 8002288:	20001290 	.word	0x20001290
 800228c:	200012bc 	.word	0x200012bc
 8002290:	20001298 	.word	0x20001298

08002294 <TSK_SafetyTask_PWMOFF>:
  * @retval None
  */
uint16_t battery = 0;
uint16_t tempVoltage = 0;
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  battery = BATTERYCURRENT_CalcAvCurrentOrigin(pCurrentSensorM1);
 8002296:	4b27      	ldr	r3, [pc, #156]	@ (8002334 <TSK_SafetyTask_PWMOFF+0xa0>)
  tempVoltage = MOTORTEMP_CalcAvOutputVoltageOrigin(pMotorTemperatureSensorM1);
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002298:	4e27      	ldr	r6, [pc, #156]	@ (8002338 <TSK_SafetyTask_PWMOFF+0xa4>)
{
 800229a:	4604      	mov	r4, r0
  battery = BATTERYCURRENT_CalcAvCurrentOrigin(pCurrentSensorM1);
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	f7fe fe6d 	bl	8000f7c <BATTERYCURRENT_CalcAvCurrentOrigin>
  tempVoltage = MOTORTEMP_CalcAvOutputVoltageOrigin(pMotorTemperatureSensorM1);
 80022a2:	4926      	ldr	r1, [pc, #152]	@ (800233c <TSK_SafetyTask_PWMOFF+0xa8>)
  battery = BATTERYCURRENT_CalcAvCurrentOrigin(pCurrentSensorM1);
 80022a4:	4b26      	ldr	r3, [pc, #152]	@ (8002340 <TSK_SafetyTask_PWMOFF+0xac>)
 80022a6:	4602      	mov	r2, r0
  tempVoltage = MOTORTEMP_CalcAvOutputVoltageOrigin(pMotorTemperatureSensorM1);
 80022a8:	6808      	ldr	r0, [r1, #0]
  battery = BATTERYCURRENT_CalcAvCurrentOrigin(pCurrentSensorM1);
 80022aa:	801a      	strh	r2, [r3, #0]
  tempVoltage = MOTORTEMP_CalcAvOutputVoltageOrigin(pMotorTemperatureSensorM1);
 80022ac:	f7fe feb2 	bl	8001014 <MOTORTEMP_CalcAvOutputVoltageOrigin>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80022b0:	4924      	ldr	r1, [pc, #144]	@ (8002344 <TSK_SafetyTask_PWMOFF+0xb0>)
  tempVoltage = MOTORTEMP_CalcAvOutputVoltageOrigin(pMotorTemperatureSensorM1);
 80022b2:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <TSK_SafetyTask_PWMOFF+0xb4>)
 80022b4:	4602      	mov	r2, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80022b6:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
  tempVoltage = MOTORTEMP_CalcAvOutputVoltageOrigin(pMotorTemperatureSensorM1);
 80022ba:	801a      	strh	r2, [r3, #0]
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80022bc:	f006 fd20 	bl	8008d00 <NTC_CalcAvTemp>
 80022c0:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80022c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80022c6:	f006 ff7b 	bl	80091c0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80022ca:	f025 0508 	bic.w	r5, r5, #8
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80022ce:	4305      	orrs	r5, r0
 80022d0:	b2ad      	uxth	r5, r5
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80022d2:	b334      	cbz	r4, 8002322 <TSK_SafetyTask_PWMOFF+0x8e>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80022d4:	4f1d      	ldr	r7, [pc, #116]	@ (800234c <TSK_SafetyTask_PWMOFF+0xb8>)
 80022d6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80022da:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 80022de:	43ea      	mvns	r2, r5
 80022e0:	b292      	uxth	r2, r2
 80022e2:	4629      	mov	r1, r5
 80022e4:	4638      	mov	r0, r7
 80022e6:	f007 f943 	bl	8009570 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80022ea:	4638      	mov	r0, r7
 80022ec:	f007 f9dc 	bl	80096a8 <STM_GetState>
 80022f0:	280a      	cmp	r0, #10
 80022f2:	d002      	beq.n	80022fa <TSK_SafetyTask_PWMOFF+0x66>
 80022f4:	280b      	cmp	r0, #11
 80022f6:	d00e      	beq.n	8002316 <TSK_SafetyTask_PWMOFF+0x82>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80022f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80022fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80022fe:	f006 ff3d 	bl	800917c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff fd00 	bl	8001d08 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002308:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <TSK_SafetyTask_PWMOFF+0xbc>)
 800230a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800230e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002312:	f006 bc9d 	b.w	8008c50 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002316:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 800231a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800231e:	f006 bf2d 	b.w	800917c <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <TSK_SafetyTask_PWMOFF+0xc0>)
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	f006 ff85 	bl	8009234 <RVBS_CalcAvVbus>
 800232a:	f020 0008 	bic.w	r0, r0, #8
 800232e:	4305      	orrs	r5, r0
 8002330:	b2ad      	uxth	r5, r5
 8002332:	e7cf      	b.n	80022d4 <TSK_SafetyTask_PWMOFF+0x40>
 8002334:	200012a4 	.word	0x200012a4
 8002338:	20001298 	.word	0x20001298
 800233c:	200012a0 	.word	0x200012a0
 8002340:	20001282 	.word	0x20001282
 8002344:	2000129c 	.word	0x2000129c
 8002348:	20001280 	.word	0x20001280
 800234c:	200012bc 	.word	0x200012bc
 8002350:	20001294 	.word	0x20001294
 8002354:	200012a8 	.word	0x200012a8

08002358 <TSK_SafetyTask>:
{
 8002358:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <TSK_SafetyTask+0x1c>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d000      	beq.n	8002364 <TSK_SafetyTask+0xc>
}
 8002362:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff ff95 	bl	8002294 <TSK_SafetyTask_PWMOFF>
}
 800236a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800236e:	f000 bdc5 	b.w	8002efc <RCM_ExecUserConv>
 8002372:	bf00      	nop
 8002374:	20001284 	.word	0x20001284

08002378 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002378:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 800237a:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <TSK_HardwareFaultTask+0x18>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	f006 fb63 	bl	8008a48 <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8002386:	4803      	ldr	r0, [pc, #12]	@ (8002394 <TSK_HardwareFaultTask+0x1c>)
 8002388:	2200      	movs	r2, #0
 800238a:	2180      	movs	r1, #128	@ 0x80
 800238c:	f007 b8f0 	b.w	8009570 <STM_FaultProcessing>
 8002390:	20001298 	.word	0x20001298
 8002394:	200012bc 	.word	0x200012bc

08002398 <startMediumFrequencyTask>:

/* startMediumFrequencyTask function */
void startMediumFrequencyTask(void const * argument)
{
 8002398:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 800239a:	2001      	movs	r0, #1
 800239c:	f004 ffb8 	bl	8007310 <vTaskDelay>
    MC_RunMotorControlTasks();
 80023a0:	f7ff fef6 	bl	8002190 <MC_RunMotorControlTasks>
  for(;;)
 80023a4:	e7f9      	b.n	800239a <startMediumFrequencyTask+0x2>
 80023a6:	bf00      	nop

080023a8 <StartSafetyTask>:
  /* USER CODE END MF task 1 */
}

/* startSafetyTask function */
void StartSafetyTask(void const * argument)
{
 80023a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f004 ffb0 	bl	8007310 <vTaskDelay>
    TSK_SafetyTask();
 80023b0:	f7ff ffd2 	bl	8002358 <TSK_SafetyTask>
  for(;;)
 80023b4:	e7f9      	b.n	80023aa <StartSafetyTask+0x2>
 80023b6:	bf00      	nop

080023b8 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80023b8:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023ba:	4a43      	ldr	r2, [pc, #268]	@ (80024c8 <mc_lock_pins+0x110>)
 80023bc:	4b43      	ldr	r3, [pc, #268]	@ (80024cc <mc_lock_pins+0x114>)
 80023be:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023c0:	2110      	movs	r1, #16
 80023c2:	b08e      	sub	sp, #56	@ 0x38
 80023c4:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023c6:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023c8:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023ca:	4b41      	ldr	r3, [pc, #260]	@ (80024d0 <mc_lock_pins+0x118>)
  temp = READ_REG(GPIOx->LCKR);
 80023cc:	910d      	str	r1, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023ce:	2002      	movs	r0, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023d0:	4940      	ldr	r1, [pc, #256]	@ (80024d4 <mc_lock_pins+0x11c>)
  (void) temp;
 80023d2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023d4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023d6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023d8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023da:	69d9      	ldr	r1, [r3, #28]
 80023dc:	910c      	str	r1, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023de:	483e      	ldr	r0, [pc, #248]	@ (80024d8 <mc_lock_pins+0x120>)
  (void) temp;
 80023e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023e2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023e4:	2504      	movs	r5, #4
 80023e6:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023e8:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023ea:	69d9      	ldr	r1, [r3, #28]
 80023ec:	910b      	str	r1, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023ee:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023f2:	2601      	movs	r6, #1
  (void) temp;
 80023f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023f6:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023f8:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023fa:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023fc:	69d9      	ldr	r1, [r3, #28]
 80023fe:	910a      	str	r1, [sp, #40]	@ 0x28
  (void) temp;
 8002400:	990a      	ldr	r1, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002402:	4936      	ldr	r1, [pc, #216]	@ (80024dc <mc_lock_pins+0x124>)
 8002404:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002406:	f44f 7780 	mov.w	r7, #256	@ 0x100
 800240a:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800240c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800240e:	69d9      	ldr	r1, [r3, #28]
 8002410:	9109      	str	r1, [sp, #36]	@ 0x24
  (void) temp;
 8002412:	9909      	ldr	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002414:	f44f 7700 	mov.w	r7, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002418:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
 800241c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800241e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002420:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002422:	69df      	ldr	r7, [r3, #28]
 8002424:	9708      	str	r7, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002426:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800242a:	f501 3181 	add.w	r1, r1, #66048	@ 0x10200
  (void) temp;
 800242e:	9f08      	ldr	r7, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002430:	f44f 4c80 	mov.w	ip, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002434:	f44f 37a0 	mov.w	r7, #81920	@ 0x14000
 8002438:	61cf      	str	r7, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800243a:	f8c1 c01c 	str.w	ip, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800243e:	61cf      	str	r7, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002440:	69cf      	ldr	r7, [r1, #28]
 8002442:	9707      	str	r7, [sp, #28]
  (void) temp;
 8002444:	9f07      	ldr	r7, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002446:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800244a:	f44f 3782 	mov.w	r7, #66560	@ 0x10400
 800244e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002450:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002454:	61df      	str	r7, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002456:	69df      	ldr	r7, [r3, #28]
 8002458:	9706      	str	r7, [sp, #24]
  (void) temp;
 800245a:	9f06      	ldr	r7, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800245c:	f44f 4c00 	mov.w	ip, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002460:	f44f 37c0 	mov.w	r7, #98304	@ 0x18000
 8002464:	61cf      	str	r7, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002466:	f8c1 c01c 	str.w	ip, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800246a:	61cf      	str	r7, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 800246c:	69cf      	ldr	r7, [r1, #28]
 800246e:	9705      	str	r7, [sp, #20]
  (void) temp;
 8002470:	9f05      	ldr	r7, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002472:	f44f 5c00 	mov.w	ip, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002476:	f44f 3790 	mov.w	r7, #73728	@ 0x12000
 800247a:	61cf      	str	r7, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800247c:	f8c1 c01c 	str.w	ip, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002480:	61cf      	str	r7, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002482:	69c9      	ldr	r1, [r1, #28]
 8002484:	9104      	str	r1, [sp, #16]
  (void) temp;
 8002486:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002488:	4915      	ldr	r1, [pc, #84]	@ (80024e0 <mc_lock_pins+0x128>)
 800248a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800248c:	2708      	movs	r7, #8
 800248e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002490:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002492:	69d9      	ldr	r1, [r3, #28]
 8002494:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002496:	2780      	movs	r7, #128	@ 0x80
  (void) temp;
 8002498:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800249a:	4912      	ldr	r1, [pc, #72]	@ (80024e4 <mc_lock_pins+0x12c>)
 800249c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800249e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024a0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	9302      	str	r3, [sp, #8]
  (void) temp;
 80024a6:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024a8:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024aa:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024ac:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024ae:	69d3      	ldr	r3, [r2, #28]
 80024b0:	9301      	str	r3, [sp, #4]
  (void) temp;
 80024b2:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024b4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024b6:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024b8:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024ba:	69d3      	ldr	r3, [r2, #28]
 80024bc:	9300      	str	r3, [sp, #0]
  (void) temp;
 80024be:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
//Lock Pin For Battery Current Sensing ADC
LL_GPIO_LockPin(BATTERY_CURRENT_GPIO_Port,BATTERY_CURRENT_Pin);
//Lock Pin For Motor Temperature Sensing
LL_GPIO_LockPin(MOTOR_TEMP_GPIO_Port,MOTOR_TEMP_Pin);
}
 80024c0:	b00e      	add	sp, #56	@ 0x38
 80024c2:	bcf0      	pop	{r4, r5, r6, r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40020800 	.word	0x40020800
 80024cc:	00010010 	.word	0x00010010
 80024d0:	40020000 	.word	0x40020000
 80024d4:	00010002 	.word	0x00010002
 80024d8:	00010004 	.word	0x00010004
 80024dc:	00010100 	.word	0x00010100
 80024e0:	00010008 	.word	0x00010008
 80024e4:	00010080 	.word	0x00010080

080024e8 <MCP_ReceivedFrame>:
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
uint8_t uart = 0;
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80024e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ea:	460c      	mov	r4, r1
 80024ec:	b08d      	sub	sp, #52	@ 0x34
 80024ee:	4615      	mov	r5, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 80024f0:	2100      	movs	r1, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 80024f2:	0962      	lsrs	r2, r4, #5
{
 80024f4:	4607      	mov	r7, r0
 80024f6:	461e      	mov	r6, r3
  bool bNoError = false; // Default is error
 80024f8:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 80024fc:	d11f      	bne.n	800253e <MCP_ReceivedFrame+0x56>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 80024fe:	2c1b      	cmp	r4, #27
 8002500:	d824      	bhi.n	800254c <MCP_ReceivedFrame+0x64>
 8002502:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002506:	0060      	.short	0x0060
 8002508:	00b80063 	.word	0x00b80063
 800250c:	00230151 	.word	0x00230151
 8002510:	015b0023 	.word	0x015b0023
 8002514:	003a0184 	.word	0x003a0184
 8002518:	0217018c 	.word	0x0217018c
 800251c:	01f701e0 	.word	0x01f701e0
 8002520:	002301a0 	.word	0x002301a0
 8002524:	00230023 	.word	0x00230023
 8002528:	00600023 	.word	0x00600023
 800252c:	01be01a9 	.word	0x01be01a9
 8002530:	00230023 	.word	0x00230023
 8002534:	00230023 	.word	0x00230023
 8002538:	00230023 	.word	0x00230023
 800253c:	01cd      	.short	0x01cd
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 800253e:	3a01      	subs	r2, #1
 8002540:	f001 f85e 	bl	8003600 <UI_SetReg>
 8002544:	b198      	cbz	r0, 800256e <MCP_ReceivedFrame+0x86>
      Code &= 0x1F; /* Mask: 0001|1111 */
 8002546:	f004 041f 	and.w	r4, r4, #31
 800254a:	e7d8      	b.n	80024fe <MCP_ReceivedFrame+0x16>
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 800254c:	2301      	movs	r3, #1
    break;
  }

  if (RequireAck)
  {
    if (bNoError)
 800254e:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8002552:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8002556:	2800      	cmp	r0, #0
 8002558:	f040 81f6 	bne.w	8002948 <MCP_ReceivedFrame+0x460>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 800255c:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002560:	2301      	movs	r3, #1
 8002562:	f10d 020e 	add.w	r2, sp, #14
 8002566:	21ff      	movs	r1, #255	@ 0xff
 8002568:	47a0      	blx	r4
    }
  }
}
 800256a:	b00d      	add	sp, #52	@ 0x34
 800256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 800256e:	230b      	movs	r3, #11
    if (bNoError)
 8002570:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002574:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8002578:	e7ed      	b.n	8002556 <MCP_ReceivedFrame+0x6e>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 800257a:	f10d 000e 	add.w	r0, sp, #14
 800257e:	7829      	ldrb	r1, [r5, #0]
 8002580:	9000      	str	r0, [sp, #0]
 8002582:	ab03      	add	r3, sp, #12
 8002584:	f10d 020a 	add.w	r2, sp, #10
 8002588:	4638      	mov	r0, r7
 800258a:	f001 fb4f 	bl	8003c2c <UI_GetRevupData>
      outBuff[4] = (uint8_t)(FinalTorque);
 800258e:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8002592:	f8bd 100a 	ldrh.w	r1, [sp, #10]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8002596:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800259a:	69fc      	ldr	r4, [r7, #28]
      outBuff[0] = (uint8_t)(rpm);
 800259c:	2200      	movs	r2, #0
 800259e:	f360 0207 	bfi	r2, r0, #0, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80025a2:	1200      	asrs	r0, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 80025a4:	f360 220f 	bfi	r2, r0, #8, #8
 80025a8:	f361 4217 	bfi	r2, r1, #16, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80025ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80025b0:	0a09      	lsrs	r1, r1, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80025b2:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 80025b4:	f361 621f 	bfi	r2, r1, #24, #8
 80025b8:	e9cd 3204 	strd	r3, r2, [sp, #16]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80025bc:	2308      	movs	r3, #8
 80025be:	69b8      	ldr	r0, [r7, #24]
 80025c0:	aa04      	add	r2, sp, #16
 80025c2:	21f0      	movs	r1, #240	@ 0xf0
 80025c4:	47a0      	blx	r4
    if (bNoError)
 80025c6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80025ca:	e7c4      	b.n	8002556 <MCP_ReceivedFrame+0x6e>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80025cc:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80025ce:	2305      	movs	r3, #5
 80025d0:	2948      	cmp	r1, #72	@ 0x48
 80025d2:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80025d6:	f200 81fd 	bhi.w	80029d4 <MCP_ReceivedFrame+0x4ec>
 80025da:	2948      	cmp	r1, #72	@ 0x48
 80025dc:	f200 821c 	bhi.w	8002a18 <MCP_ReceivedFrame+0x530>
 80025e0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80025e4:	021a0309 	.word	0x021a0309
 80025e8:	0302021a 	.word	0x0302021a
 80025ec:	024d021a 	.word	0x024d021a
 80025f0:	024d024d 	.word	0x024d024d
 80025f4:	024d024d 	.word	0x024d024d
 80025f8:	024d024d 	.word	0x024d024d
 80025fc:	024d024d 	.word	0x024d024d
 8002600:	024d024d 	.word	0x024d024d
 8002604:	022a022a 	.word	0x022a022a
 8002608:	021a021a 	.word	0x021a021a
 800260c:	024d024d 	.word	0x024d024d
 8002610:	024d024d 	.word	0x024d024d
 8002614:	021a024d 	.word	0x021a024d
 8002618:	021a021a 	.word	0x021a021a
 800261c:	01a401a4 	.word	0x01a401a4
 8002620:	021a021a 	.word	0x021a021a
 8002624:	021a021a 	.word	0x021a021a
 8002628:	021a021a 	.word	0x021a021a
 800262c:	021a021a 	.word	0x021a021a
 8002630:	021a021a 	.word	0x021a021a
 8002634:	021a021a 	.word	0x021a021a
 8002638:	021a021a 	.word	0x021a021a
 800263c:	021a021a 	.word	0x021a021a
 8002640:	021a021a 	.word	0x021a021a
 8002644:	021a021a 	.word	0x021a021a
 8002648:	021a021a 	.word	0x021a021a
 800264c:	021a021a 	.word	0x021a021a
 8002650:	021a021a 	.word	0x021a021a
 8002654:	021a021a 	.word	0x021a021a
 8002658:	021a021a 	.word	0x021a021a
 800265c:	021a021a 	.word	0x021a021a
 8002660:	021a021a 	.word	0x021a021a
 8002664:	024d021a 	.word	0x024d021a
 8002668:	021a021a 	.word	0x021a021a
 800266c:	021a021a 	.word	0x021a021a
 8002670:	022a022a 	.word	0x022a022a
 8002674:	022a      	.short	0x022a
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002676:	f995 3000 	ldrsb.w	r3, [r5]
 800267a:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800267c:	2203      	movs	r2, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	f88d 200e 	strb.w	r2, [sp, #14]
 8002684:	f2c0 8187 	blt.w	8002996 <MCP_ReceivedFrame+0x4ae>
 8002688:	2963      	cmp	r1, #99	@ 0x63
 800268a:	f200 81dd 	bhi.w	8002a48 <MCP_ReceivedFrame+0x560>
 800268e:	2941      	cmp	r1, #65	@ 0x41
 8002690:	f200 8162 	bhi.w	8002958 <MCP_ReceivedFrame+0x470>
 8002694:	2941      	cmp	r1, #65	@ 0x41
 8002696:	d896      	bhi.n	80025c6 <MCP_ReceivedFrame+0xde>
 8002698:	a301      	add	r3, pc, #4	@ (adr r3, 80026a0 <MCP_ReceivedFrame+0x1b8>)
 800269a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800269e:	bf00      	nop
 80026a0:	08002aa1 	.word	0x08002aa1
 80026a4:	08002a5b 	.word	0x08002a5b
 80026a8:	08002aa1 	.word	0x08002aa1
 80026ac:	08002aa1 	.word	0x08002aa1
 80026b0:	08002a5b 	.word	0x08002a5b
 80026b4:	08002973 	.word	0x08002973
 80026b8:	08002973 	.word	0x08002973
 80026bc:	08002973 	.word	0x08002973
 80026c0:	08002973 	.word	0x08002973
 80026c4:	08002973 	.word	0x08002973
 80026c8:	08002973 	.word	0x08002973
 80026cc:	08002973 	.word	0x08002973
 80026d0:	08002973 	.word	0x08002973
 80026d4:	08002973 	.word	0x08002973
 80026d8:	08002973 	.word	0x08002973
 80026dc:	08002973 	.word	0x08002973
 80026e0:	08002973 	.word	0x08002973
 80026e4:	08002973 	.word	0x08002973
 80026e8:	08002973 	.word	0x08002973
 80026ec:	08002973 	.word	0x08002973
 80026f0:	08002973 	.word	0x08002973
 80026f4:	08002973 	.word	0x08002973
 80026f8:	08002973 	.word	0x08002973
 80026fc:	08002973 	.word	0x08002973
 8002700:	08002973 	.word	0x08002973
 8002704:	08002973 	.word	0x08002973
 8002708:	08002973 	.word	0x08002973
 800270c:	08002973 	.word	0x08002973
 8002710:	080025c7 	.word	0x080025c7
 8002714:	080025c7 	.word	0x080025c7
 8002718:	08002a5b 	.word	0x08002a5b
 800271c:	08002973 	.word	0x08002973
 8002720:	08002973 	.word	0x08002973
 8002724:	08002973 	.word	0x08002973
 8002728:	08002aa1 	.word	0x08002aa1
 800272c:	080025c7 	.word	0x080025c7
 8002730:	080025c7 	.word	0x080025c7
 8002734:	080025c7 	.word	0x080025c7
 8002738:	080025c7 	.word	0x080025c7
 800273c:	080025c7 	.word	0x080025c7
 8002740:	080025c7 	.word	0x080025c7
 8002744:	080025c7 	.word	0x080025c7
 8002748:	080025c7 	.word	0x080025c7
 800274c:	080025c7 	.word	0x080025c7
 8002750:	080025c7 	.word	0x080025c7
 8002754:	080025c7 	.word	0x080025c7
 8002758:	080025c7 	.word	0x080025c7
 800275c:	080025c7 	.word	0x080025c7
 8002760:	080025c7 	.word	0x080025c7
 8002764:	080025c7 	.word	0x080025c7
 8002768:	080025c7 	.word	0x080025c7
 800276c:	080025c7 	.word	0x080025c7
 8002770:	080025c7 	.word	0x080025c7
 8002774:	080025c7 	.word	0x080025c7
 8002778:	080025c7 	.word	0x080025c7
 800277c:	080025c7 	.word	0x080025c7
 8002780:	080025c7 	.word	0x080025c7
 8002784:	080025c7 	.word	0x080025c7
 8002788:	080025c7 	.word	0x080025c7
 800278c:	080025c7 	.word	0x080025c7
 8002790:	080025c7 	.word	0x080025c7
 8002794:	080025c7 	.word	0x080025c7
 8002798:	080025c7 	.word	0x080025c7
 800279c:	080025c7 	.word	0x080025c7
 80027a0:	080025c7 	.word	0x080025c7
 80027a4:	08002973 	.word	0x08002973
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80027a8:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80027aa:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80027ac:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80027b0:	4638      	mov	r0, r7
 80027b2:	f001 f9e9 	bl	8003b88 <UI_ExecCmd>
 80027b6:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80027ba:	e6cc      	b.n	8002556 <MCP_ReceivedFrame+0x6e>
        outBuff[i] = 0;
 80027bc:	ac04      	add	r4, sp, #16
 80027be:	2100      	movs	r1, #0
 80027c0:	2220      	movs	r2, #32
 80027c2:	4620      	mov	r0, r4
 80027c4:	f007 fad4 	bl	8009d70 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80027c8:	f8d7 60a8 	ldr.w	r6, [r7, #168]	@ 0xa8
 80027cc:	f10d 0112 	add.w	r1, sp, #18
 80027d0:	1e73      	subs	r3, r6, #1
 80027d2:	f106 051c 	add.w	r5, r6, #28
 80027d6:	e004      	b.n	80027e2 <MCP_ReceivedFrame+0x2fa>
 80027d8:	429d      	cmp	r5, r3
        outBuff[3+i] = pHandle->s_fwVer[i];
 80027da:	f801 2f01 	strb.w	r2, [r1, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80027de:	f000 8212 	beq.w	8002c06 <MCP_ReceivedFrame+0x71e>
        outBuff[3+i] = pHandle->s_fwVer[i];
 80027e2:	4618      	mov	r0, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80027e4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80027e8:	2a09      	cmp	r2, #9
 80027ea:	d1f5      	bne.n	80027d8 <MCP_ReceivedFrame+0x2f0>
 80027ec:	f1c6 0301 	rsb	r3, r6, #1
 80027f0:	4403      	add	r3, r0
      outBuff[0] = pHandle->s_fwVer[i+5];
 80027f2:	1d5a      	adds	r2, r3, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 80027f4:	1dd9      	adds	r1, r3, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 80027f6:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 80027f8:	5cb2      	ldrb	r2, [r6, r2]
 80027fa:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80027fe:	5c72      	ldrb	r2, [r6, r1]
 8002800:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002804:	5cf3      	ldrb	r3, [r6, r3]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002806:	69fd      	ldr	r5, [r7, #28]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002808:	f88d 3012 	strb.w	r3, [sp, #18]
 800280c:	e089      	b.n	8002922 <MCP_ReceivedFrame+0x43a>
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800280e:	88aa      	ldrh	r2, [r5, #4]
 8002810:	6829      	ldr	r1, [r5, #0]
 8002812:	4638      	mov	r0, r7
 8002814:	f001 f9ee 	bl	8003bf4 <UI_ExecSpeedRamp>
 8002818:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800281c:	e69b      	b.n	8002556 <MCP_ReceivedFrame+0x6e>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800281e:	f8d5 2001 	ldr.w	r2, [r5, #1]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002822:	4bb3      	ldr	r3, [pc, #716]	@ (8002af0 <MCP_ReceivedFrame+0x608>)
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002824:	f9b5 1005 	ldrsh.w	r1, [r5, #5]
 8002828:	9100      	str	r1, [sp, #0]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 800282a:	fb83 0302 	smull	r0, r3, r3, r2
 800282e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002832:	7829      	ldrb	r1, [r5, #0]
 8002834:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 8002838:	b21b      	sxth	r3, r3
 800283a:	4638      	mov	r0, r7
 800283c:	f001 fa14 	bl	8003c68 <UI_SetRevupData>
 8002840:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002844:	e687      	b.n	8002556 <MCP_ReceivedFrame+0x6e>
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8002846:	6829      	ldr	r1, [r5, #0]
 8002848:	88aa      	ldrh	r2, [r5, #4]
 800284a:	b209      	sxth	r1, r1
 800284c:	4638      	mov	r0, r7
 800284e:	f001 f9e3 	bl	8003c18 <UI_ExecTorqueRamp>
 8002852:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002856:	e67e      	b.n	8002556 <MCP_ReceivedFrame+0x6e>
  	   bNoError = true;
 8002858:	2401      	movs	r4, #1
  	   uint8_t changeDone = 0x13;
 800285a:	2313      	movs	r3, #19
  	   changeSpeedMode(speed_mode_IQmax,allowable_rpm,ramp);
 800285c:	892a      	ldrh	r2, [r5, #8]
 800285e:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8002862:	f9b5 0000 	ldrsh.w	r0, [r5]
  	   bNoError = true;
 8002866:	f88d 4009 	strb.w	r4, [sp, #9]
  	   uint8_t changeDone = 0x13;
 800286a:	f88d 3010 	strb.w	r3, [sp, #16]
  	   changeSpeedMode(speed_mode_IQmax,allowable_rpm,ramp);
 800286e:	f7fe faab 	bl	8000dc8 <changeSpeedMode>
  	   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&IQReceived,1);
 8002872:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8002876:	4623      	mov	r3, r4
 8002878:	aa04      	add	r2, sp, #16
 800287a:	21f0      	movs	r1, #240	@ 0xf0
 800287c:	47a8      	blx	r5
}
 800287e:	b00d      	add	sp, #52	@ 0x34
 8002880:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	   uint16_t throttlePercentage = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002882:	882e      	ldrh	r6, [r5, #0]
  	   setIQ(IQ_value);
 8002884:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
  	   uint8_t IQReceived = 0x14;
 8002888:	2314      	movs	r3, #20
  	   bNoError = true;
 800288a:	2401      	movs	r4, #1
 800288c:	f88d 4009 	strb.w	r4, [sp, #9]
  	   uint8_t IQReceived = 0x14;
 8002890:	f88d 3010 	strb.w	r3, [sp, #16]
  	   setIQ(IQ_value);
 8002894:	f7fe fa6c 	bl	8000d70 <setIQ>
  	   set_ThrottlePercent(throttlePercentage);
 8002898:	4630      	mov	r0, r6
 800289a:	f7fe fa6f 	bl	8000d7c <set_ThrottlePercent>
 800289e:	e7e8      	b.n	8002872 <MCP_ReceivedFrame+0x38a>
    	switch(behaviorID)
 80028a0:	782b      	ldrb	r3, [r5, #0]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	f200 81b3 	bhi.w	8002c0e <MCP_ReceivedFrame+0x726>
 80028a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80028ac:	01410150 	.word	0x01410150
 80028b0:	0191019b 	.word	0x0191019b
 80028b4:	01840187 	.word	0x01840187
 80028b8:	0174017a 	.word	0x0174017a
 80028bc:	015b016a 	.word	0x015b016a
 80028c0:	0132013e 	.word	0x0132013e
 80028c4:	0114      	.short	0x0114
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80028c6:	4c8b      	ldr	r4, [pc, #556]	@ (8002af4 <MCP_ReceivedFrame+0x60c>)
      stepList.data = buffer;
 80028c8:	9504      	str	r5, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80028ca:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80028cc:	4621      	mov	r1, r4
 80028ce:	a804      	add	r0, sp, #16
      stepList.len = Size;
 80028d0:	f88d 6014 	strb.w	r6, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80028d4:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80028d8:	f001 f9ee 	bl	8003cb8 <UI_GetMPInfo>
 80028dc:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 80028e0:	2800      	cmp	r0, #0
 80028e2:	f43f ae3b 	beq.w	800255c <MCP_ReceivedFrame+0x74>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 80028e6:	69fd      	ldr	r5, [r7, #28]
 80028e8:	7923      	ldrb	r3, [r4, #4]
 80028ea:	6822      	ldr	r2, [r4, #0]
 80028ec:	69b8      	ldr	r0, [r7, #24]
 80028ee:	21f0      	movs	r1, #240	@ 0xf0
 80028f0:	47a8      	blx	r5
  if (RequireAck)
 80028f2:	e63a      	b.n	800256a <MCP_ReceivedFrame+0x82>
 80028f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028f8:	ac04      	add	r4, sp, #16
 80028fa:	3b01      	subs	r3, #1
 80028fc:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80028fe:	2000      	movs	r0, #0
 8002900:	e004      	b.n	800290c <MCP_ReceivedFrame+0x424>
 8002902:	3001      	adds	r0, #1
 8002904:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8002906:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800290a:	d009      	beq.n	8002920 <MCP_ReceivedFrame+0x438>
 800290c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002910:	2900      	cmp	r1, #0
 8002912:	d1f6      	bne.n	8002902 <MCP_ReceivedFrame+0x41a>
        outBuff[i] = 0;
 8002914:	f1c0 0220 	rsb	r2, r0, #32
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	4420      	add	r0, r4
 800291c:	f007 fa28 	bl	8009d70 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002920:	69fd      	ldr	r5, [r7, #28]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002922:	69b8      	ldr	r0, [r7, #24]
 8002924:	2320      	movs	r3, #32
 8002926:	4622      	mov	r2, r4
 8002928:	21f0      	movs	r1, #240	@ 0xf0
 800292a:	47a8      	blx	r5
      bNoError = true;
 800292c:	2301      	movs	r3, #1
 800292e:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8002932:	e009      	b.n	8002948 <MCP_ReceivedFrame+0x460>
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8002934:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8002938:	f9b5 1000 	ldrsh.w	r1, [r5]
 800293c:	4638      	mov	r0, r7
 800293e:	f001 f9ad 	bl	8003c9c <UI_SetCurrentReferences>
      bNoError = true;
 8002942:	2301      	movs	r3, #1
 8002944:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8002948:	2300      	movs	r3, #0
 800294a:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 800294e:	461a      	mov	r2, r3
 8002950:	21f0      	movs	r1, #240	@ 0xf0
 8002952:	47a0      	blx	r4
}
 8002954:	b00d      	add	sp, #52	@ 0x34
 8002956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002958:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b1b      	cmp	r3, #27
 8002960:	f63f ae31 	bhi.w	80025c6 <MCP_ReceivedFrame+0xde>
 8002964:	4864      	ldr	r0, [pc, #400]	@ (8002af8 <MCP_ReceivedFrame+0x610>)
 8002966:	2201      	movs	r2, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	4203      	tst	r3, r0
 800296e:	f000 80a9 	beq.w	8002ac4 <MCP_ReceivedFrame+0x5dc>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002972:	f10d 0209 	add.w	r2, sp, #9
 8002976:	4638      	mov	r0, r7
 8002978:	f000 fef2 	bl	8003760 <UI_GetReg>
          if ( bNoError == true )
 800297c:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002980:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8002982:	2b00      	cmp	r3, #0
 8002984:	f43f adea 	beq.w	800255c <MCP_ReceivedFrame+0x74>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8002988:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 800298c:	2302      	movs	r3, #2
 800298e:	aa04      	add	r2, sp, #16
 8002990:	21f0      	movs	r1, #240	@ 0xf0
 8002992:	47a0      	blx	r4
  if (RequireAck)
 8002994:	e5e9      	b.n	800256a <MCP_ReceivedFrame+0x82>
 8002996:	f081 0380 	eor.w	r3, r1, #128	@ 0x80
 800299a:	2b08      	cmp	r3, #8
 800299c:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 80029a0:	f63f ae11 	bhi.w	80025c6 <MCP_ReceivedFrame+0xde>
 80029a4:	2a08      	cmp	r2, #8
 80029a6:	f63f ae0e 	bhi.w	80025c6 <MCP_ReceivedFrame+0xde>
 80029aa:	a301      	add	r3, pc, #4	@ (adr r3, 80029b0 <MCP_ReceivedFrame+0x4c8>)
 80029ac:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80029b0:	08002aa1 	.word	0x08002aa1
 80029b4:	080025c7 	.word	0x080025c7
 80029b8:	08002aa1 	.word	0x08002aa1
 80029bc:	08002a5b 	.word	0x08002a5b
 80029c0:	08002a5b 	.word	0x08002a5b
 80029c4:	08002a5b 	.word	0x08002a5b
 80029c8:	08002973 	.word	0x08002973
 80029cc:	08002973 	.word	0x08002973
 80029d0:	08002973 	.word	0x08002973
 80029d4:	2965      	cmp	r1, #101	@ 0x65
 80029d6:	d91d      	bls.n	8002a14 <MCP_ReceivedFrame+0x52c>
 80029d8:	f1a1 0374 	sub.w	r3, r1, #116	@ 0x74
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	2a14      	cmp	r2, #20
 80029e0:	d81a      	bhi.n	8002a18 <MCP_ReceivedFrame+0x530>
 80029e2:	2b14      	cmp	r3, #20
 80029e4:	d818      	bhi.n	8002a18 <MCP_ReceivedFrame+0x530>
 80029e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80029ea:	00ff      	.short	0x00ff
 80029ec:	00270027 	.word	0x00270027
 80029f0:	00270027 	.word	0x00270027
 80029f4:	00170027 	.word	0x00170027
 80029f8:	00170017 	.word	0x00170017
 80029fc:	00270027 	.word	0x00270027
 8002a00:	00170017 	.word	0x00170017
 8002a04:	00170017 	.word	0x00170017
 8002a08:	00170017 	.word	0x00170017
 8002a0c:	004a0017 	.word	0x004a0017
 8002a10:	004a004a 	.word	0x004a004a
 8002a14:	294e      	cmp	r1, #78	@ 0x4e
 8002a16:	d805      	bhi.n	8002a24 <MCP_ReceivedFrame+0x53c>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002a18:	2302      	movs	r3, #2
    if (bNoError)
 8002a1a:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002a1e:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8002a22:	e598      	b.n	8002556 <MCP_ReceivedFrame+0x6e>
 8002a24:	f1a1 024f 	sub.w	r2, r1, #79	@ 0x4f
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	4093      	lsls	r3, r2
 8002a2e:	4a33      	ldr	r2, [pc, #204]	@ (8002afc <MCP_ReceivedFrame+0x614>)
 8002a30:	4213      	tst	r3, r2
 8002a32:	d124      	bne.n	8002a7e <MCP_ReceivedFrame+0x596>
 8002a34:	295b      	cmp	r1, #91	@ 0x5b
 8002a36:	d1ef      	bne.n	8002a18 <MCP_ReceivedFrame+0x530>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002a38:	f8d5 2001 	ldr.w	r2, [r5, #1]
 8002a3c:	4638      	mov	r0, r7
 8002a3e:	f000 fddf 	bl	8003600 <UI_SetReg>
 8002a42:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002a46:	e586      	b.n	8002556 <MCP_ReceivedFrame+0x6e>
 8002a48:	f1a1 0364 	sub.w	r3, r1, #100	@ 0x64
 8002a4c:	482c      	ldr	r0, [pc, #176]	@ (8002b00 <MCP_ReceivedFrame+0x618>)
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2201      	movs	r2, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	4018      	ands	r0, r3
 8002a58:	b1c8      	cbz	r0, 8002a8e <MCP_ReceivedFrame+0x5a6>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002a5a:	f10d 0209 	add.w	r2, sp, #9
 8002a5e:	4638      	mov	r0, r7
 8002a60:	f000 fe7e 	bl	8003760 <UI_GetReg>
          if ( bNoError == true )
 8002a64:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002a68:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f43f ad76 	beq.w	800255c <MCP_ReceivedFrame+0x74>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002a70:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002a74:	2304      	movs	r3, #4
 8002a76:	aa04      	add	r2, sp, #16
 8002a78:	21f0      	movs	r1, #240	@ 0xf0
 8002a7a:	47a0      	blx	r4
  if (RequireAck)
 8002a7c:	e575      	b.n	800256a <MCP_ReceivedFrame+0x82>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002a7e:	f8b5 2001 	ldrh.w	r2, [r5, #1]
 8002a82:	4638      	mov	r0, r7
 8002a84:	f000 fdbc 	bl	8003600 <UI_SetReg>
 8002a88:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002a8c:	e563      	b.n	8002556 <MCP_ReceivedFrame+0x6e>
 8002a8e:	f64c 4203 	movw	r2, #52227	@ 0xcc03
 8002a92:	4213      	tst	r3, r2
 8002a94:	f47f af6d 	bne.w	8002972 <MCP_ReceivedFrame+0x48a>
 8002a98:	4a1a      	ldr	r2, [pc, #104]	@ (8002b04 <MCP_ReceivedFrame+0x61c>)
 8002a9a:	4213      	tst	r3, r2
 8002a9c:	f43f ad93 	beq.w	80025c6 <MCP_ReceivedFrame+0xde>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002aa0:	f10d 0209 	add.w	r2, sp, #9
 8002aa4:	4638      	mov	r0, r7
 8002aa6:	f000 fe5b 	bl	8003760 <UI_GetReg>
           if ( bNoError == true )
 8002aaa:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002aae:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f43f ad53 	beq.w	800255c <MCP_ReceivedFrame+0x74>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002ab6:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002aba:	2301      	movs	r3, #1
 8002abc:	aa04      	add	r2, sp, #16
 8002abe:	21f0      	movs	r1, #240	@ 0xf0
 8002ac0:	47a0      	blx	r4
  if (RequireAck)
 8002ac2:	e552      	b.n	800256a <MCP_ReceivedFrame+0x82>
 8002ac4:	4a10      	ldr	r2, [pc, #64]	@ (8002b08 <MCP_ReceivedFrame+0x620>)
 8002ac6:	4213      	tst	r3, r2
 8002ac8:	d1c7      	bne.n	8002a5a <MCP_ReceivedFrame+0x572>
 8002aca:	4a10      	ldr	r2, [pc, #64]	@ (8002b0c <MCP_ReceivedFrame+0x624>)
 8002acc:	401a      	ands	r2, r3
 8002ace:	2a00      	cmp	r2, #0
 8002ad0:	d1e6      	bne.n	8002aa0 <MCP_ReceivedFrame+0x5b8>
 8002ad2:	e578      	b.n	80025c6 <MCP_ReceivedFrame+0xde>
    		   bNoError = true;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f88d 3009 	strb.w	r3, [sp, #9]
    		   int32_t current = getDC();
 8002ada:	f7fe f9db 	bl	8000e94 <getDC>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	9304      	str	r3, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,(uint8_t*)(&current),4); //32-bit variable for current
 8002ae2:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	aa04      	add	r2, sp, #16
 8002aea:	21f0      	movs	r1, #240	@ 0xf0
 8002aec:	47a0      	blx	r4
  if (RequireAck)
 8002aee:	e53c      	b.n	800256a <MCP_ReceivedFrame+0x82>
 8002af0:	2aaaaaab 	.word	0x2aaaaaab
 8002af4:	20001360 	.word	0x20001360
 8002af8:	0f8ffe78 	.word	0x0f8ffe78
 8002afc:	006407f1 	.word	0x006407f1
 8002b00:	0ffe11f0 	.word	0x0ffe11f0
 8002b04:	0001020c 	.word	0x0001020c
 8002b08:	00200107 	.word	0x00200107
 8002b0c:	00100080 	.word	0x00100080
    		   bNoError = true;
 8002b10:	2301      	movs	r3, #1
    		   uint8_t motor_temp = 0x0C;
 8002b12:	220c      	movs	r2, #12
    		   uint8_t toggle = 0x06;
 8002b14:	f88d 2010 	strb.w	r2, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&toggle,1);
 8002b18:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002b1c:	aa04      	add	r2, sp, #16
    		   bNoError = true;
 8002b1e:	f88d 3009 	strb.w	r3, [sp, #9]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&toggle,1);
 8002b22:	21f0      	movs	r1, #240	@ 0xf0
 8002b24:	47a0      	blx	r4
  if (RequireAck)
 8002b26:	e520      	b.n	800256a <MCP_ReceivedFrame+0x82>
    		   bNoError = true;
 8002b28:	2301      	movs	r3, #1
    		   uint8_t motor_driver_temp = 0x0B;
 8002b2a:	220b      	movs	r2, #11
 8002b2c:	e7f2      	b.n	8002b14 <MCP_ReceivedFrame+0x62c>
    		   bNoError = true;
 8002b2e:	2401      	movs	r4, #1
 8002b30:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t errorReport = GET_MOTOR_ERROR_REPORT();
 8002b34:	f7fe fc2c 	bl	8001390 <GET_MOTOR_ERROR_REPORT>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f88d 3010 	strb.w	r3, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR, &errorReport, 1);
 8002b3e:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8002b42:	4623      	mov	r3, r4
 8002b44:	aa04      	add	r2, sp, #16
 8002b46:	21f0      	movs	r1, #240	@ 0xf0
 8002b48:	47a8      	blx	r5
  if (RequireAck)
 8002b4a:	e50e      	b.n	800256a <MCP_ReceivedFrame+0x82>
    		   bNoError = true;
 8002b4c:	2301      	movs	r3, #1
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&bootDone,1);
 8002b4e:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
    		   uint8_t bootDone = 0x01;
 8002b52:	f88d 3010 	strb.w	r3, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&bootDone,1);
 8002b56:	aa04      	add	r2, sp, #16
    		   bNoError = true;
 8002b58:	f88d 3009 	strb.w	r3, [sp, #9]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&bootDone,1);
 8002b5c:	21f0      	movs	r1, #240	@ 0xf0
 8002b5e:	47a0      	blx	r4
  if (RequireAck)
 8002b60:	e503      	b.n	800256a <MCP_ReceivedFrame+0x82>
    		   uart++;
 8002b62:	4b2e      	ldr	r3, [pc, #184]	@ (8002c1c <MCP_ReceivedFrame+0x734>)
 8002b64:	7819      	ldrb	r1, [r3, #0]
    		   bNoError = true;
 8002b66:	2401      	movs	r4, #1
    		   uart++;
 8002b68:	4421      	add	r1, r4
    		   uint8_t timeout = 0x0A;
 8002b6a:	220a      	movs	r2, #10
    		   uart++;
 8002b6c:	b2c9      	uxtb	r1, r1
    		   updateConnectionStatus(true,uart);
 8002b6e:	4620      	mov	r0, r4
    		   bNoError = true;
 8002b70:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t timeout = 0x0A;
 8002b74:	f88d 2010 	strb.w	r2, [sp, #16]
    		   uart++;
 8002b78:	7019      	strb	r1, [r3, #0]
    		   updateConnectionStatus(true,uart);
 8002b7a:	f7fe fabb 	bl	80010f4 <updateConnectionStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&timeout,1);
 8002b7e:	e678      	b.n	8002872 <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 8002b80:	2401      	movs	r4, #1
    		   uint8_t lightOn = 0x09;
 8002b82:	2309      	movs	r3, #9
    		   set_tail_light_status(0x01);
 8002b84:	4620      	mov	r0, r4
    		   bNoError = true;
 8002b86:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t lightOn = 0x09;
 8002b8a:	f88d 3010 	strb.w	r3, [sp, #16]
    		   set_tail_light_status(0x01);
 8002b8e:	f7fe f99b 	bl	8000ec8 <set_tail_light_status>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&lightOn,1);
 8002b92:	e66e      	b.n	8002872 <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f88d 3009 	strb.w	r3, [sp, #9]
    		   changePowerMode();
 8002b9a:	f7fe f8d5 	bl	8000d48 <changePowerMode>
  if (RequireAck)
 8002b9e:	e4e4      	b.n	800256a <MCP_ReceivedFrame+0x82>
    		   bNoError = true;
 8002ba0:	2401      	movs	r4, #1
    		   uint8_t lightOff = 0x07;
 8002ba2:	2307      	movs	r3, #7
    		   set_tail_light_status(0x00);
 8002ba4:	2000      	movs	r0, #0
    		   bNoError = true;
 8002ba6:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t lightOff = 0x07;
 8002baa:	f88d 3010 	strb.w	r3, [sp, #16]
    		   set_tail_light_status(0x00);
 8002bae:	f7fe f98b 	bl	8000ec8 <set_tail_light_status>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&lightOff,1);
 8002bb2:	e65e      	b.n	8002872 <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 8002bb4:	2301      	movs	r3, #1
    		   uint8_t toggle = 0x06;
 8002bb6:	2206      	movs	r2, #6
 8002bb8:	e7ac      	b.n	8002b14 <MCP_ReceivedFrame+0x62c>
    		   bNoError = true;
 8002bba:	2401      	movs	r4, #1
    		   uint8_t releaseBrake = 0x05;
 8002bbc:	2305      	movs	r3, #5
    		   updateBrakeStatus(false);
 8002bbe:	2000      	movs	r0, #0
    		   bNoError = true;
 8002bc0:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t releaseBrake = 0x05;
 8002bc4:	f88d 3010 	strb.w	r3, [sp, #16]
    		   updateBrakeStatus(false);
 8002bc8:	f7fe f8f2 	bl	8000db0 <updateBrakeStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&releaseBrake,1);
 8002bcc:	e651      	b.n	8002872 <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 8002bce:	2401      	movs	r4, #1
    		   uint8_t pressBrake = 0x04;
 8002bd0:	2304      	movs	r3, #4
    		   updateBrakeStatus(true);
 8002bd2:	4620      	mov	r0, r4
    		   bNoError = true;
 8002bd4:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t pressBrake = 0x04;
 8002bd8:	f88d 3010 	strb.w	r3, [sp, #16]
    		   updateBrakeStatus(true);
 8002bdc:	f7fe f8e8 	bl	8000db0 <updateBrakeStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&pressBrake,1);
 8002be0:	e647      	b.n	8002872 <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 8002be2:	2301      	movs	r3, #1
    		   uint8_t twistedThorttle = 0x03;
 8002be4:	2203      	movs	r2, #3
 8002be6:	e795      	b.n	8002b14 <MCP_ReceivedFrame+0x62c>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8002be8:	786a      	ldrb	r2, [r5, #1]
 8002bea:	4638      	mov	r0, r7
 8002bec:	f000 fd08 	bl	8003600 <UI_SetReg>
 8002bf0:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002bf4:	e4af      	b.n	8002556 <MCP_ReceivedFrame+0x6e>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002bf6:	786a      	ldrb	r2, [r5, #1]
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	f000 fd00 	bl	8003600 <UI_SetReg>
 8002c00:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002c04:	e4a7      	b.n	8002556 <MCP_ReceivedFrame+0x6e>
 8002c06:	2326      	movs	r3, #38	@ 0x26
 8002c08:	2124      	movs	r1, #36	@ 0x24
 8002c0a:	2222      	movs	r2, #34	@ 0x22
 8002c0c:	e5f4      	b.n	80027f8 <MCP_ReceivedFrame+0x310>
    		   uint8_t invalidCMD = 0xFF;
 8002c0e:	23ff      	movs	r3, #255	@ 0xff
 8002c10:	f88d 3010 	strb.w	r3, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&invalidCMD,1);
 8002c14:	69fc      	ldr	r4, [r7, #28]
 8002c16:	2301      	movs	r3, #1
 8002c18:	e4d1      	b.n	80025be <MCP_ReceivedFrame+0xd6>
 8002c1a:	bf00      	nop
 8002c1c:	2000135e 	.word	0x2000135e

08002c20 <MCP_WaitNextFrame>:
{
 8002c20:	b510      	push	{r4, lr}
 8002c22:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002c24:	6980      	ldr	r0, [r0, #24]
 8002c26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002c28:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8002c2a:	2280      	movs	r2, #128	@ 0x80
 8002c2c:	f884 20ac 	strb.w	r2, [r4, #172]	@ 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8002c30:	6a23      	ldr	r3, [r4, #32]
 8002c32:	69a0      	ldr	r0, [r4, #24]
}
 8002c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8002c38:	4718      	bx	r3
 8002c3a:	bf00      	nop

08002c3c <MCP_Init>:
{
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	4604      	mov	r4, r0
 8002c42:	461d      	mov	r5, r3
 8002c44:	9b07      	ldr	r3, [sp, #28]
  pHandle->s_fwVer = s_fwVer;
 8002c46:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
  FCP_SetClient( pFCP, pHandle,
 8002c4a:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <MCP_Init+0x34>)
  pHandle->pFCP = pFCP;
 8002c4c:	61a1      	str	r1, [r4, #24]
{
 8002c4e:	4608      	mov	r0, r1
 8002c50:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	4a07      	ldr	r2, [pc, #28]	@ (8002c74 <MCP_Init+0x38>)
 8002c56:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <MCP_Init+0x3c>)
 8002c58:	4621      	mov	r1, r4
 8002c5a:	f005 f9c1 	bl	8007fe0 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8002c5e:	9b06      	ldr	r3, [sp, #24]
 8002c60:	6263      	str	r3, [r4, #36]	@ 0x24
  pHandle->fFcpReceive = fFcpReceive;
 8002c62:	e9c4 6507 	strd	r6, r5, [r4, #28]
  MCP_WaitNextFrame(pHandle);
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7ff ffda 	bl	8002c20 <MCP_WaitNextFrame>
}
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	08002c7d 	.word	0x08002c7d
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	080024e9 	.word	0x080024e9

08002c7c <MCP_OnTimeOut>:
{
 8002c7c:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8002c7e:	f7ff ffcf 	bl	8002c20 <MCP_WaitNextFrame>
}
 8002c82:	bd08      	pop	{r3, pc}

08002c84 <MCP_SentFrame>:
{
 8002c84:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8002c86:	f7ff ffcb 	bl	8002c20 <MCP_WaitNextFrame>
}
 8002c8a:	bd08      	pop	{r3, pc}

08002c8c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002c8c:	b530      	push	{r4, r5, lr}
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8002c8e:	4d09      	ldr	r5, [pc, #36]	@ (8002cb4 <MX_MotorControl_Init+0x28>)
 8002c90:	4c09      	ldr	r4, [pc, #36]	@ (8002cb8 <MX_MotorControl_Init+0x2c>)
{
 8002c92:	b083      	sub	sp, #12
  MCboot(pMCI,pMCT);
 8002c94:	4629      	mov	r1, r5
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff f870 	bl	8001d7c <MCboot>
  mc_lock_pins();
 8002c9c:	f7ff fb8c 	bl	80023b8 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8002ca0:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <MX_MotorControl_Init+0x30>)
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4806      	ldr	r0, [pc, #24]	@ (8002cc0 <MX_MotorControl_Init+0x34>)
 8002ca6:	462b      	mov	r3, r5
 8002ca8:	4622      	mov	r2, r4
 8002caa:	2101      	movs	r1, #1
 8002cac:	f000 fc26 	bl	80034fc <UI_TaskInit>
}
 8002cb0:	b003      	add	sp, #12
 8002cb2:	bd30      	pop	{r4, r5, pc}
 8002cb4:	20001368 	.word	0x20001368
 8002cb8:	2000136c 	.word	0x2000136c
 8002cbc:	0800a1fc 	.word	0x0800a1fc
 8002cc0:	200005dc 	.word	0x200005dc

08002cc4 <vPortSetupTimerInterrupt>:

void vPortSetupTimerInterrupt( void )
{
 8002cc4:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002cc6:	f001 fdbb 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8002cca:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <vPortSetupTimerInterrupt+0x18>)
 8002ccc:	fba3 3000 	umull	r3, r0, r3, r0
 8002cd0:	09c0      	lsrs	r0, r0, #7
}
 8002cd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002cd6:	f001 badd 	b.w	8004294 <HAL_SYSTICK_Config>
 8002cda:	bf00      	nop
 8002cdc:	10624dd3 	.word	0x10624dd3

08002ce0 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ce0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e8c <RCM_RegisterRegConv+0x1ac>)
{
 8002ce2:	b570      	push	{r4, r5, r6, lr}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ce4:	681c      	ldr	r4, [r3, #0]
{
 8002ce6:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ce8:	2c00      	cmp	r4, #0
 8002cea:	d077      	beq.n	8002ddc <RCM_RegisterRegConv+0xfc>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002cec:	7922      	ldrb	r2, [r4, #4]
 8002cee:	f890 c004 	ldrb.w	ip, [r0, #4]
 8002cf2:	4562      	cmp	r2, ip
 8002cf4:	d01d      	beq.n	8002d32 <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	2a00      	cmp	r2, #0
 8002cfa:	f000 808a 	beq.w	8002e12 <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002cfe:	7914      	ldrb	r4, [r2, #4]
 8002d00:	4564      	cmp	r4, ip
  uint8_t handle=255;
 8002d02:	f04f 00ff 	mov.w	r0, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002d06:	d072      	beq.n	8002dee <RCM_RegisterRegConv+0x10e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002d08:	689c      	ldr	r4, [r3, #8]
 8002d0a:	2c00      	cmp	r4, #0
 8002d0c:	f000 8085 	beq.w	8002e1a <RCM_RegisterRegConv+0x13a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002d10:	7922      	ldrb	r2, [r4, #4]
 8002d12:	4562      	cmp	r2, ip
 8002d14:	d077      	beq.n	8002e06 <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002d16:	68dc      	ldr	r4, [r3, #12]
 8002d18:	2c00      	cmp	r4, #0
 8002d1a:	f000 808d 	beq.w	8002e38 <RCM_RegisterRegConv+0x158>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002d1e:	7922      	ldrb	r2, [r4, #4]
 8002d20:	4562      	cmp	r2, ip
 8002d22:	f000 8095 	beq.w	8002e50 <RCM_RegisterRegConv+0x170>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8002d26:	2803      	cmp	r0, #3
 8002d28:	bf98      	it	ls
 8002d2a:	680a      	ldrls	r2, [r1, #0]
 8002d2c:	d906      	bls.n	8002d3c <RCM_RegisterRegConv+0x5c>
 8002d2e:	20ff      	movs	r0, #255	@ 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8002d30:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002d32:	6802      	ldr	r2, [r0, #0]
 8002d34:	6820      	ldr	r0, [r4, #0]
 8002d36:	4282      	cmp	r2, r0
 8002d38:	d1dd      	bne.n	8002cf6 <RCM_RegisterRegConv+0x16>
  uint8_t i=0;
 8002d3a:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 8002d3c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002d40:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002d42:	4c53      	ldr	r4, [pc, #332]	@ (8002e90 <RCM_RegisterRegConv+0x1b0>)
 8002d44:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002d46:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002d48:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002d4c:	d411      	bmi.n	8002d72 <RCM_RegisterRegConv+0x92>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002d4e:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002d50:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002d54:	f023 0320 	bic.w	r3, r3, #32
 8002d58:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002d5a:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002d5c:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002d5e:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d66:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002d68:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002d6a:	6893      	ldr	r3, [r2, #8]
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002d72:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002d74:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002d78:	62d3      	str	r3, [r2, #44]	@ 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002d7a:	790b      	ldrb	r3, [r1, #4]
 8002d7c:	2b09      	cmp	r3, #9
 8002d7e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8002d82:	d83a      	bhi.n	8002dfa <RCM_RegisterRegConv+0x11a>
 8002d84:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002d88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d8c:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
 8002d94:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002d98:	fab4 f484 	clz	r4, r4
 8002d9c:	fa2e fe04 	lsr.w	lr, lr, r4
 8002da0:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8002da2:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8002da6:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8002daa:	f04f 7cf8 	mov.w	ip, #32505856	@ 0x1f00000
 8002dae:	fa9c f5ac 	rbit	r5, ip
 8002db2:	fab5 f585 	clz	r5, r5
 8002db6:	fa9c fcac 	rbit	ip, ip
 8002dba:	688e      	ldr	r6, [r1, #8]
 8002dbc:	fabc fc8c 	clz	ip, ip
 8002dc0:	fa23 f105 	lsr.w	r1, r3, r5
 8002dc4:	fa23 f30c 	lsr.w	r3, r3, ip
 8002dc8:	fa06 f503 	lsl.w	r5, r6, r3
 8002dcc:	2307      	movs	r3, #7
 8002dce:	408b      	lsls	r3, r1
 8002dd0:	ea24 0303 	bic.w	r3, r4, r3
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8002dda:	bd70      	pop	{r4, r5, r6, pc}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	2a00      	cmp	r2, #0
 8002de0:	d03c      	beq.n	8002e5c <RCM_RegisterRegConv+0x17c>
 8002de2:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8002de6:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002de8:	7914      	ldrb	r4, [r2, #4]
 8002dea:	4564      	cmp	r4, ip
 8002dec:	d18c      	bne.n	8002d08 <RCM_RegisterRegConv+0x28>
 8002dee:	6814      	ldr	r4, [r2, #0]
 8002df0:	680a      	ldr	r2, [r1, #0]
 8002df2:	4294      	cmp	r4, r2
 8002df4:	d188      	bne.n	8002d08 <RCM_RegisterRegConv+0x28>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002df6:	2001      	movs	r0, #1
 8002df8:	e7a0      	b.n	8002d3c <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002dfa:	3c1e      	subs	r4, #30
 8002dfc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002e00:	f003 7e00 	and.w	lr, r3, #33554432	@ 0x2000000
 8002e04:	e7c4      	b.n	8002d90 <RCM_RegisterRegConv+0xb0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002e06:	6824      	ldr	r4, [r4, #0]
 8002e08:	680a      	ldr	r2, [r1, #0]
 8002e0a:	4294      	cmp	r4, r2
 8002e0c:	d183      	bne.n	8002d16 <RCM_RegisterRegConv+0x36>
      i++;
 8002e0e:	2002      	movs	r0, #2
 8002e10:	e794      	b.n	8002d3c <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002e12:	689c      	ldr	r4, [r3, #8]
 8002e14:	b1b4      	cbz	r4, 8002e44 <RCM_RegisterRegConv+0x164>
 8002e16:	2001      	movs	r0, #1
 8002e18:	e77a      	b.n	8002d10 <RCM_RegisterRegConv+0x30>
 8002e1a:	2804      	cmp	r0, #4
 8002e1c:	d924      	bls.n	8002e68 <RCM_RegisterRegConv+0x188>
 8002e1e:	68d8      	ldr	r0, [r3, #12]
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d02f      	beq.n	8002e84 <RCM_RegisterRegConv+0x1a4>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002e24:	7902      	ldrb	r2, [r0, #4]
 8002e26:	4562      	cmp	r2, ip
 8002e28:	680a      	ldr	r2, [r1, #0]
 8002e2a:	d1f0      	bne.n	8002e0e <RCM_RegisterRegConv+0x12e>
 8002e2c:	6800      	ldr	r0, [r0, #0]
      i++;
 8002e2e:	4282      	cmp	r2, r0
 8002e30:	bf0c      	ite	eq
 8002e32:	2003      	moveq	r0, #3
 8002e34:	2002      	movne	r0, #2
 8002e36:	e781      	b.n	8002d3c <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002e38:	2804      	cmp	r0, #4
 8002e3a:	680a      	ldr	r2, [r1, #0]
 8002e3c:	f67f af7e 	bls.w	8002d3c <RCM_RegisterRegConv+0x5c>
 8002e40:	2003      	movs	r0, #3
 8002e42:	e77b      	b.n	8002d3c <RCM_RegisterRegConv+0x5c>
 8002e44:	68dc      	ldr	r4, [r3, #12]
 8002e46:	b1dc      	cbz	r4, 8002e80 <RCM_RegisterRegConv+0x1a0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002e48:	7922      	ldrb	r2, [r4, #4]
 8002e4a:	4562      	cmp	r2, ip
 8002e4c:	d118      	bne.n	8002e80 <RCM_RegisterRegConv+0x1a0>
 8002e4e:	2001      	movs	r0, #1
 8002e50:	6824      	ldr	r4, [r4, #0]
 8002e52:	680a      	ldr	r2, [r1, #0]
 8002e54:	4294      	cmp	r4, r2
 8002e56:	f47f af66 	bne.w	8002d26 <RCM_RegisterRegConv+0x46>
 8002e5a:	e7f1      	b.n	8002e40 <RCM_RegisterRegConv+0x160>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002e5c:	689c      	ldr	r4, [r3, #8]
 8002e5e:	b11c      	cbz	r4, 8002e68 <RCM_RegisterRegConv+0x188>
 8002e60:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8002e64:	4610      	mov	r0, r2
 8002e66:	e753      	b.n	8002d10 <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002e68:	68dc      	ldr	r4, [r3, #12]
 8002e6a:	b914      	cbnz	r4, 8002e72 <RCM_RegisterRegConv+0x192>
 8002e6c:	680a      	ldr	r2, [r1, #0]
 8002e6e:	4620      	mov	r0, r4
 8002e70:	e764      	b.n	8002d3c <RCM_RegisterRegConv+0x5c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002e72:	7920      	ldrb	r0, [r4, #4]
 8002e74:	790a      	ldrb	r2, [r1, #4]
 8002e76:	4290      	cmp	r0, r2
 8002e78:	d006      	beq.n	8002e88 <RCM_RegisterRegConv+0x1a8>
 8002e7a:	680a      	ldr	r2, [r1, #0]
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	e75d      	b.n	8002d3c <RCM_RegisterRegConv+0x5c>
 8002e80:	680a      	ldr	r2, [r1, #0]
 8002e82:	e7b8      	b.n	8002df6 <RCM_RegisterRegConv+0x116>
 8002e84:	680a      	ldr	r2, [r1, #0]
 8002e86:	e7c2      	b.n	8002e0e <RCM_RegisterRegConv+0x12e>
 8002e88:	2000      	movs	r0, #0
 8002e8a:	e7e1      	b.n	8002e50 <RCM_RegisterRegConv+0x170>
 8002e8c:	20001398 	.word	0x20001398
 8002e90:	20001378 	.word	0x20001378

08002e94 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002e94:	4b18      	ldr	r3, [pc, #96]	@ (8002ef8 <RCM_ExecRegularConv+0x64>)
 8002e96:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002e9a:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002e9c:	6812      	ldr	r2, [r2, #0]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002e9e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002ea2:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002ea4:	bf93      	iteet	ls
 8002ea6:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 8002eaa:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002eac:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
 8002eb0:	f043 7300 	orrls.w	r3, r3, #33554432	@ 0x2000000
 8002eb4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002eb8:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002ebc:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8002ec0:	fab1 f181 	clz	r1, r1
 8002ec4:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8002ec8:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 8002ed4:	f021 011f 	bic.w	r1, r1, #31
 8002ed8:	4319      	orrs	r1, r3

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8002eda:	0153      	lsls	r3, r2, #5
 8002edc:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
 8002ee0:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8002ee4:	2101      	movs	r1, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002ee6:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8002ee8:	f8c3 1178 	str.w	r1, [r3, #376]	@ 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8002eec:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8002eee:	079b      	lsls	r3, r3, #30
 8002ef0:	d5fc      	bpl.n	8002eec <RCM_ExecRegularConv+0x58>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8002ef2:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8002ef4:	b280      	uxth	r0, r0
 8002ef6:	4770      	bx	lr
 8002ef8:	20001398 	.word	0x20001398

08002efc <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002efc:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8002efe:	4c0e      	ldr	r4, [pc, #56]	@ (8002f38 <RCM_ExecUserConv+0x3c>)
 8002f00:	7823      	ldrb	r3, [r4, #0]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d000      	beq.n	8002f08 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002f08:	4d0c      	ldr	r5, [pc, #48]	@ (8002f3c <RCM_ExecUserConv+0x40>)
 8002f0a:	7828      	ldrb	r0, [r5, #0]
 8002f0c:	f7ff ffc2 	bl	8002e94 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <RCM_ExecUserConv+0x44>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002f12:	4a0c      	ldr	r2, [pc, #48]	@ (8002f44 <RCM_ExecUserConv+0x48>)
 8002f14:	4601      	mov	r1, r0
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002f16:	7828      	ldrb	r0, [r5, #0]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002f18:	8011      	strh	r1, [r2, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002f1a:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002f1e:	2202      	movs	r2, #2
 8002f20:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002f22:	2d00      	cmp	r5, #0
 8002f24:	d0ef      	beq.n	8002f06 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002f26:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002f2a:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002f30:	462b      	mov	r3, r5
}
 8002f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002f36:	4718      	bx	r3
 8002f38:	20001370 	.word	0x20001370
 8002f3c:	20001374 	.word	0x20001374
 8002f40:	20001378 	.word	0x20001378
 8002f44:	20001372 	.word	0x20001372

08002f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f48:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f84 <HAL_MspInit+0x3c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	9200      	str	r2, [sp, #0]
 8002f50:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002f52:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002f56:	6459      	str	r1, [r3, #68]	@ 0x44
 8002f58:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8002f5a:	f400 4080 	and.w	r0, r0, #16384	@ 0x4000
 8002f5e:	9000      	str	r0, [sp, #0]
 8002f60:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	9201      	str	r2, [sp, #4]
 8002f64:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002f66:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8002f6a:	6418      	str	r0, [r3, #64]	@ 0x40
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f76:	210f      	movs	r1, #15
 8002f78:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f7c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f7e:	f001 b91b 	b.w	80041b8 <HAL_NVIC_SetPriority>
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800

08002f88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f88:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002f8a:	6803      	ldr	r3, [r0, #0]
 8002f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8003080 <HAL_ADC_MspInit+0xf8>)
{
 8002f8e:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8002f92:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f94:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002f98:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002f9c:	940a      	str	r4, [sp, #40]	@ 0x28
  if(hadc->Instance==ADC1)
 8002f9e:	d004      	beq.n	8002faa <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002fa0:	4a38      	ldr	r2, [pc, #224]	@ (8003084 <HAL_ADC_MspInit+0xfc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d046      	beq.n	8003034 <HAL_ADC_MspInit+0xac>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002fa6:	b00c      	add	sp, #48	@ 0x30
 8002fa8:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002faa:	4b37      	ldr	r3, [pc, #220]	@ (8003088 <HAL_ADC_MspInit+0x100>)
 8002fac:	9400      	str	r4, [sp, #0]
 8002fae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb0:	4836      	ldr	r0, [pc, #216]	@ (800308c <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fb6:	645a      	str	r2, [r3, #68]	@ 0x44
 8002fb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fba:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8002fbe:	9200      	str	r2, [sp, #0]
 8002fc0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc2:	9401      	str	r4, [sp, #4]
 8002fc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fc6:	f042 0204 	orr.w	r2, r2, #4
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fce:	f002 0204 	and.w	r2, r2, #4
 8002fd2:	9201      	str	r2, [sp, #4]
 8002fd4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd6:	9402      	str	r4, [sp, #8]
 8002fd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fe2:	f002 0201 	and.w	r2, r2, #1
 8002fe6:	9202      	str	r2, [sp, #8]
 8002fe8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fea:	9403      	str	r4, [sp, #12]
 8002fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fee:	f042 0202 	orr.w	r2, r2, #2
 8002ff2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ffc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = BATTERY_CURRENT_Pin|MOTOR_TEMP_Pin;
 8002ffe:	2205      	movs	r2, #5
 8003000:	2303      	movs	r3, #3
 8003002:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003006:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003008:	f001 f95e 	bl	80042c8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 800300e:	2288      	movs	r2, #136	@ 0x88
 8003010:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003012:	481f      	ldr	r0, [pc, #124]	@ (8003090 <HAL_ADC_MspInit+0x108>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 8003016:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301a:	f001 f955 	bl	80042c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMPERATURE_Pin;
 800301e:	2201      	movs	r2, #1
 8003020:	2303      	movs	r3, #3
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8003022:	481c      	ldr	r0, [pc, #112]	@ (8003094 <HAL_ADC_MspInit+0x10c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8003026:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = TEMPERATURE_Pin;
 8003028:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 800302c:	f001 f94c 	bl	80042c8 <HAL_GPIO_Init>
}
 8003030:	b00c      	add	sp, #48	@ 0x30
 8003032:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003034:	4b14      	ldr	r3, [pc, #80]	@ (8003088 <HAL_ADC_MspInit+0x100>)
 8003036:	9404      	str	r4, [sp, #16]
 8003038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800303a:	4814      	ldr	r0, [pc, #80]	@ (800308c <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800303c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44
 8003042:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003044:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003048:	9204      	str	r2, [sp, #16]
 800304a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800304c:	9405      	str	r4, [sp, #20]
 800304e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003050:	f042 0204 	orr.w	r2, r2, #4
 8003054:	631a      	str	r2, [r3, #48]	@ 0x30
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8003058:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8003078 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8003062:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8003064:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003068:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800306a:	f001 f92d 	bl	80042c8 <HAL_GPIO_Init>
}
 800306e:	b00c      	add	sp, #48	@ 0x30
 8003070:	bd10      	pop	{r4, pc}
 8003072:	bf00      	nop
 8003074:	f3af 8000 	nop.w
 8003078:	00000010 	.word	0x00000010
 800307c:	00000003 	.word	0x00000003
 8003080:	40012000 	.word	0x40012000
 8003084:	40012100 	.word	0x40012100
 8003088:	40023800 	.word	0x40023800
 800308c:	40020800 	.word	0x40020800
 8003090:	40020000 	.word	0x40020000
 8003094:	40020400 	.word	0x40020400

08003098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003098:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800309a:	6802      	ldr	r2, [r0, #0]
 800309c:	4922      	ldr	r1, [pc, #136]	@ (8003128 <HAL_TIM_Base_MspInit+0x90>)
{
 800309e:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 80030a2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80030a8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80030ac:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 80030ae:	d004      	beq.n	80030ba <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80030b0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80030b4:	d00e      	beq.n	80030d4 <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030b6:	b00a      	add	sp, #40	@ 0x28
 80030b8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030ba:	4a1c      	ldr	r2, [pc, #112]	@ (800312c <HAL_TIM_Base_MspInit+0x94>)
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030c6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	9b01      	ldr	r3, [sp, #4]
}
 80030d0:	b00a      	add	sp, #40	@ 0x28
 80030d2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030d4:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 80030d8:	9302      	str	r3, [sp, #8]
 80030da:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 80030dc:	f040 0001 	orr.w	r0, r0, #1
 80030e0:	6410      	str	r0, [r2, #64]	@ 0x40
 80030e2:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 80030e4:	f000 0001 	and.w	r0, r0, #1
 80030e8:	9002      	str	r0, [sp, #8]
 80030ea:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	9303      	str	r3, [sp, #12]
 80030ee:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f0:	480f      	ldr	r0, [pc, #60]	@ (8003130 <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 80030fa:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8003120 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003104:	2202      	movs	r2, #2
 8003106:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003108:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 800310a:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800310e:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003114:	f001 f8d8 	bl	80042c8 <HAL_GPIO_Init>
}
 8003118:	b00a      	add	sp, #40	@ 0x28
 800311a:	bd10      	pop	{r4, pc}
 800311c:	f3af 8000 	nop.w
 8003120:	00000007 	.word	0x00000007
 8003124:	00000002 	.word	0x00000002
 8003128:	40010000 	.word	0x40010000
 800312c:	40023800 	.word	0x40023800
 8003130:	40020000 	.word	0x40020000

08003134 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003134:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003136:	4a1f      	ldr	r2, [pc, #124]	@ (80031b4 <HAL_TIM_MspPostInit+0x80>)
 8003138:	6801      	ldr	r1, [r0, #0]
{
 800313a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800313e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003144:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003148:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800314a:	d001      	beq.n	8003150 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800314c:	b008      	add	sp, #32
 800314e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003150:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003158:	4817      	ldr	r0, [pc, #92]	@ (80031b8 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315a:	f041 0102 	orr.w	r1, r1, #2
 800315e:	6311      	str	r1, [r2, #48]	@ 0x30
 8003160:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003162:	f001 0102 	and.w	r1, r1, #2
 8003166:	9100      	str	r1, [sp, #0]
 8003168:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800316e:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003170:	4323      	orrs	r3, r4
 8003172:	6313      	str	r3, [r2, #48]	@ 0x30
 8003174:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003176:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003178:	4023      	ands	r3, r4
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003180:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8003184:	2302      	movs	r3, #2
 8003186:	2602      	movs	r6, #2
 8003188:	2702      	movs	r7, #2
 800318a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800318e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003192:	f001 f899 	bl	80042c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003196:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800319a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319c:	4807      	ldr	r0, [pc, #28]	@ (80031bc <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800319e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80031a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80031a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031aa:	f001 f88d 	bl	80042c8 <HAL_GPIO_Init>
}
 80031ae:	b008      	add	sp, #32
 80031b0:	bdd0      	pop	{r4, r6, r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40010000 	.word	0x40010000
 80031b8:	40020400 	.word	0x40020400
 80031bc:	40020000 	.word	0x40020000

080031c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80031c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003230 <HAL_UART_MspInit+0x70>)
 80031c4:	6801      	ldr	r1, [r0, #0]
{
 80031c6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 80031ca:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80031d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80031d4:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 80031d6:	d002      	beq.n	80031de <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031d8:	b009      	add	sp, #36	@ 0x24
 80031da:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80031de:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 80031e6:	f040 0010 	orr.w	r0, r0, #16
 80031ea:	6450      	str	r0, [r2, #68]	@ 0x44
 80031ec:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 80031ee:	f000 0010 	and.w	r0, r0, #16
 80031f2:	9000      	str	r0, [sp, #0]
 80031f4:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fa:	480e      	ldr	r0, [pc, #56]	@ (8003234 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fc:	f043 0302 	orr.w	r3, r3, #2
 8003200:	6313      	str	r3, [r2, #48]	@ 0x30
 8003202:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003204:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8003228 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003210:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003212:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003216:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003218:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321a:	f001 f855 	bl	80042c8 <HAL_GPIO_Init>
}
 800321e:	b009      	add	sp, #36	@ 0x24
 8003220:	f85d fb04 	ldr.w	pc, [sp], #4
 8003224:	f3af 8000 	nop.w
 8003228:	000000c0 	.word	0x000000c0
 800322c:	00000002 	.word	0x00000002
 8003230:	40011000 	.word	0x40011000
 8003234:	40020400 	.word	0x40020400

08003238 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003238:	b508      	push	{r3, lr}
  if(huart->Instance==USART1)
 800323a:	6802      	ldr	r2, [r0, #0]
 800323c:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <HAL_UART_MspDeInit+0x28>)
 800323e:	429a      	cmp	r2, r3
 8003240:	d000      	beq.n	8003244 <HAL_UART_MspDeInit+0xc>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8003242:	bd08      	pop	{r3, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 8003244:	4a07      	ldr	r2, [pc, #28]	@ (8003264 <HAL_UART_MspDeInit+0x2c>)
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 8003246:	4808      	ldr	r0, [pc, #32]	@ (8003268 <HAL_UART_MspDeInit+0x30>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8003248:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800324a:	f023 0310 	bic.w	r3, r3, #16
 800324e:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 8003250:	21c0      	movs	r1, #192	@ 0xc0
 8003252:	f001 f949 	bl	80044e8 <HAL_GPIO_DeInit>
}
 8003256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800325a:	2025      	movs	r0, #37	@ 0x25
 800325c:	f000 bff6 	b.w	800424c <HAL_NVIC_DisableIRQ>
 8003260:	40011000 	.word	0x40011000
 8003264:	40023800 	.word	0x40023800
 8003268:	40020400 	.word	0x40020400

0800326c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003270:	4b23      	ldr	r3, [pc, #140]	@ (8003300 <HAL_InitTick+0x94>)
 8003272:	2200      	movs	r2, #0
 8003274:	9202      	str	r2, [sp, #8]
 8003276:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003278:	f042 0210 	orr.w	r2, r2, #16
 800327c:	641a      	str	r2, [r3, #64]	@ 0x40
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	9302      	str	r3, [sp, #8]
{
 8003286:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003288:	a901      	add	r1, sp, #4
 800328a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800328c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800328e:	f001 fafd 	bl	800488c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003292:	9b06      	ldr	r3, [sp, #24]
 8003294:	b9d3      	cbnz	r3, 80032cc <HAL_InitTick+0x60>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003296:	f001 fad9 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 800329a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800329c:	4a19      	ldr	r2, [pc, #100]	@ (8003304 <HAL_InitTick+0x98>)

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800329e:	4c1a      	ldr	r4, [pc, #104]	@ (8003308 <HAL_InitTick+0x9c>)
 80032a0:	491a      	ldr	r1, [pc, #104]	@ (800330c <HAL_InitTick+0xa0>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	0c9b      	lsrs	r3, r3, #18
 80032a8:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80032aa:	2200      	movs	r2, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80032ac:	e9c4 1300 	strd	r1, r3, [r4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 80032b0:	4620      	mov	r0, r4
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032b2:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim6.Init.ClockDivision = 0;
 80032b6:	6122      	str	r2, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b8:	60a2      	str	r2, [r4, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ba:	61a2      	str	r2, [r4, #24]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032bc:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim6);
 80032be:	f001 fd4b 	bl	8004d58 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80032c2:	4606      	mov	r6, r0
 80032c4:	b130      	cbz	r0, 80032d4 <HAL_InitTick+0x68>
    }
  }

 /* Return function status */
  return status;
}
 80032c6:	4630      	mov	r0, r6
 80032c8:	b008      	add	sp, #32
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032cc:	f001 fabe 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 80032d0:	0043      	lsls	r3, r0, #1
 80032d2:	e7e3      	b.n	800329c <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 80032d4:	4620      	mov	r0, r4
 80032d6:	f001 fdcf 	bl	8004e78 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80032da:	4606      	mov	r6, r0
 80032dc:	2800      	cmp	r0, #0
 80032de:	d1f2      	bne.n	80032c6 <HAL_InitTick+0x5a>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80032e0:	2036      	movs	r0, #54	@ 0x36
 80032e2:	f000 ffa5 	bl	8004230 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e6:	2d0f      	cmp	r5, #15
 80032e8:	d901      	bls.n	80032ee <HAL_InitTick+0x82>
        status = HAL_ERROR;
 80032ea:	2601      	movs	r6, #1
 80032ec:	e7eb      	b.n	80032c6 <HAL_InitTick+0x5a>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80032ee:	4632      	mov	r2, r6
 80032f0:	4629      	mov	r1, r5
 80032f2:	2036      	movs	r0, #54	@ 0x36
 80032f4:	f000 ff60 	bl	80041b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <HAL_InitTick+0xa4>)
 80032fa:	601d      	str	r5, [r3, #0]
 80032fc:	e7e3      	b.n	80032c6 <HAL_InitTick+0x5a>
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	431bde83 	.word	0x431bde83
 8003308:	200013a8 	.word	0x200013a8
 800330c:	40001000 	.word	0x40001000
 8003310:	200005ec 	.word	0x200005ec

08003314 <HAL_SuspendTick>:
  * @retval None
  */
void HAL_SuspendTick(void)
{
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 8003314:	4b03      	ldr	r3, [pc, #12]	@ (8003324 <HAL_SuspendTick+0x10>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68d3      	ldr	r3, [r2, #12]
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	200013a8 	.word	0x200013a8

08003328 <HAL_ResumeTick>:
  * @retval None
  */
void HAL_ResumeTick(void)
{
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8003328:	4b03      	ldr	r3, [pc, #12]	@ (8003338 <HAL_ResumeTick+0x10>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68d3      	ldr	r3, [r2, #12]
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	200013a8 	.word	0x200013a8

0800333c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800333c:	4801      	ldr	r0, [pc, #4]	@ (8003344 <TIM6_DAC_IRQHandler+0x8>)
 800333e:	f002 b8a9 	b.w	8005494 <HAL_TIM_IRQHandler>
 8003342:	bf00      	nop
 8003344:	200013a8 	.word	0x200013a8

08003348 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8003348:	4b08      	ldr	r3, [pc, #32]	@ (800336c <ADC_IRQHandler+0x24>)
 800334a:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 800334c:	0752      	lsls	r2, r2, #29
 800334e:	d505      	bpl.n	800335c <ADC_IRQHandler+0x14>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	f022 020c 	bic.w	r2, r2, #12
 8003356:	601a      	str	r2, [r3, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8003358:	f7fe bf28 	b.w	80021ac <TSK_HighFrequencyTask>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 800335c:	4a04      	ldr	r2, [pc, #16]	@ (8003370 <ADC_IRQHandler+0x28>)
 800335e:	6813      	ldr	r3, [r2, #0]
 8003360:	f023 030c 	bic.w	r3, r3, #12
 8003364:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8003366:	f7fe bf21 	b.w	80021ac <TSK_HighFrequencyTask>
 800336a:	bf00      	nop
 800336c:	40012000 	.word	0x40012000
 8003370:	40012200 	.word	0x40012200

08003374 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8003374:	4803      	ldr	r0, [pc, #12]	@ (8003384 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003376:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8003378:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800337a:	f06f 0201 	mvn.w	r2, #1
 800337e:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003380:	f005 bbf6 	b.w	8008b70 <ICS_TIMx_UP_IRQHandler>
 8003384:	2000039c 	.word	0x2000039c

08003388 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003388:	4807      	ldr	r0, [pc, #28]	@ (80033a8 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 800338a:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 800338c:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800338e:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	0612      	lsls	r2, r2, #24
 8003394:	d504      	bpl.n	80033a0 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003396:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800339a:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 800339c:	f005 fc32 	bl	8008c04 <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80033a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80033a4:	f7fe bec8 	b.w	8002138 <MC_Scheduler>
 80033a8:	2000039c 	.word	0x2000039c

080033ac <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 80033ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 80033ae:	4c0c      	ldr	r4, [pc, #48]	@ (80033e0 <TIM2_IRQHandler+0x34>)
 80033b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	07d1      	lsls	r1, r2, #31
 80033b6:	d506      	bpl.n	80033c6 <TIM2_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80033b8:	f06f 0201 	mvn.w	r2, #1
 80033bc:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(HALL_M1.TIMx);
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 80033be:	4620      	mov	r0, r4
 80033c0:	f005 f950 	bl	8008664 <HALL_TIMx_UP_IRQHandler>
  else
  {
    /* Nothing to do */
  }
  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 80033c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	0792      	lsls	r2, r2, #30
 80033ca:	d507      	bpl.n	80033dc <TIM2_IRQHandler+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80033cc:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80033d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 80033d4:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <TIM2_IRQHandler+0x34>)
 80033d6:	611a      	str	r2, [r3, #16]
 80033d8:	f004 bfb8 	b.w	800834c <HALL_TIMx_CC_IRQHandler>
}
 80033dc:	bd10      	pop	{r4, pc}
 80033de:	bf00      	nop
 80033e0:	200002d4 	.word	0x200002d4

080033e4 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 80033e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80033e6:	4c1f      	ldr	r4, [pc, #124]	@ (8003464 <USART1_IRQHandler+0x80>)
 80033e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	0691      	lsls	r1, r2, #26
{
 80033f0:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80033f2:	d407      	bmi.n	8003404 <USART1_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80033f4:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80033f6:	0612      	lsls	r2, r2, #24
 80033f8:	d413      	bmi.n	8003422 <USART1_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80033fa:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80033fc:	071b      	lsls	r3, r3, #28
 80033fe:	d418      	bmi.n	8003432 <USART1_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8003400:	b002      	add	sp, #8
 8003402:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003404:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8003406:	4620      	mov	r0, r4
 8003408:	b2c9      	uxtb	r1, r1
 800340a:	f006 fa0b 	bl	8009824 <UFCP_RX_IRQ_Handler>
 800340e:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8003410:	2b01      	cmp	r3, #1
 8003412:	d01e      	beq.n	8003452 <USART1_IRQHandler+0x6e>
    if (retVal == 2)
 8003414:	2b02      	cmp	r3, #2
 8003416:	d021      	beq.n	800345c <USART1_IRQHandler+0x78>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003418:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	0612      	lsls	r2, r2, #24
 8003420:	d5eb      	bpl.n	80033fa <USART1_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 8003422:	4810      	ldr	r0, [pc, #64]	@ (8003464 <USART1_IRQHandler+0x80>)
 8003424:	f006 f956 	bl	80096d4 <UFCP_TX_IRQ_Handler>
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003428:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	071b      	lsls	r3, r3, #28
 8003430:	d5e6      	bpl.n	8003400 <USART1_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 8003432:	480c      	ldr	r0, [pc, #48]	@ (8003464 <USART1_IRQHandler+0x80>)
 8003434:	f006 fa5c 	bl	80098f0 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003438:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  tmpreg = USARTx->SR;
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003440:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003446:	9b01      	ldr	r3, [sp, #4]
}
 8003448:	b002      	add	sp, #8
 800344a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 800344e:	f000 b8b9 	b.w	80035c4 <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStart();
 8003452:	f000 f8bd 	bl	80035d0 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003456:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 800345a:	e7cb      	b.n	80033f4 <USART1_IRQHandler+0x10>
      UI_SerialCommunicationTimeOutStop();
 800345c:	f000 f8b2 	bl	80035c4 <UI_SerialCommunicationTimeOutStop>
 8003460:	e7da      	b.n	8003418 <USART1_IRQHandler+0x34>
 8003462:	bf00      	nop
 8003464:	20000008 	.word	0x20000008

08003468 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003468:	b510      	push	{r4, lr}
 800346a:	b082      	sub	sp, #8
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800346c:	f7fe ff84 	bl	8002378 <TSK_HardwareFaultTask>
 8003470:	4c1b      	ldr	r4, [pc, #108]	@ (80034e0 <HardFault_Handler+0x78>)

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003472:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	0712      	lsls	r2, r2, #28
 800347a:	d41d      	bmi.n	80034b8 <HardFault_Handler+0x50>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800347c:	681a      	ldr	r2, [r3, #0]
        UFCP_OVR_IRQ_Handler(&pUSART);
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800347e:	0610      	lsls	r0, r2, #24
 8003480:	d40f      	bmi.n	80034a2 <HardFault_Handler+0x3a>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003482:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003484:	0692      	lsls	r2, r2, #26
 8003486:	d5f6      	bpl.n	8003476 <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003488:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 800348a:	4620      	mov	r0, r4
 800348c:	b2c9      	uxtb	r1, r1
 800348e:	f006 f9c9 	bl	8009824 <UFCP_RX_IRQ_Handler>
 8003492:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8003494:	2b01      	cmp	r3, #1
 8003496:	d01f      	beq.n	80034d8 <HardFault_Handler+0x70>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8003498:	2b02      	cmp	r3, #2
 800349a:	d1ea      	bne.n	8003472 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 800349c:	f000 f892 	bl	80035c4 <UI_SerialCommunicationTimeOutStop>
 80034a0:	e7e7      	b.n	8003472 <HardFault_Handler+0xa>
        UFCP_TX_IRQ_Handler(&pUSART);
 80034a2:	4620      	mov	r0, r4
 80034a4:	f006 f916 	bl	80096d4 <UFCP_TX_IRQ_Handler>
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80034a8:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	0691      	lsls	r1, r2, #26
 80034b0:	d4ea      	bmi.n	8003488 <HardFault_Handler+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80034b2:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80034b4:	0712      	lsls	r2, r2, #28
 80034b6:	d5e1      	bpl.n	800347c <HardFault_Handler+0x14>
        UFCP_OVR_IRQ_Handler(&pUSART);
 80034b8:	4620      	mov	r0, r4
 80034ba:	f006 fa19 	bl	80098f0 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80034be:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  tmpreg = USARTx->SR;
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80034c6:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80034cc:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 80034ce:	f000 f879 	bl	80035c4 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80034d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 80034d6:	e7d1      	b.n	800347c <HardFault_Handler+0x14>
          UI_SerialCommunicationTimeOutStart();
 80034d8:	f000 f87a 	bl	80035d0 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 80034dc:	e7c9      	b.n	8003472 <HardFault_Handler+0xa>
 80034de:	bf00      	nop
 80034e0:	20000008 	.word	0x20000008

080034e4 <EXTI9_5_IRQHandler>:
}

/*External Interrupt triggers motor controller reset*/
void EXTI9_5_IRQHandler(void)
{
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET)
 80034e4:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <EXTI9_5_IRQHandler+0x14>)
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	0612      	lsls	r2, r2, #24
 80034ea:	d400      	bmi.n	80034ee <EXTI9_5_IRQHandler+0xa>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
		wakeUp();
	}

}
 80034ec:	4770      	bx	lr
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 80034ee:	2280      	movs	r2, #128	@ 0x80
 80034f0:	615a      	str	r2, [r3, #20]
		wakeUp();
 80034f2:	f7fd bc33 	b.w	8000d5c <wakeUp>
 80034f6:	bf00      	nop
 80034f8:	40013c00 	.word	0x40013c00

080034fc <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 80034fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
 8003500:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 8003574 <UI_TaskInit+0x78>
    pMCP->_Super = UI_Params;
 8003504:	f8df e070 	ldr.w	lr, [pc, #112]	@ 8003578 <UI_TaskInit+0x7c>

    UFCP_Init( & pUSART );
 8003508:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 800357c <UI_TaskInit+0x80>
{
 800350c:	461e      	mov	r6, r3
    pMCP = &MCP_UI_Params;
 800350e:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <UI_TaskInit+0x68>)
 8003510:	f8c8 3000 	str.w	r3, [r8]
{
 8003514:	4607      	mov	r7, r0
 8003516:	460c      	mov	r4, r1
 8003518:	4615      	mov	r5, r2
    pMCP->_Super = UI_Params;
 800351a:	469c      	mov	ip, r3
 800351c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003520:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003524:	e89e 0003 	ldmia.w	lr, {r0, r1}
{
 8003528:	b082      	sub	sp, #8
    pMCP->_Super = UI_Params;
 800352a:	e88c 0003 	stmia.w	ip, {r0, r1}
    UFCP_Init( & pUSART );
 800352e:	4648      	mov	r0, r9
{
 8003530:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    UFCP_Init( & pUSART );
 8003534:	f006 f8cc 	bl	80096d0 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8003538:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <UI_TaskInit+0x6c>)
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	f8cd a004 	str.w	sl, [sp, #4]
 8003540:	f8d8 0000 	ldr.w	r0, [r8]
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <UI_TaskInit+0x70>)
 8003546:	4a0a      	ldr	r2, [pc, #40]	@ (8003570 <UI_TaskInit+0x74>)
 8003548:	4649      	mov	r1, r9
 800354a:	f7ff fb77 	bl	8002c3c <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800354e:	f8d8 0000 	ldr.w	r0, [r8]
 8003552:	970a      	str	r7, [sp, #40]	@ 0x28
 8003554:	4633      	mov	r3, r6
 8003556:	462a      	mov	r2, r5
 8003558:	4621      	mov	r1, r4

}
 800355a:	b002      	add	sp, #8
 800355c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8003560:	f000 b83c 	b.w	80035dc <UI_Init>
 8003564:	200013f4 	.word	0x200013f4
 8003568:	08009911 	.word	0x08009911
 800356c:	0800973d 	.word	0x0800973d
 8003570:	08009769 	.word	0x08009769
 8003574:	200014a4 	.word	0x200014a4
 8003578:	20000f34 	.word	0x20000f34
 800357c:	20000008 	.word	0x20000008

08003580 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8003580:	4a0d      	ldr	r2, [pc, #52]	@ (80035b8 <UI_Scheduler+0x38>)
 8003582:	8813      	ldrh	r3, [r2, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	b11b      	cbz	r3, 8003590 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8003588:	8813      	ldrh	r3, [r2, #0]
 800358a:	3b01      	subs	r3, #1
 800358c:	b29b      	uxth	r3, r3
 800358e:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8003590:	4a0a      	ldr	r2, [pc, #40]	@ (80035bc <UI_Scheduler+0x3c>)
 8003592:	8813      	ldrh	r3, [r2, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d903      	bls.n	80035a2 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 800359a:	8813      	ldrh	r3, [r2, #0]
 800359c:	3b01      	subs	r3, #1
 800359e:	b29b      	uxth	r3, r3
 80035a0:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80035a2:	4a07      	ldr	r2, [pc, #28]	@ (80035c0 <UI_Scheduler+0x40>)
 80035a4:	8813      	ldrh	r3, [r2, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d903      	bls.n	80035b4 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 80035ac:	8813      	ldrh	r3, [r2, #0]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	8013      	strh	r3, [r2, #0]
  }
}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	200013f2 	.word	0x200013f2
 80035bc:	200013f0 	.word	0x200013f0
 80035c0:	200005e0 	.word	0x200005e0

080035c4 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80035c4:	4b01      	ldr	r3, [pc, #4]	@ (80035cc <UI_SerialCommunicationTimeOutStop+0x8>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	801a      	strh	r2, [r3, #0]
}
 80035ca:	4770      	bx	lr
 80035cc:	200013f0 	.word	0x200013f0

080035d0 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80035d0:	4b01      	ldr	r3, [pc, #4]	@ (80035d8 <UI_SerialCommunicationTimeOutStart+0x8>)
 80035d2:	224f      	movs	r2, #79	@ 0x4f
 80035d4:	801a      	strh	r2, [r3, #0]
}
 80035d6:	4770      	bx	lr
 80035d8:	200013f0 	.word	0x200013f0

080035dc <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 80035dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
  pHandle->bDriveNum = bMCNum;
 80035e0:	7101      	strb	r1, [r0, #4]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80035e2:	9b00      	ldr	r3, [sp, #0]
 80035e4:	6103      	str	r3, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 80035e6:	2100      	movs	r1, #0
 80035e8:	7501      	strb	r1, [r0, #20]
}
 80035ea:	4770      	bx	lr

080035ec <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 80035ec:	7903      	ldrb	r3, [r0, #4]
 80035ee:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 80035f0:	bf86      	itte	hi
 80035f2:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 80035f4:	2001      	movhi	r0, #1
    retVal = false;
 80035f6:	2000      	movls	r0, #0
  }
  return retVal;
}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop

080035fc <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 80035fc:	7d00      	ldrb	r0, [r0, #20]
 80035fe:	4770      	bx	lr

08003600 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8003600:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003602:	6884      	ldr	r4, [r0, #8]
 8003604:	7d03      	ldrb	r3, [r0, #20]
 8003606:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 800360a:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800360c:	68c2      	ldr	r2, [r0, #12]
{
 800360e:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8003614:	295b      	cmp	r1, #91	@ 0x5b
 8003616:	d82f      	bhi.n	8003678 <UI_SetReg+0x78>
 8003618:	e8df f001 	tbb	[pc, r1]
 800361c:	412e2e3d 	.word	0x412e2e3d
 8003620:	59544f2e 	.word	0x59544f2e
 8003624:	736e695e 	.word	0x736e695e
 8003628:	8d888378 	.word	0x8d888378
 800362c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003630:	2e2e2e2e 	.word	0x2e2e2e2e
 8003634:	2e2e2e2e 	.word	0x2e2e2e2e
 8003638:	2e2e2e2e 	.word	0x2e2e2e2e
 800363c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003640:	2e2e2e2e 	.word	0x2e2e2e2e
 8003644:	2e2e2e2e 	.word	0x2e2e2e2e
 8003648:	2e2e2e2e 	.word	0x2e2e2e2e
 800364c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003650:	2e2e2e2e 	.word	0x2e2e2e2e
 8003654:	2e2e2e2e 	.word	0x2e2e2e2e
 8003658:	2e2e2e2e 	.word	0x2e2e2e2e
 800365c:	2e2e922e 	.word	0x2e2e922e
 8003660:	2e2e2e2e 	.word	0x2e2e2e2e
 8003664:	2e2e2e2e 	.word	0x2e2e2e2e
 8003668:	2e2e2e2e 	.word	0x2e2e2e2e
 800366c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003670:	2e2e2e2e 	.word	0x2e2e2e2e
 8003674:	312e2e2e 	.word	0x312e2e2e
 8003678:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 800367a:	b003      	add	sp, #12
 800367c:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 800367e:	4937      	ldr	r1, [pc, #220]	@ (800375c <UI_SetReg+0x15c>)
 8003680:	fb81 3104 	smull	r3, r1, r1, r4
 8003684:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8003688:	2200      	movs	r2, #0
 800368a:	b209      	sxth	r1, r1
 800368c:	4628      	mov	r0, r5
 800368e:	f7fe f919 	bl	80018c4 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8003692:	2001      	movs	r0, #1
 8003694:	e7f1      	b.n	800367a <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8003696:	b2e1      	uxtb	r1, r4
 8003698:	f7ff ffa8 	bl	80035ec <UI_SelectMC>
    break;
 800369c:	e7ed      	b.n	800367a <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 800369e:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 80036a2:	d052      	beq.n	800374a <UI_SetReg+0x14a>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 80036a4:	2c01      	cmp	r4, #1
 80036a6:	d1f4      	bne.n	8003692 <UI_SetReg+0x92>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80036a8:	4628      	mov	r0, r5
 80036aa:	f7fe f99b 	bl	80019e4 <MCI_GetMecSpeedRefUnit>
 80036ae:	2200      	movs	r2, #0
 80036b0:	4601      	mov	r1, r0
 80036b2:	4628      	mov	r0, r5
 80036b4:	f7fe f906 	bl	80018c4 <MCI_ExecSpeedRamp>
 80036b8:	e7eb      	b.n	8003692 <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	b221      	sxth	r1, r4
 80036be:	f005 fb59 	bl	8008d74 <PID_SetKP>
    break;
 80036c2:	e7e6      	b.n	8003692 <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	b221      	sxth	r1, r4
 80036c8:	f005 fb56 	bl	8008d78 <PID_SetKI>
    break;
 80036cc:	e7e1      	b.n	8003692 <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	b221      	sxth	r1, r4
 80036d2:	f005 fb61 	bl	8008d98 <PID_SetKD>
    break;
 80036d6:	e7dc      	b.n	8003692 <UI_SetReg+0x92>
      currComp = MCI_GetIqdref(pMCI);
 80036d8:	4628      	mov	r0, r5
 80036da:	f7fe f9b1 	bl	8001a40 <MCI_GetIqdref>
 80036de:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 80036e0:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 80036e4:	9901      	ldr	r1, [sp, #4]
 80036e6:	4628      	mov	r0, r5
 80036e8:	f7fe f900 	bl	80018ec <MCI_SetCurrentReferences>
    break;
 80036ec:	e7d1      	b.n	8003692 <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 80036ee:	6858      	ldr	r0, [r3, #4]
 80036f0:	b221      	sxth	r1, r4
 80036f2:	f005 fb3f 	bl	8008d74 <PID_SetKP>
    break;
 80036f6:	e7cc      	b.n	8003692 <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 80036f8:	6858      	ldr	r0, [r3, #4]
 80036fa:	b221      	sxth	r1, r4
 80036fc:	f005 fb3c 	bl	8008d78 <PID_SetKI>
    break;
 8003700:	e7c7      	b.n	8003692 <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8003702:	6858      	ldr	r0, [r3, #4]
 8003704:	b221      	sxth	r1, r4
 8003706:	f005 fb47 	bl	8008d98 <PID_SetKD>
    break;
 800370a:	e7c2      	b.n	8003692 <UI_SetReg+0x92>
      currComp = MCI_GetIqdref(pMCI);
 800370c:	4628      	mov	r0, r5
 800370e:	f7fe f997 	bl	8001a40 <MCI_GetIqdref>
 8003712:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8003714:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8003718:	9901      	ldr	r1, [sp, #4]
 800371a:	4628      	mov	r0, r5
 800371c:	f7fe f8e6 	bl	80018ec <MCI_SetCurrentReferences>
    break;
 8003720:	e7b7      	b.n	8003692 <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8003722:	6898      	ldr	r0, [r3, #8]
 8003724:	b221      	sxth	r1, r4
 8003726:	f005 fb25 	bl	8008d74 <PID_SetKP>
    break;
 800372a:	e7b2      	b.n	8003692 <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 800372c:	6898      	ldr	r0, [r3, #8]
 800372e:	b221      	sxth	r1, r4
 8003730:	f005 fb22 	bl	8008d78 <PID_SetKI>
    break;
 8003734:	e7ad      	b.n	8003692 <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8003736:	6898      	ldr	r0, [r3, #8]
 8003738:	b221      	sxth	r1, r4
 800373a:	f005 fb2d 	bl	8008d98 <PID_SetKD>
    break;
 800373e:	e7a8      	b.n	8003692 <UI_SetReg+0x92>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8003740:	b221      	sxth	r1, r4
 8003742:	4628      	mov	r0, r5
 8003744:	f7fe f9be 	bl	8001ac4 <MCI_SetIdref>
    break;
 8003748:	e7a3      	b.n	8003692 <UI_SetReg+0x92>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 800374a:	4628      	mov	r0, r5
 800374c:	f7fe f9a2 	bl	8001a94 <MCI_GetTeref>
 8003750:	4622      	mov	r2, r4
 8003752:	4601      	mov	r1, r0
 8003754:	4628      	mov	r0, r5
 8003756:	f7fe f8bf 	bl	80018d8 <MCI_ExecTorqueRamp>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 800375a:	e79a      	b.n	8003692 <UI_SetReg+0x92>
 800375c:	2aaaaaab 	.word	0x2aaaaaab

08003760 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8003760:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003762:	68c4      	ldr	r4, [r0, #12]
 8003764:	7d03      	ldrb	r3, [r0, #20]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003766:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003768:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800376c:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8003770:	b08d      	sub	sp, #52	@ 0x34

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8003772:	2a00      	cmp	r2, #0
 8003774:	f000 808b 	beq.w	800388e <UI_GetReg+0x12e>
  {
    *success = true;
 8003778:	f04f 0c01 	mov.w	ip, #1
 800377c:	f882 c000 	strb.w	ip, [r2]
  }

  switch (bRegID)
 8003780:	2981      	cmp	r1, #129	@ 0x81
 8003782:	f200 8111 	bhi.w	80039a8 <UI_GetReg+0x248>
 8003786:	e8df f011 	tbh	[pc, r1, lsl #1]
 800378a:	0143      	.short	0x0143
 800378c:	016d0171 	.word	0x016d0171
 8003790:	01620169 	.word	0x01620169
 8003794:	015a015e 	.word	0x015a015e
 8003798:	01130156 	.word	0x01130156
 800379c:	01d30126 	.word	0x01d30126
 80037a0:	010901cf 	.word	0x010901cf
 80037a4:	0146014a 	.word	0x0146014a
 80037a8:	010f014e 	.word	0x010f014e
 80037ac:	010f010f 	.word	0x010f010f
 80037b0:	010f010f 	.word	0x010f010f
 80037b4:	010f010f 	.word	0x010f010f
 80037b8:	010f010f 	.word	0x010f010f
 80037bc:	01520122 	.word	0x01520122
 80037c0:	010f01ea 	.word	0x010f01ea
 80037c4:	01e3010f 	.word	0x01e3010f
 80037c8:	011d0118 	.word	0x011d0118
 80037cc:	01dc010f 	.word	0x01dc010f
 80037d0:	013401d7 	.word	0x013401d7
 80037d4:	012a012f 	.word	0x012a012f
 80037d8:	011d0118 	.word	0x011d0118
 80037dc:	01090113 	.word	0x01090113
 80037e0:	01770139 	.word	0x01770139
 80037e4:	01c8013e 	.word	0x01c8013e
 80037e8:	019e01b3 	.word	0x019e01b3
 80037ec:	010f010f 	.word	0x010f010f
 80037f0:	010f010f 	.word	0x010f010f
 80037f4:	010f010f 	.word	0x010f010f
 80037f8:	010f010f 	.word	0x010f010f
 80037fc:	010f010f 	.word	0x010f010f
 8003800:	010f010f 	.word	0x010f010f
 8003804:	010f010f 	.word	0x010f010f
 8003808:	01900197 	.word	0x01900197
 800380c:	010f0109 	.word	0x010f0109
 8003810:	010f010f 	.word	0x010f010f
 8003814:	010f010f 	.word	0x010f010f
 8003818:	010f010f 	.word	0x010f010f
 800381c:	010f010f 	.word	0x010f010f
 8003820:	010f010f 	.word	0x010f010f
 8003824:	010f010f 	.word	0x010f010f
 8003828:	010f010f 	.word	0x010f010f
 800382c:	010f010f 	.word	0x010f010f
 8003830:	010f010f 	.word	0x010f010f
 8003834:	010f010f 	.word	0x010f010f
 8003838:	010f010f 	.word	0x010f010f
 800383c:	010f010f 	.word	0x010f010f
 8003840:	010f0180 	.word	0x010f0180
 8003844:	010f010f 	.word	0x010f010f
 8003848:	010f010f 	.word	0x010f010f
 800384c:	010f010f 	.word	0x010f010f
 8003850:	010f010f 	.word	0x010f010f
 8003854:	010f010f 	.word	0x010f010f
 8003858:	010f010f 	.word	0x010f010f
 800385c:	010f010f 	.word	0x010f010f
 8003860:	010f010f 	.word	0x010f010f
 8003864:	017c010f 	.word	0x017c010f
 8003868:	01cd018c 	.word	0x01cd018c
 800386c:	0111010f 	.word	0x0111010f
 8003870:	010f0111 	.word	0x010f0111
 8003874:	010f010f 	.word	0x010f010f
 8003878:	010f010f 	.word	0x010f010f
 800387c:	010f010f 	.word	0x010f010f
 8003880:	010f010f 	.word	0x010f010f
 8003884:	010f010f 	.word	0x010f010f
 8003888:	010f010f 	.word	0x010f010f
 800388c:	0111      	.short	0x0111
 800388e:	2981      	cmp	r1, #129	@ 0x81
 8003890:	f200 808c 	bhi.w	80039ac <UI_GetReg+0x24c>
 8003894:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003898:	00ea00bc 	.word	0x00ea00bc
 800389c:	00e200e6 	.word	0x00e200e6
 80038a0:	00d700db 	.word	0x00d700db
 80038a4:	00cf00d3 	.word	0x00cf00d3
 80038a8:	009f008c 	.word	0x009f008c
 80038ac:	0148014c 	.word	0x0148014c
 80038b0:	00c30082 	.word	0x00c30082
 80038b4:	00c700bf 	.word	0x00c700bf
 80038b8:	008a008a 	.word	0x008a008a
 80038bc:	008a008a 	.word	0x008a008a
 80038c0:	008a008a 	.word	0x008a008a
 80038c4:	008a008a 	.word	0x008a008a
 80038c8:	009b008a 	.word	0x009b008a
 80038cc:	016300cb 	.word	0x016300cb
 80038d0:	008a008a 	.word	0x008a008a
 80038d4:	0091015c 	.word	0x0091015c
 80038d8:	008a0096 	.word	0x008a0096
 80038dc:	01500155 	.word	0x01500155
 80038e0:	00a800ad 	.word	0x00a800ad
 80038e4:	009100a3 	.word	0x009100a3
 80038e8:	008c0096 	.word	0x008c0096
 80038ec:	00b20082 	.word	0x00b20082
 80038f0:	00b700f0 	.word	0x00b700f0
 80038f4:	012c0141 	.word	0x012c0141
 80038f8:	008a0117 	.word	0x008a0117
 80038fc:	008a008a 	.word	0x008a008a
 8003900:	008a008a 	.word	0x008a008a
 8003904:	008a008a 	.word	0x008a008a
 8003908:	008a008a 	.word	0x008a008a
 800390c:	008a008a 	.word	0x008a008a
 8003910:	008a008a 	.word	0x008a008a
 8003914:	0110008a 	.word	0x0110008a
 8003918:	00820109 	.word	0x00820109
 800391c:	008a008a 	.word	0x008a008a
 8003920:	008a008a 	.word	0x008a008a
 8003924:	008a008a 	.word	0x008a008a
 8003928:	008a008a 	.word	0x008a008a
 800392c:	008a008a 	.word	0x008a008a
 8003930:	008a008a 	.word	0x008a008a
 8003934:	008a008a 	.word	0x008a008a
 8003938:	008a008a 	.word	0x008a008a
 800393c:	008a008a 	.word	0x008a008a
 8003940:	008a008a 	.word	0x008a008a
 8003944:	008a008a 	.word	0x008a008a
 8003948:	008a008a 	.word	0x008a008a
 800394c:	00f9008a 	.word	0x00f9008a
 8003950:	008a008a 	.word	0x008a008a
 8003954:	008a008a 	.word	0x008a008a
 8003958:	008a008a 	.word	0x008a008a
 800395c:	008a008a 	.word	0x008a008a
 8003960:	008a008a 	.word	0x008a008a
 8003964:	008a008a 	.word	0x008a008a
 8003968:	008a008a 	.word	0x008a008a
 800396c:	008a008a 	.word	0x008a008a
 8003970:	008a008a 	.word	0x008a008a
 8003974:	010500f5 	.word	0x010500f5
 8003978:	008a0146 	.word	0x008a0146
 800397c:	008a008a 	.word	0x008a008a
 8003980:	008a008a 	.word	0x008a008a
 8003984:	008a008a 	.word	0x008a008a
 8003988:	008a008a 	.word	0x008a008a
 800398c:	008a008a 	.word	0x008a008a
 8003990:	008a008a 	.word	0x008a008a
 8003994:	008a008a 	.word	0x008a008a
 8003998:	008a008a 	.word	0x008a008a
    }
    break;

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 800399c:	4628      	mov	r0, r5
 800399e:	f7fe f84f 	bl	8001a40 <MCI_GetIqdref>
 80039a2:	1400      	asrs	r0, r0, #16
      }
	}
    break;
  }
  return bRetVal;
}
 80039a4:	b00d      	add	sp, #52	@ 0x34
 80039a6:	bd30      	pop	{r4, r5, pc}
        *success = false;
 80039a8:	2300      	movs	r3, #0
 80039aa:	7013      	strb	r3, [r2, #0]
      bRetVal = CTRBDID;
 80039ac:	2000      	movs	r0, #0
  return bRetVal;
 80039ae:	e7f9      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqdref(pMCI).q;
 80039b0:	4628      	mov	r0, r5
 80039b2:	f7fe f845 	bl	8001a40 <MCI_GetIqdref>
 80039b6:	b200      	sxth	r0, r0
    break;
 80039b8:	e7f4      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqd(pMCI).q;
 80039ba:	4628      	mov	r0, r5
 80039bc:	f7fe f832 	bl	8001a24 <MCI_GetIqd>
 80039c0:	b200      	sxth	r0, r0
    break;
 80039c2:	e7ef      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqd(pMCI).d;
 80039c4:	4628      	mov	r0, r5
 80039c6:	f7fe f82d 	bl	8001a24 <MCI_GetIqd>
 80039ca:	1400      	asrs	r0, r0, #16
    break;
 80039cc:	e7ea      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80039ce:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80039d0:	f004 fabe 	bl	8007f50 <VBS_GetAvBusVoltage_V>
    break;
 80039d4:	e7e6      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80039d6:	6860      	ldr	r0, [r4, #4]
 80039d8:	f005 f9d0 	bl	8008d7c <PID_GetKP>
    break;
 80039dc:	e7e2      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80039de:	4628      	mov	r0, r5
 80039e0:	f7fe f812 	bl	8001a08 <MCI_GetIalphabeta>
 80039e4:	1400      	asrs	r0, r0, #16
    break;
 80039e6:	e7dd      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80039e8:	4628      	mov	r0, r5
 80039ea:	f7fe f80d 	bl	8001a08 <MCI_GetIalphabeta>
 80039ee:	b200      	sxth	r0, r0
    break;
 80039f0:	e7d8      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIab(pMCI).b;
 80039f2:	4628      	mov	r0, r5
 80039f4:	f7fd fffa 	bl	80019ec <MCI_GetIab>
 80039f8:	1400      	asrs	r0, r0, #16
    break;
 80039fa:	e7d3      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = MCI_GetVqd(pMCI).q;
 80039fc:	4628      	mov	r0, r5
 80039fe:	f7fe f82d 	bl	8001a5c <MCI_GetVqd>
 8003a02:	b200      	sxth	r0, r0
    break;
 8003a04:	e7ce      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8003a06:	4628      	mov	r0, r5
 8003a08:	f7fe f836 	bl	8001a78 <MCI_GetValphabeta>
 8003a0c:	b200      	sxth	r0, r0
    break;
 8003a0e:	e7c9      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003a10:	f7ff fdf4 	bl	80035fc <UI_GetSelectedMC>
    break;
 8003a14:	e7c6      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8003a16:	68a0      	ldr	r0, [r4, #8]
 8003a18:	f005 f9b4 	bl	8008d84 <PID_GetKI>
    break;
 8003a1c:	e7c2      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8003a1e:	68a0      	ldr	r0, [r4, #8]
 8003a20:	f005 f9ac 	bl	8008d7c <PID_GetKP>
    break;
 8003a24:	e7be      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003a26:	68a0      	ldr	r0, [r4, #8]
 8003a28:	f005 f9b8 	bl	8008d9c <PID_GetKD>
    break;
 8003a2c:	e7ba      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003a2e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003a30:	f005 f982 	bl	8008d38 <NTC_GetAvTemp_C>
    break;
 8003a34:	e7b6      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8003a36:	6820      	ldr	r0, [r4, #0]
 8003a38:	f005 f9b0 	bl	8008d9c <PID_GetKD>
    break;
 8003a3c:	e7b2      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8003a3e:	6820      	ldr	r0, [r4, #0]
 8003a40:	f005 f9a0 	bl	8008d84 <PID_GetKI>
    break;
 8003a44:	e7ae      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	f005 f998 	bl	8008d7c <PID_GetKP>
    break;
 8003a4c:	e7aa      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f7fd ffc8 	bl	80019e4 <MCI_GetMecSpeedRefUnit>
 8003a54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003a58:	0040      	lsls	r0, r0, #1
    break;
 8003a5a:	e7a3      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	f7fd ffab 	bl	80019b8 <MCI_GetControlMode>
    break;
 8003a62:	e79f      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8003a64:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003a66:	f005 fe1f 	bl	80096a8 <STM_GetState>
	break;
 8003a6a:	e79b      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003a6c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
}
 8003a6e:	b00d      	add	sp, #52	@ 0x34
 8003a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003a74:	f005 be26 	b.w	80096c4 <STM_GetFaultState>
      bRetVal = MCI_GetVqd(pMCI).d;
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f7fd ffef 	bl	8001a5c <MCI_GetVqd>
 8003a7e:	1400      	asrs	r0, r0, #16
    break;
 8003a80:	e790      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003a82:	6820      	ldr	r0, [r4, #0]
 8003a84:	f005 f984 	bl	8008d90 <PID_GetKPDivisor>
    break;
 8003a88:	e78c      	b.n	80039a4 <UI_GetReg+0x244>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f7fd ff94 	bl	80019b8 <MCI_GetControlMode>
 8003a90:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003a92:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003a94:	d06f      	beq.n	8003b76 <UI_GetReg+0x416>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8003a96:	f7fd ffa5 	bl	80019e4 <MCI_GetMecSpeedRefUnit>
 8003a9a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003a9e:	0040      	lsls	r0, r0, #1
 8003aa0:	e780      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8003aa2:	6820      	ldr	r0, [r4, #0]
 8003aa4:	f005 f976 	bl	8008d94 <PID_GetKIDivisor>
    break;
 8003aa8:	e77c      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8003aaa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003aac:	f005 fd40 	bl	8009530 <STC_GetMinAppNegativeMecSpeedUnit>
 8003ab0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003ab4:	0040      	lsls	r0, r0, #1
    break;
 8003ab6:	e775      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8003ab8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003aba:	f005 fd37 	bl	800952c <STC_GetMaxAppPositiveMecSpeedUnit>
 8003abe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003ac2:	0040      	lsls	r0, r0, #1
    break;
 8003ac4:	e76e      	b.n	80039a4 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003ac6:	6902      	ldr	r2, [r0, #16]
 8003ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003acc:	0f1a      	lsrs	r2, r3, #28
 8003ace:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003ad0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003ad4:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003ad6:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003ada:	d948      	bls.n	8003b6e <UI_GetReg+0x40e>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	f63f af65 	bhi.w	80039ac <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 8003ae2:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	f43f af61 	beq.w	80039ac <UI_GetReg+0x24c>
        bRetVal = SPD_GetS16Speed(pSPD);
 8003aea:	f005 fc4d 	bl	8009388 <SPD_GetS16Speed>
 8003aee:	e759      	b.n	80039a4 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003af0:	6902      	ldr	r2, [r0, #16]
 8003af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003af6:	0f1a      	lsrs	r2, r3, #28
 8003af8:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003afa:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003afe:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003b00:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003b04:	d92f      	bls.n	8003b66 <UI_GetReg+0x406>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	f63f af50 	bhi.w	80039ac <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 8003b0c:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	f43f af4c 	beq.w	80039ac <UI_GetReg+0x24c>
        bRetVal = SPD_GetElAngle(pSPD);
 8003b14:	f005 fbf6 	bl	8009304 <SPD_GetElAngle>
 8003b18:	e744      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f7fd ffac 	bl	8001a78 <MCI_GetValphabeta>
 8003b20:	1400      	asrs	r0, r0, #16
    break;
 8003b22:	e73f      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)(MC_UID);
 8003b24:	4817      	ldr	r0, [pc, #92]	@ (8003b84 <UI_GetReg+0x424>)
 8003b26:	e73d      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003b28:	6860      	ldr	r0, [r4, #4]
 8003b2a:	f005 f937 	bl	8008d9c <PID_GetKD>
    break;
 8003b2e:	e739      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8003b30:	6860      	ldr	r0, [r4, #4]
 8003b32:	f005 f927 	bl	8008d84 <PID_GetKI>
    break;
 8003b36:	e735      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIab(pMCI).a;
 8003b38:	4628      	mov	r0, r5
 8003b3a:	f7fd ff57 	bl	80019ec <MCI_GetIab>
 8003b3e:	b200      	sxth	r0, r0
    break;
 8003b40:	e730      	b.n	80039a4 <UI_GetReg+0x244>
      if (pMCT->pRevupCtrl)
 8003b42:	6960      	ldr	r0, [r4, #20]
 8003b44:	2800      	cmp	r0, #0
 8003b46:	f43f af31 	beq.w	80039ac <UI_GetReg+0x24c>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8003b4a:	f005 fbd7 	bl	80092fc <RUC_GetNumberOfPhases>
 8003b4e:	e729      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8003b50:	4628      	mov	r0, r5
 8003b52:	f7fd ff3f 	bl	80019d4 <MCI_GetAvrgMecSpeedUnit>
 8003b56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003b5a:	0040      	lsls	r0, r0, #1
    break;
 8003b5c:	e722      	b.n	80039a4 <UI_GetReg+0x244>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8003b5e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003b60:	f005 f8a6 	bl	8008cb0 <MPM_GetAvrgElMotorPowerW>
    break;
 8003b64:	e71e      	b.n	80039a4 <UI_GetReg+0x244>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d9d0      	bls.n	8003b0c <UI_GetReg+0x3ac>
        pSPD = pMCT->pSpeedSensorMain;
 8003b6a:	69a0      	ldr	r0, [r4, #24]
 8003b6c:	e7cf      	b.n	8003b0e <UI_GetReg+0x3ae>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d9b7      	bls.n	8003ae2 <UI_GetReg+0x382>
        pSPD = pMCT->pSpeedSensorMain;
 8003b72:	69a0      	ldr	r0, [r4, #24]
 8003b74:	e7b6      	b.n	8003ae4 <UI_GetReg+0x384>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003b76:	f7fd ff21 	bl	80019bc <MCI_GetLastRampFinalSpeed>
 8003b7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003b7e:	0040      	lsls	r0, r0, #1
 8003b80:	e710      	b.n	80039a4 <UI_GetReg+0x244>
 8003b82:	bf00      	nop
 8003b84:	34a6847a 	.word	0x34a6847a

08003b88 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8003b88:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003b8a:	6883      	ldr	r3, [r0, #8]
 8003b8c:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 8003b8e:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003b90:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8003b94:	290d      	cmp	r1, #13
 8003b96:	d811      	bhi.n	8003bbc <UI_ExecCmd+0x34>
 8003b98:	e8df f001 	tbb	[pc, r1]
 8003b9c:	0e160b12 	.word	0x0e160b12
 8003ba0:	231f070e 	.word	0x231f070e
 8003ba4:	10101027 	.word	0x10101027
 8003ba8:	0b10      	.short	0x0b10
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 8003baa:	4620      	mov	r0, r4
 8003bac:	f7fd fefa 	bl	80019a4 <MCI_GetSTMState>
 8003bb0:	b130      	cbz	r0, 8003bc0 <UI_ExecCmd+0x38>
      MCI_StopMotor(pMCI);
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f7fd feae 	bl	8001914 <MCI_StopMotor>
  bool retVal = true;
 8003bb8:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8003bba:	bd10      	pop	{r4, pc}
    retVal = false;
 8003bbc:	2000      	movs	r0, #0
}
 8003bbe:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7fd fe9d 	bl	8001900 <MCI_StartMotor>
 8003bc6:	e7f7      	b.n	8003bb8 <UI_ExecCmd+0x30>
      if (MCI_GetSTMState(pMCI) == RUN)
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f7fd feeb 	bl	80019a4 <MCI_GetSTMState>
 8003bce:	2806      	cmp	r0, #6
 8003bd0:	d1f2      	bne.n	8003bb8 <UI_ExecCmd+0x30>
        MCI_StopRamp(pMCI);
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7fd fefa 	bl	80019cc <MCI_StopRamp>
 8003bd8:	e7ee      	b.n	8003bb8 <UI_ExecCmd+0x30>
      MCI_FaultAcknowledged(pMCI);
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7fd fe9e 	bl	800191c <MCI_FaultAcknowledged>
    break;
 8003be0:	e7ea      	b.n	8003bb8 <UI_ExecCmd+0x30>
      MCI_EncoderAlign(pMCI);
 8003be2:	4620      	mov	r0, r4
 8003be4:	f7fd fe9e 	bl	8001924 <MCI_EncoderAlign>
    break;
 8003be8:	e7e6      	b.n	8003bb8 <UI_ExecCmd+0x30>
      MCI_Clear_Iqdref(pMCI);
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7fd ff74 	bl	8001ad8 <MCI_Clear_Iqdref>
    break;
 8003bf0:	e7e2      	b.n	8003bb8 <UI_ExecCmd+0x30>
 8003bf2:	bf00      	nop

08003bf4 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8003bf4:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003bf6:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003bf8:	f890 c014 	ldrb.w	ip, [r0, #20]
 8003bfc:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003bfe:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8003c02:	fb83 c301 	smull	ip, r3, r3, r1
 8003c06:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003c0a:	b209      	sxth	r1, r1
 8003c0c:	f7fd fe5a 	bl	80018c4 <MCI_ExecSpeedRamp>
  return true;
}
 8003c10:	2001      	movs	r0, #1
 8003c12:	bd08      	pop	{r3, pc}
 8003c14:	2aaaaaab 	.word	0x2aaaaaab

08003c18 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8003c18:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003c1a:	6883      	ldr	r3, [r0, #8]
 8003c1c:	f890 c014 	ldrb.w	ip, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8003c20:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8003c24:	f7fd fe58 	bl	80018d8 <MCI_ExecTorqueRamp>
  return true;
}
 8003c28:	2001      	movs	r0, #1
 8003c2a:	bd08      	pop	{r3, pc}

08003c2c <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	4617      	mov	r7, r2
 8003c30:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003c32:	7d02      	ldrb	r2, [r0, #20]
 8003c34:	68c3      	ldr	r3, [r0, #12]
 8003c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3a:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 8003c3c:	b18c      	cbz	r4, 8003c62 <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003c3e:	4620      	mov	r0, r4
 8003c40:	460d      	mov	r5, r1
 8003c42:	f005 fb45 	bl	80092d0 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003c46:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003c48:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f005 fb46 	bl	80092dc <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003c50:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003c52:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003c54:	4620      	mov	r0, r4
 8003c56:	f005 fb49 	bl	80092ec <RUC_GetPhaseFinalTorque>
 8003c5a:	9b06      	ldr	r3, [sp, #24]
 8003c5c:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8003c5e:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8003c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8003c62:	4620      	mov	r0, r4
}
 8003c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c66:	bf00      	nop

08003c68 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	461e      	mov	r6, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003c6c:	7d05      	ldrb	r5, [r0, #20]
 8003c6e:	68c3      	ldr	r3, [r0, #12]
{
 8003c70:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003c74:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003c78:	695d      	ldr	r5, [r3, #20]
{
 8003c7a:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f005 fb15 	bl	80092ac <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8003c82:	4632      	mov	r2, r6
 8003c84:	4621      	mov	r1, r4
 8003c86:	4628      	mov	r0, r5
 8003c88:	f005 fb16 	bl	80092b8 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	463a      	mov	r2, r7
 8003c90:	4621      	mov	r1, r4
 8003c92:	f005 fb17 	bl	80092c4 <RUC_SetPhaseFinalTorque>
  return true;
}
 8003c96:	2001      	movs	r0, #1
 8003c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c9a:	bf00      	nop

08003c9c <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8003c9c:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003c9e:	f890 c014 	ldrb.w	ip, [r0, #20]
 8003ca2:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8003ca4:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8003ca8:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8003cac:	9901      	ldr	r1, [sp, #4]
 8003cae:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 8003cb2:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8003cb4:	f7fd be1a 	b.w	80018ec <MCI_SetCurrentReferences>

08003cb8 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8003cb8:	2000      	movs	r0, #0
 8003cba:	4770      	bx	lr

08003cbc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cbc:	4a03      	ldr	r2, [pc, #12]	@ (8003ccc <SystemInit+0x10>)
 8003cbe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003cc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cc6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cca:	4770      	bx	lr
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <HAL_Init+0x30>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cda:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ce2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cec:	2003      	movs	r0, #3
 8003cee:	f000 fa51 	bl	8004194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cf2:	200f      	movs	r0, #15
 8003cf4:	f7ff faba 	bl	800326c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cf8:	f7ff f926 	bl	8002f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	bd08      	pop	{r3, pc}
 8003d00:	40023c00 	.word	0x40023c00

08003d04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003d04:	4a03      	ldr	r2, [pc, #12]	@ (8003d14 <HAL_IncTick+0x10>)
 8003d06:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <HAL_IncTick+0x14>)
 8003d08:	6811      	ldr	r1, [r2, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	440b      	add	r3, r1
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	200014a8 	.word	0x200014a8
 8003d18:	200005e8 	.word	0x200005e8

08003d1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003d1c:	4b01      	ldr	r3, [pc, #4]	@ (8003d24 <HAL_GetTick+0x8>)
 8003d1e:	6818      	ldr	r0, [r3, #0]
}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	200014a8 	.word	0x200014a8

08003d28 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	f000 809e 	beq.w	8003e6a <HAL_ADC_Init+0x142>
{
 8003d2e:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d30:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003d32:	4604      	mov	r4, r0
 8003d34:	b13d      	cbz	r5, 8003d46 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d38:	06db      	lsls	r3, r3, #27
 8003d3a:	d50c      	bpl.n	8003d56 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 8003d42:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003d44:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003d46:	f7ff f91f 	bl	8002f88 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003d4a:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003d4e:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d52:	06db      	lsls	r3, r3, #27
 8003d54:	d4f2      	bmi.n	8003d3c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003d56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d58:	4a47      	ldr	r2, [pc, #284]	@ (8003e78 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 8003d5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d5e:	f023 0302 	bic.w	r3, r3, #2
 8003d62:	f043 0302 	orr.w	r3, r3, #2
 8003d66:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d68:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d6a:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d6c:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8003d70:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d72:	6851      	ldr	r1, [r2, #4]
 8003d74:	6860      	ldr	r0, [r4, #4]
 8003d76:	4301      	orrs	r1, r0
 8003d78:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d7a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d7c:	6920      	ldr	r0, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d7e:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d8e:	685a      	ldr	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d90:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d92:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003d96:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d9e:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003da0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003da2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	4302      	orrs	r2, r0
 8003dac:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dae:	4a33      	ldr	r2, [pc, #204]	@ (8003e7c <HAL_ADC_Init+0x154>)
 8003db0:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003db2:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003db4:	d051      	beq.n	8003e5a <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003db6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003dba:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4311      	orrs	r1, r2
 8003dc2:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003dca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	4302      	orrs	r2, r0
 8003dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	f022 0202 	bic.w	r2, r2, #2
 8003dd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	7e21      	ldrb	r1, [r4, #24]
 8003dde:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003de2:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003de4:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	d040      	beq.n	8003e6e <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003dec:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003df0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003df4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003dfc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	3901      	subs	r1, #1
 8003e02:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003e06:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e0a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e0c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003e10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e14:	3901      	subs	r1, #1
 8003e16:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e1c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e1e:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8003e2c:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8003e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e3a:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003e3c:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e3e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8003e42:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003e44:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003e46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e48:	f023 0303 	bic.w	r3, r3, #3
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8003e52:	2300      	movs	r3, #0
 8003e54:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003e58:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	e7b3      	b.n	8003dd2 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8003e6a:	2001      	movs	r0, #1
}
 8003e6c:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	e7c7      	b.n	8003e08 <HAL_ADC_Init+0xe0>
 8003e78:	40012300 	.word	0x40012300
 8003e7c:	0f000001 	.word	0x0f000001

08003e80 <HAL_ADC_ConfigChannel>:
{
 8003e80:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003e82:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8003e86:	b082      	sub	sp, #8
 8003e88:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8003e8a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003e8c:	f04f 0000 	mov.w	r0, #0
 8003e90:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003e92:	f000 809e 	beq.w	8003fd2 <HAL_ADC_ConfigChannel+0x152>
 8003e96:	2301      	movs	r3, #1
 8003e98:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e9c:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e9e:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ea0:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ea2:	2d09      	cmp	r5, #9
 8003ea4:	b2a8      	uxth	r0, r5
 8003ea6:	d828      	bhi.n	8003efa <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ea8:	691e      	ldr	r6, [r3, #16]
 8003eaa:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8003eae:	f04f 0c07 	mov.w	ip, #7
 8003eb2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003eb6:	ea26 060c 	bic.w	r6, r6, ip
 8003eba:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ebc:	691e      	ldr	r6, [r3, #16]
 8003ebe:	fa04 f40e 	lsl.w	r4, r4, lr
 8003ec2:	4334      	orrs	r4, r6
 8003ec4:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 8003ec6:	684c      	ldr	r4, [r1, #4]
 8003ec8:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003eca:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8003ece:	d82a      	bhi.n	8003f26 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ed0:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003ed2:	3905      	subs	r1, #5
 8003ed4:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ed8:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003eda:	fa0c f101 	lsl.w	r1, ip, r1
 8003ede:	ea24 0101 	bic.w	r1, r4, r1
 8003ee2:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ee4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ee6:	4308      	orrs	r0, r1
 8003ee8:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003eea:	493b      	ldr	r1, [pc, #236]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x158>)
 8003eec:	428b      	cmp	r3, r1
 8003eee:	d02b      	beq.n	8003f48 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 8003ef6:	b002      	add	sp, #8
 8003ef8:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003efa:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8003efe:	68de      	ldr	r6, [r3, #12]
 8003f00:	f1ac 0c1e 	sub.w	ip, ip, #30
 8003f04:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f08:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f0c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003f10:	ea26 060c 	bic.w	r6, r6, ip
 8003f14:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f16:	68de      	ldr	r6, [r3, #12]
 8003f18:	4334      	orrs	r4, r6
 8003f1a:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 8003f1c:	684c      	ldr	r4, [r1, #4]
 8003f1e:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f20:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8003f24:	d9d4      	bls.n	8003ed0 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8003f26:	2c0c      	cmp	r4, #12
 8003f28:	d81f      	bhi.n	8003f6a <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f2a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003f2c:	3923      	subs	r1, #35	@ 0x23
 8003f2e:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f30:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f32:	fa06 f101 	lsl.w	r1, r6, r1
 8003f36:	ea24 0101 	bic.w	r1, r4, r1
 8003f3a:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f3e:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f40:	4925      	ldr	r1, [pc, #148]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f42:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f44:	428b      	cmp	r3, r1
 8003f46:	d1d3      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x70>
 8003f48:	2d12      	cmp	r5, #18
 8003f4a:	d01b      	beq.n	8003f84 <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f4c:	4b23      	ldr	r3, [pc, #140]	@ (8003fdc <HAL_ADC_ConfigChannel+0x15c>)
 8003f4e:	429d      	cmp	r5, r3
 8003f50:	d022      	beq.n	8003f98 <HAL_ADC_ConfigChannel+0x118>
 8003f52:	2d11      	cmp	r5, #17
 8003f54:	d1cc      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f56:	4b22      	ldr	r3, [pc, #136]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x160>)
 8003f58:	6859      	ldr	r1, [r3, #4]
 8003f5a:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8003f5e:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8003f66:	6059      	str	r1, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f68:	e7c2      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f6a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8003f6c:	3941      	subs	r1, #65	@ 0x41
 8003f6e:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f70:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f72:	fa06 f101 	lsl.w	r1, r6, r1
 8003f76:	ea24 0101 	bic.w	r1, r4, r1
 8003f7a:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f7e:	4308      	orrs	r0, r1
 8003f80:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8003f82:	e7b2      	b.n	8003eea <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f84:	4b16      	ldr	r3, [pc, #88]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x160>)
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8003f8c:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8003f94:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f96:	e7ab      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f98:	4b11      	ldr	r3, [pc, #68]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f9a:	4c12      	ldr	r4, [pc, #72]	@ (8003fe4 <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f9c:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f9e:	4812      	ldr	r0, [pc, #72]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003fa0:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8003fa4:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003fa6:	6859      	ldr	r1, [r3, #4]
 8003fa8:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8003fac:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	fba0 0303 	umull	r0, r3, r0, r3
 8003fb4:	0c9b      	lsrs	r3, r3, #18
 8003fb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003fbe:	9b01      	ldr	r3, [sp, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d095      	beq.n	8003ef0 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8003fc4:	9b01      	ldr	r3, [sp, #4]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003fca:	9b01      	ldr	r3, [sp, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f9      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x144>
 8003fd0:	e78e      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003fd2:	2002      	movs	r0, #2
}
 8003fd4:	b002      	add	sp, #8
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	40012000 	.word	0x40012000
 8003fdc:	10000012 	.word	0x10000012
 8003fe0:	40012300 	.word	0x40012300
 8003fe4:	200005e4 	.word	0x200005e4
 8003fe8:	431bde83 	.word	0x431bde83

08003fec <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003fec:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fee:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003ff2:	698d      	ldr	r5, [r1, #24]
  __HAL_LOCK(hadc);
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	f000 80c2 	beq.w	800417e <HAL_ADCEx_InjectedConfigChannel+0x192>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004000:	680c      	ldr	r4, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004002:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004004:	688a      	ldr	r2, [r1, #8]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004006:	2c09      	cmp	r4, #9
 8004008:	4684      	mov	ip, r0
 800400a:	b2a0      	uxth	r0, r4
 800400c:	d861      	bhi.n	80040d2 <HAL_ADCEx_InjectedConfigChannel+0xe6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800400e:	691e      	ldr	r6, [r3, #16]
 8004010:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8004014:	2707      	movs	r7, #7
 8004016:	fa07 f70e 	lsl.w	r7, r7, lr
 800401a:	ea26 0607 	bic.w	r6, r6, r7
 800401e:	611e      	str	r6, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004020:	691e      	ldr	r6, [r3, #16]
 8004022:	fa02 f20e 	lsl.w	r2, r2, lr
 8004026:	4332      	orrs	r2, r6
 8004028:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800402a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800402c:	690f      	ldr	r7, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800402e:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004030:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004034:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004036:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004038:	f107 3eff 	add.w	lr, r7, #4294967295
 800403c:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 8004040:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004042:	1cf2      	adds	r2, r6, #3
 8004044:	1bd2      	subs	r2, r2, r7
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 800404a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800404e:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004052:	4090      	lsls	r0, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004054:	fa0e f202 	lsl.w	r2, lr, r2
 8004058:	ea27 0202 	bic.w	r2, r7, r2
 800405c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800405e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004060:	4310      	orrs	r0, r2
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004062:	4a48      	ldr	r2, [pc, #288]	@ (8004184 <HAL_ADCEx_InjectedConfigChannel+0x198>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004064:	6398      	str	r0, [r3, #56]	@ 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004066:	4295      	cmp	r5, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800406e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004070:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004072:	d065      	beq.n	8004140 <HAL_ADCEx_InjectedConfigChannel+0x154>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004074:	4315      	orrs	r5, r2
 8004076:	609d      	str	r5, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004078:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800407a:	69c8      	ldr	r0, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800407c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	4302      	orrs	r2, r0
 8004086:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004088:	7d4a      	ldrb	r2, [r1, #21]
 800408a:	2a00      	cmp	r2, #0
 800408c:	d031      	beq.n	80040f2 <HAL_ADCEx_InjectedConfigChannel+0x106>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004094:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004096:	7d0a      	ldrb	r2, [r1, #20]
 8004098:	2a00      	cmp	r2, #0
 800409a:	d031      	beq.n	8004100 <HAL_ADCEx_InjectedConfigChannel+0x114>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040a2:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 80040a4:	2e02      	cmp	r6, #2
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80040a6:	68ca      	ldr	r2, [r1, #12]
  switch(sConfigInjected->InjectedRank)
 80040a8:	d031      	beq.n	800410e <HAL_ADCEx_InjectedConfigChannel+0x122>
 80040aa:	2e03      	cmp	r6, #3
 80040ac:	d056      	beq.n	800415c <HAL_ADCEx_InjectedConfigChannel+0x170>
 80040ae:	2e01      	cmp	r6, #1
 80040b0:	d04a      	beq.n	8004148 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80040b2:	6a19      	ldr	r1, [r3, #32]
 80040b4:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 80040b8:	f021 010f 	bic.w	r1, r1, #15
 80040bc:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80040be:	6a19      	ldr	r1, [r3, #32]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80040c4:	4a30      	ldr	r2, [pc, #192]	@ (8004188 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02d      	beq.n	8004126 <HAL_ADCEx_InjectedConfigChannel+0x13a>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ca:	2000      	movs	r0, #0
 80040cc:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
}
 80040d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80040d2:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 80040d6:	68df      	ldr	r7, [r3, #12]
 80040d8:	3e1e      	subs	r6, #30
 80040da:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80040de:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80040e0:	fa0e f606 	lsl.w	r6, lr, r6
 80040e4:	ea27 0606 	bic.w	r6, r7, r6
 80040e8:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80040ea:	68de      	ldr	r6, [r3, #12]
 80040ec:	4332      	orrs	r2, r6
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	e79b      	b.n	800402a <HAL_ADCEx_InjectedConfigChannel+0x3e>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f8:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80040fa:	7d0a      	ldrb	r2, [r1, #20]
 80040fc:	2a00      	cmp	r2, #0
 80040fe:	d1cd      	bne.n	800409c <HAL_ADCEx_InjectedConfigChannel+0xb0>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004106:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8004108:	2e02      	cmp	r6, #2
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800410a:	68ca      	ldr	r2, [r1, #12]
  switch(sConfigInjected->InjectedRank)
 800410c:	d1cd      	bne.n	80040aa <HAL_ADCEx_InjectedConfigChannel+0xbe>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800410e:	6999      	ldr	r1, [r3, #24]
 8004110:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8004114:	f021 010f 	bic.w	r1, r1, #15
 8004118:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800411a:	6999      	ldr	r1, [r3, #24]
 800411c:	430a      	orrs	r2, r1
 800411e:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004120:	4a19      	ldr	r2, [pc, #100]	@ (8004188 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d1d1      	bne.n	80040ca <HAL_ADCEx_InjectedConfigChannel+0xde>
 8004126:	2c12      	cmp	r4, #18
 8004128:	d022      	beq.n	8004170 <HAL_ADCEx_InjectedConfigChannel+0x184>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800412a:	4b18      	ldr	r3, [pc, #96]	@ (800418c <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 800412c:	429c      	cmp	r4, r3
 800412e:	d001      	beq.n	8004134 <HAL_ADCEx_InjectedConfigChannel+0x148>
 8004130:	2c11      	cmp	r4, #17
 8004132:	d1ca      	bne.n	80040ca <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004134:	4a16      	ldr	r2, [pc, #88]	@ (8004190 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8004136:	6853      	ldr	r3, [r2, #4]
 8004138:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800413c:	6053      	str	r3, [r2, #4]
 800413e:	e7c4      	b.n	80040ca <HAL_ADCEx_InjectedConfigChannel+0xde>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8004140:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004144:	609a      	str	r2, [r3, #8]
 8004146:	e79f      	b.n	8004088 <HAL_ADCEx_InjectedConfigChannel+0x9c>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004148:	6959      	ldr	r1, [r3, #20]
 800414a:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 800414e:	f021 010f 	bic.w	r1, r1, #15
 8004152:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004154:	6959      	ldr	r1, [r3, #20]
 8004156:	430a      	orrs	r2, r1
 8004158:	615a      	str	r2, [r3, #20]
      break;
 800415a:	e7b3      	b.n	80040c4 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800415c:	69d9      	ldr	r1, [r3, #28]
 800415e:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8004162:	f021 010f 	bic.w	r1, r1, #15
 8004166:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004168:	69d9      	ldr	r1, [r3, #28]
 800416a:	430a      	orrs	r2, r1
 800416c:	61da      	str	r2, [r3, #28]
      break;
 800416e:	e7a9      	b.n	80040c4 <HAL_ADCEx_InjectedConfigChannel+0xd8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004170:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8004174:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004178:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800417c:	e7a5      	b.n	80040ca <HAL_ADCEx_InjectedConfigChannel+0xde>
  __HAL_LOCK(hadc);
 800417e:	2002      	movs	r0, #2
}
 8004180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004182:	bf00      	nop
 8004184:	000f0001 	.word	0x000f0001
 8004188:	40012000 	.word	0x40012000
 800418c:	10000012 	.word	0x10000012
 8004190:	40012300 	.word	0x40012300

08004194 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004194:	4907      	ldr	r1, [pc, #28]	@ (80041b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004196:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004198:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800419a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800419e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041a2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041a4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041a6:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80041ae:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <HAL_NVIC_SetPriority+0x70>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041c0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041c2:	f1c3 0e07 	rsb	lr, r3, #7
 80041c6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ca:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041ce:	bf28      	it	cs
 80041d0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041d4:	f1bc 0f06 	cmp.w	ip, #6
 80041d8:	d91c      	bls.n	8004214 <HAL_NVIC_SetPriority+0x5c>
 80041da:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
 80041e2:	fa03 f30c 	lsl.w	r3, r3, ip
 80041e6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295
 80041ee:	fa03 f30e 	lsl.w	r3, r3, lr
 80041f2:	ea21 0303 	bic.w	r3, r1, r3
 80041f6:	fa03 f30c 	lsl.w	r3, r3, ip
 80041fa:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fc:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80041fe:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004200:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004202:	db0a      	blt.n	800421a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004204:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004208:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800420c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004210:	f85d fb04 	ldr.w	pc, [sp], #4
 8004214:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004216:	4694      	mov	ip, r2
 8004218:	e7e7      	b.n	80041ea <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421a:	4a04      	ldr	r2, [pc, #16]	@ (800422c <HAL_NVIC_SetPriority+0x74>)
 800421c:	f000 000f 	and.w	r0, r0, #15
 8004220:	4402      	add	r2, r0
 8004222:	7613      	strb	r3, [r2, #24]
 8004224:	f85d fb04 	ldr.w	pc, [sp], #4
 8004228:	e000ed00 	.word	0xe000ed00
 800422c:	e000ecfc 	.word	0xe000ecfc

08004230 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004230:	2800      	cmp	r0, #0
 8004232:	db07      	blt.n	8004244 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004234:	0941      	lsrs	r1, r0, #5
 8004236:	4a04      	ldr	r2, [pc, #16]	@ (8004248 <HAL_NVIC_EnableIRQ+0x18>)
 8004238:	f000 001f 	and.w	r0, r0, #31
 800423c:	2301      	movs	r3, #1
 800423e:	4083      	lsls	r3, r0
 8004240:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	e000e100 	.word	0xe000e100

0800424c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800424c:	2800      	cmp	r0, #0
 800424e:	db0c      	blt.n	800426a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004250:	0943      	lsrs	r3, r0, #5
 8004252:	4906      	ldr	r1, [pc, #24]	@ (800426c <HAL_NVIC_DisableIRQ+0x20>)
 8004254:	f000 001f 	and.w	r0, r0, #31
 8004258:	3320      	adds	r3, #32
 800425a:	2201      	movs	r2, #1
 800425c:	4082      	lsls	r2, r0
 800425e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004262:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004266:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800426a:	4770      	bx	lr
 800426c:	e000e100 	.word	0xe000e100

08004270 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8004270:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004274:	4905      	ldr	r1, [pc, #20]	@ (800428c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004276:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004278:	68ca      	ldr	r2, [r1, #12]
 800427a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800427e:	4313      	orrs	r3, r2
 8004280:	60cb      	str	r3, [r1, #12]
 8004282:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004286:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8004288:	e7fd      	b.n	8004286 <HAL_NVIC_SystemReset+0x16>
 800428a:	bf00      	nop
 800428c:	e000ed00 	.word	0xe000ed00
 8004290:	05fa0004 	.word	0x05fa0004

08004294 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004294:	3801      	subs	r0, #1
 8004296:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800429a:	d301      	bcc.n	80042a0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800429c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800429e:	4770      	bx	lr
{
 80042a0:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a6:	4c07      	ldr	r4, [pc, #28]	@ (80042c4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042aa:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80042ae:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042b4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b8:	619a      	str	r2, [r3, #24]
}
 80042ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042be:	6119      	str	r1, [r3, #16]
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042cc:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ce:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d0:	f8df a200 	ldr.w	sl, [pc, #512]	@ 80044d4 <HAL_GPIO_Init+0x20c>
{
 80042d4:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 80042d6:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042da:	4689      	mov	r9, r1
 80042dc:	e003      	b.n	80042e6 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042de:	3301      	adds	r3, #1
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	f000 808c 	beq.w	80043fe <HAL_GPIO_Init+0x136>
    ioposition = 0x01U << position;
 80042e6:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ea:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 80042ee:	43a2      	bics	r2, r4
 80042f0:	d1f5      	bne.n	80042de <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042f2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80042f6:	f001 0203 	and.w	r2, r1, #3
 80042fa:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042fe:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004300:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004302:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004306:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004308:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800430c:	d97a      	bls.n	8004404 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800430e:	2a03      	cmp	r2, #3
 8004310:	f040 80b1 	bne.w	8004476 <HAL_GPIO_Init+0x1ae>
      temp = GPIOx->MODER;
 8004314:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004316:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800431a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800431c:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800431e:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004322:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004324:	d0db      	beq.n	80042de <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004326:	2200      	movs	r2, #0
 8004328:	9203      	str	r2, [sp, #12]
 800432a:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800432e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004332:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8004336:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800433a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800433e:	9203      	str	r2, [sp, #12]
 8004340:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004342:	f023 0203 	bic.w	r2, r3, #3
 8004346:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800434a:	f003 0703 	and.w	r7, r3, #3
 800434e:	260f      	movs	r6, #15
 8004350:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8004354:	00bf      	lsls	r7, r7, #2
 8004356:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800435a:	4e5b      	ldr	r6, [pc, #364]	@ (80044c8 <HAL_GPIO_Init+0x200>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800435c:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800435e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004360:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004364:	d022      	beq.n	80043ac <HAL_GPIO_Init+0xe4>
 8004366:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800436a:	42b0      	cmp	r0, r6
 800436c:	f000 808e 	beq.w	800448c <HAL_GPIO_Init+0x1c4>
 8004370:	4e56      	ldr	r6, [pc, #344]	@ (80044cc <HAL_GPIO_Init+0x204>)
 8004372:	42b0      	cmp	r0, r6
 8004374:	f000 8090 	beq.w	8004498 <HAL_GPIO_Init+0x1d0>
 8004378:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 80044d8 <HAL_GPIO_Init+0x210>
 800437c:	4560      	cmp	r0, ip
 800437e:	f000 8091 	beq.w	80044a4 <HAL_GPIO_Init+0x1dc>
 8004382:	f8df c158 	ldr.w	ip, [pc, #344]	@ 80044dc <HAL_GPIO_Init+0x214>
 8004386:	4560      	cmp	r0, ip
 8004388:	f000 8092 	beq.w	80044b0 <HAL_GPIO_Init+0x1e8>
 800438c:	f8df c150 	ldr.w	ip, [pc, #336]	@ 80044e0 <HAL_GPIO_Init+0x218>
 8004390:	4560      	cmp	r0, ip
 8004392:	f000 8093 	beq.w	80044bc <HAL_GPIO_Init+0x1f4>
 8004396:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 80044e4 <HAL_GPIO_Init+0x21c>
 800439a:	4560      	cmp	r0, ip
 800439c:	bf0c      	ite	eq
 800439e:	f04f 0c06 	moveq.w	ip, #6
 80043a2:	f04f 0c07 	movne.w	ip, #7
 80043a6:	fa0c f707 	lsl.w	r7, ip, r7
 80043aa:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ac:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ae:	4a48      	ldr	r2, [pc, #288]	@ (80044d0 <HAL_GPIO_Init+0x208>)
 80043b0:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043b2:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80043b4:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80043b8:	4e45      	ldr	r6, [pc, #276]	@ (80044d0 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 80043ba:	bf54      	ite	pl
 80043bc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80043be:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 80043c2:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80043c4:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80043c6:	4e42      	ldr	r6, [pc, #264]	@ (80044d0 <HAL_GPIO_Init+0x208>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043c8:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 80043ca:	bf54      	ite	pl
 80043cc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80043ce:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 80043d2:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 80043d4:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043d6:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80043d8:	4e3d      	ldr	r6, [pc, #244]	@ (80044d0 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 80043da:	bf54      	ite	pl
 80043dc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80043de:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 80043e2:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043e4:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043e6:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043e8:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80043ec:	4938      	ldr	r1, [pc, #224]	@ (80044d0 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 80043ee:	bf54      	ite	pl
 80043f0:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80043f2:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043f6:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 80043f8:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043fa:	f47f af74 	bne.w	80042e6 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 80043fe:	b005      	add	sp, #20
 8004400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8004404:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004406:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800440a:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800440e:	fa07 f70c 	lsl.w	r7, r7, ip
 8004412:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004416:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004418:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800441a:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800441e:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8004422:	409f      	lsls	r7, r3
 8004424:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004428:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800442a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800442c:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004430:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004434:	fa07 f70c 	lsl.w	r7, r7, ip
 8004438:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800443c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800443e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004440:	f47f af68 	bne.w	8004314 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8004444:	08df      	lsrs	r7, r3, #3
 8004446:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800444a:	9701      	str	r7, [sp, #4]
 800444c:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800444e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8004452:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004454:	f003 0e07 	and.w	lr, r3, #7
 8004458:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800445c:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800445e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004462:	fa06 fe0e 	lsl.w	lr, r6, lr
 8004466:	9e00      	ldr	r6, [sp, #0]
 8004468:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 800446c:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800446e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004472:	6237      	str	r7, [r6, #32]
 8004474:	e74e      	b.n	8004314 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8004476:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004478:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800447c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004480:	fa07 f70c 	lsl.w	r7, r7, ip
 8004484:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004488:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800448a:	e743      	b.n	8004314 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800448c:	f04f 0c01 	mov.w	ip, #1
 8004490:	fa0c f707 	lsl.w	r7, ip, r7
 8004494:	433d      	orrs	r5, r7
 8004496:	e789      	b.n	80043ac <HAL_GPIO_Init+0xe4>
 8004498:	f04f 0c02 	mov.w	ip, #2
 800449c:	fa0c f707 	lsl.w	r7, ip, r7
 80044a0:	433d      	orrs	r5, r7
 80044a2:	e783      	b.n	80043ac <HAL_GPIO_Init+0xe4>
 80044a4:	f04f 0c03 	mov.w	ip, #3
 80044a8:	fa0c f707 	lsl.w	r7, ip, r7
 80044ac:	433d      	orrs	r5, r7
 80044ae:	e77d      	b.n	80043ac <HAL_GPIO_Init+0xe4>
 80044b0:	f04f 0c04 	mov.w	ip, #4
 80044b4:	fa0c f707 	lsl.w	r7, ip, r7
 80044b8:	433d      	orrs	r5, r7
 80044ba:	e777      	b.n	80043ac <HAL_GPIO_Init+0xe4>
 80044bc:	f04f 0c05 	mov.w	ip, #5
 80044c0:	fa0c f707 	lsl.w	r7, ip, r7
 80044c4:	433d      	orrs	r5, r7
 80044c6:	e771      	b.n	80043ac <HAL_GPIO_Init+0xe4>
 80044c8:	40020000 	.word	0x40020000
 80044cc:	40020800 	.word	0x40020800
 80044d0:	40013c00 	.word	0x40013c00
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40020c00 	.word	0x40020c00
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40021400 	.word	0x40021400
 80044e4:	40021800 	.word	0x40021800

080044e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ec:	2300      	movs	r3, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80044ee:	4f4e      	ldr	r7, [pc, #312]	@ (8004628 <HAL_GPIO_DeInit+0x140>)
{
 80044f0:	b083      	sub	sp, #12
    ioposition = 0x01U << position;
 80044f2:	2601      	movs	r6, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80044f4:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044f8:	f04f 0a03 	mov.w	sl, #3
 80044fc:	e002      	b.n	8004504 <HAL_GPIO_DeInit+0x1c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044fe:	3301      	adds	r3, #1
 8004500:	2b10      	cmp	r3, #16
 8004502:	d070      	beq.n	80045e6 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8004504:	fa06 f203 	lsl.w	r2, r6, r3
    if(iocurrent == ioposition)
 8004508:	ea32 0401 	bics.w	r4, r2, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800450c:	ea02 0c01 	and.w	ip, r2, r1
    if(iocurrent == ioposition)
 8004510:	d1f5      	bne.n	80044fe <HAL_GPIO_DeInit+0x16>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004512:	f023 0503 	bic.w	r5, r3, #3
 8004516:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800451a:	f003 0403 	and.w	r4, r3, #3
 800451e:	00a4      	lsls	r4, r4, #2
 8004520:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 8004524:	fa09 f804 	lsl.w	r8, r9, r4
 8004528:	9401      	str	r4, [sp, #4]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800452a:	4c40      	ldr	r4, [pc, #256]	@ (800462c <HAL_GPIO_DeInit+0x144>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 800452c:	f8d5 e008 	ldr.w	lr, [r5, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004530:	42a0      	cmp	r0, r4
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004532:	ea08 0e0e 	and.w	lr, r8, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004536:	d059      	beq.n	80045ec <HAL_GPIO_DeInit+0x104>
 8004538:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800453c:	42a0      	cmp	r0, r4
 800453e:	d057      	beq.n	80045f0 <HAL_GPIO_DeInit+0x108>
 8004540:	4c3b      	ldr	r4, [pc, #236]	@ (8004630 <HAL_GPIO_DeInit+0x148>)
 8004542:	42a0      	cmp	r0, r4
 8004544:	d058      	beq.n	80045f8 <HAL_GPIO_DeInit+0x110>
 8004546:	4c3b      	ldr	r4, [pc, #236]	@ (8004634 <HAL_GPIO_DeInit+0x14c>)
 8004548:	42a0      	cmp	r0, r4
 800454a:	d05b      	beq.n	8004604 <HAL_GPIO_DeInit+0x11c>
 800454c:	4c3a      	ldr	r4, [pc, #232]	@ (8004638 <HAL_GPIO_DeInit+0x150>)
 800454e:	42a0      	cmp	r0, r4
 8004550:	d05e      	beq.n	8004610 <HAL_GPIO_DeInit+0x128>
 8004552:	f8df b0e8 	ldr.w	fp, [pc, #232]	@ 800463c <HAL_GPIO_DeInit+0x154>
 8004556:	4558      	cmp	r0, fp
 8004558:	d060      	beq.n	800461c <HAL_GPIO_DeInit+0x134>
 800455a:	f8df b0e4 	ldr.w	fp, [pc, #228]	@ 8004640 <HAL_GPIO_DeInit+0x158>
 800455e:	9c01      	ldr	r4, [sp, #4]
 8004560:	4558      	cmp	r0, fp
 8004562:	bf14      	ite	ne
 8004564:	f04f 0b07 	movne.w	fp, #7
 8004568:	f04f 0b06 	moveq.w	fp, #6
 800456c:	fa0b f404 	lsl.w	r4, fp, r4
 8004570:	45a6      	cmp	lr, r4
 8004572:	d113      	bne.n	800459c <HAL_GPIO_DeInit+0xb4>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004574:	683c      	ldr	r4, [r7, #0]
 8004576:	ea24 040c 	bic.w	r4, r4, ip
 800457a:	603c      	str	r4, [r7, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800457c:	687c      	ldr	r4, [r7, #4]
 800457e:	ea24 040c 	bic.w	r4, r4, ip
 8004582:	607c      	str	r4, [r7, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004584:	68fc      	ldr	r4, [r7, #12]
 8004586:	ea24 040c 	bic.w	r4, r4, ip
 800458a:	60fc      	str	r4, [r7, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800458c:	68bc      	ldr	r4, [r7, #8]
 800458e:	ea24 040c 	bic.w	r4, r4, ip
 8004592:	60bc      	str	r4, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004594:	68ac      	ldr	r4, [r5, #8]
 8004596:	ea24 0408 	bic.w	r4, r4, r8
 800459a:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800459c:	6804      	ldr	r4, [r0, #0]
 800459e:	005d      	lsls	r5, r3, #1
 80045a0:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045a4:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045a8:	ea24 0405 	bic.w	r4, r4, r5
 80045ac:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80045b0:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045b2:	f003 0407 	and.w	r4, r3, #7
 80045b6:	f8dc e020 	ldr.w	lr, [ip, #32]
 80045ba:	00a4      	lsls	r4, r4, #2
 80045bc:	fa09 f404 	lsl.w	r4, r9, r4
 80045c0:	ea2e 0404 	bic.w	r4, lr, r4
 80045c4:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045c8:	68c4      	ldr	r4, [r0, #12]
 80045ca:	ea24 0405 	bic.w	r4, r4, r5
 80045ce:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045d0:	6844      	ldr	r4, [r0, #4]
 80045d2:	ea24 0202 	bic.w	r2, r4, r2
 80045d6:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045d8:	6882      	ldr	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045da:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045dc:	ea22 0205 	bic.w	r2, r2, r5
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e0:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045e2:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e4:	d18e      	bne.n	8004504 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80045e6:	b003      	add	sp, #12
 80045e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ec:	2400      	movs	r4, #0
 80045ee:	e7bf      	b.n	8004570 <HAL_GPIO_DeInit+0x88>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80045f0:	9c01      	ldr	r4, [sp, #4]
 80045f2:	fa06 f404 	lsl.w	r4, r6, r4
 80045f6:	e7bb      	b.n	8004570 <HAL_GPIO_DeInit+0x88>
 80045f8:	9c01      	ldr	r4, [sp, #4]
 80045fa:	f04f 0b02 	mov.w	fp, #2
 80045fe:	fa0b f404 	lsl.w	r4, fp, r4
 8004602:	e7b5      	b.n	8004570 <HAL_GPIO_DeInit+0x88>
 8004604:	9c01      	ldr	r4, [sp, #4]
 8004606:	f04f 0b03 	mov.w	fp, #3
 800460a:	fa0b f404 	lsl.w	r4, fp, r4
 800460e:	e7af      	b.n	8004570 <HAL_GPIO_DeInit+0x88>
 8004610:	9c01      	ldr	r4, [sp, #4]
 8004612:	f04f 0b04 	mov.w	fp, #4
 8004616:	fa0b f404 	lsl.w	r4, fp, r4
 800461a:	e7a9      	b.n	8004570 <HAL_GPIO_DeInit+0x88>
 800461c:	9c01      	ldr	r4, [sp, #4]
 800461e:	f04f 0b05 	mov.w	fp, #5
 8004622:	fa0b f404 	lsl.w	r4, fp, r4
 8004626:	e7a3      	b.n	8004570 <HAL_GPIO_DeInit+0x88>
 8004628:	40013c00 	.word	0x40013c00
 800462c:	40020000 	.word	0x40020000
 8004630:	40020800 	.word	0x40020800
 8004634:	40020c00 	.word	0x40020c00
 8004638:	40021000 	.word	0x40021000
 800463c:	40021400 	.word	0x40021400
 8004640:	40021800 	.word	0x40021800

08004644 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004644:	b902      	cbnz	r2, 8004648 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004646:	0409      	lsls	r1, r1, #16
 8004648:	6181      	str	r1, [r0, #24]
  }
}
 800464a:	4770      	bx	lr

0800464c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800464c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 800464e:	4c0d      	ldr	r4, [pc, #52]	@ (8004684 <HAL_PWR_EnterSTOPMode+0x38>)
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004650:	4a0d      	ldr	r2, [pc, #52]	@ (8004688 <HAL_PWR_EnterSTOPMode+0x3c>)
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	f023 0303 	bic.w	r3, r3, #3
 8004658:	4303      	orrs	r3, r0
 800465a:	6023      	str	r3, [r4, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800465c:	6913      	ldr	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800465e:	2901      	cmp	r1, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	6113      	str	r3, [r2, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004666:	d00a      	beq.n	800467e <HAL_PWR_EnterSTOPMode+0x32>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004668:	bf40      	sev
    __WFE();
 800466a:	bf20      	wfe
    __WFE();
 800466c:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 800466e:	4a06      	ldr	r2, [pc, #24]	@ (8004688 <HAL_PWR_EnterSTOPMode+0x3c>)
}
 8004670:	f85d 4b04 	ldr.w	r4, [sp], #4
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8004674:	6913      	ldr	r3, [r2, #16]
 8004676:	f023 0304 	bic.w	r3, r3, #4
 800467a:	6113      	str	r3, [r2, #16]
}
 800467c:	4770      	bx	lr
    __WFI();
 800467e:	bf30      	wfi
 8004680:	e7f5      	b.n	800466e <HAL_PWR_EnterSTOPMode+0x22>
 8004682:	bf00      	nop
 8004684:	40007000 	.word	0x40007000
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800468c:	b530      	push	{r4, r5, lr}
 800468e:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	4b19      	ldr	r3, [pc, #100]	@ (80046f8 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004692:	491a      	ldr	r1, [pc, #104]	@ (80046fc <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004694:	4d1a      	ldr	r5, [pc, #104]	@ (8004700 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004696:	2200      	movs	r2, #0
 8004698:	9201      	str	r2, [sp, #4]
 800469a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800469c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80046a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80046a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a8:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046aa:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80046ac:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046ae:	640a      	str	r2, [r1, #64]	@ 0x40
  tickstart = HAL_GetTick();
 80046b0:	f7ff fb34 	bl	8003d1c <HAL_GetTick>
 80046b4:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046b6:	e005      	b.n	80046c4 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046b8:	f7ff fb30 	bl	8003d1c <HAL_GetTick>
 80046bc:	1b00      	subs	r0, r0, r4
 80046be:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80046c2:	d816      	bhi.n	80046f2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046c4:	686b      	ldr	r3, [r5, #4]
 80046c6:	03da      	lsls	r2, r3, #15
 80046c8:	d5f6      	bpl.n	80046b8 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046ca:	4b0c      	ldr	r3, [pc, #48]	@ (80046fc <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046cc:	4d0c      	ldr	r5, [pc, #48]	@ (8004700 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046ce:	2201      	movs	r2, #1
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 80046d2:	f7ff fb23 	bl	8003d1c <HAL_GetTick>
 80046d6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046d8:	e005      	b.n	80046e6 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046da:	f7ff fb1f 	bl	8003d1c <HAL_GetTick>
 80046de:	1b00      	subs	r0, r0, r4
 80046e0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80046e4:	d805      	bhi.n	80046f2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046e6:	686b      	ldr	r3, [r5, #4]
 80046e8:	039b      	lsls	r3, r3, #14
 80046ea:	d5f6      	bpl.n	80046da <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80046ec:	2000      	movs	r0, #0
}
 80046ee:	b003      	add	sp, #12
 80046f0:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80046f2:	2003      	movs	r0, #3
}
 80046f4:	b003      	add	sp, #12
 80046f6:	bd30      	pop	{r4, r5, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	420e0000 	.word	0x420e0000
 8004700:	40007000 	.word	0x40007000

08004704 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004704:	2800      	cmp	r0, #0
 8004706:	f000 8087 	beq.w	8004818 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800470a:	4a48      	ldr	r2, [pc, #288]	@ (800482c <HAL_RCC_ClockConfig+0x128>)
 800470c:	6813      	ldr	r3, [r2, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	428b      	cmp	r3, r1
{
 8004714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004718:	460d      	mov	r5, r1
 800471a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800471c:	d209      	bcs.n	8004732 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	b2cb      	uxtb	r3, r1
 8004720:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	428b      	cmp	r3, r1
 800472a:	d002      	beq.n	8004732 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800472c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 800472e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	0798      	lsls	r0, r3, #30
 8004736:	d514      	bpl.n	8004762 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	0759      	lsls	r1, r3, #29
 800473a:	d504      	bpl.n	8004746 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800473c:	493c      	ldr	r1, [pc, #240]	@ (8004830 <HAL_RCC_ClockConfig+0x12c>)
 800473e:	688a      	ldr	r2, [r1, #8]
 8004740:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8004744:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004746:	071a      	lsls	r2, r3, #28
 8004748:	d504      	bpl.n	8004754 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800474a:	4939      	ldr	r1, [pc, #228]	@ (8004830 <HAL_RCC_ClockConfig+0x12c>)
 800474c:	688a      	ldr	r2, [r1, #8]
 800474e:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8004752:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004754:	4936      	ldr	r1, [pc, #216]	@ (8004830 <HAL_RCC_ClockConfig+0x12c>)
 8004756:	68a0      	ldr	r0, [r4, #8]
 8004758:	688a      	ldr	r2, [r1, #8]
 800475a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800475e:	4302      	orrs	r2, r0
 8004760:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004762:	07df      	lsls	r7, r3, #31
 8004764:	d521      	bpl.n	80047aa <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004766:	6862      	ldr	r2, [r4, #4]
 8004768:	2a01      	cmp	r2, #1
 800476a:	d057      	beq.n	800481c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476c:	1e93      	subs	r3, r2, #2
 800476e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004770:	4b2f      	ldr	r3, [pc, #188]	@ (8004830 <HAL_RCC_ClockConfig+0x12c>)
 8004772:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004774:	d94d      	bls.n	8004812 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004776:	0799      	lsls	r1, r3, #30
 8004778:	d5d8      	bpl.n	800472c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800477a:	4e2d      	ldr	r6, [pc, #180]	@ (8004830 <HAL_RCC_ClockConfig+0x12c>)
 800477c:	68b3      	ldr	r3, [r6, #8]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	4313      	orrs	r3, r2
 8004784:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004786:	f7ff fac9 	bl	8003d1c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800478a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800478e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004790:	e004      	b.n	800479c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004792:	f7ff fac3 	bl	8003d1c <HAL_GetTick>
 8004796:	1bc0      	subs	r0, r0, r7
 8004798:	4540      	cmp	r0, r8
 800479a:	d844      	bhi.n	8004826 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479c:	68b3      	ldr	r3, [r6, #8]
 800479e:	6862      	ldr	r2, [r4, #4]
 80047a0:	f003 030c 	and.w	r3, r3, #12
 80047a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047a8:	d1f3      	bne.n	8004792 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047aa:	4a20      	ldr	r2, [pc, #128]	@ (800482c <HAL_RCC_ClockConfig+0x128>)
 80047ac:	6813      	ldr	r3, [r2, #0]
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	42ab      	cmp	r3, r5
 80047b4:	d906      	bls.n	80047c4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	b2eb      	uxtb	r3, r5
 80047b8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	6813      	ldr	r3, [r2, #0]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	42ab      	cmp	r3, r5
 80047c2:	d1b3      	bne.n	800472c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	075a      	lsls	r2, r3, #29
 80047c8:	d506      	bpl.n	80047d8 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ca:	4919      	ldr	r1, [pc, #100]	@ (8004830 <HAL_RCC_ClockConfig+0x12c>)
 80047cc:	68e0      	ldr	r0, [r4, #12]
 80047ce:	688a      	ldr	r2, [r1, #8]
 80047d0:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80047d4:	4302      	orrs	r2, r0
 80047d6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	071b      	lsls	r3, r3, #28
 80047da:	d507      	bpl.n	80047ec <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047dc:	4a14      	ldr	r2, [pc, #80]	@ (8004830 <HAL_RCC_ClockConfig+0x12c>)
 80047de:	6921      	ldr	r1, [r4, #16]
 80047e0:	6893      	ldr	r3, [r2, #8]
 80047e2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80047e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80047ea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ec:	f000 f870 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 80047f0:	4a0f      	ldr	r2, [pc, #60]	@ (8004830 <HAL_RCC_ClockConfig+0x12c>)
 80047f2:	4c10      	ldr	r4, [pc, #64]	@ (8004834 <HAL_RCC_ClockConfig+0x130>)
 80047f4:	6892      	ldr	r2, [r2, #8]
 80047f6:	4910      	ldr	r1, [pc, #64]	@ (8004838 <HAL_RCC_ClockConfig+0x134>)
 80047f8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80047fc:	4603      	mov	r3, r0
 80047fe:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004800:	480e      	ldr	r0, [pc, #56]	@ (800483c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004802:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004804:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004806:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004808:	f7fe fd30 	bl	800326c <HAL_InitTick>
  return HAL_OK;
 800480c:	2000      	movs	r0, #0
}
 800480e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004812:	0198      	lsls	r0, r3, #6
 8004814:	d4b1      	bmi.n	800477a <HAL_RCC_ClockConfig+0x76>
 8004816:	e789      	b.n	800472c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004818:	2001      	movs	r0, #1
}
 800481a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481c:	4b04      	ldr	r3, [pc, #16]	@ (8004830 <HAL_RCC_ClockConfig+0x12c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	039e      	lsls	r6, r3, #14
 8004822:	d4aa      	bmi.n	800477a <HAL_RCC_ClockConfig+0x76>
 8004824:	e782      	b.n	800472c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004826:	2003      	movs	r0, #3
 8004828:	e781      	b.n	800472e <HAL_RCC_ClockConfig+0x2a>
 800482a:	bf00      	nop
 800482c:	40023c00 	.word	0x40023c00
 8004830:	40023800 	.word	0x40023800
 8004834:	0800a224 	.word	0x0800a224
 8004838:	200005e4 	.word	0x200005e4
 800483c:	200005ec 	.word	0x200005ec

08004840 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004840:	4b01      	ldr	r3, [pc, #4]	@ (8004848 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	200005e4 	.word	0x200005e4

0800484c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800484c:	4b04      	ldr	r3, [pc, #16]	@ (8004860 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800484e:	4905      	ldr	r1, [pc, #20]	@ (8004864 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	4a05      	ldr	r2, [pc, #20]	@ (8004868 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004854:	6808      	ldr	r0, [r1, #0]
 8004856:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800485a:	5cd3      	ldrb	r3, [r2, r3]
}
 800485c:	40d8      	lsrs	r0, r3
 800485e:	4770      	bx	lr
 8004860:	40023800 	.word	0x40023800
 8004864:	200005e4 	.word	0x200005e4
 8004868:	0800a21c 	.word	0x0800a21c

0800486c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800486c:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800486e:	4905      	ldr	r1, [pc, #20]	@ (8004884 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4a05      	ldr	r2, [pc, #20]	@ (8004888 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004874:	6808      	ldr	r0, [r1, #0]
 8004876:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800487a:	5cd3      	ldrb	r3, [r2, r3]
}
 800487c:	40d8      	lsrs	r0, r3
 800487e:	4770      	bx	lr
 8004880:	40023800 	.word	0x40023800
 8004884:	200005e4 	.word	0x200005e4
 8004888:	0800a21c 	.word	0x0800a21c

0800488c <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800488c:	4b0e      	ldr	r3, [pc, #56]	@ (80048c8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800488e:	220f      	movs	r2, #15
 8004890:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	f002 0203 	and.w	r2, r2, #3
 8004898:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80048a0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80048a8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	08db      	lsrs	r3, r3, #3
{
 80048ae:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048b0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048b4:	4c05      	ldr	r4, [pc, #20]	@ (80048cc <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048b6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048b8:	6823      	ldr	r3, [r4, #0]
}
 80048ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	600b      	str	r3, [r1, #0]
}
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40023c00 	.word	0x40023c00

080048d0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d0:	491d      	ldr	r1, [pc, #116]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x78>)
{
 80048d2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d4:	688b      	ldr	r3, [r1, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d01a      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x44>
 80048de:	2b0c      	cmp	r3, #12
 80048e0:	d116      	bne.n	8004910 <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048e4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e6:	6849      	ldr	r1, [r1, #4]
 80048e8:	4818      	ldr	r0, [pc, #96]	@ (800494c <HAL_RCC_GetSysClockFreq+0x7c>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ea:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80048f2:	bf18      	it	ne
 80048f4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fa:	fba1 0100 	umull	r0, r1, r1, r0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fe:	f7fc f8a5 	bl	8000a4c <__aeabi_uldivmod>
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004902:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x78>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 800490a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800490e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004910:	480e      	ldr	r0, [pc, #56]	@ (800494c <HAL_RCC_GetSysClockFreq+0x7c>)
}
 8004912:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004914:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004916:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004918:	6849      	ldr	r1, [r1, #4]
 800491a:	480c      	ldr	r0, [pc, #48]	@ (800494c <HAL_RCC_GetSysClockFreq+0x7c>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800491c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004920:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004924:	bf18      	it	ne
 8004926:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004928:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492c:	fba1 0100 	umull	r0, r1, r1, r0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004930:	f7fc f88c 	bl	8000a4c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004934:	4b04      	ldr	r3, [pc, #16]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x78>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800493c:	3301      	adds	r3, #1
 800493e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004940:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004944:	bd08      	pop	{r3, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	00f42400 	.word	0x00f42400

08004950 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004950:	2800      	cmp	r0, #0
 8004952:	f000 81fb 	beq.w	8004d4c <HAL_RCC_OscConfig+0x3fc>
{
 8004956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495a:	6803      	ldr	r3, [r0, #0]
 800495c:	07de      	lsls	r6, r3, #31
{
 800495e:	b082      	sub	sp, #8
 8004960:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004962:	d536      	bpl.n	80049d2 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004964:	49a1      	ldr	r1, [pc, #644]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 8004966:	688a      	ldr	r2, [r1, #8]
 8004968:	f002 020c 	and.w	r2, r2, #12
 800496c:	2a04      	cmp	r2, #4
 800496e:	f000 80de 	beq.w	8004b2e <HAL_RCC_OscConfig+0x1de>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004972:	688a      	ldr	r2, [r1, #8]
 8004974:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004978:	2a08      	cmp	r2, #8
 800497a:	f000 80d4 	beq.w	8004b26 <HAL_RCC_OscConfig+0x1d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800497e:	499b      	ldr	r1, [pc, #620]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 8004980:	688a      	ldr	r2, [r1, #8]
 8004982:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004986:	2a0c      	cmp	r2, #12
 8004988:	f000 8104 	beq.w	8004b94 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004992:	f000 8118 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x276>
 8004996:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800499a:	f000 8192 	beq.w	8004cc2 <HAL_RCC_OscConfig+0x372>
 800499e:	4d93      	ldr	r5, [pc, #588]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 80049a0:	682a      	ldr	r2, [r5, #0]
 80049a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80049a6:	602a      	str	r2, [r5, #0]
 80049a8:	682a      	ldr	r2, [r5, #0]
 80049aa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049ae:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 810d 	bne.w	8004bd0 <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b6:	f7ff f9b1 	bl	8003d1c <HAL_GetTick>
 80049ba:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049bc:	e005      	b.n	80049ca <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049be:	f7ff f9ad 	bl	8003d1c <HAL_GetTick>
 80049c2:	1b80      	subs	r0, r0, r6
 80049c4:	2864      	cmp	r0, #100	@ 0x64
 80049c6:	f200 80fa 	bhi.w	8004bbe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ca:	682b      	ldr	r3, [r5, #0]
 80049cc:	039f      	lsls	r7, r3, #14
 80049ce:	d4f6      	bmi.n	80049be <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	079d      	lsls	r5, r3, #30
 80049d4:	d52f      	bpl.n	8004a36 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049d6:	4a85      	ldr	r2, [pc, #532]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 80049d8:	6891      	ldr	r1, [r2, #8]
 80049da:	f011 0f0c 	tst.w	r1, #12
 80049de:	f000 8099 	beq.w	8004b14 <HAL_RCC_OscConfig+0x1c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049e2:	6891      	ldr	r1, [r2, #8]
 80049e4:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049e8:	2908      	cmp	r1, #8
 80049ea:	f000 808f 	beq.w	8004b0c <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	497f      	ldr	r1, [pc, #508]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 80049f0:	688a      	ldr	r2, [r1, #8]
 80049f2:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049f6:	2a0c      	cmp	r2, #12
 80049f8:	f000 815e 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x368>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049fc:	68e3      	ldr	r3, [r4, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 8112 	beq.w	8004c28 <HAL_RCC_OscConfig+0x2d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a04:	4b7a      	ldr	r3, [pc, #488]	@ (8004bf0 <HAL_RCC_OscConfig+0x2a0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a06:	4e79      	ldr	r6, [pc, #484]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
        __HAL_RCC_HSI_ENABLE();
 8004a08:	2201      	movs	r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004a0c:	f7ff f986 	bl	8003d1c <HAL_GetTick>
 8004a10:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a12:	e005      	b.n	8004a20 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a14:	f7ff f982 	bl	8003d1c <HAL_GetTick>
 8004a18:	1b40      	subs	r0, r0, r5
 8004a1a:	2802      	cmp	r0, #2
 8004a1c:	f200 80cf 	bhi.w	8004bbe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a20:	6833      	ldr	r3, [r6, #0]
 8004a22:	079f      	lsls	r7, r3, #30
 8004a24:	d5f6      	bpl.n	8004a14 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a26:	6833      	ldr	r3, [r6, #0]
 8004a28:	6922      	ldr	r2, [r4, #16]
 8004a2a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004a2e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004a32:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	071a      	lsls	r2, r3, #28
 8004a38:	d452      	bmi.n	8004ae0 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3a:	075d      	lsls	r5, r3, #29
 8004a3c:	d530      	bpl.n	8004aa0 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a3e:	4a6b      	ldr	r2, [pc, #428]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 8004a40:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004a42:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8004a46:	f000 8099 	beq.w	8004b7c <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 8004a4a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4c:	4e69      	ldr	r6, [pc, #420]	@ (8004bf4 <HAL_RCC_OscConfig+0x2a4>)
 8004a4e:	6833      	ldr	r3, [r6, #0]
 8004a50:	05d8      	lsls	r0, r3, #23
 8004a52:	f140 80a4 	bpl.w	8004b9e <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a56:	68a3      	ldr	r3, [r4, #8]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	f000 80cd 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x2a8>
 8004a5e:	2b05      	cmp	r3, #5
 8004a60:	f000 8139 	beq.w	8004cd6 <HAL_RCC_OscConfig+0x386>
 8004a64:	4e61      	ldr	r6, [pc, #388]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 8004a66:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	6732      	str	r2, [r6, #112]	@ 0x70
 8004a6e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004a70:	f022 0204 	bic.w	r2, r2, #4
 8004a74:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f040 80c3 	bne.w	8004c02 <HAL_RCC_OscConfig+0x2b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7ff f94e 	bl	8003d1c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a80:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004a84:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a86:	e005      	b.n	8004a94 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a88:	f7ff f948 	bl	8003d1c <HAL_GetTick>
 8004a8c:	1bc0      	subs	r0, r0, r7
 8004a8e:	4540      	cmp	r0, r8
 8004a90:	f200 8095 	bhi.w	8004bbe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a94:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004a96:	079b      	lsls	r3, r3, #30
 8004a98:	d4f6      	bmi.n	8004a88 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a9a:	2d00      	cmp	r5, #0
 8004a9c:	f040 8106 	bne.w	8004cac <HAL_RCC_OscConfig+0x35c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa0:	69a3      	ldr	r3, [r4, #24]
 8004aa2:	b1cb      	cbz	r3, 8004ad8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aa4:	4d51      	ldr	r5, [pc, #324]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 8004aa6:	68aa      	ldr	r2, [r5, #8]
 8004aa8:	f002 020c 	and.w	r2, r2, #12
 8004aac:	2a08      	cmp	r2, #8
 8004aae:	f000 80cc 	beq.w	8004c4a <HAL_RCC_OscConfig+0x2fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab2:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab4:	4b4e      	ldr	r3, [pc, #312]	@ (8004bf0 <HAL_RCC_OscConfig+0x2a0>)
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004abc:	f000 8115 	beq.w	8004cea <HAL_RCC_OscConfig+0x39a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7ff f92c 	bl	8003d1c <HAL_GetTick>
 8004ac4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	e004      	b.n	8004ad2 <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7ff f928 	bl	8003d1c <HAL_GetTick>
 8004acc:	1b00      	subs	r0, r0, r4
 8004ace:	2802      	cmp	r0, #2
 8004ad0:	d875      	bhi.n	8004bbe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad2:	682b      	ldr	r3, [r5, #0]
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	d4f7      	bmi.n	8004ac8 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004ad8:	2000      	movs	r0, #0
}
 8004ada:	b002      	add	sp, #8
 8004adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ae0:	6963      	ldr	r3, [r4, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d02d      	beq.n	8004b42 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_LSI_ENABLE();
 8004ae6:	4b42      	ldr	r3, [pc, #264]	@ (8004bf0 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae8:	4e40      	ldr	r6, [pc, #256]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_ENABLE();
 8004aea:	2201      	movs	r2, #1
 8004aec:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004af0:	f7ff f914 	bl	8003d1c <HAL_GetTick>
 8004af4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af6:	e004      	b.n	8004b02 <HAL_RCC_OscConfig+0x1b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004af8:	f7ff f910 	bl	8003d1c <HAL_GetTick>
 8004afc:	1b40      	subs	r0, r0, r5
 8004afe:	2802      	cmp	r0, #2
 8004b00:	d85d      	bhi.n	8004bbe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b02:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004b04:	079b      	lsls	r3, r3, #30
 8004b06:	d5f7      	bpl.n	8004af8 <HAL_RCC_OscConfig+0x1a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	e796      	b.n	8004a3a <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b0c:	6852      	ldr	r2, [r2, #4]
 8004b0e:	0250      	lsls	r0, r2, #9
 8004b10:	f53f af6d 	bmi.w	80049ee <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b14:	4a35      	ldr	r2, [pc, #212]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	0792      	lsls	r2, r2, #30
 8004b1a:	d523      	bpl.n	8004b64 <HAL_RCC_OscConfig+0x214>
 8004b1c:	68e2      	ldr	r2, [r4, #12]
 8004b1e:	2a01      	cmp	r2, #1
 8004b20:	d020      	beq.n	8004b64 <HAL_RCC_OscConfig+0x214>
    return HAL_ERROR;
 8004b22:	2001      	movs	r0, #1
 8004b24:	e7d9      	b.n	8004ada <HAL_RCC_OscConfig+0x18a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b26:	684a      	ldr	r2, [r1, #4]
 8004b28:	0255      	lsls	r5, r2, #9
 8004b2a:	f57f af28 	bpl.w	800497e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	0392      	lsls	r2, r2, #14
 8004b34:	f57f af4d 	bpl.w	80049d2 <HAL_RCC_OscConfig+0x82>
 8004b38:	6862      	ldr	r2, [r4, #4]
 8004b3a:	2a00      	cmp	r2, #0
 8004b3c:	f47f af49 	bne.w	80049d2 <HAL_RCC_OscConfig+0x82>
 8004b40:	e7ef      	b.n	8004b22 <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_LSI_DISABLE();
 8004b42:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf0 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b44:	4e29      	ldr	r6, [pc, #164]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_DISABLE();
 8004b46:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004b4a:	f7ff f8e7 	bl	8003d1c <HAL_GetTick>
 8004b4e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b50:	e004      	b.n	8004b5c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b52:	f7ff f8e3 	bl	8003d1c <HAL_GetTick>
 8004b56:	1b40      	subs	r0, r0, r5
 8004b58:	2802      	cmp	r0, #2
 8004b5a:	d830      	bhi.n	8004bbe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b5c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004b5e:	079f      	lsls	r7, r3, #30
 8004b60:	d4f7      	bmi.n	8004b52 <HAL_RCC_OscConfig+0x202>
 8004b62:	e7d1      	b.n	8004b08 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b64:	4921      	ldr	r1, [pc, #132]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 8004b66:	6920      	ldr	r0, [r4, #16]
 8004b68:	680a      	ldr	r2, [r1, #0]
 8004b6a:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8004b6e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004b72:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b74:	071a      	lsls	r2, r3, #28
 8004b76:	f57f af60 	bpl.w	8004a3a <HAL_RCC_OscConfig+0xea>
 8004b7a:	e7b1      	b.n	8004ae0 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b86:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b8c:	9301      	str	r3, [sp, #4]
 8004b8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004b90:	2501      	movs	r5, #1
 8004b92:	e75b      	b.n	8004a4c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b94:	684a      	ldr	r2, [r1, #4]
 8004b96:	0251      	lsls	r1, r2, #9
 8004b98:	f57f aef8 	bpl.w	800498c <HAL_RCC_OscConfig+0x3c>
 8004b9c:	e7c7      	b.n	8004b2e <HAL_RCC_OscConfig+0x1de>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9e:	6833      	ldr	r3, [r6, #0]
 8004ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004ba6:	f7ff f8b9 	bl	8003d1c <HAL_GetTick>
 8004baa:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bac:	6833      	ldr	r3, [r6, #0]
 8004bae:	05d9      	lsls	r1, r3, #23
 8004bb0:	f53f af51 	bmi.w	8004a56 <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb4:	f7ff f8b2 	bl	8003d1c <HAL_GetTick>
 8004bb8:	1bc0      	subs	r0, r0, r7
 8004bba:	2802      	cmp	r0, #2
 8004bbc:	d9f6      	bls.n	8004bac <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8004bbe:	2003      	movs	r0, #3
}
 8004bc0:	b002      	add	sp, #8
 8004bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc6:	4a09      	ldr	r2, [pc, #36]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
 8004bc8:	6813      	ldr	r3, [r2, #0]
 8004bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004bd0:	f7ff f8a4 	bl	8003d1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd4:	4e05      	ldr	r6, [pc, #20]	@ (8004bec <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 8004bd6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd8:	e004      	b.n	8004be4 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bda:	f7ff f89f 	bl	8003d1c <HAL_GetTick>
 8004bde:	1b40      	subs	r0, r0, r5
 8004be0:	2864      	cmp	r0, #100	@ 0x64
 8004be2:	d8ec      	bhi.n	8004bbe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be4:	6833      	ldr	r3, [r6, #0]
 8004be6:	039b      	lsls	r3, r3, #14
 8004be8:	d5f7      	bpl.n	8004bda <HAL_RCC_OscConfig+0x28a>
 8004bea:	e6f1      	b.n	80049d0 <HAL_RCC_OscConfig+0x80>
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	42470000 	.word	0x42470000
 8004bf4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf8:	4a55      	ldr	r2, [pc, #340]	@ (8004d50 <HAL_RCC_OscConfig+0x400>)
 8004bfa:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004c02:	f7ff f88b 	bl	8003d1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	4f52      	ldr	r7, [pc, #328]	@ (8004d50 <HAL_RCC_OscConfig+0x400>)
      tickstart = HAL_GetTick();
 8004c08:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0e:	e004      	b.n	8004c1a <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7ff f884 	bl	8003d1c <HAL_GetTick>
 8004c14:	1b80      	subs	r0, r0, r6
 8004c16:	4540      	cmp	r0, r8
 8004c18:	d8d1      	bhi.n	8004bbe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c1c:	079a      	lsls	r2, r3, #30
 8004c1e:	d5f7      	bpl.n	8004c10 <HAL_RCC_OscConfig+0x2c0>
    if(pwrclkchanged == SET)
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	f43f af3d 	beq.w	8004aa0 <HAL_RCC_OscConfig+0x150>
 8004c26:	e041      	b.n	8004cac <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_HSI_DISABLE();
 8004c28:	4a4a      	ldr	r2, [pc, #296]	@ (8004d54 <HAL_RCC_OscConfig+0x404>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c2a:	4e49      	ldr	r6, [pc, #292]	@ (8004d50 <HAL_RCC_OscConfig+0x400>)
        __HAL_RCC_HSI_DISABLE();
 8004c2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c2e:	f7ff f875 	bl	8003d1c <HAL_GetTick>
 8004c32:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c34:	e004      	b.n	8004c40 <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c36:	f7ff f871 	bl	8003d1c <HAL_GetTick>
 8004c3a:	1b40      	subs	r0, r0, r5
 8004c3c:	2802      	cmp	r0, #2
 8004c3e:	d8be      	bhi.n	8004bbe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c40:	6833      	ldr	r3, [r6, #0]
 8004c42:	0799      	lsls	r1, r3, #30
 8004c44:	d4f7      	bmi.n	8004c36 <HAL_RCC_OscConfig+0x2e6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	e6f5      	b.n	8004a36 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	f43f af69 	beq.w	8004b22 <HAL_RCC_OscConfig+0x1d2>
        pll_config = RCC->PLLCFGR;
 8004c50:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c52:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c54:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c58:	4291      	cmp	r1, r2
 8004c5a:	f47f af62 	bne.w	8004b22 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c60:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c64:	4291      	cmp	r1, r2
 8004c66:	f47f af5c 	bne.w	8004b22 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c6a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004c6c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8004c70:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c72:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004c76:	f47f af54 	bne.w	8004b22 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c7a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004c7c:	0852      	lsrs	r2, r2, #1
 8004c7e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8004c82:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c84:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004c88:	f47f af4b 	bne.w	8004b22 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c8c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004c8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c92:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8004c96:	f47f af44 	bne.w	8004b22 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c9a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004c9c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ca0:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8004ca4:	bf14      	ite	ne
 8004ca6:	2001      	movne	r0, #1
 8004ca8:	2000      	moveq	r0, #0
 8004caa:	e716      	b.n	8004ada <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cac:	4a28      	ldr	r2, [pc, #160]	@ (8004d50 <HAL_RCC_OscConfig+0x400>)
 8004cae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004cb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cb6:	e6f3      	b.n	8004aa0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb8:	684a      	ldr	r2, [r1, #4]
 8004cba:	0251      	lsls	r1, r2, #9
 8004cbc:	f53f ae9e 	bmi.w	80049fc <HAL_RCC_OscConfig+0xac>
 8004cc0:	e728      	b.n	8004b14 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc2:	4b23      	ldr	r3, [pc, #140]	@ (8004d50 <HAL_RCC_OscConfig+0x400>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004cd2:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cd4:	e77c      	b.n	8004bd0 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d50 <HAL_RCC_OscConfig+0x400>)
 8004cd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004cda:	f042 0204 	orr.w	r2, r2, #4
 8004cde:	671a      	str	r2, [r3, #112]	@ 0x70
 8004ce0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ce8:	e78b      	b.n	8004c02 <HAL_RCC_OscConfig+0x2b2>
        tickstart = HAL_GetTick();
 8004cea:	f7ff f817 	bl	8003d1c <HAL_GetTick>
 8004cee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf0:	e005      	b.n	8004cfe <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf2:	f7ff f813 	bl	8003d1c <HAL_GetTick>
 8004cf6:	1b80      	subs	r0, r0, r6
 8004cf8:	2802      	cmp	r0, #2
 8004cfa:	f63f af60 	bhi.w	8004bbe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfe:	682b      	ldr	r3, [r5, #0]
 8004d00:	0199      	lsls	r1, r3, #6
 8004d02:	d4f6      	bmi.n	8004cf2 <HAL_RCC_OscConfig+0x3a2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d04:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004d08:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004d10:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8004d14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004d16:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004d1a:	0852      	lsrs	r2, r2, #1
 8004d1c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004d20:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004d22:	490c      	ldr	r1, [pc, #48]	@ (8004d54 <HAL_RCC_OscConfig+0x404>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004d28:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d2a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004d2c:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004d2e:	f7fe fff5 	bl	8003d1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d32:	4d07      	ldr	r5, [pc, #28]	@ (8004d50 <HAL_RCC_OscConfig+0x400>)
        tickstart = HAL_GetTick();
 8004d34:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d36:	e005      	b.n	8004d44 <HAL_RCC_OscConfig+0x3f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d38:	f7fe fff0 	bl	8003d1c <HAL_GetTick>
 8004d3c:	1b00      	subs	r0, r0, r4
 8004d3e:	2802      	cmp	r0, #2
 8004d40:	f63f af3d 	bhi.w	8004bbe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	019a      	lsls	r2, r3, #6
 8004d48:	d5f6      	bpl.n	8004d38 <HAL_RCC_OscConfig+0x3e8>
 8004d4a:	e6c5      	b.n	8004ad8 <HAL_RCC_OscConfig+0x188>
    return HAL_ERROR;
 8004d4c:	2001      	movs	r0, #1
}
 8004d4e:	4770      	bx	lr
 8004d50:	40023800 	.word	0x40023800
 8004d54:	42470000 	.word	0x42470000

08004d58 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	f000 8086 	beq.w	8004e6a <HAL_TIM_Base_Init+0x112>
{
 8004d5e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d60:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004d64:	4604      	mov	r4, r0
 8004d66:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d078      	beq.n	8004e60 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d6e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d70:	493f      	ldr	r1, [pc, #252]	@ (8004e70 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	2302      	movs	r3, #2
 8004d74:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d78:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004d7a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d7c:	d05c      	beq.n	8004e38 <HAL_TIM_Base_Init+0xe0>
 8004d7e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004d82:	d030      	beq.n	8004de6 <HAL_TIM_Base_Init+0x8e>
 8004d84:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8004d88:	428a      	cmp	r2, r1
 8004d8a:	d02c      	beq.n	8004de6 <HAL_TIM_Base_Init+0x8e>
 8004d8c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004d90:	428a      	cmp	r2, r1
 8004d92:	d028      	beq.n	8004de6 <HAL_TIM_Base_Init+0x8e>
 8004d94:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004d98:	428a      	cmp	r2, r1
 8004d9a:	d024      	beq.n	8004de6 <HAL_TIM_Base_Init+0x8e>
 8004d9c:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8004da0:	428a      	cmp	r2, r1
 8004da2:	d049      	beq.n	8004e38 <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da4:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8004da8:	428a      	cmp	r2, r1
 8004daa:	d020      	beq.n	8004dee <HAL_TIM_Base_Init+0x96>
 8004dac:	4931      	ldr	r1, [pc, #196]	@ (8004e74 <HAL_TIM_Base_Init+0x11c>)
 8004dae:	428a      	cmp	r2, r1
 8004db0:	d01d      	beq.n	8004dee <HAL_TIM_Base_Init+0x96>
 8004db2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004db6:	428a      	cmp	r2, r1
 8004db8:	d019      	beq.n	8004dee <HAL_TIM_Base_Init+0x96>
 8004dba:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8004dbe:	428a      	cmp	r2, r1
 8004dc0:	d015      	beq.n	8004dee <HAL_TIM_Base_Init+0x96>
 8004dc2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004dc6:	428a      	cmp	r2, r1
 8004dc8:	d011      	beq.n	8004dee <HAL_TIM_Base_Init+0x96>
 8004dca:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004dce:	428a      	cmp	r2, r1
 8004dd0:	d00d      	beq.n	8004dee <HAL_TIM_Base_Init+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd2:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd4:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ddc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004dde:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004de2:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de4:	e010      	b.n	8004e08 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8004de6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004dec:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dee:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dfc:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dfe:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004e00:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004e02:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e04:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e06:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e0c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e10:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004e14:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004e18:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004e1c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e28:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004e2c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004e34:	2000      	movs	r0, #0
}
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004e38:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e40:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e46:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e48:	69a1      	ldr	r1, [r4, #24]
 8004e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e4e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004e50:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e52:	68e3      	ldr	r3, [r4, #12]
 8004e54:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e56:	6863      	ldr	r3, [r4, #4]
 8004e58:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004e5a:	6963      	ldr	r3, [r4, #20]
 8004e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e5e:	e7d3      	b.n	8004e08 <HAL_TIM_Base_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8004e60:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004e64:	f7fe f918 	bl	8003098 <HAL_TIM_Base_MspInit>
 8004e68:	e781      	b.n	8004d6e <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8004e6a:	2001      	movs	r0, #1
}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40010000 	.word	0x40010000
 8004e74:	40014400 	.word	0x40014400

08004e78 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004e78:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d12f      	bne.n	8004ee0 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e80:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e82:	4918      	ldr	r1, [pc, #96]	@ (8004ee4 <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	2202      	movs	r2, #2
 8004e86:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e8a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e94:	d019      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0x52>
 8004e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e9a:	d016      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0x52>
 8004e9c:	4a12      	ldr	r2, [pc, #72]	@ (8004ee8 <HAL_TIM_Base_Start_IT+0x70>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0x52>
 8004ea2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0x52>
 8004eaa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0x52>
 8004eb2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0x52>
 8004eba:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_Base_Start_IT+0x52>
 8004ec2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d104      	bne.n	8004ed4 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed0:	2a06      	cmp	r2, #6
 8004ed2:	d003      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004edc:	2000      	movs	r0, #0
 8004ede:	4770      	bx	lr
    return HAL_ERROR;
 8004ee0:	2001      	movs	r0, #1
}
 8004ee2:	4770      	bx	lr
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40000400 	.word	0x40000400

08004eec <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop

08004ef0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	f000 8086 	beq.w	8005002 <HAL_TIM_PWM_Init+0x112>
{
 8004ef6:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004efc:	4604      	mov	r4, r0
 8004efe:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d078      	beq.n	8004ff8 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f06:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f08:	493f      	ldr	r1, [pc, #252]	@ (8005008 <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f10:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004f12:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f14:	d05c      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xe0>
 8004f16:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004f1a:	d030      	beq.n	8004f7e <HAL_TIM_PWM_Init+0x8e>
 8004f1c:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8004f20:	428a      	cmp	r2, r1
 8004f22:	d02c      	beq.n	8004f7e <HAL_TIM_PWM_Init+0x8e>
 8004f24:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f28:	428a      	cmp	r2, r1
 8004f2a:	d028      	beq.n	8004f7e <HAL_TIM_PWM_Init+0x8e>
 8004f2c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f30:	428a      	cmp	r2, r1
 8004f32:	d024      	beq.n	8004f7e <HAL_TIM_PWM_Init+0x8e>
 8004f34:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8004f38:	428a      	cmp	r2, r1
 8004f3a:	d049      	beq.n	8004fd0 <HAL_TIM_PWM_Init+0xe0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3c:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8004f40:	428a      	cmp	r2, r1
 8004f42:	d020      	beq.n	8004f86 <HAL_TIM_PWM_Init+0x96>
 8004f44:	4931      	ldr	r1, [pc, #196]	@ (800500c <HAL_TIM_PWM_Init+0x11c>)
 8004f46:	428a      	cmp	r2, r1
 8004f48:	d01d      	beq.n	8004f86 <HAL_TIM_PWM_Init+0x96>
 8004f4a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f4e:	428a      	cmp	r2, r1
 8004f50:	d019      	beq.n	8004f86 <HAL_TIM_PWM_Init+0x96>
 8004f52:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8004f56:	428a      	cmp	r2, r1
 8004f58:	d015      	beq.n	8004f86 <HAL_TIM_PWM_Init+0x96>
 8004f5a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f5e:	428a      	cmp	r2, r1
 8004f60:	d011      	beq.n	8004f86 <HAL_TIM_PWM_Init+0x96>
 8004f62:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004f66:	428a      	cmp	r2, r1
 8004f68:	d00d      	beq.n	8004f86 <HAL_TIM_PWM_Init+0x96>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f6a:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8004f6c:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f6e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f74:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004f76:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f78:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f7a:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f7c:	e010      	b.n	8004fa0 <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8004f7e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f84:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f86:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f88:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f8e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f94:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f96:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004f98:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004f9a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f9c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f9e:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa4:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004fac:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004fb0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004fb4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fc0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004fc4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004fc8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004fcc:	2000      	movs	r0, #0
}
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004fd0:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd2:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004fd8:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fde:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe0:	69a1      	ldr	r1, [r4, #24]
 8004fe2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fe6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004fe8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fea:	68e3      	ldr	r3, [r4, #12]
 8004fec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff2:	6963      	ldr	r3, [r4, #20]
 8004ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ff6:	e7d3      	b.n	8004fa0 <HAL_TIM_PWM_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8004ff8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004ffc:	f7ff ff76 	bl	8004eec <HAL_TIM_PWM_MspInit>
 8005000:	e781      	b.n	8004f06 <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8005002:	2001      	movs	r0, #1
}
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40010000 	.word	0x40010000
 800500c:	40014400 	.word	0x40014400

08005010 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005010:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	f000 80c6 	beq.w	80051a6 <HAL_TIM_PWM_ConfigChannel+0x196>
 800501a:	2301      	movs	r3, #1
{
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8005020:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005024:	2a0c      	cmp	r2, #12
 8005026:	d808      	bhi.n	800503a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8005028:	e8df f002 	tbb	[pc, r2]
 800502c:	0707073e 	.word	0x0707073e
 8005030:	07070767 	.word	0x07070767
 8005034:	07070793 	.word	0x07070793
 8005038:	0c          	.byte	0x0c
 8005039:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800503a:	2300      	movs	r3, #0
 800503c:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8005040:	2001      	movs	r0, #1
}
 8005042:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005044:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005046:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800504e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005050:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005052:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005054:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005056:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800505a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800505e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005060:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005064:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005068:	4d6a      	ldr	r5, [pc, #424]	@ (8005214 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800506a:	42ab      	cmp	r3, r5
 800506c:	f000 80bc 	beq.w	80051e8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
 8005070:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005074:	42ab      	cmp	r3, r5
 8005076:	f000 80b7 	beq.w	80051e8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507a:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507c:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800507e:	6848      	ldr	r0, [r1, #4]
 8005080:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005082:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005084:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005086:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800508c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800509c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800509e:	2300      	movs	r3, #0
 80050a0:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80050a4:	2000      	movs	r0, #0
}
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80050aa:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ac:	6a1a      	ldr	r2, [r3, #32]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80050b4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80050b6:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80050b8:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050ba:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80050be:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80050c0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80050c2:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80050c6:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050c8:	4d52      	ldr	r5, [pc, #328]	@ (8005214 <HAL_TIM_PWM_ConfigChannel+0x204>)
 80050ca:	42ab      	cmp	r3, r5
 80050cc:	d06d      	beq.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x19a>
 80050ce:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80050d2:	42ab      	cmp	r3, r5
 80050d4:	d069      	beq.n	80051aa <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 80050d6:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80050d8:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80050da:	6848      	ldr	r0, [r1, #4]
 80050dc:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80050de:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e0:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050e2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e4:	f042 0208 	orr.w	r2, r2, #8
 80050e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050ea:	699a      	ldr	r2, [r3, #24]
 80050ec:	f022 0204 	bic.w	r2, r2, #4
 80050f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050f2:	699a      	ldr	r2, [r3, #24]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	619a      	str	r2, [r3, #24]
      break;
 80050f8:	e7d1      	b.n	800509e <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050fa:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050fc:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fe:	6a1a      	ldr	r2, [r3, #32]
 8005100:	f022 0210 	bic.w	r2, r2, #16
 8005104:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005106:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005108:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800510a:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800510c:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005110:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005114:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005116:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800511a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800511e:	4d3d      	ldr	r5, [pc, #244]	@ (8005214 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8005120:	42ab      	cmp	r3, r5
 8005122:	d051      	beq.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x1b8>
 8005124:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005128:	42ab      	cmp	r3, r5
 800512a:	d04d      	beq.n	80051c8 <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CR2 = tmpcr2;
 800512c:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800512e:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005130:	6848      	ldr	r0, [r1, #4]
 8005132:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005134:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005136:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005138:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800513a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800513e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800514e:	619a      	str	r2, [r3, #24]
      break;
 8005150:	e7a5      	b.n	800509e <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005152:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005154:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005156:	6a1a      	ldr	r2, [r3, #32]
 8005158:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800515c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800515e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005160:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005162:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005164:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005168:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800516a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800516c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005170:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005174:	4d27      	ldr	r5, [pc, #156]	@ (8005214 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8005176:	42ab      	cmp	r3, r5
 8005178:	d03c      	beq.n	80051f4 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 800517a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800517e:	42ab      	cmp	r3, r5
 8005180:	d038      	beq.n	80051f4 <HAL_TIM_PWM_ConfigChannel+0x1e4>
  TIMx->CR2 = tmpcr2;
 8005182:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005184:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005186:	6848      	ldr	r0, [r1, #4]
 8005188:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800518a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800518c:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800518e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005190:	f042 0208 	orr.w	r2, r2, #8
 8005194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	f022 0204 	bic.w	r2, r2, #4
 800519c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	61da      	str	r2, [r3, #28]
      break;
 80051a4:	e77b      	b.n	800509e <HAL_TIM_PWM_ConfigChannel+0x8e>
  __HAL_LOCK(htim);
 80051a6:	2002      	movs	r0, #2
}
 80051a8:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80051aa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80051ac:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80051b0:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051b6:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80051ba:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80051be:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80051c2:	ea4e 0404 	orr.w	r4, lr, r4
 80051c6:	e786      	b.n	80050d6 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051c8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80051ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051ce:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051d2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051d6:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051da:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80051de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051e2:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 80051e6:	e7a1      	b.n	800512c <HAL_TIM_PWM_ConfigChannel+0x11c>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051e8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051ea:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051ee:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80051f2:	e742      	b.n	800507a <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051f4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80051f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051fe:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005202:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005206:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800520a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800520e:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 8005212:	e7b6      	b.n	8005182 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005214:	40010000 	.word	0x40010000

08005218 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005218:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800521c:	2b01      	cmp	r3, #1
 800521e:	d071      	beq.n	8005304 <HAL_TIM_ConfigClockSource+0xec>
 8005220:	4602      	mov	r2, r0
{
 8005222:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8005226:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800522c:	2001      	movs	r0, #1
 800522e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005232:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005234:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005238:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800523c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800523e:	680b      	ldr	r3, [r1, #0]
 8005240:	2b60      	cmp	r3, #96	@ 0x60
 8005242:	d061      	beq.n	8005308 <HAL_TIM_ConfigClockSource+0xf0>
 8005244:	d824      	bhi.n	8005290 <HAL_TIM_ConfigClockSource+0x78>
 8005246:	2b40      	cmp	r3, #64	@ 0x40
 8005248:	d077      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x122>
 800524a:	d94a      	bls.n	80052e2 <HAL_TIM_ConfigClockSource+0xca>
 800524c:	2b50      	cmp	r3, #80	@ 0x50
 800524e:	d117      	bne.n	8005280 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005250:	684b      	ldr	r3, [r1, #4]
 8005252:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005254:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005256:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800525a:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525c:	6a23      	ldr	r3, [r4, #32]
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005264:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005266:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800526a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800526e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005270:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005272:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005278:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005280:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005282:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005284:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005288:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 800528c:	bc30      	pop	{r4, r5}
 800528e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005294:	d0f3      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x66>
 8005296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800529a:	d110      	bne.n	80052be <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800529c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80052a0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a2:	432b      	orrs	r3, r5
 80052a4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a6:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80052ae:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052b2:	68a3      	ldr	r3, [r4, #8]
 80052b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052b8:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2000      	movs	r0, #0
 80052bc:	e7e0      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80052be:	2b70      	cmp	r3, #112	@ 0x70
 80052c0:	d1de      	bne.n	8005280 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052c2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80052c6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052c8:	432b      	orrs	r3, r5
 80052ca:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052cc:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052d0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80052d4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80052d6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80052d8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052da:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80052de:	60a3      	str	r3, [r4, #8]
      break;
 80052e0:	e7cd      	b.n	800527e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d002      	beq.n	80052ec <HAL_TIM_ConfigClockSource+0xd4>
 80052e6:	d909      	bls.n	80052fc <HAL_TIM_ConfigClockSource+0xe4>
 80052e8:	2b30      	cmp	r3, #48	@ 0x30
 80052ea:	d1c9      	bne.n	8005280 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80052ec:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ee:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052f2:	430b      	orrs	r3, r1
 80052f4:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80052f8:	60a3      	str	r3, [r4, #8]
}
 80052fa:	e7c0      	b.n	800527e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80052fc:	f033 0110 	bics.w	r1, r3, #16
 8005300:	d1be      	bne.n	8005280 <HAL_TIM_ConfigClockSource+0x68>
 8005302:	e7f3      	b.n	80052ec <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8005304:	2002      	movs	r0, #2
}
 8005306:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005308:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800530a:	6848      	ldr	r0, [r1, #4]
 800530c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800530e:	f023 0310 	bic.w	r3, r3, #16
 8005312:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005314:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8005316:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005318:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800531c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005320:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005324:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005328:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800532a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800532c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800532e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005332:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005336:	60a3      	str	r3, [r4, #8]
}
 8005338:	e7a1      	b.n	800527e <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800533a:	684b      	ldr	r3, [r1, #4]
 800533c:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800533e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005340:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005344:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005346:	6a23      	ldr	r3, [r4, #32]
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005350:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005354:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005358:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800535a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800535c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800535e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005362:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005366:	60a3      	str	r3, [r4, #8]
}
 8005368:	e789      	b.n	800527e <HAL_TIM_ConfigClockSource+0x66>
 800536a:	bf00      	nop

0800536c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800536c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005370:	2a01      	cmp	r2, #1
 8005372:	d050      	beq.n	8005416 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8005374:	4603      	mov	r3, r0
{
 8005376:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800537a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8005380:	2001      	movs	r0, #1
 8005382:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005386:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005388:	6848      	ldr	r0, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800538a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 800538c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005390:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005392:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005396:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 8005398:	2850      	cmp	r0, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 800539a:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 800539c:	d060      	beq.n	8005460 <HAL_TIM_SlaveConfigSynchro+0xf4>
 800539e:	d90f      	bls.n	80053c0 <HAL_TIM_SlaveConfigSynchro+0x54>
 80053a0:	2860      	cmp	r0, #96	@ 0x60
 80053a2:	d03a      	beq.n	800541a <HAL_TIM_SlaveConfigSynchro+0xae>
 80053a4:	2870      	cmp	r0, #112	@ 0x70
 80053a6:	d10e      	bne.n	80053c6 <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a8:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80053ac:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ae:	432a      	orrs	r2, r5
 80053b0:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b2:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80053ba:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80053bc:	60a2      	str	r2, [r4, #8]
 80053be:	e00f      	b.n	80053e0 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 80053c0:	2840      	cmp	r0, #64	@ 0x40
 80053c2:	d03d      	beq.n	8005440 <HAL_TIM_SlaveConfigSynchro+0xd4>
 80053c4:	d907      	bls.n	80053d6 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 80053c6:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80053c8:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80053ca:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80053d2:	bc30      	pop	{r4, r5}
 80053d4:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80053d6:	2820      	cmp	r0, #32
 80053d8:	d002      	beq.n	80053e0 <HAL_TIM_SlaveConfigSynchro+0x74>
 80053da:	d912      	bls.n	8005402 <HAL_TIM_SlaveConfigSynchro+0x96>
 80053dc:	2830      	cmp	r0, #48	@ 0x30
 80053de:	d1f2      	bne.n	80053c6 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80053e0:	68e2      	ldr	r2, [r4, #12]
 80053e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053e6:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80053e8:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 80053ea:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80053ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053f2:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 80053f4:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80053f8:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 80053fc:	4608      	mov	r0, r1
}
 80053fe:	bc30      	pop	{r4, r5}
 8005400:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005402:	f030 0210 	bics.w	r2, r0, #16
 8005406:	d0eb      	beq.n	80053e0 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8005408:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 800540a:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 800540c:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005414:	e7dd      	b.n	80053d2 <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8005416:	2002      	movs	r0, #2
}
 8005418:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800541a:	6a22      	ldr	r2, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800541c:	6888      	ldr	r0, [r1, #8]
 800541e:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005420:	f022 0210 	bic.w	r2, r2, #16
 8005424:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005426:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8005428:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800542a:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800542e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005432:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005436:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800543a:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800543c:	6222      	str	r2, [r4, #32]
 800543e:	e7cf      	b.n	80053e0 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005440:	2d05      	cmp	r5, #5
 8005442:	d0c0      	beq.n	80053c6 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8005444:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005446:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005448:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005450:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005452:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005456:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800545a:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 800545c:	6220      	str	r0, [r4, #32]
      break;
 800545e:	e7bf      	b.n	80053e0 <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005460:	688a      	ldr	r2, [r1, #8]
 8005462:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 8005464:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005466:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800546a:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546c:	6a22      	ldr	r2, [r4, #32]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005474:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005476:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800547a:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800547e:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8005480:	6221      	str	r1, [r4, #32]
 8005482:	e7ad      	b.n	80053e0 <HAL_TIM_SlaveConfigSynchro+0x74>

08005484 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop

08005488 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop

0800548c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop

08005490 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop

08005494 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005494:	6803      	ldr	r3, [r0, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	0791      	lsls	r1, r2, #30
{
 800549a:	b510      	push	{r4, lr}
 800549c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800549e:	d502      	bpl.n	80054a6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	0792      	lsls	r2, r2, #30
 80054a4:	d45f      	bmi.n	8005566 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	0750      	lsls	r0, r2, #29
 80054aa:	d502      	bpl.n	80054b2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	0751      	lsls	r1, r2, #29
 80054b0:	d446      	bmi.n	8005540 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	0712      	lsls	r2, r2, #28
 80054b6:	d502      	bpl.n	80054be <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	0710      	lsls	r0, r2, #28
 80054bc:	d42e      	bmi.n	800551c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	06d2      	lsls	r2, r2, #27
 80054c2:	d502      	bpl.n	80054ca <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	06d0      	lsls	r0, r2, #27
 80054c8:	d418      	bmi.n	80054fc <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	07d1      	lsls	r1, r2, #31
 80054ce:	d502      	bpl.n	80054d6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	07d2      	lsls	r2, r2, #31
 80054d4:	d45d      	bmi.n	8005592 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	0610      	lsls	r0, r2, #24
 80054da:	d502      	bpl.n	80054e2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	0611      	lsls	r1, r2, #24
 80054e0:	d45f      	bmi.n	80055a2 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	0652      	lsls	r2, r2, #25
 80054e6:	d502      	bpl.n	80054ee <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	0650      	lsls	r0, r2, #25
 80054ec:	d461      	bmi.n	80055b2 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	0691      	lsls	r1, r2, #26
 80054f2:	d502      	bpl.n	80054fa <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	0692      	lsls	r2, r2, #26
 80054f8:	d443      	bmi.n	8005582 <HAL_TIM_IRQHandler+0xee>
}
 80054fa:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054fc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005500:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005502:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005504:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800550c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800550e:	d064      	beq.n	80055da <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005510:	f7ff ffba 	bl	8005488 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005514:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005516:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005518:	7722      	strb	r2, [r4, #28]
 800551a:	e7d6      	b.n	80054ca <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800551c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005520:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005522:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005524:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800552a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800552c:	d152      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552e:	f7ff ffa9 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005532:	4620      	mov	r0, r4
 8005534:	f7ff ffaa 	bl	800548c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005538:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800553a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553c:	7722      	strb	r2, [r4, #28]
 800553e:	e7be      	b.n	80054be <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005540:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005544:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005546:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005548:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005550:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005552:	d13c      	bne.n	80055ce <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005554:	f7ff ff96 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	4620      	mov	r0, r4
 800555a:	f7ff ff97 	bl	800548c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005560:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	7722      	strb	r2, [r4, #28]
 8005564:	e7a5      	b.n	80054b2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005566:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800556a:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800556c:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800556e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	079b      	lsls	r3, r3, #30
 8005574:	d025      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005576:	f7ff ff87 	bl	8005488 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800557c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	7722      	strb	r2, [r4, #28]
 8005580:	e791      	b.n	80054a6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005582:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005586:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005588:	611a      	str	r2, [r3, #16]
}
 800558a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800558e:	f000 b9dd 	b.w	800594c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005592:	f06f 0201 	mvn.w	r2, #1
 8005596:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005598:	4620      	mov	r0, r4
 800559a:	f7fc f947 	bl	800182c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	e799      	b.n	80054d6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055a2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 f9d1 	bl	8005950 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	e797      	b.n	80054e2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80055b8:	4620      	mov	r0, r4
 80055ba:	f7ff ff69 	bl	8005490 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	e795      	b.n	80054ee <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	f7ff ff5f 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c6:	4620      	mov	r0, r4
 80055c8:	f7ff ff60 	bl	800548c <HAL_TIM_PWM_PulseFinishedCallback>
 80055cc:	e7d5      	b.n	800557a <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	f7ff ff5b 	bl	8005488 <HAL_TIM_IC_CaptureCallback>
 80055d2:	e7c4      	b.n	800555e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80055d4:	f7ff ff58 	bl	8005488 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e7ae      	b.n	8005538 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	f7ff ff53 	bl	8005484 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055de:	4620      	mov	r0, r4
 80055e0:	f7ff ff54 	bl	800548c <HAL_TIM_PWM_PulseFinishedCallback>
 80055e4:	e796      	b.n	8005514 <HAL_TIM_IRQHandler+0x80>
 80055e6:	bf00      	nop

080055e8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e8:	4a35      	ldr	r2, [pc, #212]	@ (80056c0 <TIM_Base_SetConfig+0xd8>)
  tmpcr1 = TIMx->CR1;
 80055ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055ec:	4290      	cmp	r0, r2
{
 80055ee:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f0:	d04d      	beq.n	800568e <TIM_Base_SetConfig+0xa6>
 80055f2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80055f6:	d034      	beq.n	8005662 <TIM_Base_SetConfig+0x7a>
 80055f8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80055fc:	4290      	cmp	r0, r2
 80055fe:	d030      	beq.n	8005662 <TIM_Base_SetConfig+0x7a>
 8005600:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005604:	4290      	cmp	r0, r2
 8005606:	d02c      	beq.n	8005662 <TIM_Base_SetConfig+0x7a>
 8005608:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800560c:	4290      	cmp	r0, r2
 800560e:	d028      	beq.n	8005662 <TIM_Base_SetConfig+0x7a>
 8005610:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005614:	4290      	cmp	r0, r2
 8005616:	d03a      	beq.n	800568e <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005618:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800561c:	4290      	cmp	r0, r2
 800561e:	d024      	beq.n	800566a <TIM_Base_SetConfig+0x82>
 8005620:	4a28      	ldr	r2, [pc, #160]	@ (80056c4 <TIM_Base_SetConfig+0xdc>)
 8005622:	4290      	cmp	r0, r2
 8005624:	d021      	beq.n	800566a <TIM_Base_SetConfig+0x82>
 8005626:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800562a:	4290      	cmp	r0, r2
 800562c:	d01d      	beq.n	800566a <TIM_Base_SetConfig+0x82>
 800562e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8005632:	4290      	cmp	r0, r2
 8005634:	d019      	beq.n	800566a <TIM_Base_SetConfig+0x82>
 8005636:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800563a:	4290      	cmp	r0, r2
 800563c:	d015      	beq.n	800566a <TIM_Base_SetConfig+0x82>
 800563e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005642:	4290      	cmp	r0, r2
 8005644:	d011      	beq.n	800566a <TIM_Base_SetConfig+0x82>
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005646:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8005648:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800564a:	6949      	ldr	r1, [r1, #20]
 800564c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005650:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005652:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8005654:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005656:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005658:	6282      	str	r2, [r0, #40]	@ 0x28
}
 800565a:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->EGR = TIM_EGR_UG;
 800565e:	6143      	str	r3, [r0, #20]
}
 8005660:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8005662:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005668:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800566a:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800566c:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 800566e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005672:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005674:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005678:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800567a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800567c:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800567e:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8005680:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005682:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005684:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8005686:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->EGR = TIM_EGR_UG;
 800568a:	6143      	str	r3, [r0, #20]
}
 800568c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800568e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005690:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005696:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8005698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800569c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800569e:	694a      	ldr	r2, [r1, #20]
}
 80056a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056a8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80056aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ac:	688b      	ldr	r3, [r1, #8]
 80056ae:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056b0:	680b      	ldr	r3, [r1, #0]
 80056b2:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80056b4:	690b      	ldr	r3, [r1, #16]
 80056b6:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80056b8:	2301      	movs	r3, #1
 80056ba:	6143      	str	r3, [r0, #20]
}
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40014400 	.word	0x40014400

080056c8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c8:	6a03      	ldr	r3, [r0, #32]
 80056ca:	f023 0310 	bic.w	r3, r3, #16
 80056ce:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80056d0:	6a03      	ldr	r3, [r0, #32]
{
 80056d2:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80056d4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80056d6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056da:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80056e4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056ec:	4d0e      	ldr	r5, [pc, #56]	@ (8005728 <TIM_OC2_SetConfig+0x60>)
 80056ee:	42a8      	cmp	r0, r5
 80056f0:	d00a      	beq.n	8005708 <TIM_OC2_SetConfig+0x40>
 80056f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80056f6:	42a8      	cmp	r0, r5
 80056f8:	d006      	beq.n	8005708 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 80056fa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80056fc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056fe:	6182      	str	r2, [r0, #24]
}
 8005700:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8005702:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005704:	6203      	str	r3, [r0, #32]
}
 8005706:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005708:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800570a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800570e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005712:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005716:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800571a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800571e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005722:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 8005726:	e7e8      	b.n	80056fa <TIM_OC2_SetConfig+0x32>
 8005728:	40010000 	.word	0x40010000

0800572c <TIM_TI1_SetConfig>:
{
 800572c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572e:	6a04      	ldr	r4, [r0, #32]
 8005730:	f024 0401 	bic.w	r4, r4, #1
 8005734:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005736:	4c1b      	ldr	r4, [pc, #108]	@ (80057a4 <TIM_TI1_SetConfig+0x78>)
  tmpccmr1 = TIMx->CCMR1;
 8005738:	6985      	ldr	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 800573a:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800573c:	42a0      	cmp	r0, r4
{
 800573e:	4694      	mov	ip, r2
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005740:	d01c      	beq.n	800577c <TIM_TI1_SetConfig+0x50>
 8005742:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005746:	d019      	beq.n	800577c <TIM_TI1_SetConfig+0x50>
 8005748:	4a17      	ldr	r2, [pc, #92]	@ (80057a8 <TIM_TI1_SetConfig+0x7c>)
 800574a:	4290      	cmp	r0, r2
 800574c:	d016      	beq.n	800577c <TIM_TI1_SetConfig+0x50>
 800574e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005752:	4290      	cmp	r0, r2
 8005754:	d012      	beq.n	800577c <TIM_TI1_SetConfig+0x50>
 8005756:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800575a:	4290      	cmp	r0, r2
 800575c:	d00e      	beq.n	800577c <TIM_TI1_SetConfig+0x50>
 800575e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005762:	4290      	cmp	r0, r2
 8005764:	d00a      	beq.n	800577c <TIM_TI1_SetConfig+0x50>
 8005766:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800576a:	4290      	cmp	r0, r2
 800576c:	d006      	beq.n	800577c <TIM_TI1_SetConfig+0x50>
 800576e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005772:	4290      	cmp	r0, r2
 8005774:	d002      	beq.n	800577c <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005776:	f045 0201 	orr.w	r2, r5, #1
 800577a:	e003      	b.n	8005784 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800577c:	f025 0203 	bic.w	r2, r5, #3
    tmpccmr1 |= TIM_ICSelection;
 8005780:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005784:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005786:	f026 0c0a 	bic.w	ip, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800578a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800578e:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005790:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005794:	4313      	orrs	r3, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005796:	ea41 010c 	orr.w	r1, r1, ip
  TIMx->CCMR1 = tmpccmr1;
 800579a:	6183      	str	r3, [r0, #24]
}
 800579c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 800579e:	6201      	str	r1, [r0, #32]
}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40000400 	.word	0x40000400

080057ac <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop

080057b0 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d05f      	beq.n	8005874 <HAL_TIMEx_HallSensor_Init+0xc4>
{
 80057b4:	b530      	push	{r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80057b6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
{
 80057ba:	b089      	sub	sp, #36	@ 0x24
 80057bc:	460d      	mov	r5, r1
 80057be:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80057c0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d050      	beq.n	800586a <HAL_TIMEx_HallSensor_Init+0xba>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80057ca:	2302      	movs	r3, #2
 80057cc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80057d4:	f7ff ff08 	bl	80055e8 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80057d8:	68ab      	ldr	r3, [r5, #8]
 80057da:	6829      	ldr	r1, [r5, #0]
 80057dc:	6820      	ldr	r0, [r4, #0]
 80057de:	2203      	movs	r2, #3
 80057e0:	f7ff ffa4 	bl	800572c <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057e4:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80057e6:	6869      	ldr	r1, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057e8:	6983      	ldr	r3, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80057ea:	68ea      	ldr	r2, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057ec:	f023 030c 	bic.w	r3, r3, #12
 80057f0:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80057f2:	6983      	ldr	r3, [r0, #24]
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80057f8:	6843      	ldr	r3, [r0, #4]
 80057fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fe:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005800:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005802:	9202      	str	r2, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005808:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800580a:	6883      	ldr	r3, [r0, #8]
 800580c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005810:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005812:	6883      	ldr	r3, [r0, #8]
 8005814:	f023 0307 	bic.w	r3, r3, #7
 8005818:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800581a:	6883      	ldr	r3, [r0, #8]
 800581c:	f043 0304 	orr.w	r3, r3, #4
 8005820:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005822:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005824:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005826:	2370      	movs	r3, #112	@ 0x70
 8005828:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800582a:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800582e:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005832:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005834:	f7ff ff48 	bl	80056c8 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	6851      	ldr	r1, [r2, #4]
 800583c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005840:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005842:	6851      	ldr	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005844:	2301      	movs	r3, #1
  return HAL_OK;
 8005846:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005848:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 800584c:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005852:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005856:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800585a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8005862:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005866:	b009      	add	sp, #36	@ 0x24
 8005868:	bd30      	pop	{r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800586a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800586e:	f7ff ff9d 	bl	80057ac <HAL_TIMEx_HallSensor_MspInit>
 8005872:	e7a9      	b.n	80057c8 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8005874:	2001      	movs	r0, #1
}
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005878:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800587c:	2a01      	cmp	r2, #1
 800587e:	d037      	beq.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8005880:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005882:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	2002      	movs	r0, #2
{
 8005886:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800588c:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800588e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005890:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005892:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005896:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005898:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589a:	4816      	ldr	r0, [pc, #88]	@ (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 800589c:	4282      	cmp	r2, r0
 800589e:	d01a      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80058a0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80058a4:	d017      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80058a6:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80058aa:	4282      	cmp	r2, r0
 80058ac:	d013      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80058ae:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80058b2:	4282      	cmp	r2, r0
 80058b4:	d00f      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80058b6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80058ba:	4282      	cmp	r2, r0
 80058bc:	d00b      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80058be:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 80058c2:	4282      	cmp	r2, r0
 80058c4:	d007      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80058c6:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80058ca:	4282      	cmp	r2, r0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80058ce:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80058d2:	4282      	cmp	r2, r0
 80058d4:	d104      	bne.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058d6:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058d8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058dc:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058de:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80058e0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80058e8:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80058ec:	bc30      	pop	{r4, r5}
 80058ee:	4770      	bx	lr
  __HAL_LOCK(htim);
 80058f0:	2002      	movs	r0, #2
}
 80058f2:	4770      	bx	lr
 80058f4:	40010000 	.word	0x40010000

080058f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d023      	beq.n	8005948 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8005900:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005902:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590a:	4602      	mov	r2, r0
 800590c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800590e:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005910:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005912:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005916:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005918:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800591c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800591e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005920:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005924:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005926:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005928:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800592a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800592e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005930:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005934:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8005936:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005938:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 800593a:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 800593c:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005940:	4608      	mov	r0, r1
}
 8005942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005946:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005948:	2002      	movs	r0, #2
}
 800594a:	4770      	bx	lr

0800594c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop

08005950 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop

08005954 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005954:	2800      	cmp	r0, #0
 8005956:	f000 8086 	beq.w	8005a66 <HAL_UART_Init+0x112>
{
 800595a:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800595c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005960:	4604      	mov	r4, r0
 8005962:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005966:	2b00      	cmp	r3, #0
 8005968:	d078      	beq.n	8005a5c <HAL_UART_Init+0x108>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800596a:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800596c:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 800596e:	2224      	movs	r2, #36	@ 0x24
 8005970:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800597a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800597c:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800597e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005980:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005984:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005986:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005988:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800598a:	4302      	orrs	r2, r0
 800598c:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800598e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005990:	4302      	orrs	r2, r0
 8005992:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005994:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8005998:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800599c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800599e:	430a      	orrs	r2, r1
 80059a0:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059a6:	4931      	ldr	r1, [pc, #196]	@ (8005a6c <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059a8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80059ac:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059ae:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059b0:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059b2:	d035      	beq.n	8005a20 <HAL_UART_Init+0xcc>
 80059b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005a70 <HAL_UART_Init+0x11c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d032      	beq.n	8005a20 <HAL_UART_Init+0xcc>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059ba:	f7fe ff47 	bl	800484c <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059be:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059c0:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059c6:	e9d4 5300 	ldrd	r5, r3, [r4]
 80059ca:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ce:	d02a      	beq.n	8005a26 <HAL_UART_Init+0xd2>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059d0:	009a      	lsls	r2, r3, #2
 80059d2:	0f9b      	lsrs	r3, r3, #30
 80059d4:	f7fb f83a 	bl	8000a4c <__aeabi_uldivmod>
 80059d8:	4a26      	ldr	r2, [pc, #152]	@ (8005a74 <HAL_UART_Init+0x120>)
 80059da:	fba2 1300 	umull	r1, r3, r2, r0
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	2164      	movs	r1, #100	@ 0x64
 80059e2:	fb01 0013 	mls	r0, r1, r3, r0
 80059e6:	0100      	lsls	r0, r0, #4
 80059e8:	3032      	adds	r0, #50	@ 0x32
 80059ea:	fba2 2000 	umull	r2, r0, r2, r0
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80059f4:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f6:	692b      	ldr	r3, [r5, #16]
 80059f8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80059fc:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059fe:	696b      	ldr	r3, [r5, #20]
 8005a00:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8005a04:	616b      	str	r3, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8005a06:	68eb      	ldr	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a08:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8005a0a:	2220      	movs	r2, #32
  __HAL_UART_ENABLE(huart);
 8005a0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a10:	60eb      	str	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a12:	6421      	str	r1, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a14:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a18:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  return HAL_OK;
 8005a1c:	4608      	mov	r0, r1
}
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a20:	f7fe ff24 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 8005a24:	e7cb      	b.n	80059be <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a26:	18da      	adds	r2, r3, r3
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	415b      	adcs	r3, r3
 8005a2e:	f7fb f80d 	bl	8000a4c <__aeabi_uldivmod>
 8005a32:	4a10      	ldr	r2, [pc, #64]	@ (8005a74 <HAL_UART_Init+0x120>)
 8005a34:	fba2 3100 	umull	r3, r1, r2, r0
 8005a38:	0949      	lsrs	r1, r1, #5
 8005a3a:	2364      	movs	r3, #100	@ 0x64
 8005a3c:	fb03 0311 	mls	r3, r3, r1, r0
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	3332      	adds	r3, #50	@ 0x32
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005a52:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a56:	4413      	add	r3, r2
 8005a58:	60ab      	str	r3, [r5, #8]
 8005a5a:	e7cc      	b.n	80059f6 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8005a5c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 8005a60:	f7fd fbae 	bl	80031c0 <HAL_UART_MspInit>
 8005a64:	e781      	b.n	800596a <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8005a66:	2001      	movs	r0, #1
}
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40011000 	.word	0x40011000
 8005a70:	40011400 	.word	0x40011400
 8005a74:	51eb851f 	.word	0x51eb851f

08005a78 <HAL_UART_DeInit>:
  if (huart == NULL)
 8005a78:	b1b0      	cbz	r0, 8005aa8 <HAL_UART_DeInit+0x30>
  __HAL_UART_DISABLE(huart);
 8005a7a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a7c:	2324      	movs	r3, #36	@ 0x24
{
 8005a7e:	b510      	push	{r4, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005a80:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 8005a84:	68d3      	ldr	r3, [r2, #12]
 8005a86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8005a8e:	f7fd fbd3 	bl	8003238 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(huart);
 8005a96:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8005a9a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005a9e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 8005aa2:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa4:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8005aa6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005aa8:	2001      	movs	r0, #1
}
 8005aaa:	4770      	bx	lr

08005aac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005aac:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005aae:	f001 fc8f 	bl	80073d0 <vTaskStartScheduler>
  
  return osOK;
}
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	bd08      	pop	{r3, pc}
 8005ab6:	bf00      	nop

08005ab8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	4684      	mov	ip, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005abc:	6945      	ldr	r5, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005abe:	f8dc 2010 	ldr.w	r2, [ip, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ac2:	6840      	ldr	r0, [r0, #4]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ac4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
{
 8005ac8:	460b      	mov	r3, r1
 8005aca:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005acc:	f8dc 1000 	ldr.w	r1, [ip]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ad0:	b17d      	cbz	r5, 8005af2 <osThreadCreate+0x3a>
 8005ad2:	f8dc 6018 	ldr.w	r6, [ip, #24]
 8005ad6:	b166      	cbz	r6, 8005af2 <osThreadCreate+0x3a>
  if (priority != osPriorityError) {
 8005ad8:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8005adc:	bf14      	ite	ne
 8005ade:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ae2:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ae4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8005ae8:	9400      	str	r4, [sp, #0]
 8005aea:	f001 fac5 	bl	8007078 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8005aee:	b006      	add	sp, #24
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8005af2:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8005af6:	bf14      	ite	ne
 8005af8:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005afc:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005afe:	9400      	str	r4, [sp, #0]
 8005b00:	ac05      	add	r4, sp, #20
 8005b02:	b292      	uxth	r2, r2
 8005b04:	9401      	str	r4, [sp, #4]
 8005b06:	f001 fb67 	bl	80071d8 <xTaskCreate>
 8005b0a:	2801      	cmp	r0, #1
  return handle;
 8005b0c:	bf0c      	ite	eq
 8005b0e:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8005b10:	2000      	movne	r0, #0
}
 8005b12:	b006      	add	sp, #24
 8005b14:	bd70      	pop	{r4, r5, r6, pc}
 8005b16:	bf00      	nop

08005b18 <osThreadGetPriority>:
* @param   thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  current priority value of the thread function.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
*/
osPriority osThreadGetPriority (osThreadId thread_id)
{
 8005b18:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b1a:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_uxTaskPriorityGet == 1)
  if (inHandlerMode())
 8005b1e:	b133      	cbz	r3, 8005b2e <osThreadGetPriority+0x16>
  {
    return makeCmsisPriority(uxTaskPriorityGetFromISR(thread_id));  
 8005b20:	f001 fc3a 	bl	8007398 <uxTaskPriorityGetFromISR>
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 8005b24:	2806      	cmp	r0, #6
 8005b26:	d806      	bhi.n	8005b36 <osThreadGetPriority+0x1e>
    priority = (osPriority)((int)osPriorityIdle + (int)(fpriority - tskIDLE_PRIORITY));
 8005b28:	3803      	subs	r0, #3
 8005b2a:	b200      	sxth	r0, r0
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
  }
#else
  return osPriorityError;
#endif
}
 8005b2c:	bd08      	pop	{r3, pc}
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
 8005b2e:	f001 fc1f 	bl	8007370 <uxTaskPriorityGet>
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 8005b32:	2806      	cmp	r0, #6
 8005b34:	d9f8      	bls.n	8005b28 <osThreadGetPriority+0x10>
  osPriority priority = osPriorityError;
 8005b36:	2084      	movs	r0, #132	@ 0x84
}
 8005b38:	bd08      	pop	{r3, pc}
 8005b3a:	bf00      	nop

08005b3c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b3c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005b3e:	2801      	cmp	r0, #1
 8005b40:	bf38      	it	cc
 8005b42:	2001      	movcc	r0, #1
 8005b44:	f001 fbe4 	bl	8007310 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005b48:	2000      	movs	r0, #0
 8005b4a:	bd08      	pop	{r3, pc}

08005b4c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8005b4c:	b530      	push	{r4, r5, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8005b4e:	e9d0 5400 	ldrd	r5, r4, [r0]
{
 8005b52:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8005b54:	f1a1 0201 	sub.w	r2, r1, #1
 8005b58:	fab2 f282 	clz	r2, r2
 8005b5c:	4808      	ldr	r0, [pc, #32]	@ (8005b80 <osTimerCreate+0x34>)
{
 8005b5e:	b083      	sub	sp, #12
    return xTimerCreateStatic((const char *)"",
 8005b60:	0952      	lsrs	r2, r2, #5
  if(timer_def->controlblock != NULL) {
 8005b62:	b134      	cbz	r4, 8005b72 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8005b64:	e9cd 5400 	strd	r5, r4, [sp]
 8005b68:	2101      	movs	r1, #1
 8005b6a:	f002 f93b 	bl	8007de4 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8005b6e:	b003      	add	sp, #12
 8005b70:	bd30      	pop	{r4, r5, pc}
    return xTimerCreate((const char *)"",
 8005b72:	9500      	str	r5, [sp, #0]
 8005b74:	2101      	movs	r1, #1
 8005b76:	f002 f8cd 	bl	8007d14 <xTimerCreate>
}
 8005b7a:	b003      	add	sp, #12
 8005b7c:	bd30      	pop	{r4, r5, pc}
 8005b7e:	bf00      	nop
 8005b80:	0800a238 	.word	0x0800a238

08005b84 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8005b84:	b510      	push	{r4, lr}
 8005b86:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8005b88:	2400      	movs	r4, #0
 8005b8a:	2901      	cmp	r1, #1
 8005b8c:	460a      	mov	r2, r1
 8005b8e:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8005b90:	bf38      	it	cc
 8005b92:	2201      	movcc	r2, #1
 8005b94:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 8005b98:	b14b      	cbz	r3, 8005bae <osTimerStart+0x2a>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8005b9a:	9400      	str	r4, [sp, #0]
 8005b9c:	ab03      	add	r3, sp, #12
 8005b9e:	2109      	movs	r1, #9
 8005ba0:	f002 f9a0 	bl	8007ee4 <xTimerGenericCommand>
 8005ba4:	2801      	cmp	r0, #1
 8005ba6:	d00b      	beq.n	8005bc0 <osTimerStart+0x3c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 8005ba8:	20ff      	movs	r0, #255	@ 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 8005baa:	b004      	add	sp, #16
 8005bac:	bd10      	pop	{r4, pc}
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	2104      	movs	r1, #4
 8005bb2:	f002 f997 	bl	8007ee4 <xTimerGenericCommand>
 8005bb6:	2801      	cmp	r0, #1
 8005bb8:	d1f6      	bne.n	8005ba8 <osTimerStart+0x24>
  osStatus result = osOK;
 8005bba:	2000      	movs	r0, #0
}
 8005bbc:	b004      	add	sp, #16
 8005bbe:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8005bc0:	9b03      	ldr	r3, [sp, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f9      	beq.n	8005bba <osTimerStart+0x36>
 8005bc6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8005bda:	2000      	movs	r0, #0
  return result;
 8005bdc:	e7ee      	b.n	8005bbc <osTimerStart+0x38>
 8005bde:	bf00      	nop

08005be0 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8005be0:	b500      	push	{lr}
 8005be2:	b085      	sub	sp, #20
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8005be4:	2200      	movs	r2, #0
 8005be6:	9203      	str	r2, [sp, #12]
 8005be8:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 8005bec:	b1b3      	cbz	r3, 8005c1c <osTimerStop+0x3c>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8005bee:	9200      	str	r2, [sp, #0]
 8005bf0:	ab03      	add	r3, sp, #12
 8005bf2:	2108      	movs	r1, #8
 8005bf4:	f002 f976 	bl	8007ee4 <xTimerGenericCommand>
 8005bf8:	2801      	cmp	r0, #1
 8005bfa:	d116      	bne.n	8005c2a <osTimerStop+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	b14b      	cbz	r3, 8005c14 <osTimerStop+0x34>
 8005c00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005c04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c08:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8005c14:	2000      	movs	r0, #0
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 8005c16:	b005      	add	sp, #20
 8005c18:	f85d fb04 	ldr.w	pc, [sp], #4
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	2103      	movs	r1, #3
 8005c22:	f002 f95f 	bl	8007ee4 <xTimerGenericCommand>
 8005c26:	2801      	cmp	r0, #1
 8005c28:	d0f4      	beq.n	8005c14 <osTimerStop+0x34>
      return osErrorOS;
 8005c2a:	20ff      	movs	r0, #255	@ 0xff
}
 8005c2c:	b005      	add	sp, #20
 8005c2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c32:	bf00      	nop

08005c34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c38:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8005c3a:	f001 fc6d 	bl	8007518 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c3e:	4a51      	ldr	r2, [pc, #324]	@ (8005d84 <pvPortMalloc+0x150>)
 8005c40:	6815      	ldr	r5, [r2, #0]
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	d035      	beq.n	8005cb2 <pvPortMalloc+0x7e>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c46:	4b50      	ldr	r3, [pc, #320]	@ (8005d88 <pvPortMalloc+0x154>)
 8005c48:	681e      	ldr	r6, [r3, #0]
 8005c4a:	4234      	tst	r4, r6
 8005c4c:	d12b      	bne.n	8005ca6 <pvPortMalloc+0x72>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c4e:	b354      	cbz	r4, 8005ca6 <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8005c50:	f104 0008 	add.w	r0, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c54:	0764      	lsls	r4, r4, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c56:	bf1c      	itt	ne
 8005c58:	f020 0007 	bicne.w	r0, r0, #7
 8005c5c:	3008      	addne	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c5e:	b310      	cbz	r0, 8005ca6 <pvPortMalloc+0x72>
 8005c60:	f8df e138 	ldr.w	lr, [pc, #312]	@ 8005d9c <pvPortMalloc+0x168>
 8005c64:	f8de c000 	ldr.w	ip, [lr]
 8005c68:	4584      	cmp	ip, r0
 8005c6a:	d31c      	bcc.n	8005ca6 <pvPortMalloc+0x72>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8005c6c:	4c47      	ldr	r4, [pc, #284]	@ (8005d8c <pvPortMalloc+0x158>)
 8005c6e:	6823      	ldr	r3, [r4, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c70:	e003      	b.n	8005c7a <pvPortMalloc+0x46>
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	b122      	cbz	r2, 8005c80 <pvPortMalloc+0x4c>
 8005c76:	461c      	mov	r4, r3
 8005c78:	4613      	mov	r3, r2
 8005c7a:	6859      	ldr	r1, [r3, #4]
 8005c7c:	4281      	cmp	r1, r0
 8005c7e:	d3f8      	bcc.n	8005c72 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c80:	42ab      	cmp	r3, r5
 8005c82:	d010      	beq.n	8005ca6 <pvPortMalloc+0x72>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	6022      	str	r2, [r4, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c88:	1a0a      	subs	r2, r1, r0
 8005c8a:	2a10      	cmp	r2, #16
 8005c8c:	d946      	bls.n	8005d1c <pvPortMalloc+0xe8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c8e:	181c      	adds	r4, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c90:	0761      	lsls	r1, r4, #29
 8005c92:	d02c      	beq.n	8005cee <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	e7fe      	b.n	8005ca4 <pvPortMalloc+0x70>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ca6:	f001 fc3f 	bl	8007528 <xTaskResumeAll>
void *pvReturn = NULL;
 8005caa:	2400      	movs	r4, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8005cac:	4620      	mov	r0, r4
 8005cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cb2:	4b37      	ldr	r3, [pc, #220]	@ (8005d90 <pvPortMalloc+0x15c>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cb4:	4835      	ldr	r0, [pc, #212]	@ (8005d8c <pvPortMalloc+0x158>)
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cb6:	4f34      	ldr	r7, [pc, #208]	@ (8005d88 <pvPortMalloc+0x154>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cb8:	075d      	lsls	r5, r3, #29
	uxAddress -= xHeapStructSize;
 8005cba:	4d36      	ldr	r5, [pc, #216]	@ (8005d94 <pvPortMalloc+0x160>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cbc:	bf18      	it	ne
 8005cbe:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cc0:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cc4:	bf18      	it	ne
 8005cc6:	f023 0307 	bicne.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005cca:	6015      	str	r5, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ccc:	4a32      	ldr	r2, [pc, #200]	@ (8005d98 <pvPortMalloc+0x164>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cce:	6003      	str	r3, [r0, #0]
 8005cd0:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cd2:	1aeb      	subs	r3, r5, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cd4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cd6:	4a31      	ldr	r2, [pc, #196]	@ (8005d9c <pvPortMalloc+0x168>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cd8:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cde:	2200      	movs	r2, #0
 8005ce0:	6042      	str	r2, [r0, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ce2:	603e      	str	r6, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8005ce4:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ce8:	e9c1 5300 	strd	r5, r3, [r1]
}
 8005cec:	e7ad      	b.n	8005c4a <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cee:	6062      	str	r2, [r4, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cf0:	4a26      	ldr	r2, [pc, #152]	@ (8005d8c <pvPortMalloc+0x158>)
						pxBlock->xBlockSize = xWantedSize;
 8005cf2:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cf4:	4617      	mov	r7, r2
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	4294      	cmp	r4, r2
 8005cfa:	d8fb      	bhi.n	8005cf4 <pvPortMalloc+0xc0>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cfc:	6879      	ldr	r1, [r7, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cfe:	f8d4 8004 	ldr.w	r8, [r4, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d02:	eb07 0901 	add.w	r9, r7, r1
 8005d06:	454c      	cmp	r4, r9
 8005d08:	d028      	beq.n	8005d5c <pvPortMalloc+0x128>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d0a:	eb04 0108 	add.w	r1, r4, r8
 8005d0e:	428a      	cmp	r2, r1
 8005d10:	d02e      	beq.n	8005d70 <pvPortMalloc+0x13c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d12:	6022      	str	r2, [r4, #0]
 8005d14:	4601      	mov	r1, r0

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d16:	42a7      	cmp	r7, r4
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d18:	bf18      	it	ne
 8005d1a:	603c      	strne	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d1c:	481e      	ldr	r0, [pc, #120]	@ (8005d98 <pvPortMalloc+0x164>)
 8005d1e:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d20:	ebac 0201 	sub.w	r2, ip, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d24:	42a2      	cmp	r2, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d26:	bf38      	it	cc
 8005d28:	6002      	strcc	r2, [r0, #0]
					xNumberOfSuccessfulAllocations++;
 8005d2a:	481d      	ldr	r0, [pc, #116]	@ (8005da0 <pvPortMalloc+0x16c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d2c:	f8ce 2000 	str.w	r2, [lr]
					xNumberOfSuccessfulAllocations++;
 8005d30:	6802      	ldr	r2, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d32:	4331      	orrs	r1, r6
					pxBlock->pxNextFreeBlock = NULL;
 8005d34:	2500      	movs	r5, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d36:	f103 0408 	add.w	r4, r3, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d3a:	6059      	str	r1, [r3, #4]
					xNumberOfSuccessfulAllocations++;
 8005d3c:	3201      	adds	r2, #1
					pxBlock->pxNextFreeBlock = NULL;
 8005d3e:	601d      	str	r5, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d40:	6002      	str	r2, [r0, #0]
	( void ) xTaskResumeAll();
 8005d42:	f001 fbf1 	bl	8007528 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d46:	0763      	lsls	r3, r4, #29
 8005d48:	d0b0      	beq.n	8005cac <pvPortMalloc+0x78>
 8005d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	e7fe      	b.n	8005d5a <pvPortMalloc+0x126>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d5c:	4488      	add	r8, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d5e:	eb07 0108 	add.w	r1, r7, r8
 8005d62:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d64:	f8c7 8004 	str.w	r8, [r7, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d68:	d001      	beq.n	8005d6e <pvPortMalloc+0x13a>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d6a:	6859      	ldr	r1, [r3, #4]
 8005d6c:	e7d6      	b.n	8005d1c <pvPortMalloc+0xe8>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d6e:	463c      	mov	r4, r7
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d70:	42aa      	cmp	r2, r5
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d72:	bf1c      	itt	ne
 8005d74:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d76:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d78:	6022      	str	r2, [r4, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d7a:	bf1c      	itt	ne
 8005d7c:	4441      	addne	r1, r8
 8005d7e:	6061      	strne	r1, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d80:	6859      	ldr	r1, [r3, #4]
 8005d82:	e7c8      	b.n	8005d16 <pvPortMalloc+0xe2>
 8005d84:	200014c0 	.word	0x200014c0
 8005d88:	200014ac 	.word	0x200014ac
 8005d8c:	200014c4 	.word	0x200014c4
 8005d90:	200014cc 	.word	0x200014cc
 8005d94:	200050c4 	.word	0x200050c4
 8005d98:	200014b8 	.word	0x200014b8
 8005d9c:	200014bc 	.word	0x200014bc
 8005da0:	200014b4 	.word	0x200014b4

08005da4 <vPortFree>:
	if( pv != NULL )
 8005da4:	b1d0      	cbz	r0, 8005ddc <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005da6:	4a2c      	ldr	r2, [pc, #176]	@ (8005e58 <vPortFree+0xb4>)
 8005da8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	4213      	tst	r3, r2
 8005db0:	d00b      	beq.n	8005dca <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005db2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005db6:	b191      	cbz	r1, 8005dde <vPortFree+0x3a>
 8005db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	e7fe      	b.n	8005dc8 <vPortFree+0x24>
 8005dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005dda:	e7fe      	b.n	8005dda <vPortFree+0x36>
 8005ddc:	4770      	bx	lr
{
 8005dde:	b570      	push	{r4, r5, r6, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005de0:	ea23 0302 	bic.w	r3, r3, r2
{
 8005de4:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005de6:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dea:	4c1c      	ldr	r4, [pc, #112]	@ (8005e5c <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dec:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8005dee:	f001 fb93 	bl	8007518 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005df2:	9801      	ldr	r0, [sp, #4]
 8005df4:	6822      	ldr	r2, [r4, #0]
 8005df6:	f850 5c04 	ldr.w	r5, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005dfa:	4b19      	ldr	r3, [pc, #100]	@ (8005e60 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dfc:	1951      	adds	r1, r2, r5
 8005dfe:	6021      	str	r1, [r4, #0]
		puc -= xHeapStructSize;
 8005e00:	f1a0 0208 	sub.w	r2, r0, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e04:	4619      	mov	r1, r3
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d8fb      	bhi.n	8005e04 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e0c:	684e      	ldr	r6, [r1, #4]
 8005e0e:	198c      	adds	r4, r1, r6
 8005e10:	42a2      	cmp	r2, r4
 8005e12:	d011      	beq.n	8005e38 <vPortFree+0x94>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e14:	eb02 0e05 	add.w	lr, r2, r5
 8005e18:	4573      	cmp	r3, lr
 8005e1a:	d013      	beq.n	8005e44 <vPortFree+0xa0>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e1c:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
 8005e20:	4291      	cmp	r1, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e22:	bf18      	it	ne
 8005e24:	600a      	strne	r2, [r1, #0]
					xNumberOfSuccessfulFrees++;
 8005e26:	4a0f      	ldr	r2, [pc, #60]	@ (8005e64 <vPortFree+0xc0>)
 8005e28:	6813      	ldr	r3, [r2, #0]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	6013      	str	r3, [r2, #0]
}
 8005e2e:	b002      	add	sp, #8
 8005e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				( void ) xTaskResumeAll();
 8005e34:	f001 bb78 	b.w	8007528 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e38:	4435      	add	r5, r6
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e3a:	194a      	adds	r2, r1, r5
 8005e3c:	4293      	cmp	r3, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e3e:	604d      	str	r5, [r1, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e40:	d1f1      	bne.n	8005e26 <vPortFree+0x82>
 8005e42:	460a      	mov	r2, r1
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e44:	4808      	ldr	r0, [pc, #32]	@ (8005e68 <vPortFree+0xc4>)
 8005e46:	6800      	ldr	r0, [r0, #0]
 8005e48:	4283      	cmp	r3, r0
 8005e4a:	d003      	beq.n	8005e54 <vPortFree+0xb0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e4c:	e9d3 0400 	ldrd	r0, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e50:	1963      	adds	r3, r4, r5
 8005e52:	6053      	str	r3, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e54:	6010      	str	r0, [r2, #0]
 8005e56:	e7e3      	b.n	8005e20 <vPortFree+0x7c>
 8005e58:	200014ac 	.word	0x200014ac
 8005e5c:	200014bc 	.word	0x200014bc
 8005e60:	200014c4 	.word	0x200014c4
 8005e64:	200014b0 	.word	0x200014b0
 8005e68:	200014c0 	.word	0x200014c0

08005e6c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e6c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e70:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e74:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e76:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e7a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e7e:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop

08005e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop

08005e8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e8c:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005e8e:	6803      	ldr	r3, [r0, #0]
{
 8005e90:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e92:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 8005e94:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e96:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e9a:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e9c:	6091      	str	r1, [r2, #8]
}
 8005e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8005ea2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005ea4:	6003      	str	r3, [r0, #0]
}
 8005ea6:	4770      	bx	lr

08005ea8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ea8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005eaa:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eac:	1c6b      	adds	r3, r5, #1
 8005eae:	d010      	beq.n	8005ed2 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005eb0:	f100 0308 	add.w	r3, r0, #8
 8005eb4:	461c      	mov	r4, r3
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	42aa      	cmp	r2, r5
 8005ebc:	d9fa      	bls.n	8005eb4 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005ebe:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ec0:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005ec2:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ec4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ec6:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ec8:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8005eca:	6108      	str	r0, [r1, #16]
}
 8005ecc:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8005ece:	6002      	str	r2, [r0, #0]
}
 8005ed0:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ed2:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	e7f2      	b.n	8005ebe <vListInsert+0x16>

08005ed8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ed8:	6903      	ldr	r3, [r0, #16]
{
 8005eda:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005edc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ee0:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ee2:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8005ee4:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ee6:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ee8:	bf08      	it	eq
 8005eea:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8005eec:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8005eee:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8005ef2:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8005ef4:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8005ef6:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005ef8:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8005efa:	6818      	ldr	r0, [r3, #0]
}
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop

08005f00 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f00:	4808      	ldr	r0, [pc, #32]	@ (8005f24 <prvPortStartFirstTask+0x24>)
 8005f02:	6800      	ldr	r0, [r0, #0]
 8005f04:	6800      	ldr	r0, [r0, #0]
 8005f06:	f380 8808 	msr	MSP, r0
 8005f0a:	f04f 0000 	mov.w	r0, #0
 8005f0e:	f380 8814 	msr	CONTROL, r0
 8005f12:	b662      	cpsie	i
 8005f14:	b661      	cpsie	f
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	df00      	svc	0
 8005f20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f22:	0000      	.short	0x0000
 8005f24:	e000ed08 	.word	0xe000ed08

08005f28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f28:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005f38 <vPortEnableVFP+0x10>
 8005f2c:	6801      	ldr	r1, [r0, #0]
 8005f2e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005f32:	6001      	str	r1, [r0, #0]
 8005f34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f36:	0000      	.short	0x0000
 8005f38:	e000ed88 	.word	0xe000ed88

08005f3c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f78 <prvTaskExitError+0x3c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
{
 8005f40:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005f42:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8005f44:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8005f46:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005f48:	d008      	beq.n	8005f5c <prvTaskExitError+0x20>
 8005f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	e7fe      	b.n	8005f5a <prvTaskExitError+0x1e>
 8005f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8005f6c:	9b01      	ldr	r3, [sp, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0fc      	beq.n	8005f6c <prvTaskExitError+0x30>
}
 8005f72:	b002      	add	sp, #8
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	200005f0 	.word	0x200005f0

08005f7c <pxPortInitialiseStack>:
{
 8005f7c:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f82:	4c07      	ldr	r4, [pc, #28]	@ (8005fa0 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f84:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f88:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f8c:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f90:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f94:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 8005f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f9c:	3844      	subs	r0, #68	@ 0x44
 8005f9e:	4770      	bx	lr
 8005fa0:	08005f3d 	.word	0x08005f3d
	...

08005fb0 <SVC_Handler>:
	__asm volatile (
 8005fb0:	4b07      	ldr	r3, [pc, #28]	@ (8005fd0 <pxCurrentTCBConst2>)
 8005fb2:	6819      	ldr	r1, [r3, #0]
 8005fb4:	6808      	ldr	r0, [r1, #0]
 8005fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fba:	f380 8809 	msr	PSP, r0
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f04f 0000 	mov.w	r0, #0
 8005fc6:	f380 8811 	msr	BASEPRI, r0
 8005fca:	4770      	bx	lr
 8005fcc:	f3af 8000 	nop.w

08005fd0 <pxCurrentTCBConst2>:
 8005fd0:	2000523c 	.word	0x2000523c

08005fd4 <vPortEnterCritical>:
 8005fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8006014 <vPortEnterCritical+0x40>)
 8005fe6:	6813      	ldr	r3, [r2, #0]
 8005fe8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8005fea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005fec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005fee:	d000      	beq.n	8005ff2 <vPortEnterCritical+0x1e>
}
 8005ff0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ff2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005ff6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f7      	beq.n	8005ff0 <vPortEnterCritical+0x1c>
 8006000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	e7fe      	b.n	8006010 <vPortEnterCritical+0x3c>
 8006012:	bf00      	nop
 8006014:	200005f0 	.word	0x200005f0

08006018 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006018:	4a08      	ldr	r2, [pc, #32]	@ (800603c <vPortExitCritical+0x24>)
 800601a:	6813      	ldr	r3, [r2, #0]
 800601c:	b943      	cbnz	r3, 8006030 <vPortExitCritical+0x18>
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	e7fe      	b.n	800602e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006030:	3b01      	subs	r3, #1
 8006032:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006034:	b90b      	cbnz	r3, 800603a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006036:	f383 8811 	msr	BASEPRI, r3
}
 800603a:	4770      	bx	lr
 800603c:	200005f0 	.word	0x200005f0

08006040 <PendSV_Handler>:
	__asm volatile
 8006040:	f3ef 8009 	mrs	r0, PSP
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <pxCurrentTCBConst>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	f01e 0f10 	tst.w	lr, #16
 8006050:	bf08      	it	eq
 8006052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	6010      	str	r0, [r2, #0]
 800605c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006064:	f380 8811 	msr	BASEPRI, r0
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f001 fa80 	bl	8007574 <vTaskSwitchContext>
 8006074:	f04f 0000 	mov.w	r0, #0
 8006078:	f380 8811 	msr	BASEPRI, r0
 800607c:	bc09      	pop	{r0, r3}
 800607e:	6819      	ldr	r1, [r3, #0]
 8006080:	6808      	ldr	r0, [r1, #0]
 8006082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006086:	f01e 0f10 	tst.w	lr, #16
 800608a:	bf08      	it	eq
 800608c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006090:	f380 8809 	msr	PSP, r0
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	f3af 8000 	nop.w

080060a0 <pxCurrentTCBConst>:
 80060a0:	2000523c 	.word	0x2000523c

080060a4 <SysTick_Handler>:
{
 80060a4:	b508      	push	{r3, lr}
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80060b6:	f001 fa4d 	bl	8007554 <xTaskIncrementTick>
 80060ba:	b128      	cbz	r0, 80060c8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80060c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80060c8:	2300      	movs	r3, #0
 80060ca:	f383 8811 	msr	BASEPRI, r3
}
 80060ce:	bd08      	pop	{r3, pc}

080060d0 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80060d4:	4a48      	ldr	r2, [pc, #288]	@ (80061f8 <xPortStartScheduler+0x128>)
 80060d6:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80060da:	4291      	cmp	r1, r2
 80060dc:	d041      	beq.n	8006162 <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060de:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80060e2:	4b46      	ldr	r3, [pc, #280]	@ (80061fc <xPortStartScheduler+0x12c>)
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d033      	beq.n	8006150 <xPortStartScheduler+0x80>
{
 80060e8:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060ea:	4b45      	ldr	r3, [pc, #276]	@ (8006200 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060ec:	4c45      	ldr	r4, [pc, #276]	@ (8006204 <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060ee:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060f0:	4845      	ldr	r0, [pc, #276]	@ (8006208 <xPortStartScheduler+0x138>)
{
 80060f2:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060f4:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060fa:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006104:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006108:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800610c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006110:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006112:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006114:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006116:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006118:	bf48      	it	mi
 800611a:	2206      	movmi	r2, #6
 800611c:	d50f      	bpl.n	800613e <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800611e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800612a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800612e:	061b      	lsls	r3, r3, #24
 8006130:	4611      	mov	r1, r2
 8006132:	f102 32ff 	add.w	r2, r2, #4294967295
 8006136:	d4f2      	bmi.n	800611e <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006138:	2903      	cmp	r1, #3
 800613a:	d01b      	beq.n	8006174 <xPortStartScheduler+0xa4>
 800613c:	6001      	str	r1, [r0, #0]
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	e7fe      	b.n	800614e <xPortStartScheduler+0x7e>
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006160:	e7fe      	b.n	8006160 <xPortStartScheduler+0x90>
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006172:	e7fe      	b.n	8006172 <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006174:	9b02      	ldr	r3, [sp, #8]
 8006176:	4a22      	ldr	r2, [pc, #136]	@ (8006200 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8006178:	4d24      	ldr	r5, [pc, #144]	@ (800620c <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800617a:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800617e:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006182:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006184:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006186:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006188:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800618c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006190:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006194:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006198:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800619c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	uxCriticalNesting = 0;
 80061a0:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 80061a2:	f7fc fd8f 	bl	8002cc4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80061a6:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 80061a8:	f7ff febe 	bl	8005f28 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061ac:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80061b0:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80061b4:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80061b8:	f7ff fea2 	bl	8005f00 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80061bc:	f001 f9da 	bl	8007574 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 80061c0:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 80061c2:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 80061c4:	3301      	adds	r3, #1
 80061c6:	d008      	beq.n	80061da <xPortStartScheduler+0x10a>
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	e7fe      	b.n	80061d8 <xPortStartScheduler+0x108>
 80061da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80061ea:	9b03      	ldr	r3, [sp, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0fc      	beq.n	80061ea <xPortStartScheduler+0x11a>
}
 80061f0:	2000      	movs	r0, #0
 80061f2:	b004      	add	sp, #16
 80061f4:	bd70      	pop	{r4, r5, r6, pc}
 80061f6:	bf00      	nop
 80061f8:	410fc271 	.word	0x410fc271
 80061fc:	410fc270 	.word	0x410fc270
 8006200:	e000e400 	.word	0xe000e400
 8006204:	200050d0 	.word	0x200050d0
 8006208:	200050cc 	.word	0x200050cc
 800620c:	200005f0 	.word	0x200005f0

08006210 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006210:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006214:	2b0f      	cmp	r3, #15
 8006216:	d90e      	bls.n	8006236 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006218:	4911      	ldr	r1, [pc, #68]	@ (8006260 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800621a:	4a12      	ldr	r2, [pc, #72]	@ (8006264 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800621c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800621e:	7812      	ldrb	r2, [r2, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d908      	bls.n	8006236 <vPortValidateInterruptPriority+0x26>
 8006224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	e7fe      	b.n	8006234 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006236:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800623a:	4a0b      	ldr	r2, [pc, #44]	@ (8006268 <vPortValidateInterruptPriority+0x58>)
 800623c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006246:	4293      	cmp	r3, r2
 8006248:	d908      	bls.n	800625c <vPortValidateInterruptPriority+0x4c>
 800624a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	e7fe      	b.n	800625a <vPortValidateInterruptPriority+0x4a>
	}
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	e000e3f0 	.word	0xe000e3f0
 8006264:	200050d0 	.word	0x200050d0
 8006268:	200050cc 	.word	0x200050cc

0800626c <prvCopyDataToQueue>:

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800626c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 800626e:	b570      	push	{r4, r5, r6, lr}
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006270:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8006272:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006274:	b92b      	cbnz	r3, 8006282 <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006276:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006278:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800627a:	b35e      	cbz	r6, 80062d4 <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 800627c:	4618      	mov	r0, r3
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800627e:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8006280:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006282:	4616      	mov	r6, r2
 8006284:	b982      	cbnz	r2, 80062a8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006286:	461a      	mov	r2, r3
 8006288:	6840      	ldr	r0, [r0, #4]
 800628a:	f003 fdf5 	bl	8009e78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800628e:	6863      	ldr	r3, [r4, #4]
 8006290:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006292:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006294:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006296:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006298:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800629a:	bf24      	itt	cs
 800629c:	6823      	ldrcs	r3, [r4, #0]
 800629e:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062a0:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 80062a2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062a4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80062a6:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062a8:	461a      	mov	r2, r3
 80062aa:	68c0      	ldr	r0, [r0, #12]
 80062ac:	f003 fde4 	bl	8009e78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062b0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80062b2:	68e3      	ldr	r3, [r4, #12]
 80062b4:	4251      	negs	r1, r2
 80062b6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062b8:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062ba:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062bc:	4293      	cmp	r3, r2
 80062be:	d202      	bcs.n	80062c6 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062c0:	68a3      	ldr	r3, [r4, #8]
 80062c2:	440b      	add	r3, r1
 80062c4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80062c6:	2e02      	cmp	r6, #2
 80062c8:	d1ea      	bne.n	80062a0 <prvCopyDataToQueue+0x34>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062ca:	2d01      	cmp	r5, #1
 80062cc:	bf38      	it	cc
 80062ce:	2501      	movcc	r5, #1
BaseType_t xReturn = pdFALSE;
 80062d0:	2000      	movs	r0, #0
 80062d2:	e7d4      	b.n	800627e <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062d4:	6880      	ldr	r0, [r0, #8]
 80062d6:	f001 fae1 	bl	800789c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062da:	60a6      	str	r6, [r4, #8]
 80062dc:	e7cf      	b.n	800627e <prvCopyDataToQueue+0x12>
 80062de:	bf00      	nop

080062e0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062e0:	b940      	cbnz	r0, 80062f4 <xQueueGenericCreateStatic+0x14>
 80062e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	e7fe      	b.n	80062f2 <xQueueGenericCreateStatic+0x12>
	{
 80062f4:	b510      	push	{r4, lr}
 80062f6:	461c      	mov	r4, r3
 80062f8:	b082      	sub	sp, #8
		configASSERT( pxStaticQueue != NULL );
 80062fa:	b183      	cbz	r3, 800631e <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062fc:	2a00      	cmp	r2, #0
 80062fe:	d048      	beq.n	8006392 <xQueueGenericCreateStatic+0xb2>
 8006300:	b1b1      	cbz	r1, 8006330 <xQueueGenericCreateStatic+0x50>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006302:	2348      	movs	r3, #72	@ 0x48
 8006304:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006306:	9b01      	ldr	r3, [sp, #4]
 8006308:	2b48      	cmp	r3, #72	@ 0x48
 800630a:	d01a      	beq.n	8006342 <xQueueGenericCreateStatic+0x62>
 800630c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	e7fe      	b.n	800631c <xQueueGenericCreateStatic+0x3c>
 800631e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800632e:	e7fe      	b.n	800632e <xQueueGenericCreateStatic+0x4e>
 8006330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006340:	e7fe      	b.n	8006340 <xQueueGenericCreateStatic+0x60>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006342:	9b01      	ldr	r3, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006344:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006346:	2301      	movs	r3, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8006348:	e9c4 010f 	strd	r0, r1, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800634c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
	taskENTER_CRITICAL();
 8006350:	f7ff fe40 	bl	8005fd4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006354:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
 8006358:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800635a:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800635c:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006360:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006362:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006364:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006366:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006368:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800636a:	22ff      	movs	r2, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800636c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800636e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006370:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006374:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8006378:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800637c:	f7ff fd76 	bl	8005e6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006380:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006384:	f7ff fd72 	bl	8005e6c <vListInitialise>
	taskEXIT_CRITICAL();
 8006388:	f7ff fe46 	bl	8006018 <vPortExitCritical>
	}
 800638c:	4620      	mov	r0, r4
 800638e:	b002      	add	sp, #8
 8006390:	bd10      	pop	{r4, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006392:	b939      	cbnz	r1, 80063a4 <xQueueGenericCreateStatic+0xc4>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006394:	2348      	movs	r3, #72	@ 0x48
 8006396:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006398:	9b01      	ldr	r3, [sp, #4]
 800639a:	2b48      	cmp	r3, #72	@ 0x48
 800639c:	d1b6      	bne.n	800630c <xQueueGenericCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800639e:	9b01      	ldr	r3, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063a0:	4622      	mov	r2, r4
 80063a2:	e7cf      	b.n	8006344 <xQueueGenericCreateStatic+0x64>
 80063a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063b4:	e7fe      	b.n	80063b4 <xQueueGenericCreateStatic+0xd4>
 80063b6:	bf00      	nop

080063b8 <xQueueGenericSend>:
{
 80063b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063bc:	b085      	sub	sp, #20
 80063be:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d043      	beq.n	800644c <xQueueGenericSend+0x94>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c4:	4688      	mov	r8, r1
 80063c6:	461f      	mov	r7, r3
 80063c8:	4604      	mov	r4, r0
 80063ca:	b399      	cbz	r1, 8006434 <xQueueGenericSend+0x7c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063cc:	2f02      	cmp	r7, #2
 80063ce:	d10b      	bne.n	80063e8 <xQueueGenericSend+0x30>
 80063d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d008      	beq.n	80063e8 <xQueueGenericSend+0x30>
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	e7fe      	b.n	80063e6 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063e8:	f001 fa48 	bl	800787c <xTaskGetSchedulerState>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d036      	beq.n	800645e <xQueueGenericSend+0xa6>
		taskENTER_CRITICAL();
 80063f0:	f7ff fdf0 	bl	8005fd4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80063f6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d301      	bcc.n	8006400 <xQueueGenericSend+0x48>
 80063fc:	2f02      	cmp	r7, #2
 80063fe:	d13a      	bne.n	8006476 <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006400:	463a      	mov	r2, r7
 8006402:	4641      	mov	r1, r8
 8006404:	4620      	mov	r0, r4
 8006406:	f7ff ff31 	bl	800626c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800640a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800640c:	2b00      	cmp	r3, #0
 800640e:	f040 814b 	bne.w	80066a8 <xQueueGenericSend+0x2f0>
					else if( xYieldRequired != pdFALSE )
 8006412:	b148      	cbz	r0, 8006428 <xQueueGenericSend+0x70>
						queueYIELD_IF_USING_PREEMPTION();
 8006414:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800641c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006428:	f7ff fdf6 	bl	8006018 <vPortExitCritical>
				return pdPASS;
 800642c:	2001      	movs	r0, #1
}
 800642e:	b005      	add	sp, #20
 8006430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006434:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0c8      	beq.n	80063cc <xQueueGenericSend+0x14>
 800643a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	e7fe      	b.n	800644a <xQueueGenericSend+0x92>
 800644c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800645c:	e7fe      	b.n	800645c <xQueueGenericSend+0xa4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0c5      	beq.n	80063f0 <xQueueGenericSend+0x38>
 8006464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	e7fe      	b.n	8006474 <xQueueGenericSend+0xbc>
 8006476:	2200      	movs	r2, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006478:	f104 0624 	add.w	r6, r4, #36	@ 0x24
				if( xTicksToWait == ( TickType_t ) 0 )
 800647c:	9b01      	ldr	r3, [sp, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 80d1 	beq.w	8006626 <xQueueGenericSend+0x26e>
				else if( xEntryTimeSet == pdFALSE )
 8006484:	2a00      	cmp	r2, #0
 8006486:	f000 80ca 	beq.w	800661e <xQueueGenericSend+0x266>
		taskEXIT_CRITICAL();
 800648a:	f7ff fdc5 	bl	8006018 <vPortExitCritical>
		vTaskSuspendAll();
 800648e:	f001 f843 	bl	8007518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006492:	f7ff fd9f 	bl	8005fd4 <vPortEnterCritical>
 8006496:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800649a:	2bff      	cmp	r3, #255	@ 0xff
 800649c:	bf04      	itt	eq
 800649e:	2300      	moveq	r3, #0
 80064a0:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 80064a4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80064a8:	2bff      	cmp	r3, #255	@ 0xff
 80064aa:	bf04      	itt	eq
 80064ac:	2300      	moveq	r3, #0
 80064ae:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80064b2:	f7ff fdb1 	bl	8006018 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b6:	a901      	add	r1, sp, #4
 80064b8:	a802      	add	r0, sp, #8
 80064ba:	f001 f997 	bl	80077ec <xTaskCheckForTimeOut>
 80064be:	2800      	cmp	r0, #0
 80064c0:	f040 80b5 	bne.w	800662e <xQueueGenericSend+0x276>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064c4:	f7ff fd86 	bl	8005fd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064c8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80064ca:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d04c      	beq.n	800656a <xQueueGenericSend+0x1b2>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80064d0:	f7ff fda2 	bl	8006018 <vPortExitCritical>
	taskENTER_CRITICAL();
 80064d4:	f7ff fd7e 	bl	8005fd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80064d8:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80064dc:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064de:	2d00      	cmp	r5, #0
 80064e0:	dc04      	bgt.n	80064ec <xQueueGenericSend+0x134>
 80064e2:	e011      	b.n	8006508 <xQueueGenericSend+0x150>
			--cTxLock;
 80064e4:	1e6a      	subs	r2, r5, #1
 80064e6:	b2d3      	uxtb	r3, r2
 80064e8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064ea:	b16b      	cbz	r3, 8006508 <xQueueGenericSend+0x150>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064ee:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064f0:	b153      	cbz	r3, 8006508 <xQueueGenericSend+0x150>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064f2:	f001 f92b 	bl	800774c <xTaskRemoveFromEventList>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d0f4      	beq.n	80064e4 <xQueueGenericSend+0x12c>
						vTaskMissedYield();
 80064fa:	f001 f9b9 	bl	8007870 <vTaskMissedYield>
			--cTxLock;
 80064fe:	1e6a      	subs	r2, r5, #1
 8006500:	b2d3      	uxtb	r3, r2
 8006502:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f1      	bne.n	80064ec <xQueueGenericSend+0x134>
		pxQueue->cTxLock = queueUNLOCKED;
 8006508:	23ff      	movs	r3, #255	@ 0xff
 800650a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800650e:	f7ff fd83 	bl	8006018 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006512:	f7ff fd5f 	bl	8005fd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006516:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800651a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800651c:	2d00      	cmp	r5, #0
 800651e:	dd14      	ble.n	800654a <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006520:	f104 0910 	add.w	r9, r4, #16
 8006524:	e003      	b.n	800652e <xQueueGenericSend+0x176>
				--cRxLock;
 8006526:	1e6a      	subs	r2, r5, #1
 8006528:	b2d3      	uxtb	r3, r2
 800652a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800652c:	b16b      	cbz	r3, 800654a <xQueueGenericSend+0x192>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800652e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006530:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006532:	b153      	cbz	r3, 800654a <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006534:	f001 f90a 	bl	800774c <xTaskRemoveFromEventList>
 8006538:	2800      	cmp	r0, #0
 800653a:	d0f4      	beq.n	8006526 <xQueueGenericSend+0x16e>
					vTaskMissedYield();
 800653c:	f001 f998 	bl	8007870 <vTaskMissedYield>
				--cRxLock;
 8006540:	1e6a      	subs	r2, r5, #1
 8006542:	b2d3      	uxtb	r3, r2
 8006544:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f1      	bne.n	800652e <xQueueGenericSend+0x176>
		pxQueue->cRxLock = queueUNLOCKED;
 800654a:	23ff      	movs	r3, #255	@ 0xff
 800654c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006550:	f7ff fd62 	bl	8006018 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8006554:	f000 ffe8 	bl	8007528 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006558:	f7ff fd3c 	bl	8005fd4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800655c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800655e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006560:	429a      	cmp	r2, r3
 8006562:	f4ff af4d 	bcc.w	8006400 <xQueueGenericSend+0x48>
{
 8006566:	2201      	movs	r2, #1
 8006568:	e788      	b.n	800647c <xQueueGenericSend+0xc4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800656a:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 800656e:	f7ff fd53 	bl	8006018 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006572:	9901      	ldr	r1, [sp, #4]
 8006574:	4648      	mov	r0, r9
 8006576:	f001 f83b 	bl	80075f0 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800657a:	f7ff fd2b 	bl	8005fd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800657e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006582:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006584:	2d00      	cmp	r5, #0
 8006586:	dc04      	bgt.n	8006592 <xQueueGenericSend+0x1da>
 8006588:	e011      	b.n	80065ae <xQueueGenericSend+0x1f6>
			--cTxLock;
 800658a:	1e6b      	subs	r3, r5, #1
 800658c:	b2da      	uxtb	r2, r3
 800658e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006590:	b16a      	cbz	r2, 80065ae <xQueueGenericSend+0x1f6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006592:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006594:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006596:	b153      	cbz	r3, 80065ae <xQueueGenericSend+0x1f6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006598:	f001 f8d8 	bl	800774c <xTaskRemoveFromEventList>
 800659c:	2800      	cmp	r0, #0
 800659e:	d0f4      	beq.n	800658a <xQueueGenericSend+0x1d2>
						vTaskMissedYield();
 80065a0:	f001 f966 	bl	8007870 <vTaskMissedYield>
			--cTxLock;
 80065a4:	1e6b      	subs	r3, r5, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	d1f1      	bne.n	8006592 <xQueueGenericSend+0x1da>
		pxQueue->cTxLock = queueUNLOCKED;
 80065ae:	23ff      	movs	r3, #255	@ 0xff
 80065b0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80065b4:	f7ff fd30 	bl	8006018 <vPortExitCritical>
	taskENTER_CRITICAL();
 80065b8:	f7ff fd0c 	bl	8005fd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80065bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80065c0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065c2:	2d00      	cmp	r5, #0
 80065c4:	dc04      	bgt.n	80065d0 <xQueueGenericSend+0x218>
 80065c6:	e011      	b.n	80065ec <xQueueGenericSend+0x234>
				--cRxLock;
 80065c8:	1e6b      	subs	r3, r5, #1
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065ce:	b16a      	cbz	r2, 80065ec <xQueueGenericSend+0x234>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065d0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065d4:	b153      	cbz	r3, 80065ec <xQueueGenericSend+0x234>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d6:	f001 f8b9 	bl	800774c <xTaskRemoveFromEventList>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d0f4      	beq.n	80065c8 <xQueueGenericSend+0x210>
					vTaskMissedYield();
 80065de:	f001 f947 	bl	8007870 <vTaskMissedYield>
				--cRxLock;
 80065e2:	1e6b      	subs	r3, r5, #1
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065e8:	2a00      	cmp	r2, #0
 80065ea:	d1f1      	bne.n	80065d0 <xQueueGenericSend+0x218>
		pxQueue->cRxLock = queueUNLOCKED;
 80065ec:	23ff      	movs	r3, #255	@ 0xff
 80065ee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80065f2:	f7ff fd11 	bl	8006018 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80065f6:	f000 ff97 	bl	8007528 <xTaskResumeAll>
 80065fa:	b948      	cbnz	r0, 8006610 <xQueueGenericSend+0x258>
					portYIELD_WITHIN_API();
 80065fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006604:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8006610:	f7ff fce0 	bl	8005fd4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006614:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006616:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006618:	429a      	cmp	r2, r3
 800661a:	d9a4      	bls.n	8006566 <xQueueGenericSend+0x1ae>
 800661c:	e6f0      	b.n	8006400 <xQueueGenericSend+0x48>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800661e:	a802      	add	r0, sp, #8
 8006620:	f001 f8d8 	bl	80077d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006624:	e731      	b.n	800648a <xQueueGenericSend+0xd2>
					taskEXIT_CRITICAL();
 8006626:	f7ff fcf7 	bl	8006018 <vPortExitCritical>
					return errQUEUE_FULL;
 800662a:	2000      	movs	r0, #0
 800662c:	e6ff      	b.n	800642e <xQueueGenericSend+0x76>
	taskENTER_CRITICAL();
 800662e:	f7ff fcd1 	bl	8005fd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006632:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006636:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006638:	2d00      	cmp	r5, #0
 800663a:	dd10      	ble.n	800665e <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800663c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 8006640:	e003      	b.n	800664a <xQueueGenericSend+0x292>
			--cTxLock;
 8006642:	1e6b      	subs	r3, r5, #1
 8006644:	b2da      	uxtb	r2, r3
 8006646:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006648:	b14a      	cbz	r2, 800665e <xQueueGenericSend+0x2a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800664a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800664c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800664e:	b133      	cbz	r3, 800665e <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006650:	f001 f87c 	bl	800774c <xTaskRemoveFromEventList>
 8006654:	2800      	cmp	r0, #0
 8006656:	d0f4      	beq.n	8006642 <xQueueGenericSend+0x28a>
						vTaskMissedYield();
 8006658:	f001 f90a 	bl	8007870 <vTaskMissedYield>
 800665c:	e7f1      	b.n	8006642 <xQueueGenericSend+0x28a>
		pxQueue->cTxLock = queueUNLOCKED;
 800665e:	23ff      	movs	r3, #255	@ 0xff
 8006660:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006664:	f7ff fcd8 	bl	8006018 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006668:	f7ff fcb4 	bl	8005fd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800666c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006670:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006672:	2d00      	cmp	r5, #0
 8006674:	dd10      	ble.n	8006698 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006676:	f104 0610 	add.w	r6, r4, #16
 800667a:	e003      	b.n	8006684 <xQueueGenericSend+0x2cc>
				--cRxLock;
 800667c:	1e6b      	subs	r3, r5, #1
 800667e:	b2da      	uxtb	r2, r3
 8006680:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006682:	b14a      	cbz	r2, 8006698 <xQueueGenericSend+0x2e0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006684:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006686:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006688:	b133      	cbz	r3, 8006698 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800668a:	f001 f85f 	bl	800774c <xTaskRemoveFromEventList>
 800668e:	2800      	cmp	r0, #0
 8006690:	d0f4      	beq.n	800667c <xQueueGenericSend+0x2c4>
					vTaskMissedYield();
 8006692:	f001 f8ed 	bl	8007870 <vTaskMissedYield>
 8006696:	e7f1      	b.n	800667c <xQueueGenericSend+0x2c4>
		pxQueue->cRxLock = queueUNLOCKED;
 8006698:	23ff      	movs	r3, #255	@ 0xff
 800669a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800669e:	f7ff fcbb 	bl	8006018 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80066a2:	f000 ff41 	bl	8007528 <xTaskResumeAll>
			return errQUEUE_FULL;
 80066a6:	e7c0      	b.n	800662a <xQueueGenericSend+0x272>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066a8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80066ac:	f001 f84e 	bl	800774c <xTaskRemoveFromEventList>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	f43f aeb9 	beq.w	8006428 <xQueueGenericSend+0x70>
 80066b6:	e6ad      	b.n	8006414 <xQueueGenericSend+0x5c>

080066b8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d048      	beq.n	800674e <xQueueGenericSendFromISR+0x96>
{
 80066bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c0:	460e      	mov	r6, r1
 80066c2:	4617      	mov	r7, r2
 80066c4:	461d      	mov	r5, r3
 80066c6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c8:	b321      	cbz	r1, 8006714 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066ca:	2d02      	cmp	r5, #2
 80066cc:	d10b      	bne.n	80066e6 <xQueueGenericSendFromISR+0x2e>
 80066ce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d008      	beq.n	80066e6 <xQueueGenericSendFromISR+0x2e>
 80066d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	e7fe      	b.n	80066e4 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066e6:	f7ff fd93 	bl	8006210 <vPortValidateInterruptPriority>
	__asm volatile
 80066ea:	f3ef 8811 	mrs	r8, BASEPRI
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066fe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006700:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006702:	429a      	cmp	r2, r3
 8006704:	d312      	bcc.n	800672c <xQueueGenericSendFromISR+0x74>
 8006706:	2d02      	cmp	r5, #2
 8006708:	d010      	beq.n	800672c <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 800670a:	2000      	movs	r0, #0
	__asm volatile
 800670c:	f388 8811 	msr	BASEPRI, r8
}
 8006710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006714:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0d7      	beq.n	80066ca <xQueueGenericSendFromISR+0x12>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	e7fe      	b.n	800672a <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800672c:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 800672e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006732:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006734:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8006736:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006738:	4620      	mov	r0, r4
 800673a:	f7ff fd97 	bl	800626c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800673e:	1c6b      	adds	r3, r5, #1
 8006740:	d00e      	beq.n	8006760 <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006742:	1c6b      	adds	r3, r5, #1
 8006744:	b25b      	sxtb	r3, r3
 8006746:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 800674a:	2001      	movs	r0, #1
 800674c:	e7de      	b.n	800670c <xQueueGenericSendFromISR+0x54>
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800675e:	e7fe      	b.n	800675e <xQueueGenericSendFromISR+0xa6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006760:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f1      	beq.n	800674a <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006766:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800676a:	f000 ffef 	bl	800774c <xTaskRemoveFromEventList>
 800676e:	2800      	cmp	r0, #0
 8006770:	d0eb      	beq.n	800674a <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8006772:	2f00      	cmp	r7, #0
 8006774:	d0e9      	beq.n	800674a <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006776:	2301      	movs	r3, #1
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	e7e6      	b.n	800674a <xQueueGenericSendFromISR+0x92>

0800677c <xQueueReceive>:
{
 800677c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006780:	b085      	sub	sp, #20
 8006782:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006784:	2800      	cmp	r0, #0
 8006786:	f000 8164 	beq.w	8006a52 <xQueueReceive+0x2d6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800678a:	460f      	mov	r7, r1
 800678c:	4604      	mov	r4, r0
 800678e:	2900      	cmp	r1, #0
 8006790:	f000 8097 	beq.w	80068c2 <xQueueReceive+0x146>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006794:	f001 f872 	bl	800787c <xTaskGetSchedulerState>
 8006798:	2800      	cmp	r0, #0
 800679a:	f000 809f 	beq.w	80068dc <xQueueReceive+0x160>
		taskENTER_CRITICAL();
 800679e:	f7ff fc19 	bl	8005fd4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067a2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067a4:	2d00      	cmp	r5, #0
 80067a6:	d175      	bne.n	8006894 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 80067a8:	9b01      	ldr	r3, [sp, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 80f4 	beq.w	8006998 <xQueueReceive+0x21c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067b0:	a802      	add	r0, sp, #8
 80067b2:	f001 f80f 	bl	80077d4 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 80067b6:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067b8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskEXIT_CRITICAL();
 80067bc:	f7ff fc2c 	bl	8006018 <vPortExitCritical>
		vTaskSuspendAll();
 80067c0:	f000 feaa 	bl	8007518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067c4:	f7ff fc06 	bl	8005fd4 <vPortEnterCritical>
 80067c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80067cc:	2bff      	cmp	r3, #255	@ 0xff
 80067ce:	bf08      	it	eq
 80067d0:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80067d4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80067d8:	2bff      	cmp	r3, #255	@ 0xff
 80067da:	bf08      	it	eq
 80067dc:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80067e0:	f7ff fc1a 	bl	8006018 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067e4:	a901      	add	r1, sp, #4
 80067e6:	a802      	add	r0, sp, #8
 80067e8:	f001 f800 	bl	80077ec <xTaskCheckForTimeOut>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f040 8082 	bne.w	80068f6 <xQueueReceive+0x17a>
	taskENTER_CRITICAL();
 80067f2:	f7ff fbef 	bl	8005fd4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067f6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80d3 	beq.w	80069a4 <xQueueReceive+0x228>
	taskEXIT_CRITICAL();
 80067fe:	f7ff fc0b 	bl	8006018 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006802:	f7ff fbe7 	bl	8005fd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006806:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800680a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800680c:	2d00      	cmp	r5, #0
 800680e:	dd14      	ble.n	800683a <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006810:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 8006814:	e003      	b.n	800681e <xQueueReceive+0xa2>
			--cTxLock;
 8006816:	1e6b      	subs	r3, r5, #1
 8006818:	b2da      	uxtb	r2, r3
 800681a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800681c:	b16a      	cbz	r2, 800683a <xQueueReceive+0xbe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800681e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006820:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006822:	b153      	cbz	r3, 800683a <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006824:	f000 ff92 	bl	800774c <xTaskRemoveFromEventList>
 8006828:	2800      	cmp	r0, #0
 800682a:	d0f4      	beq.n	8006816 <xQueueReceive+0x9a>
						vTaskMissedYield();
 800682c:	f001 f820 	bl	8007870 <vTaskMissedYield>
			--cTxLock;
 8006830:	1e6b      	subs	r3, r5, #1
 8006832:	b2da      	uxtb	r2, r3
 8006834:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006836:	2a00      	cmp	r2, #0
 8006838:	d1f1      	bne.n	800681e <xQueueReceive+0xa2>
		pxQueue->cTxLock = queueUNLOCKED;
 800683a:	23ff      	movs	r3, #255	@ 0xff
 800683c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006840:	f7ff fbea 	bl	8006018 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006844:	f7ff fbc6 	bl	8005fd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006848:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800684c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800684e:	2d00      	cmp	r5, #0
 8006850:	dd14      	ble.n	800687c <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006852:	f104 0910 	add.w	r9, r4, #16
 8006856:	e003      	b.n	8006860 <xQueueReceive+0xe4>
				--cRxLock;
 8006858:	1e6b      	subs	r3, r5, #1
 800685a:	b2da      	uxtb	r2, r3
 800685c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800685e:	b16a      	cbz	r2, 800687c <xQueueReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006860:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006862:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006864:	b153      	cbz	r3, 800687c <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006866:	f000 ff71 	bl	800774c <xTaskRemoveFromEventList>
 800686a:	2800      	cmp	r0, #0
 800686c:	d0f4      	beq.n	8006858 <xQueueReceive+0xdc>
					vTaskMissedYield();
 800686e:	f000 ffff 	bl	8007870 <vTaskMissedYield>
				--cRxLock;
 8006872:	1e6b      	subs	r3, r5, #1
 8006874:	b2da      	uxtb	r2, r3
 8006876:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006878:	2a00      	cmp	r2, #0
 800687a:	d1f1      	bne.n	8006860 <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 800687c:	23ff      	movs	r3, #255	@ 0xff
 800687e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006882:	f7ff fbc9 	bl	8006018 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8006886:	f000 fe4f 	bl	8007528 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800688a:	f7ff fba3 	bl	8005fd4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800688e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006890:	2d00      	cmp	r5, #0
 8006892:	d07d      	beq.n	8006990 <xQueueReceive+0x214>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006894:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006896:	b152      	cbz	r2, 80068ae <xQueueReceive+0x132>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006898:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800689a:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800689c:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800689e:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068a0:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068a2:	bf24      	itt	cs
 80068a4:	6821      	ldrcs	r1, [r4, #0]
 80068a6:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068a8:	4638      	mov	r0, r7
 80068aa:	f003 fae5 	bl	8009e78 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068ae:	3d01      	subs	r5, #1
 80068b0:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068b2:	6923      	ldr	r3, [r4, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f040 80d5 	bne.w	8006a64 <xQueueReceive+0x2e8>
				taskEXIT_CRITICAL();
 80068ba:	f7ff fbad 	bl	8006018 <vPortExitCritical>
				return pdPASS;
 80068be:	2001      	movs	r0, #1
 80068c0:	e06d      	b.n	800699e <xQueueReceive+0x222>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068c2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f43f af65 	beq.w	8006794 <xQueueReceive+0x18>
 80068ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	e7fe      	b.n	80068da <xQueueReceive+0x15e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068dc:	9b01      	ldr	r3, [sp, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f43f af5d 	beq.w	800679e <xQueueReceive+0x22>
 80068e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	e7fe      	b.n	80068f4 <xQueueReceive+0x178>
	taskENTER_CRITICAL();
 80068f6:	f7ff fb6d 	bl	8005fd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80068fa:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80068fe:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006900:	2d00      	cmp	r5, #0
 8006902:	dc04      	bgt.n	800690e <xQueueReceive+0x192>
 8006904:	e011      	b.n	800692a <xQueueReceive+0x1ae>
			--cTxLock;
 8006906:	1e6b      	subs	r3, r5, #1
 8006908:	b2da      	uxtb	r2, r3
 800690a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800690c:	b16a      	cbz	r2, 800692a <xQueueReceive+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800690e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006910:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006912:	b153      	cbz	r3, 800692a <xQueueReceive+0x1ae>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006914:	f000 ff1a 	bl	800774c <xTaskRemoveFromEventList>
 8006918:	2800      	cmp	r0, #0
 800691a:	d0f4      	beq.n	8006906 <xQueueReceive+0x18a>
						vTaskMissedYield();
 800691c:	f000 ffa8 	bl	8007870 <vTaskMissedYield>
			--cTxLock;
 8006920:	1e6b      	subs	r3, r5, #1
 8006922:	b2da      	uxtb	r2, r3
 8006924:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006926:	2a00      	cmp	r2, #0
 8006928:	d1f1      	bne.n	800690e <xQueueReceive+0x192>
		pxQueue->cTxLock = queueUNLOCKED;
 800692a:	23ff      	movs	r3, #255	@ 0xff
 800692c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006930:	f7ff fb72 	bl	8006018 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006934:	f7ff fb4e 	bl	8005fd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006938:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800693c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800693e:	2d00      	cmp	r5, #0
 8006940:	dd14      	ble.n	800696c <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006942:	f104 0910 	add.w	r9, r4, #16
 8006946:	e003      	b.n	8006950 <xQueueReceive+0x1d4>
				--cRxLock;
 8006948:	1e6b      	subs	r3, r5, #1
 800694a:	b2da      	uxtb	r2, r3
 800694c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800694e:	b16a      	cbz	r2, 800696c <xQueueReceive+0x1f0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006950:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006952:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006954:	b153      	cbz	r3, 800696c <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006956:	f000 fef9 	bl	800774c <xTaskRemoveFromEventList>
 800695a:	2800      	cmp	r0, #0
 800695c:	d0f4      	beq.n	8006948 <xQueueReceive+0x1cc>
					vTaskMissedYield();
 800695e:	f000 ff87 	bl	8007870 <vTaskMissedYield>
				--cRxLock;
 8006962:	1e6b      	subs	r3, r5, #1
 8006964:	b2da      	uxtb	r2, r3
 8006966:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006968:	2a00      	cmp	r2, #0
 800696a:	d1f1      	bne.n	8006950 <xQueueReceive+0x1d4>
		pxQueue->cRxLock = queueUNLOCKED;
 800696c:	23ff      	movs	r3, #255	@ 0xff
 800696e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006972:	f7ff fb51 	bl	8006018 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8006976:	f000 fdd7 	bl	8007528 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800697a:	f7ff fb2b 	bl	8005fd4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800697e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006980:	b153      	cbz	r3, 8006998 <xQueueReceive+0x21c>
	taskEXIT_CRITICAL();
 8006982:	f7ff fb49 	bl	8006018 <vPortExitCritical>
		taskENTER_CRITICAL();
 8006986:	f7ff fb25 	bl	8005fd4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800698a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800698c:	2d00      	cmp	r5, #0
 800698e:	d181      	bne.n	8006894 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	f47f af12 	bne.w	80067bc <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8006998:	f7ff fb3e 	bl	8006018 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800699c:	2000      	movs	r0, #0
}
 800699e:	b005      	add	sp, #20
 80069a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069a4:	f104 0924 	add.w	r9, r4, #36	@ 0x24
	taskEXIT_CRITICAL();
 80069a8:	f7ff fb36 	bl	8006018 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069ac:	9901      	ldr	r1, [sp, #4]
 80069ae:	4648      	mov	r0, r9
 80069b0:	f000 fe1e 	bl	80075f0 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80069b4:	f7ff fb0e 	bl	8005fd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80069b8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80069bc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069be:	2d00      	cmp	r5, #0
 80069c0:	dc04      	bgt.n	80069cc <xQueueReceive+0x250>
 80069c2:	e011      	b.n	80069e8 <xQueueReceive+0x26c>
			--cTxLock;
 80069c4:	1e6b      	subs	r3, r5, #1
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ca:	b16a      	cbz	r2, 80069e8 <xQueueReceive+0x26c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069ce:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069d0:	b153      	cbz	r3, 80069e8 <xQueueReceive+0x26c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069d2:	f000 febb 	bl	800774c <xTaskRemoveFromEventList>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d0f4      	beq.n	80069c4 <xQueueReceive+0x248>
						vTaskMissedYield();
 80069da:	f000 ff49 	bl	8007870 <vTaskMissedYield>
			--cTxLock;
 80069de:	1e6b      	subs	r3, r5, #1
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	d1f1      	bne.n	80069cc <xQueueReceive+0x250>
		pxQueue->cTxLock = queueUNLOCKED;
 80069e8:	23ff      	movs	r3, #255	@ 0xff
 80069ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80069ee:	f7ff fb13 	bl	8006018 <vPortExitCritical>
	taskENTER_CRITICAL();
 80069f2:	f7ff faef 	bl	8005fd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80069f6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80069fa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	dd14      	ble.n	8006a2a <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a00:	f104 0910 	add.w	r9, r4, #16
 8006a04:	e003      	b.n	8006a0e <xQueueReceive+0x292>
				--cRxLock;
 8006a06:	1e6b      	subs	r3, r5, #1
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a0c:	b16a      	cbz	r2, 8006a2a <xQueueReceive+0x2ae>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a0e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a10:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a12:	b153      	cbz	r3, 8006a2a <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a14:	f000 fe9a 	bl	800774c <xTaskRemoveFromEventList>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d0f4      	beq.n	8006a06 <xQueueReceive+0x28a>
					vTaskMissedYield();
 8006a1c:	f000 ff28 	bl	8007870 <vTaskMissedYield>
				--cRxLock;
 8006a20:	1e6b      	subs	r3, r5, #1
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a26:	2a00      	cmp	r2, #0
 8006a28:	d1f1      	bne.n	8006a0e <xQueueReceive+0x292>
		pxQueue->cRxLock = queueUNLOCKED;
 8006a2a:	23ff      	movs	r3, #255	@ 0xff
 8006a2c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006a30:	f7ff faf2 	bl	8006018 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8006a34:	f000 fd78 	bl	8007528 <xTaskResumeAll>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d1a4      	bne.n	8006986 <xQueueReceive+0x20a>
					portYIELD_WITHIN_API();
 8006a3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8006a50:	e799      	b.n	8006986 <xQueueReceive+0x20a>
 8006a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006a62:	e7fe      	b.n	8006a62 <xQueueReceive+0x2e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a64:	f104 0010 	add.w	r0, r4, #16
 8006a68:	f000 fe70 	bl	800774c <xTaskRemoveFromEventList>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f43f af24 	beq.w	80068ba <xQueueReceive+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 8006a72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	e718      	b.n	80068ba <xQueueReceive+0x13e>

08006a88 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a88:	4b12      	ldr	r3, [pc, #72]	@ (8006ad4 <vQueueAddToRegistry+0x4c>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	b17a      	cbz	r2, 8006aae <vQueueAddToRegistry+0x26>
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	b162      	cbz	r2, 8006aac <vQueueAddToRegistry+0x24>
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	b192      	cbz	r2, 8006abc <vQueueAddToRegistry+0x34>
 8006a96:	699a      	ldr	r2, [r3, #24]
 8006a98:	b192      	cbz	r2, 8006ac0 <vQueueAddToRegistry+0x38>
 8006a9a:	6a1a      	ldr	r2, [r3, #32]
 8006a9c:	b192      	cbz	r2, 8006ac4 <vQueueAddToRegistry+0x3c>
 8006a9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006aa0:	b192      	cbz	r2, 8006ac8 <vQueueAddToRegistry+0x40>
 8006aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aa4:	b192      	cbz	r2, 8006acc <vQueueAddToRegistry+0x44>
 8006aa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aa8:	b192      	cbz	r2, 8006ad0 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006aaa:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006aac:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aae:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ab2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006ab6:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8006aba:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006abc:	2202      	movs	r2, #2
 8006abe:	e7f6      	b.n	8006aae <vQueueAddToRegistry+0x26>
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	e7f4      	b.n	8006aae <vQueueAddToRegistry+0x26>
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	e7f2      	b.n	8006aae <vQueueAddToRegistry+0x26>
 8006ac8:	2205      	movs	r2, #5
 8006aca:	e7f0      	b.n	8006aae <vQueueAddToRegistry+0x26>
 8006acc:	2206      	movs	r2, #6
 8006ace:	e7ee      	b.n	8006aae <vQueueAddToRegistry+0x26>
 8006ad0:	2207      	movs	r2, #7
 8006ad2:	e7ec      	b.n	8006aae <vQueueAddToRegistry+0x26>
 8006ad4:	200050d8 	.word	0x200050d8

08006ad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	4605      	mov	r5, r0
 8006adc:	460e      	mov	r6, r1
 8006ade:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ae0:	f7ff fa78 	bl	8005fd4 <vPortEnterCritical>
 8006ae4:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8006ae8:	2bff      	cmp	r3, #255	@ 0xff
 8006aea:	bf04      	itt	eq
 8006aec:	2300      	moveq	r3, #0
 8006aee:	f885 3044 	strbeq.w	r3, [r5, #68]	@ 0x44
 8006af2:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8006af6:	2bff      	cmp	r3, #255	@ 0xff
 8006af8:	bf04      	itt	eq
 8006afa:	2300      	moveq	r3, #0
 8006afc:	f885 3045 	strbeq.w	r3, [r5, #69]	@ 0x45
 8006b00:	f7ff fa8a 	bl	8006018 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b04:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d043      	beq.n	8006b92 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 8006b0a:	f7ff fa63 	bl	8005fd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006b0e:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8006b12:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b14:	2c00      	cmp	r4, #0
 8006b16:	dd14      	ble.n	8006b42 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b18:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8006b1c:	e003      	b.n	8006b26 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 8006b1e:	1e63      	subs	r3, r4, #1
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b24:	b16a      	cbz	r2, 8006b42 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b26:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b28:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b2a:	b153      	cbz	r3, 8006b42 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b2c:	f000 fe0e 	bl	800774c <xTaskRemoveFromEventList>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d0f4      	beq.n	8006b1e <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8006b34:	f000 fe9c 	bl	8007870 <vTaskMissedYield>
			--cTxLock;
 8006b38:	1e63      	subs	r3, r4, #1
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b3e:	2a00      	cmp	r2, #0
 8006b40:	d1f1      	bne.n	8006b26 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8006b42:	23ff      	movs	r3, #255	@ 0xff
 8006b44:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006b48:	f7ff fa66 	bl	8006018 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006b4c:	f7ff fa42 	bl	8005fd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006b50:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8006b54:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b56:	2c00      	cmp	r4, #0
 8006b58:	dd14      	ble.n	8006b84 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b5a:	f105 0610 	add.w	r6, r5, #16
 8006b5e:	e003      	b.n	8006b68 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 8006b60:	1e63      	subs	r3, r4, #1
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b66:	b16a      	cbz	r2, 8006b84 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b68:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b6a:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b6c:	b153      	cbz	r3, 8006b84 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b6e:	f000 fded 	bl	800774c <xTaskRemoveFromEventList>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d0f4      	beq.n	8006b60 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 8006b76:	f000 fe7b 	bl	8007870 <vTaskMissedYield>
				--cRxLock;
 8006b7a:	1e63      	subs	r3, r4, #1
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b80:	2a00      	cmp	r2, #0
 8006b82:	d1f1      	bne.n	8006b68 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8006b84:	23ff      	movs	r3, #255	@ 0xff
 8006b86:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8006b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006b8e:	f7ff ba43 	b.w	8006018 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b92:	4622      	mov	r2, r4
 8006b94:	4631      	mov	r1, r6
 8006b96:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8006b9a:	f000 fd79 	bl	8007690 <vTaskPlaceOnEventListRestricted>
 8006b9e:	e7b4      	b.n	8006b0a <vQueueWaitForMessageRestricted+0x32>

08006ba0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ba4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ba6:	f7ff fa15 	bl	8005fd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006baa:	4a34      	ldr	r2, [pc, #208]	@ (8006c7c <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8006bac:	4d34      	ldr	r5, [pc, #208]	@ (8006c80 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8006bae:	6813      	ldr	r3, [r2, #0]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d031      	beq.n	8006c1e <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bba:	4e32      	ldr	r6, [pc, #200]	@ (8006c84 <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bbc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8006bbe:	6832      	ldr	r2, [r6, #0]
 8006bc0:	b332      	cbz	r2, 8006c10 <prvAddNewTaskToReadyList+0x70>
 8006bc2:	4f31      	ldr	r7, [pc, #196]	@ (8006c88 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bc4:	4831      	ldr	r0, [pc, #196]	@ (8006c8c <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bc6:	4932      	ldr	r1, [pc, #200]	@ (8006c90 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8006bc8:	6802      	ldr	r2, [r0, #0]
 8006bca:	3201      	adds	r2, #1
 8006bcc:	6002      	str	r2, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006bce:	6808      	ldr	r0, [r1, #0]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	4302      	orrs	r2, r0
 8006bd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006bda:	600a      	str	r2, [r1, #0]
 8006bdc:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 8006be0:	1d21      	adds	r1, r4, #4
 8006be2:	f7ff f953 	bl	8005e8c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006be6:	f7ff fa17 	bl	8006018 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bea:	6833      	ldr	r3, [r6, #0]
 8006bec:	b173      	cbz	r3, 8006c0c <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bee:	682a      	ldr	r2, [r5, #0]
 8006bf0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006bf2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d209      	bcs.n	8006c0c <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bf8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006bfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c00:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c10:	682a      	ldr	r2, [r5, #0]
 8006c12:	4f1d      	ldr	r7, [pc, #116]	@ (8006c88 <prvAddNewTaskToReadyList+0xe8>)
 8006c14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c16:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006c18:	bf98      	it	ls
 8006c1a:	602c      	strls	r4, [r5, #0]
 8006c1c:	e7d2      	b.n	8006bc4 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8006c1e:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c20:	6813      	ldr	r3, [r2, #0]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d003      	beq.n	8006c2e <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006c28:	4f17      	ldr	r7, [pc, #92]	@ (8006c88 <prvAddNewTaskToReadyList+0xe8>)
 8006c2a:	4e16      	ldr	r6, [pc, #88]	@ (8006c84 <prvAddNewTaskToReadyList+0xe4>)
 8006c2c:	e7ca      	b.n	8006bc4 <prvAddNewTaskToReadyList+0x24>
 8006c2e:	4f16      	ldr	r7, [pc, #88]	@ (8006c88 <prvAddNewTaskToReadyList+0xe8>)
 8006c30:	463e      	mov	r6, r7
 8006c32:	f107 088c 	add.w	r8, r7, #140	@ 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c36:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c38:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c3a:	f7ff f917 	bl	8005e6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c3e:	4546      	cmp	r6, r8
 8006c40:	d1f9      	bne.n	8006c36 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c42:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8006ca8 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8006c46:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8006cac <prvAddNewTaskToReadyList+0x10c>
 8006c4a:	4e0e      	ldr	r6, [pc, #56]	@ (8006c84 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8006c4c:	4648      	mov	r0, r9
 8006c4e:	f7ff f90d 	bl	8005e6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c52:	4640      	mov	r0, r8
 8006c54:	f7ff f90a 	bl	8005e6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c58:	480e      	ldr	r0, [pc, #56]	@ (8006c94 <prvAddNewTaskToReadyList+0xf4>)
 8006c5a:	f7ff f907 	bl	8005e6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c5e:	480e      	ldr	r0, [pc, #56]	@ (8006c98 <prvAddNewTaskToReadyList+0xf8>)
 8006c60:	f7ff f904 	bl	8005e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c64:	480d      	ldr	r0, [pc, #52]	@ (8006c9c <prvAddNewTaskToReadyList+0xfc>)
 8006c66:	f7ff f901 	bl	8005e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <prvAddNewTaskToReadyList+0x100>)
 8006c6c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c70:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca4 <prvAddNewTaskToReadyList+0x104>)
 8006c72:	f8c3 8000 	str.w	r8, [r3]
		prvAddTaskToReadyList( pxNewTCB );
 8006c76:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
}
 8006c78:	e7a4      	b.n	8006bc4 <prvAddNewTaskToReadyList+0x24>
 8006c7a:	bf00      	nop
 8006c7c:	2000513c 	.word	0x2000513c
 8006c80:	2000523c 	.word	0x2000523c
 8006c84:	20005130 	.word	0x20005130
 8006c88:	200051b0 	.word	0x200051b0
 8006c8c:	20005120 	.word	0x20005120
 8006c90:	20005134 	.word	0x20005134
 8006c94:	2000516c 	.word	0x2000516c
 8006c98:	20005158 	.word	0x20005158
 8006c9c:	20005140 	.word	0x20005140
 8006ca0:	20005184 	.word	0x20005184
 8006ca4:	20005180 	.word	0x20005180
 8006ca8:	2000519c 	.word	0x2000519c
 8006cac:	20005188 	.word	0x20005188

08006cb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d20 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cb4:	4e1b      	ldr	r6, [pc, #108]	@ (8006d24 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8006cb6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cb8:	6833      	ldr	r3, [r6, #0]
{
 8006cba:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cbc:	1d18      	adds	r0, r3, #4
{
 8006cbe:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cc0:	f7ff f90a 	bl	8005ed8 <uxListRemove>
 8006cc4:	b940      	cbnz	r0, 8006cd8 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006cc6:	6833      	ldr	r3, [r6, #0]
 8006cc8:	4917      	ldr	r1, [pc, #92]	@ (8006d28 <prvAddCurrentTaskToDelayedList+0x78>)
 8006cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ccc:	2201      	movs	r2, #1
 8006cce:	409a      	lsls	r2, r3
 8006cd0:	680b      	ldr	r3, [r1, #0]
 8006cd2:	ea23 0302 	bic.w	r3, r3, r2
 8006cd6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cd8:	1c6b      	adds	r3, r5, #1
 8006cda:	d017      	beq.n	8006d0c <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	1964      	adds	r4, r4, r5
 8006ce0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006ce2:	d307      	bcc.n	8006cf4 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ce4:	4b11      	ldr	r3, [pc, #68]	@ (8006d2c <prvAddCurrentTaskToDelayedList+0x7c>)
 8006ce6:	6818      	ldr	r0, [r3, #0]
 8006ce8:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cee:	3104      	adds	r1, #4
 8006cf0:	f7ff b8da 	b.w	8005ea8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8006d30 <prvAddCurrentTaskToDelayedList+0x80>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	6831      	ldr	r1, [r6, #0]
 8006cfa:	3104      	adds	r1, #4
 8006cfc:	f7ff f8d4 	bl	8005ea8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d00:	4b0c      	ldr	r3, [pc, #48]	@ (8006d34 <prvAddCurrentTaskToDelayedList+0x84>)
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006d06:	bf88      	it	hi
 8006d08:	601c      	strhi	r4, [r3, #0]
}
 8006d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d0c:	2f00      	cmp	r7, #0
 8006d0e:	d0e5      	beq.n	8006cdc <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d10:	6831      	ldr	r1, [r6, #0]
 8006d12:	4809      	ldr	r0, [pc, #36]	@ (8006d38 <prvAddCurrentTaskToDelayedList+0x88>)
}
 8006d14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d18:	3104      	adds	r1, #4
 8006d1a:	f7ff b8b7 	b.w	8005e8c <vListInsertEnd>
 8006d1e:	bf00      	nop
 8006d20:	20005138 	.word	0x20005138
 8006d24:	2000523c 	.word	0x2000523c
 8006d28:	20005134 	.word	0x20005134
 8006d2c:	20005180 	.word	0x20005180
 8006d30:	20005184 	.word	0x20005184
 8006d34:	2000511c 	.word	0x2000511c
 8006d38:	20005140 	.word	0x20005140

08006d3c <prvIdleTask>:
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	4d23      	ldr	r5, [pc, #140]	@ (8006dcc <prvIdleTask+0x90>)
 8006d40:	4f23      	ldr	r7, [pc, #140]	@ (8006dd0 <prvIdleTask+0x94>)
 8006d42:	4e24      	ldr	r6, [pc, #144]	@ (8006dd4 <prvIdleTask+0x98>)
 8006d44:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8006dd8 <prvIdleTask+0x9c>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b35b      	cbz	r3, 8006da4 <prvIdleTask+0x68>
			taskENTER_CRITICAL();
 8006d4c:	f7ff f942 	bl	8005fd4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d54:	1d20      	adds	r0, r4, #4
 8006d56:	f7ff f8bf 	bl	8005ed8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d5a:	6833      	ldr	r3, [r6, #0]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8006d66:	f7ff f957 	bl	8006018 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d6a:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8006d6e:	f003 f807 	bl	8009d80 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d72:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 8006d76:	b163      	cbz	r3, 8006d92 <prvIdleTask+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d022      	beq.n	8006dc2 <prvIdleTask+0x86>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d0e3      	beq.n	8006d48 <prvIdleTask+0xc>
 8006d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	e7fe      	b.n	8006d90 <prvIdleTask+0x54>
				vPortFree( pxTCB->pxStack );
 8006d92:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8006d94:	f7ff f806 	bl	8005da4 <vPortFree>
				vPortFree( pxTCB );
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f7ff f803 	bl	8005da4 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d9e:	682b      	ldr	r3, [r5, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1d3      	bne.n	8006d4c <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006da4:	f8d8 3000 	ldr.w	r3, [r8]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d9cd      	bls.n	8006d48 <prvIdleTask+0xc>
				taskYIELD();
 8006dac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006db0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	e7c2      	b.n	8006d48 <prvIdleTask+0xc>
				vPortFree( pxTCB );
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f7fe ffee 	bl	8005da4 <vPortFree>
 8006dc8:	e7be      	b.n	8006d48 <prvIdleTask+0xc>
 8006dca:	bf00      	nop
 8006dcc:	20005154 	.word	0x20005154
 8006dd0:	20005158 	.word	0x20005158
 8006dd4:	2000513c 	.word	0x2000513c
 8006dd8:	200051b0 	.word	0x200051b0

08006ddc <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006de0:	4b48      	ldr	r3, [pc, #288]	@ (8006f04 <xTaskIncrementTick.part.0+0x128>)
 8006de2:	681d      	ldr	r5, [r3, #0]
 8006de4:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
 8006de6:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8006de8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dea:	2d00      	cmp	r5, #0
 8006dec:	d041      	beq.n	8006e72 <xTaskIncrementTick.part.0+0x96>
 8006dee:	4b46      	ldr	r3, [pc, #280]	@ (8006f08 <xTaskIncrementTick.part.0+0x12c>)
 8006df0:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	429d      	cmp	r5, r3
 8006df6:	d349      	bcc.n	8006e8c <xTaskIncrementTick.part.0+0xb0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006df8:	4e44      	ldr	r6, [pc, #272]	@ (8006f0c <xTaskIncrementTick.part.0+0x130>)
 8006dfa:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8006f20 <xTaskIncrementTick.part.0+0x144>
 8006dfe:	6833      	ldr	r3, [r6, #0]
 8006e00:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 8006f24 <xTaskIncrementTick.part.0+0x148>
 8006e04:	681c      	ldr	r4, [r3, #0]
 8006e06:	2c00      	cmp	r4, #0
 8006e08:	d076      	beq.n	8006ef8 <xTaskIncrementTick.part.0+0x11c>
					prvAddTaskToReadyList( pxTCB );
 8006e0a:	4f41      	ldr	r7, [pc, #260]	@ (8006f10 <xTaskIncrementTick.part.0+0x134>)
BaseType_t xSwitchRequired = pdFALSE;
 8006e0c:	2400      	movs	r4, #0
 8006e0e:	e022      	b.n	8006e56 <xTaskIncrementTick.part.0+0x7a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e10:	f7ff f862 	bl	8005ed8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e14:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e18:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e1c:	b10a      	cbz	r2, 8006e22 <xTaskIncrementTick.part.0+0x46>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e1e:	f7ff f85b 	bl	8005ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e22:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	4082      	lsls	r2, r0
 8006e2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e30:	431a      	orrs	r2, r3
 8006e32:	4651      	mov	r1, sl
 8006e34:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006e38:	603a      	str	r2, [r7, #0]
 8006e3a:	f7ff f827 	bl	8005e8c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e3e:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e42:	6830      	ldr	r0, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e44:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 8006e48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e4a:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 8006e4c:	4291      	cmp	r1, r2
 8006e4e:	bf28      	it	cs
 8006e50:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d050      	beq.n	8006ef8 <xTaskIncrementTick.part.0+0x11c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e56:	6833      	ldr	r3, [r6, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e5e:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e62:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 8006e66:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e68:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 8006e6a:	d2d1      	bcs.n	8006e10 <xTaskIncrementTick.part.0+0x34>
						xNextTaskUnblockTime = xItemValue;
 8006e6c:	9b01      	ldr	r3, [sp, #4]
 8006e6e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e70:	e011      	b.n	8006e96 <xTaskIncrementTick.part.0+0xba>
			taskSWITCH_DELAYED_LISTS();
 8006e72:	4b26      	ldr	r3, [pc, #152]	@ (8006f0c <xTaskIncrementTick.part.0+0x130>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	b30a      	cbz	r2, 8006ebe <xTaskIncrementTick.part.0+0xe2>
 8006e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	e7fe      	b.n	8006e8a <xTaskIncrementTick.part.0+0xae>
 8006e8c:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8006f20 <xTaskIncrementTick.part.0+0x144>
 8006e90:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006f24 <xTaskIncrementTick.part.0+0x148>
BaseType_t xSwitchRequired = pdFALSE;
 8006e94:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e96:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 8006e9a:	491e      	ldr	r1, [pc, #120]	@ (8006f14 <xTaskIncrementTick.part.0+0x138>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 8006ea8:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8006eaa:	2a02      	cmp	r2, #2
 8006eac:	bf28      	it	cs
 8006eae:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8006eb0:	2b00      	cmp	r3, #0
}
 8006eb2:	bf0c      	ite	eq
 8006eb4:	4620      	moveq	r0, r4
 8006eb6:	2001      	movne	r0, #1
 8006eb8:	b003      	add	sp, #12
 8006eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006ebe:	4a16      	ldr	r2, [pc, #88]	@ (8006f18 <xTaskIncrementTick.part.0+0x13c>)
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	6811      	ldr	r1, [r2, #0]
 8006ec4:	6019      	str	r1, [r3, #0]
 8006ec6:	4915      	ldr	r1, [pc, #84]	@ (8006f1c <xTaskIncrementTick.part.0+0x140>)
 8006ec8:	6010      	str	r0, [r2, #0]
 8006eca:	680a      	ldr	r2, [r1, #0]
 8006ecc:	3201      	adds	r2, #1
 8006ece:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	6812      	ldr	r2, [r2, #0]
 8006ed4:	b93a      	cbnz	r2, 8006ee6 <xTaskIncrementTick.part.0+0x10a>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8006f08 <xTaskIncrementTick.part.0+0x12c>)
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	e785      	b.n	8006df2 <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee6:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ee8:	4a07      	ldr	r2, [pc, #28]	@ (8006f08 <xTaskIncrementTick.part.0+0x12c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eea:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eec:	9201      	str	r2, [sp, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	4613      	mov	r3, r2
}
 8006ef6:	e77c      	b.n	8006df2 <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef8:	9a01      	ldr	r2, [sp, #4]
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295
 8006efe:	6013      	str	r3, [r2, #0]
					break;
 8006f00:	e7c9      	b.n	8006e96 <xTaskIncrementTick.part.0+0xba>
 8006f02:	bf00      	nop
 8006f04:	20005138 	.word	0x20005138
 8006f08:	2000511c 	.word	0x2000511c
 8006f0c:	20005184 	.word	0x20005184
 8006f10:	20005134 	.word	0x20005134
 8006f14:	20005128 	.word	0x20005128
 8006f18:	20005180 	.word	0x20005180
 8006f1c:	20005124 	.word	0x20005124
 8006f20:	200051b0 	.word	0x200051b0
 8006f24:	2000523c 	.word	0x2000523c

08006f28 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8006f2c:	4d48      	ldr	r5, [pc, #288]	@ (8007050 <xTaskResumeAll.part.0+0x128>)
BaseType_t xTaskResumeAll( void )
 8006f2e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8006f30:	f7ff f850 	bl	8005fd4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006f34:	682b      	ldr	r3, [r5, #0]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d16e      	bne.n	800701e <xTaskResumeAll.part.0+0xf6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f40:	4b44      	ldr	r3, [pc, #272]	@ (8007054 <xTaskResumeAll.part.0+0x12c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d06a      	beq.n	800701e <xTaskResumeAll.part.0+0xf6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f48:	f8df a120 	ldr.w	sl, [pc, #288]	@ 800706c <xTaskResumeAll.part.0+0x144>
 8006f4c:	f8da 2000 	ldr.w	r2, [sl]
 8006f50:	2a00      	cmp	r2, #0
 8006f52:	d079      	beq.n	8007048 <xTaskResumeAll.part.0+0x120>
 8006f54:	4b40      	ldr	r3, [pc, #256]	@ (8007058 <xTaskResumeAll.part.0+0x130>)
 8006f56:	4e41      	ldr	r6, [pc, #260]	@ (800705c <xTaskResumeAll.part.0+0x134>)
 8006f58:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 8007070 <xTaskResumeAll.part.0+0x148>
 8006f5c:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8007074 <xTaskResumeAll.part.0+0x14c>
 8006f60:	9301      	str	r3, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8006f62:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f64:	f8da 200c 	ldr.w	r2, [sl, #12]
 8006f68:	f8d2 b00c 	ldr.w	fp, [r2, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f6c:	f10b 0404 	add.w	r4, fp, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f70:	f10b 0018 	add.w	r0, fp, #24
 8006f74:	f7fe ffb0 	bl	8005ed8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f7fe ffad 	bl	8005ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f7e:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8006f82:	6831      	ldr	r1, [r6, #0]
 8006f84:	fa07 f200 	lsl.w	r2, r7, r0
 8006f88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8006f92:	4621      	mov	r1, r4
 8006f94:	6032      	str	r2, [r6, #0]
 8006f96:	f7fe ff79 	bl	8005e8c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f9a:	f8d8 2000 	ldr.w	r2, [r8]
 8006f9e:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 8006fa2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006fa4:	4291      	cmp	r1, r2
 8006fa6:	d341      	bcc.n	800702c <xTaskResumeAll.part.0+0x104>
						xYieldPending = pdTRUE;
 8006fa8:	9b01      	ldr	r3, [sp, #4]
 8006faa:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fac:	f8da 2000 	ldr.w	r2, [sl]
 8006fb0:	2a00      	cmp	r2, #0
 8006fb2:	d1d7      	bne.n	8006f64 <xTaskResumeAll.part.0+0x3c>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8007060 <xTaskResumeAll.part.0+0x138>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	6812      	ldr	r2, [r2, #0]
 8006fba:	2a00      	cmp	r2, #0
 8006fbc:	d03f      	beq.n	800703e <xTaskResumeAll.part.0+0x116>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fbe:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fc0:	4b28      	ldr	r3, [pc, #160]	@ (8007064 <xTaskResumeAll.part.0+0x13c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fc4:	68d2      	ldr	r2, [r2, #12]
 8006fc6:	6852      	ldr	r2, [r2, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fca:	4e27      	ldr	r6, [pc, #156]	@ (8007068 <xTaskResumeAll.part.0+0x140>)
 8006fcc:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006fce:	b194      	cbz	r4, 8006ff6 <xTaskResumeAll.part.0+0xce>
								xYieldPending = pdTRUE;
 8006fd0:	2701      	movs	r7, #1
 8006fd2:	e006      	b.n	8006fe2 <xTaskResumeAll.part.0+0xba>
 8006fd4:	f7ff ff02 	bl	8006ddc <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8006fd8:	b108      	cbz	r0, 8006fde <xTaskResumeAll.part.0+0xb6>
								xYieldPending = pdTRUE;
 8006fda:	9b01      	ldr	r3, [sp, #4]
 8006fdc:	601f      	str	r7, [r3, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fde:	3c01      	subs	r4, #1
 8006fe0:	d008      	beq.n	8006ff4 <xTaskResumeAll.part.0+0xcc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0f5      	beq.n	8006fd4 <xTaskResumeAll.part.0+0xac>
		++xPendedTicks;
 8006fe8:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fea:	3c01      	subs	r4, #1
		++xPendedTicks;
 8006fec:	f103 0301 	add.w	r3, r3, #1
 8006ff0:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ff2:	d1f6      	bne.n	8006fe2 <xTaskResumeAll.part.0+0xba>
						xPendedTicks = 0;
 8006ff4:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8006ff6:	9b01      	ldr	r3, [sp, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	b183      	cbz	r3, 800701e <xTaskResumeAll.part.0+0xf6>
					taskYIELD_IF_USING_PREEMPTION();
 8006ffc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007004:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007010:	f7ff f802 	bl	8006018 <vPortExitCritical>
						xAlreadyYielded = pdTRUE;
 8007014:	2401      	movs	r4, #1
}
 8007016:	4620      	mov	r0, r4
 8007018:	b003      	add	sp, #12
 800701a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	taskEXIT_CRITICAL();
 800701e:	f7fe fffb 	bl	8006018 <vPortExitCritical>
BaseType_t xAlreadyYielded = pdFALSE;
 8007022:	2400      	movs	r4, #0
}
 8007024:	4620      	mov	r0, r4
 8007026:	b003      	add	sp, #12
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800702c:	f8da 2000 	ldr.w	r2, [sl]
 8007030:	2a00      	cmp	r2, #0
 8007032:	d197      	bne.n	8006f64 <xTaskResumeAll.part.0+0x3c>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007034:	4b0a      	ldr	r3, [pc, #40]	@ (8007060 <xTaskResumeAll.part.0+0x138>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	2a00      	cmp	r2, #0
 800703c:	d1bf      	bne.n	8006fbe <xTaskResumeAll.part.0+0x96>
		xNextTaskUnblockTime = portMAX_DELAY;
 800703e:	4b09      	ldr	r3, [pc, #36]	@ (8007064 <xTaskResumeAll.part.0+0x13c>)
 8007040:	f04f 32ff 	mov.w	r2, #4294967295
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	e7c0      	b.n	8006fca <xTaskResumeAll.part.0+0xa2>
 8007048:	4b03      	ldr	r3, [pc, #12]	@ (8007058 <xTaskResumeAll.part.0+0x130>)
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	e7bd      	b.n	8006fca <xTaskResumeAll.part.0+0xa2>
 800704e:	bf00      	nop
 8007050:	20005118 	.word	0x20005118
 8007054:	2000513c 	.word	0x2000513c
 8007058:	20005128 	.word	0x20005128
 800705c:	20005134 	.word	0x20005134
 8007060:	20005184 	.word	0x20005184
 8007064:	2000511c 	.word	0x2000511c
 8007068:	2000512c 	.word	0x2000512c
 800706c:	2000516c 	.word	0x2000516c
 8007070:	200051b0 	.word	0x200051b0
 8007074:	2000523c 	.word	0x2000523c

08007078 <xTaskCreateStatic>:
	{
 8007078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007082:	b1c5      	cbz	r5, 80070b6 <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
 8007084:	b174      	cbz	r4, 80070a4 <xTaskCreateStatic+0x2c>
 8007086:	4606      	mov	r6, r0
			volatile size_t xSize = sizeof( StaticTask_t );
 8007088:	20a0      	movs	r0, #160	@ 0xa0
 800708a:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 800708c:	9803      	ldr	r0, [sp, #12]
 800708e:	28a0      	cmp	r0, #160	@ 0xa0
 8007090:	d01a      	beq.n	80070c8 <xTaskCreateStatic+0x50>
 8007092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	e7fe      	b.n	80070a2 <xTaskCreateStatic+0x2a>
 80070a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80070b4:	e7fe      	b.n	80070b4 <xTaskCreateStatic+0x3c>
 80070b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80070c6:	e7fe      	b.n	80070c6 <xTaskCreateStatic+0x4e>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070c8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80070cc:	3a01      	subs	r2, #1
 80070ce:	eb05 0282 	add.w	r2, r5, r2, lsl #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070d2:	6325      	str	r5, [r4, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070d4:	f022 0507 	bic.w	r5, r2, #7
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070d8:	2202      	movs	r2, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070da:	9803      	ldr	r0, [sp, #12]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070dc:	f884 209d 	strb.w	r2, [r4, #157]	@ 0x9d
	if( pcName != NULL )
 80070e0:	2900      	cmp	r1, #0
 80070e2:	d073      	beq.n	80071cc <xTaskCreateStatic+0x154>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070e4:	780a      	ldrb	r2, [r1, #0]
 80070e6:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80070ea:	2a00      	cmp	r2, #0
 80070ec:	d036      	beq.n	800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070ee:	784a      	ldrb	r2, [r1, #1]
 80070f0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 80070f4:	b392      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070f6:	788a      	ldrb	r2, [r1, #2]
 80070f8:	f884 2036 	strb.w	r2, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 80070fc:	b372      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070fe:	78ca      	ldrb	r2, [r1, #3]
 8007100:	f884 2037 	strb.w	r2, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8007104:	b352      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007106:	790a      	ldrb	r2, [r1, #4]
 8007108:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800710c:	b332      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800710e:	794a      	ldrb	r2, [r1, #5]
 8007110:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8007114:	b312      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007116:	798a      	ldrb	r2, [r1, #6]
 8007118:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800711c:	b1f2      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800711e:	79ca      	ldrb	r2, [r1, #7]
 8007120:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8007124:	b1d2      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007126:	7a0a      	ldrb	r2, [r1, #8]
 8007128:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 800712c:	b1b2      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800712e:	7a4a      	ldrb	r2, [r1, #9]
 8007130:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8007134:	b192      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007136:	7a8a      	ldrb	r2, [r1, #10]
 8007138:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800713c:	b172      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800713e:	7aca      	ldrb	r2, [r1, #11]
 8007140:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8007144:	b152      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007146:	7b0a      	ldrb	r2, [r1, #12]
 8007148:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800714c:	b132      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800714e:	7b4a      	ldrb	r2, [r1, #13]
 8007150:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8007154:	b112      	cbz	r2, 800715c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007156:	7b8a      	ldrb	r2, [r1, #14]
 8007158:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800715c:	2200      	movs	r2, #0
 800715e:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007162:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	2f06      	cmp	r7, #6
 8007168:	bf28      	it	cs
 800716a:	2706      	movcs	r7, #6
		pxNewTCB->uxMutexesHeld = 0;
 800716c:	f04f 0800 	mov.w	r8, #0
	pxNewTCB->uxPriority = uxPriority;
 8007170:	62e7      	str	r7, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007172:	6467      	str	r7, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007174:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8007176:	f8c4 8048 	str.w	r8, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800717a:	f7fe fe83 	bl	8005e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800717e:	f104 0018 	add.w	r0, r4, #24
 8007182:	f7fe fe7f 	bl	8005e84 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007186:	f1c7 0707 	rsb	r7, r7, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800718a:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800718c:	61a7      	str	r7, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800718e:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007192:	4641      	mov	r1, r8
 8007194:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007196:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007198:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800719a:	f884 809c 	strb.w	r8, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800719e:	f002 fde7 	bl	8009d70 <memset>
 80071a2:	4f0c      	ldr	r7, [pc, #48]	@ (80071d4 <xTaskCreateStatic+0x15c>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071a4:	9b01      	ldr	r3, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071a6:	6527      	str	r7, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071a8:	461a      	mov	r2, r3
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071aa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80071ae:	37d0      	adds	r7, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071b0:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071b2:	6563      	str	r3, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071b4:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071b6:	65a7      	str	r7, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071b8:	f7fe fee0 	bl	8005f7c <pxPortInitialiseStack>
 80071bc:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80071be:	4620      	mov	r0, r4
 80071c0:	f7ff fcee 	bl	8006ba0 <prvAddNewTaskToReadyList>
	}
 80071c4:	4620      	mov	r0, r4
 80071c6:	b004      	add	sp, #16
 80071c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071cc:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 80071d0:	e7c7      	b.n	8007162 <xTaskCreateStatic+0xea>
 80071d2:	bf00      	nop
 80071d4:	20005764 	.word	0x20005764

080071d8 <xTaskCreate>:
	{
 80071d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071dc:	0095      	lsls	r5, r2, #2
	{
 80071de:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071e0:	4628      	mov	r0, r5
	{
 80071e2:	460e      	mov	r6, r1
 80071e4:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071e6:	f7fe fd25 	bl	8005c34 <pvPortMalloc>
			if( pxStack != NULL )
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f000 8086 	beq.w	80072fc <xTaskCreate+0x124>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071f0:	4607      	mov	r7, r0
 80071f2:	20a0      	movs	r0, #160	@ 0xa0
 80071f4:	f7fe fd1e 	bl	8005c34 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80071f8:	4604      	mov	r4, r0
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d07b      	beq.n	80072f6 <xTaskCreate+0x11e>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071fe:	3d04      	subs	r5, #4
 8007200:	443d      	add	r5, r7
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007202:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8007204:	6307      	str	r7, [r0, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007206:	f025 0507 	bic.w	r5, r5, #7
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800720a:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
	if( pcName != NULL )
 800720e:	2e00      	cmp	r6, #0
 8007210:	d078      	beq.n	8007304 <xTaskCreate+0x12c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007212:	7833      	ldrb	r3, [r6, #0]
 8007214:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8007218:	2b00      	cmp	r3, #0
 800721a:	d036      	beq.n	800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800721c:	7873      	ldrb	r3, [r6, #1]
 800721e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8007222:	b393      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007224:	78b3      	ldrb	r3, [r6, #2]
 8007226:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 800722a:	b373      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800722c:	78f3      	ldrb	r3, [r6, #3]
 800722e:	f880 3037 	strb.w	r3, [r0, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8007232:	b353      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007234:	7933      	ldrb	r3, [r6, #4]
 8007236:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800723a:	b333      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800723c:	7973      	ldrb	r3, [r6, #5]
 800723e:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8007242:	b313      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007244:	79b3      	ldrb	r3, [r6, #6]
 8007246:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800724a:	b1f3      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800724c:	79f3      	ldrb	r3, [r6, #7]
 800724e:	f880 303b 	strb.w	r3, [r0, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8007252:	b1d3      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007254:	7a33      	ldrb	r3, [r6, #8]
 8007256:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 800725a:	b1b3      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800725c:	7a73      	ldrb	r3, [r6, #9]
 800725e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8007262:	b193      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007264:	7ab3      	ldrb	r3, [r6, #10]
 8007266:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800726a:	b173      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800726c:	7af3      	ldrb	r3, [r6, #11]
 800726e:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8007272:	b153      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007274:	7b33      	ldrb	r3, [r6, #12]
 8007276:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800727a:	b133      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800727c:	7b73      	ldrb	r3, [r6, #13]
 800727e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8007282:	b113      	cbz	r3, 800728a <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007284:	7bb3      	ldrb	r3, [r6, #14]
 8007286:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800728a:	2300      	movs	r3, #0
 800728c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007290:	9e08      	ldr	r6, [sp, #32]
 8007292:	2e06      	cmp	r6, #6
 8007294:	bf28      	it	cs
 8007296:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 8007298:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 800729a:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800729c:	6466      	str	r6, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800729e:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80072a0:	64a7      	str	r7, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072a2:	f7fe fdef 	bl	8005e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072a6:	f104 0018 	add.w	r0, r4, #24
 80072aa:	f7fe fdeb 	bl	8005e84 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ae:	f1c6 0607 	rsb	r6, r6, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072b2:	224c      	movs	r2, #76	@ 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 80072b4:	f8c4 7098 	str.w	r7, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072b8:	4639      	mov	r1, r7
 80072ba:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072bc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072be:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072c0:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072c2:	f884 709c 	strb.w	r7, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072c6:	f002 fd53 	bl	8009d70 <memset>
 80072ca:	4b10      	ldr	r3, [pc, #64]	@ (800730c <xTaskCreate+0x134>)
 80072cc:	6523      	str	r3, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072ce:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072d0:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 80072d4:	33d0      	adds	r3, #208	@ 0xd0
 80072d6:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072d8:	464a      	mov	r2, r9
 80072da:	4641      	mov	r1, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072dc:	6565      	str	r5, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072de:	f7fe fe4d 	bl	8005f7c <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 80072e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072e4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80072e6:	b103      	cbz	r3, 80072ea <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072e8:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80072ea:	4620      	mov	r0, r4
 80072ec:	f7ff fc58 	bl	8006ba0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072f0:	2001      	movs	r0, #1
	}
 80072f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80072f6:	4638      	mov	r0, r7
 80072f8:	f7fe fd54 	bl	8005da4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072fc:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8007300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007304:	f880 6034 	strb.w	r6, [r0, #52]	@ 0x34
 8007308:	e7c2      	b.n	8007290 <xTaskCreate+0xb8>
 800730a:	bf00      	nop
 800730c:	20005764 	.word	0x20005764

08007310 <vTaskDelay>:
	{
 8007310:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007312:	b950      	cbnz	r0, 800732a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8007314:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	f3bf 8f6f 	isb	sy
	}
 8007328:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800732a:	4c10      	ldr	r4, [pc, #64]	@ (800736c <vTaskDelay+0x5c>)
 800732c:	6821      	ldr	r1, [r4, #0]
 800732e:	b141      	cbz	r1, 8007342 <vTaskDelay+0x32>
 8007330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	e7fe      	b.n	8007340 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007348:	f7ff fcb2 	bl	8006cb0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	b943      	cbnz	r3, 8007362 <vTaskDelay+0x52>
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	e7fe      	b.n	8007360 <vTaskDelay+0x50>
 8007362:	f7ff fde1 	bl	8006f28 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8007366:	2800      	cmp	r0, #0
 8007368:	d0d4      	beq.n	8007314 <vTaskDelay+0x4>
	}
 800736a:	bd10      	pop	{r4, pc}
 800736c:	20005118 	.word	0x20005118

08007370 <uxTaskPriorityGet>:
	{
 8007370:	b510      	push	{r4, lr}
 8007372:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8007374:	f7fe fe2e 	bl	8005fd4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 8007378:	b124      	cbz	r4, 8007384 <uxTaskPriorityGet+0x14>
			uxReturn = pxTCB->uxPriority;
 800737a:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
		taskEXIT_CRITICAL();
 800737c:	f7fe fe4c 	bl	8006018 <vPortExitCritical>
	}
 8007380:	4620      	mov	r0, r4
 8007382:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 8007384:	4b03      	ldr	r3, [pc, #12]	@ (8007394 <uxTaskPriorityGet+0x24>)
 8007386:	681c      	ldr	r4, [r3, #0]
			uxReturn = pxTCB->uxPriority;
 8007388:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
		taskEXIT_CRITICAL();
 800738a:	f7fe fe45 	bl	8006018 <vPortExitCritical>
	}
 800738e:	4620      	mov	r0, r4
 8007390:	bd10      	pop	{r4, pc}
 8007392:	bf00      	nop
 8007394:	2000523c 	.word	0x2000523c

08007398 <uxTaskPriorityGetFromISR>:
	{
 8007398:	b510      	push	{r4, lr}
 800739a:	4604      	mov	r4, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800739c:	f7fe ff38 	bl	8006210 <vPortValidateInterruptPriority>
	__asm volatile
 80073a0:	f3ef 8311 	mrs	r3, BASEPRI
 80073a4:	f04f 0250 	mov.w	r2, #80	@ 0x50
 80073a8:	f382 8811 	msr	BASEPRI, r2
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
			pxTCB = prvGetTCBFromHandle( xTask );
 80073b4:	b11c      	cbz	r4, 80073be <uxTaskPriorityGetFromISR+0x26>
			uxReturn = pxTCB->uxPriority;
 80073b6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	__asm volatile
 80073b8:	f383 8811 	msr	BASEPRI, r3
	}
 80073bc:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 80073be:	4a03      	ldr	r2, [pc, #12]	@ (80073cc <uxTaskPriorityGetFromISR+0x34>)
 80073c0:	6814      	ldr	r4, [r2, #0]
			uxReturn = pxTCB->uxPriority;
 80073c2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80073c4:	f383 8811 	msr	BASEPRI, r3
	}
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	bf00      	nop
 80073cc:	2000523c 	.word	0x2000523c

080073d0 <vTaskStartScheduler>:
{
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	b084      	sub	sp, #16
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073d4:	aa02      	add	r2, sp, #8
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073d6:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073d8:	a901      	add	r1, sp, #4
 80073da:	4668      	mov	r0, sp
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073dc:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073e0:	f7fa f820 	bl	8001424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073e4:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80073e8:	9d00      	ldr	r5, [sp, #0]
		configASSERT( puxStackBuffer != NULL );
 80073ea:	b1bb      	cbz	r3, 800741c <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 80073ec:	b16d      	cbz	r5, 800740a <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80073ee:	21a0      	movs	r1, #160	@ 0xa0
 80073f0:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073f2:	9903      	ldr	r1, [sp, #12]
 80073f4:	29a0      	cmp	r1, #160	@ 0xa0
 80073f6:	d01a      	beq.n	800742e <vTaskStartScheduler+0x5e>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	e7fe      	b.n	8007408 <vTaskStartScheduler+0x38>
 800740a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800741a:	e7fe      	b.n	800741a <vTaskStartScheduler+0x4a>
 800741c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800742c:	e7fe      	b.n	800742c <vTaskStartScheduler+0x5c>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800742e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8007432:	3a01      	subs	r2, #1
 8007434:	eb03 0282 	add.w	r2, r3, r2, lsl #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007438:	2102      	movs	r1, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800743a:	632b      	str	r3, [r5, #48]	@ 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800743c:	4b2e      	ldr	r3, [pc, #184]	@ (80074f8 <vTaskStartScheduler+0x128>)
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800743e:	f885 109d 	strb.w	r1, [r5, #157]	@ 0x9d
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007442:	1d28      	adds	r0, r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007444:	636b      	str	r3, [r5, #52]	@ 0x34
		pxNewTCB->uxMutexesHeld = 0;
 8007446:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800744a:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800744e:	f885 4043 	strb.w	r4, [r5, #67]	@ 0x43
	pxNewTCB->uxPriority = uxPriority;
 8007452:	62ec      	str	r4, [r5, #44]	@ 0x2c
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007454:	f022 0607 	bic.w	r6, r2, #7
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007458:	9b03      	ldr	r3, [sp, #12]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800745a:	f7fe fd13 	bl	8005e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800745e:	f105 0018 	add.w	r0, r5, #24
 8007462:	f7fe fd0f 	bl	8005e84 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007466:	2307      	movs	r3, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007468:	224c      	movs	r2, #76	@ 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 800746a:	f8c5 4098 	str.w	r4, [r5, #152]	@ 0x98
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800746e:	61ab      	str	r3, [r5, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007470:	4621      	mov	r1, r4
 8007472:	18a8      	adds	r0, r5, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007474:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007476:	626d      	str	r5, [r5, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007478:	f885 409c 	strb.w	r4, [r5, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800747c:	f002 fc78 	bl	8009d70 <memset>
 8007480:	4b1e      	ldr	r3, [pc, #120]	@ (80074fc <vTaskStartScheduler+0x12c>)
 8007482:	652b      	str	r3, [r5, #80]	@ 0x50
 8007484:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007488:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800748a:	491d      	ldr	r1, [pc, #116]	@ (8007500 <vTaskStartScheduler+0x130>)
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800748c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800748e:	656a      	str	r2, [r5, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007490:	4630      	mov	r0, r6
 8007492:	4622      	mov	r2, r4
 8007494:	f7fe fd72 	bl	8005f7c <pxPortInitialiseStack>
 8007498:	6028      	str	r0, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800749a:	4628      	mov	r0, r5
 800749c:	f7ff fb80 	bl	8006ba0 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 80074a0:	f000 fbda 	bl	8007c58 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80074a4:	2801      	cmp	r0, #1
 80074a6:	d00c      	beq.n	80074c2 <vTaskStartScheduler+0xf2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074a8:	3001      	adds	r0, #1
 80074aa:	d001      	beq.n	80074b0 <vTaskStartScheduler+0xe0>
}
 80074ac:	b004      	add	sp, #16
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074c0:	e7fe      	b.n	80074c0 <vTaskStartScheduler+0xf0>
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007504 <vTaskStartScheduler+0x134>)
 80074d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007508 <vTaskStartScheduler+0x138>)
 80074d6:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80074d8:	490c      	ldr	r1, [pc, #48]	@ (800750c <vTaskStartScheduler+0x13c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074da:	334c      	adds	r3, #76	@ 0x4c
 80074dc:	6013      	str	r3, [r2, #0]
		xSchedulerRunning = pdTRUE;
 80074de:	4a0c      	ldr	r2, [pc, #48]	@ (8007510 <vTaskStartScheduler+0x140>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007514 <vTaskStartScheduler+0x144>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80074e2:	f04f 35ff 	mov.w	r5, #4294967295
 80074e6:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80074e8:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074ea:	601c      	str	r4, [r3, #0]
}
 80074ec:	b004      	add	sp, #16
 80074ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 80074f2:	f7fe bded 	b.w	80060d0 <xPortStartScheduler>
 80074f6:	bf00      	nop
 80074f8:	454c4449 	.word	0x454c4449
 80074fc:	20005764 	.word	0x20005764
 8007500:	08006d3d 	.word	0x08006d3d
 8007504:	2000523c 	.word	0x2000523c
 8007508:	200005fc 	.word	0x200005fc
 800750c:	2000511c 	.word	0x2000511c
 8007510:	20005130 	.word	0x20005130
 8007514:	20005138 	.word	0x20005138

08007518 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007518:	4a02      	ldr	r2, [pc, #8]	@ (8007524 <vTaskSuspendAll+0xc>)
 800751a:	6813      	ldr	r3, [r2, #0]
 800751c:	3301      	adds	r3, #1
 800751e:	6013      	str	r3, [r2, #0]
}
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	20005118 	.word	0x20005118

08007528 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8007528:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <xTaskResumeAll+0x1c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	b943      	cbnz	r3, 8007540 <xTaskResumeAll+0x18>
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	e7fe      	b.n	800753e <xTaskResumeAll+0x16>
 8007540:	f7ff bcf2 	b.w	8006f28 <xTaskResumeAll.part.0>
 8007544:	20005118 	.word	0x20005118

08007548 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007548:	4b01      	ldr	r3, [pc, #4]	@ (8007550 <xTaskGetTickCount+0x8>)
 800754a:	6818      	ldr	r0, [r3, #0]
}
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	20005138 	.word	0x20005138

08007554 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007554:	4b05      	ldr	r3, [pc, #20]	@ (800756c <xTaskIncrementTick+0x18>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	b90b      	cbnz	r3, 800755e <xTaskIncrementTick+0xa>
 800755a:	f7ff bc3f 	b.w	8006ddc <xTaskIncrementTick.part.0>
		++xPendedTicks;
 800755e:	4a04      	ldr	r2, [pc, #16]	@ (8007570 <xTaskIncrementTick+0x1c>)
 8007560:	6813      	ldr	r3, [r2, #0]
 8007562:	3301      	adds	r3, #1
}
 8007564:	2000      	movs	r0, #0
		++xPendedTicks;
 8007566:	6013      	str	r3, [r2, #0]
}
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	20005118 	.word	0x20005118
 8007570:	2000512c 	.word	0x2000512c

08007574 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007574:	4b18      	ldr	r3, [pc, #96]	@ (80075d8 <vTaskSwitchContext+0x64>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	b11b      	cbz	r3, 8007582 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800757a:	4b18      	ldr	r3, [pc, #96]	@ (80075dc <vTaskSwitchContext+0x68>)
 800757c:	2201      	movs	r2, #1
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007582:	4916      	ldr	r1, [pc, #88]	@ (80075dc <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007584:	4a16      	ldr	r2, [pc, #88]	@ (80075e0 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 8007586:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007588:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800758a:	fab3 f383 	clz	r3, r3
 800758e:	b2db      	uxtb	r3, r3
 8007590:	f1c3 031f 	rsb	r3, r3, #31
 8007594:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007598:	4912      	ldr	r1, [pc, #72]	@ (80075e4 <vTaskSwitchContext+0x70>)
 800759a:	009a      	lsls	r2, r3, #2
 800759c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80075a0:	5888      	ldr	r0, [r1, r2]
 80075a2:	b940      	cbnz	r0, 80075b6 <vTaskSwitchContext+0x42>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80075b4:	e7fe      	b.n	80075b4 <vTaskSwitchContext+0x40>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075b6:	6858      	ldr	r0, [r3, #4]
 80075b8:	3208      	adds	r2, #8
 80075ba:	6840      	ldr	r0, [r0, #4]
 80075bc:	6058      	str	r0, [r3, #4]
 80075be:	440a      	add	r2, r1
 80075c0:	4290      	cmp	r0, r2
 80075c2:	bf04      	itt	eq
 80075c4:	6840      	ldreq	r0, [r0, #4]
 80075c6:	6058      	streq	r0, [r3, #4]
 80075c8:	4b07      	ldr	r3, [pc, #28]	@ (80075e8 <vTaskSwitchContext+0x74>)
 80075ca:	68c2      	ldr	r2, [r0, #12]
 80075cc:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a06      	ldr	r2, [pc, #24]	@ (80075ec <vTaskSwitchContext+0x78>)
 80075d2:	334c      	adds	r3, #76	@ 0x4c
 80075d4:	6013      	str	r3, [r2, #0]
}
 80075d6:	4770      	bx	lr
 80075d8:	20005118 	.word	0x20005118
 80075dc:	20005128 	.word	0x20005128
 80075e0:	20005134 	.word	0x20005134
 80075e4:	200051b0 	.word	0x200051b0
 80075e8:	2000523c 	.word	0x2000523c
 80075ec:	200005fc 	.word	0x200005fc

080075f0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80075f0:	b320      	cbz	r0, 800763c <vTaskPlaceOnEventList+0x4c>
{
 80075f2:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075f4:	4d1f      	ldr	r5, [pc, #124]	@ (8007674 <vTaskPlaceOnEventList+0x84>)
 80075f6:	460c      	mov	r4, r1
 80075f8:	6829      	ldr	r1, [r5, #0]
 80075fa:	3118      	adds	r1, #24
 80075fc:	f7fe fc54 	bl	8005ea8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8007600:	4b1d      	ldr	r3, [pc, #116]	@ (8007678 <vTaskPlaceOnEventList+0x88>)
 8007602:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007604:	6828      	ldr	r0, [r5, #0]
 8007606:	3004      	adds	r0, #4
 8007608:	f7fe fc66 	bl	8005ed8 <uxListRemove>
 800760c:	b940      	cbnz	r0, 8007620 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800760e:	682b      	ldr	r3, [r5, #0]
 8007610:	491a      	ldr	r1, [pc, #104]	@ (800767c <vTaskPlaceOnEventList+0x8c>)
 8007612:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007614:	680b      	ldr	r3, [r1, #0]
 8007616:	2201      	movs	r2, #1
 8007618:	4082      	lsls	r2, r0
 800761a:	ea23 0302 	bic.w	r3, r3, r2
 800761e:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007620:	1c63      	adds	r3, r4, #1
 8007622:	d014      	beq.n	800764e <vTaskPlaceOnEventList+0x5e>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	19a4      	adds	r4, r4, r6
 8007628:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800762a:	d317      	bcc.n	800765c <vTaskPlaceOnEventList+0x6c>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800762c:	4b14      	ldr	r3, [pc, #80]	@ (8007680 <vTaskPlaceOnEventList+0x90>)
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	6829      	ldr	r1, [r5, #0]
}
 8007632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007636:	3104      	adds	r1, #4
 8007638:	f7fe bc36 	b.w	8005ea8 <vListInsert>
 800763c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800764c:	e7fe      	b.n	800764c <vTaskPlaceOnEventList+0x5c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800764e:	6829      	ldr	r1, [r5, #0]
 8007650:	480c      	ldr	r0, [pc, #48]	@ (8007684 <vTaskPlaceOnEventList+0x94>)
}
 8007652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007656:	3104      	adds	r1, #4
 8007658:	f7fe bc18 	b.w	8005e8c <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800765c:	4b0a      	ldr	r3, [pc, #40]	@ (8007688 <vTaskPlaceOnEventList+0x98>)
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	6829      	ldr	r1, [r5, #0]
 8007662:	3104      	adds	r1, #4
 8007664:	f7fe fc20 	bl	8005ea8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007668:	4b08      	ldr	r3, [pc, #32]	@ (800768c <vTaskPlaceOnEventList+0x9c>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800766e:	bf38      	it	cc
 8007670:	601c      	strcc	r4, [r3, #0]
}
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	2000523c 	.word	0x2000523c
 8007678:	20005138 	.word	0x20005138
 800767c:	20005134 	.word	0x20005134
 8007680:	20005180 	.word	0x20005180
 8007684:	20005140 	.word	0x20005140
 8007688:	20005184 	.word	0x20005184
 800768c:	2000511c 	.word	0x2000511c

08007690 <vTaskPlaceOnEventListRestricted>:
	{
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 8007692:	2800      	cmp	r0, #0
 8007694:	d02d      	beq.n	80076f2 <vTaskPlaceOnEventListRestricted+0x62>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007696:	4d26      	ldr	r5, [pc, #152]	@ (8007730 <vTaskPlaceOnEventListRestricted+0xa0>)
 8007698:	460c      	mov	r4, r1
 800769a:	6829      	ldr	r1, [r5, #0]
 800769c:	3118      	adds	r1, #24
 800769e:	4616      	mov	r6, r2
 80076a0:	f7fe fbf4 	bl	8005e8c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 80076a4:	4b23      	ldr	r3, [pc, #140]	@ (8007734 <vTaskPlaceOnEventListRestricted+0xa4>)
 80076a6:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076a8:	6828      	ldr	r0, [r5, #0]
 80076aa:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 80076ac:	b1e6      	cbz	r6, 80076e8 <vTaskPlaceOnEventListRestricted+0x58>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ae:	f7fe fc13 	bl	8005ed8 <uxListRemove>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d134      	bne.n	8007720 <vTaskPlaceOnEventListRestricted+0x90>
			xTicksToWait = portMAX_DELAY;
 80076b6:	f04f 34ff 	mov.w	r4, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80076ba:	682b      	ldr	r3, [r5, #0]
 80076bc:	491e      	ldr	r1, [pc, #120]	@ (8007738 <vTaskPlaceOnEventListRestricted+0xa8>)
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	2201      	movs	r2, #1
 80076c2:	409a      	lsls	r2, r3
 80076c4:	680b      	ldr	r3, [r1, #0]
 80076c6:	ea23 0302 	bic.w	r3, r3, r2
 80076ca:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076cc:	1c63      	adds	r3, r4, #1
 80076ce:	d025      	beq.n	800771c <vTaskPlaceOnEventListRestricted+0x8c>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	19e4      	adds	r4, r4, r7
 80076d4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076d6:	d315      	bcc.n	8007704 <vTaskPlaceOnEventListRestricted+0x74>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076d8:	4b18      	ldr	r3, [pc, #96]	@ (800773c <vTaskPlaceOnEventListRestricted+0xac>)
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	6829      	ldr	r1, [r5, #0]
	}
 80076de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076e2:	3104      	adds	r1, #4
 80076e4:	f7fe bbe0 	b.w	8005ea8 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076e8:	f7fe fbf6 	bl	8005ed8 <uxListRemove>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d1ef      	bne.n	80076d0 <vTaskPlaceOnEventListRestricted+0x40>
 80076f0:	e7e3      	b.n	80076ba <vTaskPlaceOnEventListRestricted+0x2a>
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8007702:	e7fe      	b.n	8007702 <vTaskPlaceOnEventListRestricted+0x72>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007704:	4b0e      	ldr	r3, [pc, #56]	@ (8007740 <vTaskPlaceOnEventListRestricted+0xb0>)
 8007706:	6818      	ldr	r0, [r3, #0]
 8007708:	6829      	ldr	r1, [r5, #0]
 800770a:	3104      	adds	r1, #4
 800770c:	f7fe fbcc 	bl	8005ea8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007710:	4b0c      	ldr	r3, [pc, #48]	@ (8007744 <vTaskPlaceOnEventListRestricted+0xb4>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8007716:	bf38      	it	cc
 8007718:	601c      	strcc	r4, [r3, #0]
	}
 800771a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800771c:	2e00      	cmp	r6, #0
 800771e:	d0d7      	beq.n	80076d0 <vTaskPlaceOnEventListRestricted+0x40>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007720:	6829      	ldr	r1, [r5, #0]
 8007722:	4809      	ldr	r0, [pc, #36]	@ (8007748 <vTaskPlaceOnEventListRestricted+0xb8>)
	}
 8007724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007728:	3104      	adds	r1, #4
 800772a:	f7fe bbaf 	b.w	8005e8c <vListInsertEnd>
 800772e:	bf00      	nop
 8007730:	2000523c 	.word	0x2000523c
 8007734:	20005138 	.word	0x20005138
 8007738:	20005134 	.word	0x20005134
 800773c:	20005180 	.word	0x20005180
 8007740:	20005184 	.word	0x20005184
 8007744:	2000511c 	.word	0x2000511c
 8007748:	20005140 	.word	0x20005140

0800774c <xTaskRemoveFromEventList>:
{
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800774e:	68c3      	ldr	r3, [r0, #12]
 8007750:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007752:	b354      	cbz	r4, 80077aa <xTaskRemoveFromEventList+0x5e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007754:	f104 0518 	add.w	r5, r4, #24
 8007758:	4628      	mov	r0, r5
 800775a:	f7fe fbbd 	bl	8005ed8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800775e:	4b17      	ldr	r3, [pc, #92]	@ (80077bc <xTaskRemoveFromEventList+0x70>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	b173      	cbz	r3, 8007782 <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007764:	4816      	ldr	r0, [pc, #88]	@ (80077c0 <xTaskRemoveFromEventList+0x74>)
 8007766:	4629      	mov	r1, r5
 8007768:	f7fe fb90 	bl	8005e8c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800776c:	4b15      	ldr	r3, [pc, #84]	@ (80077c4 <xTaskRemoveFromEventList+0x78>)
 800776e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007774:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8007776:	bf83      	ittte	hi
 8007778:	4b13      	ldrhi	r3, [pc, #76]	@ (80077c8 <xTaskRemoveFromEventList+0x7c>)
 800777a:	2001      	movhi	r0, #1
 800777c:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800777e:	2000      	movls	r0, #0
}
 8007780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007782:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007784:	4d11      	ldr	r5, [pc, #68]	@ (80077cc <xTaskRemoveFromEventList+0x80>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007786:	4630      	mov	r0, r6
 8007788:	f7fe fba6 	bl	8005ed8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800778c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800778e:	682f      	ldr	r7, [r5, #0]
 8007790:	480f      	ldr	r0, [pc, #60]	@ (80077d0 <xTaskRemoveFromEventList+0x84>)
 8007792:	2201      	movs	r2, #1
 8007794:	409a      	lsls	r2, r3
 8007796:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800779a:	433a      	orrs	r2, r7
 800779c:	4631      	mov	r1, r6
 800779e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80077a2:	602a      	str	r2, [r5, #0]
 80077a4:	f7fe fb72 	bl	8005e8c <vListInsertEnd>
 80077a8:	e7e0      	b.n	800776c <xTaskRemoveFromEventList+0x20>
 80077aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80077ba:	e7fe      	b.n	80077ba <xTaskRemoveFromEventList+0x6e>
 80077bc:	20005118 	.word	0x20005118
 80077c0:	2000516c 	.word	0x2000516c
 80077c4:	2000523c 	.word	0x2000523c
 80077c8:	20005128 	.word	0x20005128
 80077cc:	20005134 	.word	0x20005134
 80077d0:	200051b0 	.word	0x200051b0

080077d4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077d4:	4a03      	ldr	r2, [pc, #12]	@ (80077e4 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077d6:	4b04      	ldr	r3, [pc, #16]	@ (80077e8 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077d8:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	e9c0 2300 	strd	r2, r3, [r0]
}
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	20005124 	.word	0x20005124
 80077e8:	20005138 	.word	0x20005138

080077ec <xTaskCheckForTimeOut>:
{
 80077ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80077ee:	b308      	cbz	r0, 8007834 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 80077f0:	460d      	mov	r5, r1
 80077f2:	b1b1      	cbz	r1, 8007822 <xTaskCheckForTimeOut+0x36>
 80077f4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80077f6:	f7fe fbed 	bl	8005fd4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 80077fa:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80077fc:	4a1a      	ldr	r2, [pc, #104]	@ (8007868 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 80077fe:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8007800:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007802:	d02c      	beq.n	800785e <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007804:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800786c <xTaskCheckForTimeOut+0x80>
 8007808:	e9d4 6000 	ldrd	r6, r0, [r4]
 800780c:	f8dc 7000 	ldr.w	r7, [ip]
 8007810:	42be      	cmp	r6, r7
 8007812:	d018      	beq.n	8007846 <xTaskCheckForTimeOut+0x5a>
 8007814:	4288      	cmp	r0, r1
 8007816:	d816      	bhi.n	8007846 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8007818:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800781a:	f7fe fbfd 	bl	8006018 <vPortExitCritical>
}
 800781e:	4620      	mov	r0, r4
 8007820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8007832:	e7fe      	b.n	8007832 <xTaskCheckForTimeOut+0x46>
 8007834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8007844:	e7fe      	b.n	8007844 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007846:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800784a:	4573      	cmp	r3, lr
 800784c:	d909      	bls.n	8007862 <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 800784e:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007850:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007854:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8007856:	4403      	add	r3, r0
 8007858:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800785a:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 800785e:	2400      	movs	r4, #0
 8007860:	e7db      	b.n	800781a <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8007866:	e7d7      	b.n	8007818 <xTaskCheckForTimeOut+0x2c>
 8007868:	20005138 	.word	0x20005138
 800786c:	20005124 	.word	0x20005124

08007870 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007870:	4b01      	ldr	r3, [pc, #4]	@ (8007878 <vTaskMissedYield+0x8>)
 8007872:	2201      	movs	r2, #1
 8007874:	601a      	str	r2, [r3, #0]
}
 8007876:	4770      	bx	lr
 8007878:	20005128 	.word	0x20005128

0800787c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800787c:	4b05      	ldr	r3, [pc, #20]	@ (8007894 <xTaskGetSchedulerState+0x18>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	b133      	cbz	r3, 8007890 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007882:	4b05      	ldr	r3, [pc, #20]	@ (8007898 <xTaskGetSchedulerState+0x1c>)
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	fab0 f080 	clz	r0, r0
 800788a:	0940      	lsrs	r0, r0, #5
 800788c:	0040      	lsls	r0, r0, #1
 800788e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007890:	2001      	movs	r0, #1
	}
 8007892:	4770      	bx	lr
 8007894:	20005130 	.word	0x20005130
 8007898:	20005118 	.word	0x20005118

0800789c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800789c:	b310      	cbz	r0, 80078e4 <xTaskPriorityDisinherit+0x48>
	{
 800789e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80078a0:	4b27      	ldr	r3, [pc, #156]	@ (8007940 <xTaskPriorityDisinherit+0xa4>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4283      	cmp	r3, r0
 80078a6:	4604      	mov	r4, r0
 80078a8:	d008      	beq.n	80078bc <xTaskPriorityDisinherit+0x20>
 80078aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	e7fe      	b.n	80078ba <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80078bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078be:	b143      	cbz	r3, 80078d2 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078c0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80078c2:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 80078c4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078c6:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80078c8:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078ca:	d000      	beq.n	80078ce <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078cc:	b163      	cbz	r3, 80078e8 <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 80078ce:	2000      	movs	r0, #0
	}
 80078d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80078e2:	e7fe      	b.n	80078e2 <xTaskPriorityDisinherit+0x46>
	BaseType_t xReturn = pdFALSE;
 80078e4:	2000      	movs	r0, #0
	}
 80078e6:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078e8:	1d06      	adds	r6, r0, #4
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7fe faf4 	bl	8005ed8 <uxListRemove>
 80078f0:	b1a8      	cbz	r0, 800791e <xTaskPriorityDisinherit+0x82>
 80078f2:	4814      	ldr	r0, [pc, #80]	@ (8007944 <xTaskPriorityDisinherit+0xa8>)
 80078f4:	4a14      	ldr	r2, [pc, #80]	@ (8007948 <xTaskPriorityDisinherit+0xac>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078f6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80078f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 80078fa:	4631      	mov	r1, r6
 80078fc:	2501      	movs	r5, #1
 80078fe:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007900:	f1c3 0707 	rsb	r7, r3, #7
 8007904:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007906:	fa05 f403 	lsl.w	r4, r5, r3
 800790a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800790e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007912:	4334      	orrs	r4, r6
 8007914:	6014      	str	r4, [r2, #0]
 8007916:	f7fe fab9 	bl	8005e8c <vListInsertEnd>
					xReturn = pdTRUE;
 800791a:	4628      	mov	r0, r5
	}
 800791c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800791e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007920:	4808      	ldr	r0, [pc, #32]	@ (8007944 <xTaskPriorityDisinherit+0xa8>)
 8007922:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007926:	0092      	lsls	r2, r2, #2
 8007928:	5882      	ldr	r2, [r0, r2]
 800792a:	b10a      	cbz	r2, 8007930 <xTaskPriorityDisinherit+0x94>
 800792c:	4a06      	ldr	r2, [pc, #24]	@ (8007948 <xTaskPriorityDisinherit+0xac>)
 800792e:	e7e2      	b.n	80078f6 <xTaskPriorityDisinherit+0x5a>
 8007930:	4a05      	ldr	r2, [pc, #20]	@ (8007948 <xTaskPriorityDisinherit+0xac>)
 8007932:	2501      	movs	r5, #1
 8007934:	409d      	lsls	r5, r3
 8007936:	6813      	ldr	r3, [r2, #0]
 8007938:	ea23 0305 	bic.w	r3, r3, r5
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	e7da      	b.n	80078f6 <xTaskPriorityDisinherit+0x5a>
 8007940:	2000523c 	.word	0x2000523c
 8007944:	200051b0 	.word	0x200051b0
 8007948:	20005134 	.word	0x20005134

0800794c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007950:	4e21      	ldr	r6, [pc, #132]	@ (80079d8 <prvSwitchTimerLists+0x8c>)
 8007952:	b084      	sub	sp, #16

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007954:	e00d      	b.n	8007972 <prvSwitchTimerLists+0x26>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007956:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007958:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800795a:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800795c:	1d25      	adds	r5, r4, #4
 800795e:	4628      	mov	r0, r5
 8007960:	f7fe faba 	bl	8005ed8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007964:	6a23      	ldr	r3, [r4, #32]
 8007966:	4620      	mov	r0, r4
 8007968:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800796a:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800796e:	075b      	lsls	r3, r3, #29
 8007970:	d40a      	bmi.n	8007988 <prvSwitchTimerLists+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007972:	6833      	ldr	r3, [r6, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	2a00      	cmp	r2, #0
 8007978:	d1ed      	bne.n	8007956 <prvSwitchTimerLists+0xa>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800797a:	4a18      	ldr	r2, [pc, #96]	@ (80079dc <prvSwitchTimerLists+0x90>)
 800797c:	6811      	ldr	r1, [r2, #0]
 800797e:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8007980:	6013      	str	r3, [r2, #0]
}
 8007982:	b004      	add	sp, #16
 8007984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007988:	69a3      	ldr	r3, [r4, #24]
	if( xTimerQueue != NULL )
 800798a:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 80079e0 <prvSwitchTimerLists+0x94>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800798e:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8007990:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007992:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8007994:	d205      	bcs.n	80079a2 <prvSwitchTimerLists+0x56>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007996:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007998:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800799a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800799c:	f7fe fa84 	bl	8005ea8 <vListInsert>
 80079a0:	e7e7      	b.n	8007972 <prvSwitchTimerLists+0x26>
	if( xTimerQueue != NULL )
 80079a2:	f8d8 3000 	ldr.w	r3, [r8]
		xMessage.xMessageID = xCommandID;
 80079a6:	2500      	movs	r5, #0
	if( xTimerQueue != NULL )
 80079a8:	b16b      	cbz	r3, 80079c6 <prvSwitchTimerLists+0x7a>
		xMessage.xMessageID = xCommandID;
 80079aa:	e9cd 5701 	strd	r5, r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079ae:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079b0:	f7ff ff64 	bl	800787c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079b4:	f8d8 0000 	ldr.w	r0, [r8]
 80079b8:	462b      	mov	r3, r5
 80079ba:	462a      	mov	r2, r5
 80079bc:	a901      	add	r1, sp, #4
 80079be:	f7fe fcfb 	bl	80063b8 <xQueueGenericSend>
				configASSERT( xResult );
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d1d5      	bne.n	8007972 <prvSwitchTimerLists+0x26>
 80079c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	e7fe      	b.n	80079d6 <prvSwitchTimerLists+0x8a>
 80079d8:	20005310 	.word	0x20005310
 80079dc:	2000530c 	.word	0x2000530c
 80079e0:	20005308 	.word	0x20005308

080079e4 <prvTimerTask>:
{
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	4e97      	ldr	r6, [pc, #604]	@ (8007c48 <prvTimerTask+0x264>)
 80079ea:	4d98      	ldr	r5, [pc, #608]	@ (8007c4c <prvTimerTask+0x268>)
 80079ec:	4c98      	ldr	r4, [pc, #608]	@ (8007c50 <prvTimerTask+0x26c>)
 80079ee:	b089      	sub	sp, #36	@ 0x24
					portYIELD_WITHIN_API();
 80079f0:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 80079f4:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079f8:	6832      	ldr	r2, [r6, #0]
 80079fa:	6817      	ldr	r7, [r2, #0]
 80079fc:	2f00      	cmp	r7, #0
 80079fe:	f000 80a1 	beq.w	8007b44 <prvTimerTask+0x160>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a02:	68d3      	ldr	r3, [r2, #12]
 8007a04:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8007a06:	f7ff fd87 	bl	8007518 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8007a0a:	f7ff fd9d 	bl	8007548 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007a0e:	682a      	ldr	r2, [r5, #0]
 8007a10:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8007a12:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8007a14:	f200 80a7 	bhi.w	8007b66 <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a18:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8007a1a:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a1c:	f240 80ad 	bls.w	8007b7a <prvTimerTask+0x196>
 8007a20:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a22:	6820      	ldr	r0, [r4, #0]
 8007a24:	eba7 010a 	sub.w	r1, r7, sl
 8007a28:	f7ff f856 	bl	8006ad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a2c:	f7ff fd7c 	bl	8007528 <xTaskResumeAll>
 8007a30:	b928      	cbnz	r0, 8007a3e <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 8007a32:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a3e:	6820      	ldr	r0, [r4, #0]
 8007a40:	2200      	movs	r2, #0
 8007a42:	a902      	add	r1, sp, #8
 8007a44:	f7fe fe9a 	bl	800677c <xQueueReceive>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d0d5      	beq.n	80079f8 <prvTimerTask+0x14>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a4c:	9b02      	ldr	r3, [sp, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dbf5      	blt.n	8007a3e <prvTimerTask+0x5a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a52:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	b113      	cbz	r3, 8007a5e <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a58:	1d38      	adds	r0, r7, #4
 8007a5a:	f7fe fa3d 	bl	8005ed8 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8007a5e:	f7ff fd73 	bl	8007548 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007a62:	682b      	ldr	r3, [r5, #0]
 8007a64:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8007a66:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8007a68:	f0c0 8084 	bcc.w	8007b74 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 8007a6c:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8007a6e:	f8c5 b000 	str.w	fp, [r5]
			switch( xMessage.xMessageID )
 8007a72:	2b09      	cmp	r3, #9
 8007a74:	d8e3      	bhi.n	8007a3e <prvTimerTask+0x5a>
 8007a76:	e8df f003 	tbb	[pc, r3]
 8007a7a:	0505      	.short	0x0505
 8007a7c:	5c3e5505 	.word	0x5c3e5505
 8007a80:	3e550505 	.word	0x3e550505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a84:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a88:	9b03      	ldr	r3, [sp, #12]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a8a:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a8c:	f042 0201 	orr.w	r2, r2, #1
 8007a90:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	1899      	adds	r1, r3, r2
 8007a98:	bf2c      	ite	cs
 8007a9a:	2001      	movcs	r0, #1
 8007a9c:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8007a9e:	4559      	cmp	r1, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007aa0:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8007aa2:	f200 8085 	bhi.w	8007bb0 <prvTimerTask+0x1cc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa6:	ebab 0303 	sub.w	r3, fp, r3
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	f200 809b 	bhi.w	8007be6 <prvTimerTask+0x202>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ab6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007aba:	0759      	lsls	r1, r3, #29
 8007abc:	d5bf      	bpl.n	8007a3e <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8007abe:	6821      	ldr	r1, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ac0:	9b03      	ldr	r3, [sp, #12]
 8007ac2:	69ba      	ldr	r2, [r7, #24]
	if( xTimerQueue != NULL )
 8007ac4:	b171      	cbz	r1, 8007ae4 <prvTimerTask+0x100>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ac6:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ac8:	e9cd 3706 	strd	r3, r7, [sp, #24]
		xMessage.xMessageID = xCommandID;
 8007acc:	2700      	movs	r7, #0
 8007ace:	9705      	str	r7, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ad0:	f7ff fed4 	bl	800787c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ad4:	6820      	ldr	r0, [r4, #0]
 8007ad6:	463b      	mov	r3, r7
 8007ad8:	463a      	mov	r2, r7
 8007ada:	a905      	add	r1, sp, #20
 8007adc:	f7fe fc6c 	bl	80063b8 <xQueueGenericSend>
							configASSERT( xResult );
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d1ac      	bne.n	8007a3e <prvTimerTask+0x5a>
 8007ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	e7fe      	b.n	8007af4 <prvTimerTask+0x110>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007af6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007afa:	9b03      	ldr	r3, [sp, #12]
 8007afc:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 8095 	beq.w	8007c36 <prvTimerTask+0x252>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b0c:	445b      	add	r3, fp
	if( xNextExpiryTime <= xTimeNow )
 8007b0e:	455b      	cmp	r3, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b10:	607b      	str	r3, [r7, #4]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b12:	bf96      	itet	ls
 8007b14:	4b4f      	ldrls	r3, [pc, #316]	@ (8007c54 <prvTimerTask+0x270>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b16:	6830      	ldrhi	r0, [r6, #0]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b18:	6818      	ldrls	r0, [r3, #0]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b1a:	613f      	str	r7, [r7, #16]
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b1c:	1d39      	adds	r1, r7, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b1e:	f7fe f9c3 	bl	8005ea8 <vListInsert>
 8007b22:	e78c      	b.n	8007a3e <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
					break;
 8007b30:	e785      	b.n	8007a3e <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b36:	079a      	lsls	r2, r3, #30
 8007b38:	d544      	bpl.n	8007bc4 <prvTimerTask+0x1e0>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b3a:	f023 0301 	bic.w	r3, r3, #1
 8007b3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8007b42:	e77c      	b.n	8007a3e <prvTimerTask+0x5a>
	vTaskSuspendAll();
 8007b44:	f7ff fce8 	bl	8007518 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8007b48:	f7ff fcfe 	bl	8007548 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007b4c:	682a      	ldr	r2, [r5, #0]
 8007b4e:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8007b50:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8007b52:	d308      	bcc.n	8007b66 <prvTimerTask+0x182>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b54:	4b3f      	ldr	r3, [pc, #252]	@ (8007c54 <prvTimerTask+0x270>)
	xLastTime = xTimeNow;
 8007b56:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	6812      	ldr	r2, [r2, #0]
 8007b5e:	fab2 f282 	clz	r2, r2
 8007b62:	0952      	lsrs	r2, r2, #5
 8007b64:	e75d      	b.n	8007a22 <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 8007b66:	f7ff fef1 	bl	800794c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8007b6a:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8007b6e:	f7ff fcdb 	bl	8007528 <xTaskResumeAll>
 8007b72:	e764      	b.n	8007a3e <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 8007b74:	f7ff feea 	bl	800794c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b78:	e778      	b.n	8007a6c <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 8007b7a:	f7ff fcd5 	bl	8007528 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b7e:	6832      	ldr	r2, [r6, #0]
 8007b80:	68d2      	ldr	r2, [r2, #12]
 8007b82:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b86:	f10b 0104 	add.w	r1, fp, #4
 8007b8a:	4608      	mov	r0, r1
 8007b8c:	9101      	str	r1, [sp, #4]
 8007b8e:	f7fe f9a3 	bl	8005ed8 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b92:	f89b 2024 	ldrb.w	r2, [fp, #36]	@ 0x24
 8007b96:	9901      	ldr	r1, [sp, #4]
 8007b98:	f012 0f04 	tst.w	r2, #4
 8007b9c:	d116      	bne.n	8007bcc <prvTimerTask+0x1e8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b9e:	f022 0201 	bic.w	r2, r2, #1
 8007ba2:	f88b 2024 	strb.w	r2, [fp, #36]	@ 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ba6:	f8db 3020 	ldr.w	r3, [fp, #32]
 8007baa:	4658      	mov	r0, fp
 8007bac:	4798      	blx	r3
}
 8007bae:	e746      	b.n	8007a3e <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bb0:	455b      	cmp	r3, fp
 8007bb2:	d902      	bls.n	8007bba <prvTimerTask+0x1d6>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f43f af7b 	beq.w	8007ab0 <prvTimerTask+0xcc>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bba:	6830      	ldr	r0, [r6, #0]
 8007bbc:	1d39      	adds	r1, r7, #4
 8007bbe:	f7fe f973 	bl	8005ea8 <vListInsert>
	return xProcessTimerNow;
 8007bc2:	e73c      	b.n	8007a3e <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f7fe f8ed 	bl	8005da4 <vPortFree>
 8007bca:	e738      	b.n	8007a3e <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007bcc:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bd0:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007bd4:	183a      	adds	r2, r7, r0
	if( xNextExpiryTime <= xTimeNow )
 8007bd6:	4552      	cmp	r2, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007bd8:	f8cb 2004 	str.w	r2, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8007bdc:	d909      	bls.n	8007bf2 <prvTimerTask+0x20e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bde:	6830      	ldr	r0, [r6, #0]
 8007be0:	f7fe f962 	bl	8005ea8 <vListInsert>
	return xProcessTimerNow;
 8007be4:	e7df      	b.n	8007ba6 <prvTimerTask+0x1c2>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007be6:	4b1b      	ldr	r3, [pc, #108]	@ (8007c54 <prvTimerTask+0x270>)
 8007be8:	1d39      	adds	r1, r7, #4
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	f7fe f95c 	bl	8005ea8 <vListInsert>
	return xProcessTimerNow;
 8007bf0:	e725      	b.n	8007a3e <prvTimerTask+0x5a>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bf2:	ebaa 0a07 	sub.w	sl, sl, r7
 8007bf6:	4550      	cmp	r0, sl
 8007bf8:	d818      	bhi.n	8007c2c <prvTimerTask+0x248>
	if( xTimerQueue != NULL )
 8007bfa:	6822      	ldr	r2, [r4, #0]
 8007bfc:	b16a      	cbz	r2, 8007c1a <prvTimerTask+0x236>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007bfe:	e9cd 7b06 	strd	r7, fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
 8007c02:	2700      	movs	r7, #0
 8007c04:	9705      	str	r7, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c06:	f7ff fe39 	bl	800787c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	463b      	mov	r3, r7
 8007c0e:	463a      	mov	r2, r7
 8007c10:	a905      	add	r1, sp, #20
 8007c12:	f7fe fbd1 	bl	80063b8 <xQueueGenericSend>
			configASSERT( xResult );
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d1c5      	bne.n	8007ba6 <prvTimerTask+0x1c2>
 8007c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	e7fe      	b.n	8007c2a <prvTimerTask+0x246>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c2c:	4b09      	ldr	r3, [pc, #36]	@ (8007c54 <prvTimerTask+0x270>)
 8007c2e:	6818      	ldr	r0, [r3, #0]
 8007c30:	f7fe f93a 	bl	8005ea8 <vListInsert>
	return xProcessTimerNow;
 8007c34:	e7b7      	b.n	8007ba6 <prvTimerTask+0x1c2>
 8007c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c46:	e7fe      	b.n	8007c46 <prvTimerTask+0x262>
 8007c48:	20005310 	.word	0x20005310
 8007c4c:	20005300 	.word	0x20005300
 8007c50:	20005308 	.word	0x20005308
 8007c54:	2000530c 	.word	0x2000530c

08007c58 <xTimerCreateTimerTask>:
{
 8007c58:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8007c5a:	4c23      	ldr	r4, [pc, #140]	@ (8007ce8 <xTimerCreateTimerTask+0x90>)
{
 8007c5c:	b089      	sub	sp, #36	@ 0x24
	taskENTER_CRITICAL();
 8007c5e:	f7fe f9b9 	bl	8005fd4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007c62:	6825      	ldr	r5, [r4, #0]
 8007c64:	b335      	cbz	r5, 8007cb4 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c66:	f7fe f9d7 	bl	8006018 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	b1cb      	cbz	r3, 8007ca2 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c6e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c70:	aa07      	add	r2, sp, #28
 8007c72:	a906      	add	r1, sp, #24
 8007c74:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c76:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c7a:	f7f9 fbe1 	bl	8001440 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c7e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8007c82:	2302      	movs	r3, #2
 8007c84:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	9a07      	ldr	r2, [sp, #28]
 8007c8c:	4917      	ldr	r1, [pc, #92]	@ (8007cec <xTimerCreateTimerTask+0x94>)
 8007c8e:	4818      	ldr	r0, [pc, #96]	@ (8007cf0 <xTimerCreateTimerTask+0x98>)
 8007c90:	4623      	mov	r3, r4
 8007c92:	f7ff f9f1 	bl	8007078 <xTaskCreateStatic>
 8007c96:	4b17      	ldr	r3, [pc, #92]	@ (8007cf4 <xTimerCreateTimerTask+0x9c>)
 8007c98:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8007c9a:	b110      	cbz	r0, 8007ca2 <xTimerCreateTimerTask+0x4a>
}
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	b009      	add	sp, #36	@ 0x24
 8007ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007cb2:	e7fe      	b.n	8007cb2 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8007cb4:	4f10      	ldr	r7, [pc, #64]	@ (8007cf8 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8007cb6:	4e11      	ldr	r6, [pc, #68]	@ (8007cfc <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8007cb8:	4638      	mov	r0, r7
 8007cba:	f7fe f8d7 	bl	8005e6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7fe f8d4 	bl	8005e6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8007d00 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cc6:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8007cc8:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cca:	4a0e      	ldr	r2, [pc, #56]	@ (8007d04 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8007d08 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8007cce:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cd0:	210c      	movs	r1, #12
 8007cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8007d0c <xTimerCreateTimerTask+0xb4>)
 8007cd4:	200a      	movs	r0, #10
 8007cd6:	f7fe fb03 	bl	80062e0 <xQueueGenericCreateStatic>
 8007cda:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d0c2      	beq.n	8007c66 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ce0:	490b      	ldr	r1, [pc, #44]	@ (8007d10 <xTimerCreateTimerTask+0xb8>)
 8007ce2:	f7fe fed1 	bl	8006a88 <vQueueAddToRegistry>
 8007ce6:	e7be      	b.n	8007c66 <xTimerCreateTimerTask+0xe>
 8007ce8:	20005308 	.word	0x20005308
 8007cec:	0800a23c 	.word	0x0800a23c
 8007cf0:	080079e5 	.word	0x080079e5
 8007cf4:	20005304 	.word	0x20005304
 8007cf8:	20005328 	.word	0x20005328
 8007cfc:	20005314 	.word	0x20005314
 8007d00:	20005310 	.word	0x20005310
 8007d04:	2000530c 	.word	0x2000530c
 8007d08:	20005240 	.word	0x20005240
 8007d0c:	20005288 	.word	0x20005288
 8007d10:	0800a234 	.word	0x0800a234

08007d14 <xTimerCreate>:
	{
 8007d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	4607      	mov	r7, r0
 8007d1a:	b085      	sub	sp, #20
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007d1c:	2028      	movs	r0, #40	@ 0x28
	{
 8007d1e:	4688      	mov	r8, r1
 8007d20:	4616      	mov	r6, r2
 8007d22:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007d24:	f7fd ff86 	bl	8005c34 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8007d28:	4604      	mov	r4, r0
 8007d2a:	b1e8      	cbz	r0, 8007d68 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007d32:	f1b8 0f00 	cmp.w	r8, #0
 8007d36:	d01b      	beq.n	8007d70 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
 8007d38:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 8007dd8 <xTimerCreate+0xc4>
	taskENTER_CRITICAL();
 8007d3c:	f7fe f94a 	bl	8005fd4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007d40:	f8d9 3000 	ldr.w	r3, [r9]
 8007d44:	b1eb      	cbz	r3, 8007d82 <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
 8007d46:	f7fe f967 	bl	8006018 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007d4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
		pxNewTimer->pcTimerName = pcTimerName;
 8007d4c:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 8007d4e:	e9c4 8506 	strd	r8, r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007d52:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007d54:	1d20      	adds	r0, r4, #4
 8007d56:	f7fe f895 	bl	8005e84 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007d5a:	b12e      	cbz	r6, 8007d68 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007d5c:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8007d60:	f043 0304 	orr.w	r3, r3, #4
 8007d64:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
	}
 8007d68:	4620      	mov	r0, r4
 8007d6a:	b005      	add	sp, #20
 8007d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007d80:	e7fe      	b.n	8007d80 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
 8007d82:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8007ddc <xTimerCreate+0xc8>
			vListInitialise( &xActiveTimerList2 );
 8007d86:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007de0 <xTimerCreate+0xcc>
 8007d8a:	9303      	str	r3, [sp, #12]
			vListInitialise( &xActiveTimerList1 );
 8007d8c:	4658      	mov	r0, fp
 8007d8e:	f7fe f86d 	bl	8005e6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d92:	4650      	mov	r0, sl
 8007d94:	f7fe f86a 	bl	8005e6c <vListInitialise>
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	9300      	str	r3, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8007d9c:	4b09      	ldr	r3, [pc, #36]	@ (8007dc4 <xTimerCreate+0xb0>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8007dc8 <xTimerCreate+0xb4>)
			pxCurrentTimerList = &xActiveTimerList1;
 8007da0:	f8c3 b000 	str.w	fp, [r3]
			pxOverflowTimerList = &xActiveTimerList2;
 8007da4:	4b09      	ldr	r3, [pc, #36]	@ (8007dcc <xTimerCreate+0xb8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007da6:	210c      	movs	r1, #12
			pxOverflowTimerList = &xActiveTimerList2;
 8007da8:	f8c3 a000 	str.w	sl, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dac:	200a      	movs	r0, #10
 8007dae:	4b08      	ldr	r3, [pc, #32]	@ (8007dd0 <xTimerCreate+0xbc>)
 8007db0:	f7fe fa96 	bl	80062e0 <xQueueGenericCreateStatic>
 8007db4:	f8c9 0000 	str.w	r0, [r9]
				if( xTimerQueue != NULL )
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d0c4      	beq.n	8007d46 <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007dbc:	4905      	ldr	r1, [pc, #20]	@ (8007dd4 <xTimerCreate+0xc0>)
 8007dbe:	f7fe fe63 	bl	8006a88 <vQueueAddToRegistry>
 8007dc2:	e7c0      	b.n	8007d46 <xTimerCreate+0x32>
 8007dc4:	20005310 	.word	0x20005310
 8007dc8:	20005288 	.word	0x20005288
 8007dcc:	2000530c 	.word	0x2000530c
 8007dd0:	20005240 	.word	0x20005240
 8007dd4:	0800a234 	.word	0x0800a234
 8007dd8:	20005308 	.word	0x20005308
 8007ddc:	20005328 	.word	0x20005328
 8007de0:	20005314 	.word	0x20005314

08007de4 <xTimerCreateStatic>:
	{
 8007de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de8:	b085      	sub	sp, #20
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007dea:	2428      	movs	r4, #40	@ 0x28
 8007dec:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007dee:	9c03      	ldr	r4, [sp, #12]
 8007df0:	2c28      	cmp	r4, #40	@ 0x28
 8007df2:	d008      	beq.n	8007e06 <xTimerCreateStatic+0x22>
 8007df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	e7fe      	b.n	8007e04 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e06:	461d      	mov	r5, r3
 8007e08:	9b03      	ldr	r3, [sp, #12]
		configASSERT( pxTimerBuffer );
 8007e0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e0c:	b343      	cbz	r3, 8007e60 <xTimerCreateStatic+0x7c>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007e0e:	4616      	mov	r6, r2
 8007e10:	461a      	mov	r2, r3
 8007e12:	2302      	movs	r3, #2
 8007e14:	460f      	mov	r7, r1
 8007e16:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007e1a:	b351      	cbz	r1, 8007e72 <xTimerCreateStatic+0x8e>
		if( xTimerQueue == NULL )
 8007e1c:	4c29      	ldr	r4, [pc, #164]	@ (8007ec4 <xTimerCreateStatic+0xe0>)
 8007e1e:	4680      	mov	r8, r0
	taskENTER_CRITICAL();
 8007e20:	f7fe f8d8 	bl	8005fd4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007e24:	f8d4 b000 	ldr.w	fp, [r4]
 8007e28:	f1bb 0f00 	cmp.w	fp, #0
 8007e2c:	d02a      	beq.n	8007e84 <xTimerCreateStatic+0xa0>
	taskEXIT_CRITICAL();
 8007e2e:	f7fe f8f3 	bl	8006018 <vPortExitCritical>
		pxNewTimer->pcTimerName = pcTimerName;
 8007e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007e34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
		pxNewTimer->pcTimerName = pcTimerName;
 8007e36:	f8c3 8000 	str.w	r8, [r3]
		pxNewTimer->pvTimerID = pvTimerID;
 8007e3a:	e9c3 7506 	strd	r7, r5, [r3, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007e3e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007e40:	1d18      	adds	r0, r3, #4
 8007e42:	f7fe f81f 	bl	8005e84 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007e46:	b13e      	cbz	r6, 8007e58 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007e48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e50:	f043 0304 	orr.w	r3, r3, #4
 8007e54:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
	}
 8007e58:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007e5a:	b005      	add	sp, #20
 8007e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 8007e70:	e7fe      	b.n	8007e70 <xTimerCreateStatic+0x8c>
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007e82:	e7fe      	b.n	8007e82 <xTimerCreateStatic+0x9e>
			vListInitialise( &xActiveTimerList1 );
 8007e84:	f8df a054 	ldr.w	sl, [pc, #84]	@ 8007edc <xTimerCreateStatic+0xf8>
			vListInitialise( &xActiveTimerList2 );
 8007e88:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 8007ee0 <xTimerCreateStatic+0xfc>
			vListInitialise( &xActiveTimerList1 );
 8007e8c:	4650      	mov	r0, sl
 8007e8e:	f7fd ffed 	bl	8005e6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e92:	4648      	mov	r0, r9
 8007e94:	f7fd ffea 	bl	8005e6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e98:	4a0b      	ldr	r2, [pc, #44]	@ (8007ec8 <xTimerCreateStatic+0xe4>)
			pxOverflowTimerList = &xActiveTimerList2;
 8007e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007ecc <xTimerCreateStatic+0xe8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e9c:	f8cd b000 	str.w	fp, [sp]
 8007ea0:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8007ea2:	f8c2 a000 	str.w	sl, [r2]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ea6:	f8c3 9000 	str.w	r9, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007eaa:	4a09      	ldr	r2, [pc, #36]	@ (8007ed0 <xTimerCreateStatic+0xec>)
 8007eac:	4b09      	ldr	r3, [pc, #36]	@ (8007ed4 <xTimerCreateStatic+0xf0>)
 8007eae:	200a      	movs	r0, #10
 8007eb0:	f7fe fa16 	bl	80062e0 <xQueueGenericCreateStatic>
 8007eb4:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d0b9      	beq.n	8007e2e <xTimerCreateStatic+0x4a>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007eba:	4907      	ldr	r1, [pc, #28]	@ (8007ed8 <xTimerCreateStatic+0xf4>)
 8007ebc:	f7fe fde4 	bl	8006a88 <vQueueAddToRegistry>
 8007ec0:	e7b5      	b.n	8007e2e <xTimerCreateStatic+0x4a>
 8007ec2:	bf00      	nop
 8007ec4:	20005308 	.word	0x20005308
 8007ec8:	20005310 	.word	0x20005310
 8007ecc:	2000530c 	.word	0x2000530c
 8007ed0:	20005288 	.word	0x20005288
 8007ed4:	20005240 	.word	0x20005240
 8007ed8:	0800a234 	.word	0x0800a234
 8007edc:	20005328 	.word	0x20005328
 8007ee0:	20005314 	.word	0x20005314

08007ee4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8007ee4:	b1c0      	cbz	r0, 8007f18 <xTimerGenericCommand+0x34>
{
 8007ee6:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8007ee8:	4d18      	ldr	r5, [pc, #96]	@ (8007f4c <xTimerGenericCommand+0x68>)
 8007eea:	682c      	ldr	r4, [r5, #0]
{
 8007eec:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8007eee:	b184      	cbz	r4, 8007f12 <xTimerGenericCommand+0x2e>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ef0:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 8007ef2:	e9cd 1201 	strd	r1, r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ef6:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ef8:	dc17      	bgt.n	8007f2a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007efa:	f7ff fcbf 	bl	800787c <xTaskGetSchedulerState>
 8007efe:	2802      	cmp	r0, #2
 8007f00:	d01c      	beq.n	8007f3c <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f02:	2300      	movs	r3, #0
 8007f04:	6828      	ldr	r0, [r5, #0]
 8007f06:	461a      	mov	r2, r3
 8007f08:	a901      	add	r1, sp, #4
 8007f0a:	f7fe fa55 	bl	80063b8 <xQueueGenericSend>
}
 8007f0e:	b005      	add	sp, #20
 8007f10:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8007f12:	4620      	mov	r0, r4
}
 8007f14:	b005      	add	sp, #20
 8007f16:	bd30      	pop	{r4, r5, pc}
 8007f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8007f28:	e7fe      	b.n	8007f28 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f2a:	469c      	mov	ip, r3
 8007f2c:	4662      	mov	r2, ip
 8007f2e:	2300      	movs	r3, #0
 8007f30:	a901      	add	r1, sp, #4
 8007f32:	4620      	mov	r0, r4
 8007f34:	f7fe fbc0 	bl	80066b8 <xQueueGenericSendFromISR>
}
 8007f38:	b005      	add	sp, #20
 8007f3a:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f3c:	6828      	ldr	r0, [r5, #0]
 8007f3e:	9a08      	ldr	r2, [sp, #32]
 8007f40:	2300      	movs	r3, #0
 8007f42:	a901      	add	r1, sp, #4
 8007f44:	f7fe fa38 	bl	80063b8 <xQueueGenericSend>
 8007f48:	e7e4      	b.n	8007f14 <xTimerGenericCommand+0x30>
 8007f4a:	bf00      	nop
 8007f4c:	20005308 	.word	0x20005308

08007f50 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8007f50:	88c3      	ldrh	r3, [r0, #6]
{
 8007f52:	b510      	push	{r4, lr}
  temp *= pHandle->ConversionFactor;
 8007f54:	8844      	ldrh	r4, [r0, #2]
 8007f56:	fb03 f404 	mul.w	r4, r3, r4
  temp /= 65536u;
 8007f5a:	0c24      	lsrs	r4, r4, #16

  setDCVoltage(temp);
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f7f8 ff71 	bl	8000e44 <setDCVoltage>

  return ( ( uint16_t )temp );
}
 8007f62:	4620      	mov	r0, r4
 8007f64:	bd10      	pop	{r4, pc}
 8007f66:	bf00      	nop

08007f68 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8007f68:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007f6a:	8802      	ldrh	r2, [r0, #0]
 8007f6c:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8007f6e:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8007f72:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007f76:	fb02 f202 	mul.w	r2, r2, r2
 8007f7a:	4594      	cmp	ip, r2
{
 8007f7c:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8007f7e:	d919      	bls.n	8007fb4 <Circle_Limitation+0x4c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8007f80:	f890 20b2 	ldrb.w	r2, [r0, #178]	@ 0xb2
 8007f84:	ebc2 621c 	rsb	r2, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8007f88:	b2d2      	uxtb	r2, r2
 8007f8a:	eb00 0042 	add.w	r0, r0, r2, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8007f8e:	8882      	ldrh	r2, [r0, #4]
 8007f90:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8007f94:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8007f96:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8007f9a:	bfbc      	itt	lt
 8007f9c:	f501 41ff 	addlt.w	r1, r1, #32640	@ 0x7f80
 8007fa0:	317f      	addlt	r1, #127	@ 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	bfbc      	itt	lt
 8007fa6:	f503 43ff 	addlt.w	r3, r3, #32640	@ 0x7f80
 8007faa:	337f      	addlt	r3, #127	@ 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8007fac:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8007fb0:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8007fb4:	b289      	uxth	r1, r1
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f361 000f 	bfi	r0, r1, #0, #16
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f363 401f 	bfi	r0, r3, #16, #16
}
 8007fc2:	b004      	add	sp, #16
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop

08007fc8 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8007fcc:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8007fce:	f8c0 3096 	str.w	r3, [r0, #150]	@ 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8007fd2:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8007fd6:	f8a0 311b 	strh.w	r3, [r0, #283]	@ 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 8007fda:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
}
 8007fde:	4770      	bx	lr

08007fe0 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8007fe0:	b120      	cbz	r0, 8007fec <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8007fe2:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8007fe6:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8007fe8:	9b00      	ldr	r3, [sp, #0]
 8007fea:	60c3      	str	r3, [r0, #12]
  }
}
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop

08007ff0 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8007ff0:	b178      	cbz	r0, 8008012 <FCP_CalcCRC+0x22>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8007ff2:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8007ff4:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 8007ff6:	440b      	add	r3, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007ff8:	b139      	cbz	r1, 800800a <FCP_CalcCRC+0x1a>
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	4401      	add	r1, r0
    {
      nSum += pFrame->Buffer[idx];
 8007ffe:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008002:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8008004:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8008006:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8008008:	d1f9      	bne.n	8007ffe <FCP_CalcCRC+0xe>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800800a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 800800e:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  }

  return nCRC ;
}
 8008012:	4770      	bx	lr

08008014 <HALL_Init>:
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
                                     pHandle->_Super.bElToMecRatio;
 8008014:	7843      	ldrb	r3, [r0, #1]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8008016:	f8b0 c016 	ldrh.w	ip, [r0, #22]

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 800801a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800801c:	b570      	push	{r4, r5, r6, lr}
  hMaxReliableElSpeedUnit *= 2u;
 800801e:	f8b0 e014 	ldrh.w	lr, [r0, #20]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8008022:	fb1c fc03 	smulbb	ip, ip, r3
  hMaxReliableElSpeedUnit *= 2u;
 8008026:	fb1e fe03 	smulbb	lr, lr, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 800802a:	fa1f fc8c 	uxth.w	ip, ip
  hMaxReliableElSpeedUnit *= 2u;
 800802e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8008032:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8008034:	f1bc 0f03 	cmp.w	ip, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8008038:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 800803a:	f8a0 10c2 	strh.w	r1, [r0, #194]	@ 0xc2
  hMaxReliableElSpeedUnit *= 2u;
 800803e:	fa1f fe8e 	uxth.w	lr, lr
  if ( hMinReliableElSpeedUnit == 0u )
 8008042:	d969      	bls.n	8008118 <HALL_Init+0x104>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8008044:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8008048:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800804c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008050:	f242 7410 	movw	r4, #10000	@ 0x2710
 8008054:	fbb4 f4fc 	udiv	r4, r4, ip
 8008058:	b2a5      	uxth	r5, r4
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 800805a:	fb04 f101 	mul.w	r1, r4, r1
 800805e:	4c30      	ldr	r4, [pc, #192]	@ (8008120 <HALL_Init+0x10c>)
 8008060:	f8a0 50c0 	strh.w	r5, [r0, #192]	@ 0xc0
 8008064:	fba4 4101 	umull	r4, r1, r4, r1
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8008068:	4c2e      	ldr	r4, [pc, #184]	@ (8008124 <HALL_Init+0x110>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800806a:	8b45      	ldrh	r5, [r0, #26]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 800806c:	f8a0 e0b0 	strh.w	lr, [r0, #176]	@ 0xb0
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8008070:	fba4 4202 	umull	r4, r2, r4, r2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8008074:	69c4      	ldr	r4, [r0, #28]
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8008076:	0892      	lsrs	r2, r2, #2
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8008078:	0989      	lsrs	r1, r1, #6

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 800807a:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800807e:	fbb2 f2f5 	udiv	r2, r2, r5
 8008082:	fb04 f202 	mul.w	r2, r4, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8008086:	f8c0 20b4 	str.w	r2, [r0, #180]	@ 0xb4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800808a:	040e      	lsls	r6, r1, #16
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 800808c:	ea4f 024c 	mov.w	r2, ip, lsl #1
                       / hMaxReliableElSpeedUnit);
 8008090:	fbb2 f2fe 	udiv	r2, r2, lr
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8008094:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8008098:	f890 20c6 	ldrb.w	r2, [r0, #198]	@ 0xc6
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800809c:	f8c0 60b8 	str.w	r6, [r0, #184]	@ 0xb8
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 80080a0:	8c84      	ldrh	r4, [r0, #36]	@ 0x24
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80080a2:	f8a0 10ae 	strh.w	r1, [r0, #174]	@ 0xae
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80080a6:	fb05 f202 	mul.w	r2, r5, r2
 80080aa:	fbb2 f2f4 	udiv	r2, r2, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80080ae:	699c      	ldr	r4, [r3, #24]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 80080b0:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80080b2:	f8a0 20c4 	strh.w	r2, [r0, #196]	@ 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 80080b6:	f890 2048 	ldrb.w	r2, [r0, #72]	@ 0x48
 80080ba:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80080be:	b289      	uxth	r1, r1
  pHandle->SensorIsReliable = true;
 80080c0:	2401      	movs	r4, #1
 80080c2:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 80080c6:	f880 4049 	strb.w	r4, [r0, #73]	@ 0x49
 80080ca:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 80080cc:	6299      	str	r1, [r3, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80080ce:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 80080d0:	2100      	movs	r1, #0
 80080d2:	4322      	orrs	r2, r4
 80080d4:	615a      	str	r2, [r3, #20]
 80080d6:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	f042 0204 	orr.w	r2, r2, #4
 80080de:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	f042 0202 	orr.w	r2, r2, #2
 80080e6:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	4322      	orrs	r2, r4
 80080ec:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 80080ee:	6259      	str	r1, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CCER, Channels);
 80080f0:	6a1a      	ldr	r2, [r3, #32]
 80080f2:	4322      	orrs	r2, r4
 80080f4:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	4322      	orrs	r2, r4
 80080fa:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 80080fc:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8008100:	b14a      	cbz	r2, 8008116 <HALL_Init+0x102>
 8008102:	f100 034c 	add.w	r3, r0, #76	@ 0x4c
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8008106:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 800810a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800810e:	f843 1f04 	str.w	r1, [r3, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8008112:	4293      	cmp	r3, r2
 8008114:	d1fb      	bne.n	800810e <HALL_Init+0xfa>
  }
}
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	2496      	movs	r4, #150	@ 0x96
    pHandle->HallTimeout = 150u;
 800811a:	4625      	mov	r5, r4
 800811c:	e79d      	b.n	800805a <HALL_Init+0x46>
 800811e:	bf00      	nop
 8008120:	10624dd3 	.word	0x10624dd3
 8008124:	aaaaaaab 	.word	0xaaaaaaab

08008128 <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8008128:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800812a:	68d1      	ldr	r1, [r2, #12]
 800812c:	f021 0102 	bic.w	r1, r1, #2

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 8008130:	2300      	movs	r3, #0
{
 8008132:	b4f0      	push	{r4, r5, r6, r7}

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8008134:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	@ 0xae
 8008138:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 800813a:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 800813c:	f880 304a 	strb.w	r3, [r0, #74]	@ 0x4a
  pHandle->Direction = POSITIVE;
 8008140:	f880 10a2 	strb.w	r1, [r0, #162]	@ 0xa2
  pHandle->RatioInc = false;
 8008144:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 8008148:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
  pHandle->FirstCapt = 0u;
 800814c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 8008150:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 8008152:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  pHandle->SensorIsReliable = true;
 8008156:	f880 1049 	strb.w	r1, [r0, #73]	@ 0x49
  pHandle->OVFCounter = 0u;
 800815a:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
  pHandle->_Super.hMecAccelUnitP = 0;
 800815e:	8243      	strh	r3, [r0, #18]
  pHandle->CompSpeed = 0;
 8008160:	f8a0 30ac 	strh.w	r3, [r0, #172]	@ 0xac
  WRITE_REG(TIMx->PSC, Prescaler);
 8008164:	6294      	str	r4, [r2, #40]	@ 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8008166:	6253      	str	r3, [r2, #36]	@ 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008168:	6813      	ldr	r3, [r2, #0]
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800816a:	6b86      	ldr	r6, [r0, #56]	@ 0x38
 800816c:	430b      	orrs	r3, r1
 800816e:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8008170:	68d3      	ldr	r3, [r2, #12]
 8008172:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8008174:	f043 0302 	orr.w	r3, r3, #2
 8008178:	60d3      	str	r3, [r2, #12]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 800817a:	f890 7020 	ldrb.w	r7, [r0, #32]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 800817e:	e9d0 5310 	ldrd	r5, r3, [r0, #64]	@ 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008182:	e9d0 420c 	ldrd	r4, r2, [r0, #48]	@ 0x30
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8008186:	b9ef      	cbnz	r7, 80081c4 <HALL_Clear+0x9c>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8008188:	692d      	ldr	r5, [r5, #16]
 800818a:	43ab      	bics	r3, r5
 800818c:	6933      	ldr	r3, [r6, #16]
 800818e:	6924      	ldr	r4, [r4, #16]
 8008190:	bf0c      	ite	eq
 8008192:	2501      	moveq	r5, #1
 8008194:	2500      	movne	r5, #0
 8008196:	ea31 0303 	bics.w	r3, r1, r3
 800819a:	bf0c      	ite	eq
 800819c:	2301      	moveq	r3, #1
 800819e:	2300      	movne	r3, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 80081a6:	ea32 0404 	bics.w	r4, r2, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80081aa:	bf08      	it	eq
 80081ac:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 80081b0:	1e5a      	subs	r2, r3, #1
 80081b2:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
 80081b6:	2a05      	cmp	r2, #5
 80081b8:	d858      	bhi.n	800826c <HALL_Clear+0x144>
 80081ba:	e8df f002 	tbb	[pc, r2]
 80081be:	2f25      	.short	0x2f25
 80081c0:	1b4d4339 	.word	0x1b4d4339
 80081c4:	6936      	ldr	r6, [r6, #16]
 80081c6:	692d      	ldr	r5, [r5, #16]
 80081c8:	43ab      	bics	r3, r5
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	bf0c      	ite	eq
 80081ce:	2401      	moveq	r4, #1
 80081d0:	2400      	movne	r4, #0
 80081d2:	ea32 0303 	bics.w	r3, r2, r3
 80081d6:	bf0c      	ite	eq
 80081d8:	2301      	moveq	r3, #1
 80081da:	2300      	movne	r3, #0
 80081dc:	ea31 0606 	bics.w	r6, r1, r6
 80081e0:	bf0c      	ite	eq
 80081e2:	2201      	moveq	r2, #1
 80081e4:	2200      	movne	r2, #0
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80081e6:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80081e8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80081ec:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80081f0:	4313      	orrs	r3, r2
 80081f2:	e7dd      	b.n	80081b0 <HALL_Clear+0x88>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 80081f4:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80081f6:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 80081fa:	3b3f      	subs	r3, #63	@ 0x3f
 80081fc:	b21b      	sxth	r3, r3
 80081fe:	8083      	strh	r3, [r0, #4]
}
 8008200:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8008202:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8008206:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8008208:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800820a:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800820e:	333f      	adds	r3, #63	@ 0x3f
 8008210:	b21b      	sxth	r3, r3
}
 8008212:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8008214:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8008216:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 800821a:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 800821c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800821e:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 8008222:	3b2a      	subs	r3, #42	@ 0x2a
 8008224:	b21b      	sxth	r3, r3
}
 8008226:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8008228:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800822a:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 800822e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8008230:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8008232:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 8008236:	332a      	adds	r3, #42	@ 0x2a
 8008238:	b21b      	sxth	r3, r3
}
 800823a:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800823c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800823e:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8008242:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8008244:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8008246:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 800824a:	3b15      	subs	r3, #21
 800824c:	b21b      	sxth	r3, r3
}
 800824e:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8008250:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8008252:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8008256:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8008258:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800825a:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 800825e:	3315      	adds	r3, #21
 8008260:	b21b      	sxth	r3, r3
}
 8008262:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8008264:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8008266:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 800826a:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 800826c:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800826e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 8008272:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
      break;
 8008276:	e7c3      	b.n	8008200 <HALL_Clear+0xd8>

08008278 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8008278:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 800827c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008280:	428a      	cmp	r2, r1
{
 8008282:	4603      	mov	r3, r0
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8008284:	8880      	ldrh	r0, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8008286:	d00e      	beq.n	80082a6 <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8008288:	f8b3 c0aa 	ldrh.w	ip, [r3, #170]	@ 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800828c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8008290:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8008292:	4408      	add	r0, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8008294:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8008296:	f8b3 c0ac 	ldrh.w	ip, [r3, #172]	@ 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800829a:	f8a3 10aa 	strh.w	r1, [r3, #170]	@ 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800829e:	4460      	add	r0, ip
 80082a0:	b200      	sxth	r0, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 80082a2:	8098      	strh	r0, [r3, #4]
}
 80082a4:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 80082a6:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 80082aa:	4410      	add	r0, r2
 80082ac:	b200      	sxth	r0, r0
 80082ae:	8098      	strh	r0, [r3, #4]
}
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop

080082b4 <HALL_CalcAvrgMecSpeedUnit>:
{
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 80082b8:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80082bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
{
 80082be:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 80082c0:	b180      	cbz	r0, 80082e4 <HALL_CalcAvrgMecSpeedUnit+0x30>
  return (uint32_t)(READ_REG(TIMx->PSC));
 80082c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 80082c4:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	@ 0xae
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d812      	bhi.n	80082f2 <HALL_CalcAvrgMecSpeedUnit+0x3e>
      pHandle->_Super.hElSpeedDpp = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	81e3      	strh	r3, [r4, #14]
            pHandle->CompSpeed = 0;
 80082d0:	2300      	movs	r3, #0
      *hMecSpeedUnit = 0;
 80082d2:	802b      	strh	r3, [r5, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 80082d4:	4629      	mov	r1, r5
 80082d6:	4620      	mov	r0, r4
 80082d8:	f001 f820 	bl	800931c <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80082dc:	f9b5 3000 	ldrsh.w	r3, [r5]
 80082e0:	81a3      	strh	r3, [r4, #12]
}
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80082e4:	78e3      	ldrb	r3, [r4, #3]
 80082e6:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 80082e8:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 80082ea:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 80082ec:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80082ee:	81a3      	strh	r3, [r4, #12]
}
 80082f0:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80082f2:	f9b4 20a4 	ldrsh.w	r2, [r4, #164]	@ 0xa4
 80082f6:	81e2      	strh	r2, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 80082f8:	2a00      	cmp	r2, #0
 80082fa:	d0e9      	beq.n	80082d0 <HALL_CalcAvrgMecSpeedUnit+0x1c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80082fc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8008300:	429a      	cmp	r2, r3
 8008302:	d01f      	beq.n	8008344 <HALL_CalcAvrgMecSpeedUnit+0x90>
          if (pHandle->HallMtpa == true)
 8008304:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
 8008308:	b9d3      	cbnz	r3, 8008340 <HALL_CalcAvrgMecSpeedUnit+0x8c>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 800830a:	88a3      	ldrh	r3, [r4, #4]
 800830c:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	@ 0xaa
 8008310:	1ac9      	subs	r1, r1, r3
 8008312:	b209      	sxth	r1, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 8008314:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	@ 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8008318:	f8a4 10a8 	strh.w	r1, [r4, #168]	@ 0xa8
            pHandle->CompSpeed = ( int16_t )
 800831c:	fb91 f1f3 	sdiv	r1, r1, r3
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8008320:	8b63      	ldrh	r3, [r4, #26]
 8008322:	f8a4 10ac 	strh.w	r1, [r4, #172]	@ 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8008326:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800832a:	69e1      	ldr	r1, [r4, #28]
 800832c:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 800832e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008332:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8008334:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8008338:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 800833c:	b21b      	sxth	r3, r3
 800833e:	e7c8      	b.n	80082d2 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 8008340:	2100      	movs	r1, #0
 8008342:	e7ed      	b.n	8008320 <HALL_CalcAvrgMecSpeedUnit+0x6c>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8008344:	f9b4 30b0 	ldrsh.w	r3, [r4, #176]	@ 0xb0
 8008348:	e7c3      	b.n	80082d2 <HALL_CalcAvrgMecSpeedUnit+0x1e>
 800834a:	bf00      	nop

0800834c <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 800834c:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
 8008350:	2b00      	cmp	r3, #0
 8008352:	d049      	beq.n	80083e8 <HALL_TIMx_CC_IRQHandler+0x9c>
{
 8008354:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8008356:	f890 c020 	ldrb.w	ip, [r0, #32]
    bPrevHallState = pHandle->HallState;
 800835a:	f890 20a6 	ldrb.w	r2, [r0, #166]	@ 0xa6
    PrevDirection = pHandle->Direction;
 800835e:	f990 10a2 	ldrsb.w	r1, [r0, #162]	@ 0xa2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8008362:	e9d0 740e 	ldrd	r7, r4, [r0, #56]	@ 0x38
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8008366:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	@ 0x40
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 800836a:	e9d0 e50c 	ldrd	lr, r5, [r0, #48]	@ 0x30
    if ( pHandle->SensorPlacement == DEGREES_120 )
 800836e:	f1bc 0f00 	cmp.w	ip, #0
 8008372:	d023      	beq.n	80083bc <HALL_TIMx_CC_IRQHandler+0x70>
 8008374:	693f      	ldr	r7, [r7, #16]
 8008376:	6936      	ldr	r6, [r6, #16]
 8008378:	43b3      	bics	r3, r6
 800837a:	f8de 3010 	ldr.w	r3, [lr, #16]
 800837e:	bf0c      	ite	eq
 8008380:	2601      	moveq	r6, #1
 8008382:	2600      	movne	r6, #0
 8008384:	ea35 0303 	bics.w	r3, r5, r3
 8008388:	bf0c      	ite	eq
 800838a:	2301      	moveq	r3, #1
 800838c:	2300      	movne	r3, #0
 800838e:	ea34 0707 	bics.w	r7, r4, r7
 8008392:	bf0c      	ite	eq
 8008394:	2401      	moveq	r4, #1
 8008396:	2400      	movne	r4, #0
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8008398:	00a4      	lsls	r4, r4, #2
 800839a:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800839e:	f084 0404 	eor.w	r4, r4, #4
 80083a2:	4323      	orrs	r3, r4
 80083a4:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
    switch ( pHandle->HallState )
 80083a8:	3b01      	subs	r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80083aa:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
    switch ( pHandle->HallState )
 80083ac:	2b05      	cmp	r3, #5
 80083ae:	f200 8154 	bhi.w	800865a <HALL_TIMx_CC_IRQHandler+0x30e>
 80083b2:	e8df f003 	tbb	[pc, r3]
 80083b6:	5f6e      	.short	0x5f6e
 80083b8:	1b354450 	.word	0x1b354450
 80083bc:	6936      	ldr	r6, [r6, #16]
 80083be:	43b3      	bics	r3, r6
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f8de 6010 	ldr.w	r6, [lr, #16]
 80083c6:	bf0c      	ite	eq
 80083c8:	2701      	moveq	r7, #1
 80083ca:	2700      	movne	r7, #0
 80083cc:	ea34 0303 	bics.w	r3, r4, r3
 80083d0:	bf0c      	ite	eq
 80083d2:	2301      	moveq	r3, #1
 80083d4:	2300      	movne	r3, #0
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	ea35 0606 	bics.w	r6, r5, r6
 80083dc:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 80083e0:	bf08      	it	eq
 80083e2:	f043 0301 	orreq.w	r3, r3, #1
 80083e6:	e7dd      	b.n	80083a4 <HALL_TIMx_CC_IRQHandler+0x58>
}
 80083e8:	2000      	movs	r0, #0
 80083ea:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 80083ec:	2a02      	cmp	r2, #2
 80083ee:	d07a      	beq.n	80084e6 <HALL_TIMx_CC_IRQHandler+0x19a>
        else if ( bPrevHallState == STATE_4 )
 80083f0:	2a04      	cmp	r2, #4
 80083f2:	f000 8098 	beq.w	8008526 <HALL_TIMx_CC_IRQHandler+0x1da>
    if (pHandle->Direction != PrevDirection)
 80083f6:	460a      	mov	r2, r1
    if (pHandle->HallMtpa == true)
 80083f8:	f890 30c7 	ldrb.w	r3, [r0, #199]	@ 0xc7
 80083fc:	b113      	cbz	r3, 8008404 <HALL_TIMx_CC_IRQHandler+0xb8>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 80083fe:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	@ 0xaa
 8008402:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 8008404:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 8008408:	2b00      	cmp	r3, #0
 800840a:	f040 8097 	bne.w	800853c <HALL_TIMx_CC_IRQHandler+0x1f0>
      pHandle->FirstCapt++;
 800840e:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 8008412:	3301      	adds	r3, #1
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 800841a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
}
 800841c:	2000      	movs	r0, #0
 800841e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( bPrevHallState == STATE_4 )
 8008420:	2a04      	cmp	r2, #4
 8008422:	d069      	beq.n	80084f8 <HALL_TIMx_CC_IRQHandler+0x1ac>
        else if ( bPrevHallState == STATE_1 )
 8008424:	2a01      	cmp	r2, #1
 8008426:	d1e6      	bne.n	80083f6 <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8008428:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800842a:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 800842e:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8008430:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8008432:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8008436:	b21b      	sxth	r3, r3
 8008438:	f04f 32ff 	mov.w	r2, #4294967295
 800843c:	e040      	b.n	80084c0 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_6 )
 800843e:	2a06      	cmp	r2, #6
 8008440:	d068      	beq.n	8008514 <HALL_TIMx_CC_IRQHandler+0x1c8>
        else if ( bPrevHallState == STATE_5 )
 8008442:	2a05      	cmp	r2, #5
 8008444:	d1d7      	bne.n	80083f6 <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->Direction = NEGATIVE;
 8008446:	22ff      	movs	r2, #255	@ 0xff
 8008448:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 800844c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8008450:	f04f 32ff 	mov.w	r2, #4294967295
 8008454:	e034      	b.n	80084c0 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_1 )
 8008456:	2a01      	cmp	r2, #1
 8008458:	d054      	beq.n	8008504 <HALL_TIMx_CC_IRQHandler+0x1b8>
        else if ( bPrevHallState == STATE_2 )
 800845a:	2a02      	cmp	r2, #2
 800845c:	d1cb      	bne.n	80083f6 <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800845e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8008460:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = NEGATIVE;
 8008464:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8008466:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = NEGATIVE;
 8008468:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800846c:	b21b      	sxth	r3, r3
 800846e:	f04f 32ff 	mov.w	r2, #4294967295
 8008472:	e025      	b.n	80084c0 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_3 )
 8008474:	2a03      	cmp	r2, #3
 8008476:	d02d      	beq.n	80084d4 <HALL_TIMx_CC_IRQHandler+0x188>
        else if ( bPrevHallState == STATE_6 )
 8008478:	2a06      	cmp	r2, #6
 800847a:	d1bc      	bne.n	80083f6 <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800847c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800847e:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 8008482:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8008484:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 8008486:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800848a:	b21b      	sxth	r3, r3
 800848c:	f04f 32ff 	mov.w	r2, #4294967295
 8008490:	e016      	b.n	80084c0 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_5 )
 8008492:	2a05      	cmp	r2, #5
 8008494:	d00c      	beq.n	80084b0 <HALL_TIMx_CC_IRQHandler+0x164>
        else if ( bPrevHallState == STATE_3 )
 8008496:	2a03      	cmp	r2, #3
 8008498:	d1ad      	bne.n	80083f6 <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800849a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800849c:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 80084a0:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80084a2:	3355      	adds	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 80084a4:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80084a8:	b21b      	sxth	r3, r3
 80084aa:	f04f 32ff 	mov.w	r2, #4294967295
 80084ae:	e007      	b.n	80084c0 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80084b0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80084b2:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 80084b6:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80084b8:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 80084ba:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80084be:	b21b      	sxth	r3, r3
    if (pHandle->Direction != PrevDirection)
 80084c0:	428a      	cmp	r2, r1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80084c2:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
    if (pHandle->Direction != PrevDirection)
 80084c6:	d096      	beq.n	80083f6 <HALL_TIMx_CC_IRQHandler+0xaa>
      pHandle->BufferFilled = 0 ;
 80084c8:	2300      	movs	r3, #0
 80084ca:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
      pHandle->SpeedFIFOIdx = 0;
 80084ce:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
 80084d2:	e791      	b.n	80083f8 <HALL_TIMx_CC_IRQHandler+0xac>
                                                  + S16_60_PHASE_SHIFT );
 80084d4:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80084d6:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = POSITIVE;
 80084da:	2201      	movs	r2, #1
                                                  + S16_60_PHASE_SHIFT );
 80084dc:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = POSITIVE;
 80084de:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 80084e2:	b21b      	sxth	r3, r3
 80084e4:	e7ec      	b.n	80084c0 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80084e6:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80084e8:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = POSITIVE;
 80084ec:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80084ee:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = POSITIVE;
 80084f0:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80084f4:	b21b      	sxth	r3, r3
 80084f6:	e7e3      	b.n	80084c0 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->Direction = POSITIVE;
 80084f8:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80084fa:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 80084fe:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8008502:	e7dd      	b.n	80084c0 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8008504:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 8008506:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800850a:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
 800850e:	3355      	adds	r3, #85	@ 0x55
 8008510:	b21b      	sxth	r3, r3
 8008512:	e7d5      	b.n	80084c0 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008514:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8008516:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 800851a:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800851c:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 800851e:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008522:	b21b      	sxth	r3, r3
 8008524:	e7cc      	b.n	80084c0 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008526:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8008528:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 800852c:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800852e:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8008530:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008534:	b21b      	sxth	r3, r3
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	e7c1      	b.n	80084c0 <HALL_TIMx_CC_IRQHandler+0x174>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800853c:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8008540:	f890 5026 	ldrb.w	r5, [r0, #38]	@ 0x26
 8008544:	42ab      	cmp	r3, r5
 8008546:	d205      	bcs.n	8008554 <HALL_TIMx_CC_IRQHandler+0x208>
        pHandle->BufferFilled++;
 8008548:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800854c:	3301      	adds	r3, #1
 800854e:	b2db      	uxtb	r3, r3
 8008550:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
 8008554:	6b66      	ldr	r6, [r4, #52]	@ 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8008556:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8008558:	f890 304e 	ldrb.w	r3, [r0, #78]	@ 0x4e
      if ( pHandle->OVFCounter != 0u )
 800855c:	f890 104e 	ldrb.w	r1, [r0, #78]	@ 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8008560:	041b      	lsls	r3, r3, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8008562:	b2bf      	uxth	r7, r7
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8008564:	fa13 f386 	uxtah	r3, r3, r6
      if ( pHandle->OVFCounter != 0u )
 8008568:	f001 0cff 	and.w	ip, r1, #255	@ 0xff
 800856c:	2900      	cmp	r1, #0
 800856e:	d044      	beq.n	80085fa <HALL_TIMx_CC_IRQHandler+0x2ae>
        if ( pHandle->RatioInc )
 8008570:	f890 104b 	ldrb.w	r1, [r0, #75]	@ 0x4b
 8008574:	2900      	cmp	r1, #0
 8008576:	d04a      	beq.n	800860e <HALL_TIMx_CC_IRQHandler+0x2c2>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8008578:	2100      	movs	r1, #0
 800857a:	f880 104b 	strb.w	r1, [r0, #75]	@ 0x4b
        hAux = hPrscBuf + 1u;
 800857e:	1c79      	adds	r1, r7, #1
        wCaptBuf *= hAux;
 8008580:	b289      	uxth	r1, r1
 8008582:	fb01 f303 	mul.w	r3, r1, r3
        if ( wCaptBuf < pHandle->MinPeriod )
 8008586:	f8d0 10bc 	ldr.w	r1, [r0, #188]	@ 0xbc
 800858a:	4299      	cmp	r1, r3
 800858c:	d830      	bhi.n	80085f0 <HALL_TIMx_CC_IRQHandler+0x2a4>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800858e:	f890 1098 	ldrb.w	r1, [r0, #152]	@ 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8008592:	f8d0 60b8 	ldr.w	r6, [r0, #184]	@ 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8008596:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 800859a:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 800859e:	429e      	cmp	r6, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80085a0:	f8dc 7050 	ldr.w	r7, [ip, #80]	@ 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 80085a4:	bf88      	it	hi
 80085a6:	fb02 f603 	mulhi.w	r6, r2, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80085aa:	eba4 0407 	sub.w	r4, r4, r7
          pHandle->SpeedFIFOIdx++;
 80085ae:	f101 0101 	add.w	r1, r1, #1
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80085b2:	f8c0 409c 	str.w	r4, [r0, #156]	@ 0x9c
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 80085b6:	bf94      	ite	ls
 80085b8:	4356      	mulls	r6, r2
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80085ba:	19a4      	addhi	r4, r4, r6
          pHandle->SpeedFIFOIdx++;
 80085bc:	b2c9      	uxtb	r1, r1
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80085be:	bf88      	it	hi
 80085c0:	f8c0 409c 	strhi.w	r4, [r0, #156]	@ 0x9c
 80085c4:	f8cc 6050 	str.w	r6, [ip, #80]	@ 0x50
            pHandle->SpeedFIFOIdx = 0u;
 80085c8:	428d      	cmp	r5, r1
 80085ca:	bf08      	it	eq
 80085cc:	2100      	moveq	r1, #0
 80085ce:	f880 1098 	strb.w	r1, [r0, #152]	@ 0x98
          if ( pHandle->SensorIsReliable) 
 80085d2:	f890 1049 	ldrb.w	r1, [r0, #73]	@ 0x49
 80085d6:	b331      	cbz	r1, 8008626 <HALL_TIMx_CC_IRQHandler+0x2da>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80085d8:	f890 404d 	ldrb.w	r4, [r0, #77]	@ 0x4d
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80085dc:	f8d0 10b4 	ldr.w	r1, [r0, #180]	@ 0xb4
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80085e0:	42a5      	cmp	r5, r4
 80085e2:	d931      	bls.n	8008648 <HALL_TIMx_CC_IRQHandler+0x2fc>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80085e4:	fbb1 f1f3 	udiv	r1, r1, r3
 80085e8:	fb11 f102 	smulbb	r1, r1, r2
 80085ec:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
      pHandle->OVFCounter = 0u;
 80085f0:	2300      	movs	r3, #0
 80085f2:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
}
 80085f6:	2000      	movs	r0, #0
 80085f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 80085fa:	f890 104a 	ldrb.w	r1, [r0, #74]	@ 0x4a
 80085fe:	b1a9      	cbz	r1, 800862c <HALL_TIMx_CC_IRQHandler+0x2e0>
          hAux = hPrscBuf + 2u;
 8008600:	1cb9      	adds	r1, r7, #2
          wCaptBuf *= hAux;
 8008602:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 8008604:	f880 c04a 	strb.w	ip, [r0, #74]	@ 0x4a
          wCaptBuf *= hAux;
 8008608:	fb01 f303 	mul.w	r3, r1, r3
          pHandle->RatioDec = false;
 800860c:	e7bb      	b.n	8008586 <HALL_TIMx_CC_IRQHandler+0x23a>
 800860e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8008610:	f8b0 60ae 	ldrh.w	r6, [r0, #174]	@ 0xae
 8008614:	428e      	cmp	r6, r1
 8008616:	d9b2      	bls.n	800857e <HALL_TIMx_CC_IRQHandler+0x232>
 8008618:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 800861a:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800861c:	62a1      	str	r1, [r4, #40]	@ 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 800861e:	2101      	movs	r1, #1
 8008620:	f880 104b 	strb.w	r1, [r0, #75]	@ 0x4b
 8008624:	e7ab      	b.n	800857e <HALL_TIMx_CC_IRQHandler+0x232>
            pHandle->AvrElSpeedDpp = 0;
 8008626:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800862a:	e7e1      	b.n	80085f0 <HALL_TIMx_CC_IRQHandler+0x2a4>
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 800862c:	b2b6      	uxth	r6, r6
 800862e:	f5b6 4faa 	cmp.w	r6, #21760	@ 0x5500
 8008632:	d2a4      	bcs.n	800857e <HALL_TIMx_CC_IRQHandler+0x232>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8008634:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8008636:	2900      	cmp	r1, #0
 8008638:	d0a1      	beq.n	800857e <HALL_TIMx_CC_IRQHandler+0x232>
 800863a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 800863c:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800863e:	62a1      	str	r1, [r4, #40]	@ 0x28
              pHandle->RatioDec = true;
 8008640:	2101      	movs	r1, #1
 8008642:	f880 104a 	strb.w	r1, [r0, #74]	@ 0x4a
 8008646:	e79a      	b.n	800857e <HALL_TIMx_CC_IRQHandler+0x232>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8008648:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800864c:	fb93 f3f5 	sdiv	r3, r3, r5
 8008650:	fb91 f1f3 	sdiv	r1, r1, r3
 8008654:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8008658:	e7ca      	b.n	80085f0 <HALL_TIMx_CC_IRQHandler+0x2a4>
        pHandle->SensorIsReliable = false;
 800865a:	2300      	movs	r3, #0
 800865c:	f880 3049 	strb.w	r3, [r0, #73]	@ 0x49
        break;
 8008660:	e6c9      	b.n	80083f6 <HALL_TIMx_CC_IRQHandler+0xaa>
 8008662:	bf00      	nop

08008664 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8008664:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8008668:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  if ( pHandle->SensorIsReliable )
 800866a:	b1db      	cbz	r3, 80086a4 <HALL_TIMx_UP_IRQHandler+0x40>
{
 800866c:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->OVFCounter++;
 800866e:	f890 204e 	ldrb.w	r2, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8008672:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	@ 0xc0
    pHandle->OVFCounter++;
 8008676:	3201      	adds	r2, #1
 8008678:	b2d2      	uxtb	r2, r2
 800867a:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 800867e:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	@ 0xc2
  return (uint32_t)(READ_REG(TIMx->PSC));
 8008682:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8008684:	f890 104e 	ldrb.w	r1, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8008688:	fb02 f303 	mul.w	r3, r2, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 800868c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008690:	fb04 2202 	mla	r2, r4, r2, r2
 8008694:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8008698:	b29b      	uxth	r3, r3
 800869a:	4299      	cmp	r1, r3
 800869c:	d204      	bcs.n	80086a8 <HALL_TIMx_UP_IRQHandler+0x44>
}
 800869e:	2000      	movs	r0, #0
 80086a0:	bcf0      	pop	{r4, r5, r6, r7}
 80086a2:	4770      	bx	lr
 80086a4:	2000      	movs	r0, #0
 80086a6:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80086a8:	f890 7020 	ldrb.w	r7, [r0, #32]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80086ac:	6c05      	ldr	r5, [r0, #64]	@ 0x40
      pHandle->_Super.hElSpeedDpp = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	81c3      	strh	r3, [r0, #14]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80086b2:	e9d0 620e 	ldrd	r6, r2, [r0, #56]	@ 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80086b6:	e9d0 410c 	ldrd	r4, r1, [r0, #48]	@ 0x30
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80086ba:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80086bc:	b9ef      	cbnz	r7, 80086fa <HALL_TIMx_UP_IRQHandler+0x96>
 80086be:	692d      	ldr	r5, [r5, #16]
 80086c0:	43ab      	bics	r3, r5
 80086c2:	6933      	ldr	r3, [r6, #16]
 80086c4:	6924      	ldr	r4, [r4, #16]
 80086c6:	bf0c      	ite	eq
 80086c8:	2501      	moveq	r5, #1
 80086ca:	2500      	movne	r5, #0
 80086cc:	ea32 0303 	bics.w	r3, r2, r3
 80086d0:	bf0c      	ite	eq
 80086d2:	2301      	moveq	r3, #1
 80086d4:	2300      	movne	r3, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 80086dc:	ea31 0404 	bics.w	r4, r1, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80086e0:	bf08      	it	eq
 80086e2:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 80086e6:	1e5a      	subs	r2, r3, #1
 80086e8:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
 80086ec:	2a05      	cmp	r2, #5
 80086ee:	d867      	bhi.n	80087c0 <HALL_TIMx_UP_IRQHandler+0x15c>
 80086f0:	e8df f002 	tbb	[pc, r2]
 80086f4:	4a51585f 	.word	0x4a51585f
 80086f8:	1b43      	.short	0x1b43
 80086fa:	6936      	ldr	r6, [r6, #16]
 80086fc:	692d      	ldr	r5, [r5, #16]
 80086fe:	43ab      	bics	r3, r5
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	bf0c      	ite	eq
 8008704:	2401      	moveq	r4, #1
 8008706:	2400      	movne	r4, #0
 8008708:	ea31 0303 	bics.w	r3, r1, r3
 800870c:	bf0c      	ite	eq
 800870e:	2301      	moveq	r3, #1
 8008710:	2300      	movne	r3, #0
 8008712:	ea32 0606 	bics.w	r6, r2, r6
 8008716:	bf0c      	ite	eq
 8008718:	2201      	moveq	r2, #1
 800871a:	2200      	movne	r2, #0
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800871c:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800871e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8008722:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008726:	4313      	orrs	r3, r2
 8008728:	e7dd      	b.n	80086e6 <HALL_TIMx_UP_IRQHandler+0x82>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 800872a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800872c:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8008730:	3b3f      	subs	r3, #63	@ 0x3f
 8008732:	b21b      	sxth	r3, r3
 8008734:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8008736:	f890 4026 	ldrb.w	r4, [r0, #38]	@ 0x26
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800873a:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800873e:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
      pHandle->OVFCounter = 0u;
 8008742:	2100      	movs	r1, #0
 8008744:	f880 104e 	strb.w	r1, [r0, #78]	@ 0x4e
      pHandle->FirstCapt = 0u;
 8008748:	f880 104c 	strb.w	r1, [r0, #76]	@ 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800874c:	b14c      	cbz	r4, 8008762 <HALL_TIMx_UP_IRQHandler+0xfe>
 800874e:	f100 034c 	add.w	r3, r0, #76	@ 0x4c
 8008752:	eb03 0184 	add.w	r1, r3, r4, lsl #2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8008756:	f843 2f04 	str.w	r2, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800875a:	4299      	cmp	r1, r3
 800875c:	d1fb      	bne.n	8008756 <HALL_TIMx_UP_IRQHandler+0xf2>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800875e:	fb02 f404 	mul.w	r4, r2, r4
      pHandle->BufferFilled = 0 ;
 8008762:	2300      	movs	r3, #0
 8008764:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8008768:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800876c:	f8c0 409c 	str.w	r4, [r0, #156]	@ 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8008770:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
}
 8008774:	bcf0      	pop	{r4, r5, r6, r7}
 8008776:	2000      	movs	r0, #0
 8008778:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 800877a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800877c:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8008780:	3315      	adds	r3, #21
 8008782:	b21b      	sxth	r3, r3
 8008784:	8083      	strh	r3, [r0, #4]
      break;
 8008786:	e7d6      	b.n	8008736 <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8008788:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800878a:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 800878e:	3b15      	subs	r3, #21
 8008790:	b21b      	sxth	r3, r3
 8008792:	8083      	strh	r3, [r0, #4]
      break;
 8008794:	e7cf      	b.n	8008736 <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8008796:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8008798:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 800879c:	332a      	adds	r3, #42	@ 0x2a
 800879e:	b21b      	sxth	r3, r3
 80087a0:	8083      	strh	r3, [r0, #4]
      break;
 80087a2:	e7c8      	b.n	8008736 <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80087a4:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80087a6:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 80087aa:	3b2a      	subs	r3, #42	@ 0x2a
 80087ac:	b21b      	sxth	r3, r3
 80087ae:	8083      	strh	r3, [r0, #4]
      break;
 80087b0:	e7c1      	b.n	8008736 <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80087b2:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80087b4:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80087b8:	333f      	adds	r3, #63	@ 0x3f
 80087ba:	b21b      	sxth	r3, r3
 80087bc:	8083      	strh	r3, [r0, #4]
      break;
 80087be:	e7ba      	b.n	8008736 <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->SensorIsReliable = false;
 80087c0:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80087c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 80087c6:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
      break;
 80087ca:	e7b4      	b.n	8008736 <HALL_TIMx_UP_IRQHandler+0xd2>

080087cc <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80087cc:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80087ce:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->CCER, Channels);
 80087d0:	6a13      	ldr	r3, [r2, #32]
{
 80087d2:	b510      	push	{r4, lr}
 80087d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80087d8:	4c1d      	ldr	r4, [pc, #116]	@ (8008850 <ICS_GetPhaseCurrents+0x84>)
 80087da:	6213      	str	r3, [r2, #32]
 80087dc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80087de:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 80087e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008854 <ICS_GetPhaseCurrents+0x88>)
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80087e2:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	1b1b      	subs	r3, r3, r4
  if ( aux < -INT16_MAX )
 80087e8:	4293      	cmp	r3, r2
 80087ea:	db06      	blt.n	80087fa <ICS_GetPhaseCurrents+0x2e>
  {
    pStator_Currents->a = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 80087ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087f0:	db2a      	blt.n	8008848 <ICS_GetPhaseCurrents+0x7c>
 80087f2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80087f6:	469e      	mov	lr, r3
 80087f8:	e002      	b.n	8008800 <ICS_GetPhaseCurrents+0x34>
 80087fa:	f248 0301 	movw	r3, #32769	@ 0x8001
 80087fe:	4696      	mov	lr, r2
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8008800:	4a15      	ldr	r2, [pc, #84]	@ (8008858 <ICS_GetPhaseCurrents+0x8c>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8008802:	6e04      	ldr	r4, [r0, #96]	@ 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8008804:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
    pStator_Currents->a = -INT16_MAX;
 8008806:	f8a1 e000 	strh.w	lr, [r1]
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 800880a:	0052      	lsls	r2, r2, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 800880c:	b292      	uxth	r2, r2
 800880e:	1b12      	subs	r2, r2, r4

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 8008810:	4c10      	ldr	r4, [pc, #64]	@ (8008854 <ICS_GetPhaseCurrents+0x88>)
 8008812:	42a2      	cmp	r2, r4
 8008814:	db06      	blt.n	8008824 <ICS_GetPhaseCurrents+0x58>
  {
    pStator_Currents->b = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 8008816:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800881a:	db11      	blt.n	8008840 <ICS_GetPhaseCurrents+0x74>
 800881c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008820:	4694      	mov	ip, r2
 8008822:	e002      	b.n	800882a <ICS_GetPhaseCurrents+0x5e>
 8008824:	46a4      	mov	ip, r4
 8008826:	f248 0201 	movw	r2, #32769	@ 0x8001
    pStator_Currents->b = ( int16_t )aux;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800882a:	4413      	add	r3, r2
 800882c:	425b      	negs	r3, r3
    pStator_Currents->b = -INT16_MAX;
 800882e:	f8a1 c002 	strh.w	ip, [r1, #2]
  pHandle->_Super.Ia = pStator_Currents->a;
 8008832:	f8a0 e048 	strh.w	lr, [r0, #72]	@ 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 8008836:	f8a0 c04a 	strh.w	ip, [r0, #74]	@ 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800883a:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c

}
 800883e:	bd10      	pop	{r4, pc}
    pStator_Currents->b = ( int16_t )aux;
 8008840:	fa0f fc82 	sxth.w	ip, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8008844:	b292      	uxth	r2, r2
 8008846:	e7f0      	b.n	800882a <ICS_GetPhaseCurrents+0x5e>
    pStator_Currents->a = ( int16_t )aux;
 8008848:	fa0f fe83 	sxth.w	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800884c:	b29b      	uxth	r3, r3
 800884e:	e7d7      	b.n	8008800 <ICS_GetPhaseCurrents+0x34>
 8008850:	40012000 	.word	0x40012000
 8008854:	ffff8001 	.word	0xffff8001
 8008858:	40012100 	.word	0x40012100

0800885c <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800885c:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	6a13      	ldr	r3, [r2, #32]
 8008862:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008866:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8008868:	f890 3066 	ldrb.w	r3, [r0, #102]	@ 0x66
 800886c:	2b0f      	cmp	r3, #15
 800886e:	d815      	bhi.n	800889c <ICS_HFCurrentsCalibration+0x40>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 8008870:	4a0c      	ldr	r2, [pc, #48]	@ (80088a4 <ICS_HFCurrentsCalibration+0x48>)
 8008872:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
{
 8008874:	b410      	push	{r4}
    pHandle->PhaseAOffset += ADC1->JDR1;
 8008876:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
 8008878:	4423      	add	r3, r4
 800887a:	65c3      	str	r3, [r0, #92]	@ 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 800887c:	f8d2 413c 	ldr.w	r4, [r2, #316]	@ 0x13c
    pHandle->PolarizationCounter++;
 8008880:	f890 3066 	ldrb.w	r3, [r0, #102]	@ 0x66
    pHandle->PhaseBOffset += ADC2->JDR1;
 8008884:	6e02      	ldr	r2, [r0, #96]	@ 0x60
    pHandle->PolarizationCounter++;
 8008886:	3301      	adds	r3, #1
 8008888:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 800888a:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 800888c:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8008890:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 8008892:	6602      	str	r2, [r0, #96]	@ 0x60
  pStator_Currents->b = 0;
}
 8008894:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8008898:	600b      	str	r3, [r1, #0]
}
 800889a:	4770      	bx	lr
  pStator_Currents->a = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	600b      	str	r3, [r1, #0]
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	40012000 	.word	0x40012000

080088a8 <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80088a8:	6f01      	ldr	r1, [r0, #112]	@ 0x70
 80088aa:	68cb      	ldr	r3, [r1, #12]
{
 80088ac:	b410      	push	{r4}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	f022 0201 	bic.w	r2, r2, #1
 80088b4:	601a      	str	r2, [r3, #0]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80088b6:	f891 202c 	ldrb.w	r2, [r1, #44]	@ 0x2c
 80088ba:	b132      	cbz	r2, 80088ca <ICS_Init+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80088bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80088c0:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80088c2:	68da      	ldr	r2, [r3, #12]
 80088c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80088c8:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80088ca:	695a      	ldr	r2, [r3, #20]
 80088cc:	f042 0201 	orr.w	r2, r2, #1
 80088d0:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 80088d2:	790a      	ldrb	r2, [r1, #4]
 80088d4:	2a02      	cmp	r2, #2
 80088d6:	d030      	beq.n	800893a <ICS_Init+0x92>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 80088d8:	780a      	ldrb	r2, [r1, #0]
 80088da:	2a01      	cmp	r2, #1
 80088dc:	d030      	beq.n	8008940 <ICS_Init+0x98>
  SET_BIT(TIMx->CCER, Channels);
 80088de:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 80088e0:	4922      	ldr	r1, [pc, #136]	@ (800896c <ICS_Init+0xc4>)
 80088e2:	f442 62aa 	orr.w	r2, r2, #1360	@ 0x550
 80088e6:	f042 0205 	orr.w	r2, r2, #5
 80088ea:	428b      	cmp	r3, r1
 80088ec:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80088ee:	4a20      	ldr	r2, [pc, #128]	@ (8008970 <ICS_Init+0xc8>)
 80088f0:	d02b      	beq.n	800894a <ICS_Init+0xa2>
 80088f2:	68d3      	ldr	r3, [r2, #12]
 80088f4:	f043 0302 	orr.w	r3, r3, #2
 80088f8:	f44f 11f0 	mov.w	r1, #1966080	@ 0x1e0000
 80088fc:	60d3      	str	r3, [r2, #12]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80088fe:	4b1d      	ldr	r3, [pc, #116]	@ (8008974 <ICS_Init+0xcc>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8008900:	6681      	str	r1, [r0, #104]	@ 0x68
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	491c      	ldr	r1, [pc, #112]	@ (8008978 <ICS_Init+0xd0>)
 8008906:	f042 0201 	orr.w	r2, r2, #1
 800890a:	609a      	str	r2, [r3, #8]
 800890c:	688a      	ldr	r2, [r1, #8]
 800890e:	f042 0201 	orr.w	r2, r2, #1
 8008912:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8008916:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800891a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800891e:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8008920:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8008922:	685a      	ldr	r2, [r3, #4]
}
 8008924:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->OverCurrentFlag = false;
 8008928:	2100      	movs	r1, #0
 800892a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800892e:	605a      	str	r2, [r3, #4]
 8008930:	f880 106c 	strb.w	r1, [r0, #108]	@ 0x6c
    pHandle->_Super.DTTest = 0u;
 8008934:	f8a0 104e 	strh.w	r1, [r0, #78]	@ 0x4e
}
 8008938:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800893a:	794a      	ldrb	r2, [r1, #5]
 800893c:	2a01      	cmp	r2, #1
 800893e:	d00b      	beq.n	8008958 <ICS_Init+0xb0>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8008940:	f8b0 2064 	ldrh.w	r2, [r0, #100]	@ 0x64
 8008944:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8008946:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008948:	e7c9      	b.n	80088de <ICS_Init+0x36>
 800894a:	68d3      	ldr	r3, [r2, #12]
 800894c:	f043 0301 	orr.w	r3, r3, #1
 8008950:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8008954:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8008956:	e7d2      	b.n	80088fe <ICS_Init+0x56>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8008958:	7a09      	ldrb	r1, [r1, #8]
 800895a:	2903      	cmp	r1, #3
 800895c:	d1f0      	bne.n	8008940 <ICS_Init+0x98>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800895e:	631a      	str	r2, [r3, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008960:	695a      	ldr	r2, [r3, #20]
 8008962:	f042 0201 	orr.w	r2, r2, #1
 8008966:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008968:	6319      	str	r1, [r3, #48]	@ 0x30
}
 800896a:	e7e9      	b.n	8008940 <ICS_Init+0x98>
 800896c:	40010000 	.word	0x40010000
 8008970:	e0042000 	.word	0xe0042000
 8008974:	40012000 	.word	0x40012000
 8008978:	40012100 	.word	0x40012100

0800897c <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800897c:	6f01      	ldr	r1, [r0, #112]	@ 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 800897e:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008982:	68ca      	ldr	r2, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8008984:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008988:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800898a:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800898e:	6353      	str	r3, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008990:	6393      	str	r3, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008992:	63d3      	str	r3, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008994:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008996:	6913      	ldr	r3, [r2, #16]
 8008998:	07db      	lsls	r3, r3, #31
 800899a:	d5fc      	bpl.n	8008996 <ICS_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800899c:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800899e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089a2:	6453      	str	r3, [r2, #68]	@ 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80089a4:	7c0b      	ldrb	r3, [r1, #16]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d000      	beq.n	80089ac <ICS_TurnOnLowSides+0x30>
 80089aa:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80089ac:	694a      	ldr	r2, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80089ae:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80089b0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
{
 80089b2:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80089b4:	698c      	ldr	r4, [r1, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80089b6:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80089b8:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80089ba:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80089bc:	6184      	str	r4, [r0, #24]
  }
}
 80089be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089c2:	619a      	str	r2, [r3, #24]
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop

080089c8 <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80089c8:	6f01      	ldr	r1, [r0, #112]	@ 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80089ca:	f8b0 2064 	ldrh.w	r2, [r0, #100]	@ 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80089ce:	68cb      	ldr	r3, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80089d0:	f04f 0c00 	mov.w	ip, #0
{
 80089d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80089d6:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80089da:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80089dc:	6358      	str	r0, [r3, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80089de:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 80089e0:	6398      	str	r0, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80089e2:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089e4:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80089e8:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089ea:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80089ec:	691a      	ldr	r2, [r3, #16]
 80089ee:	07d2      	lsls	r2, r2, #31
 80089f0:	d5fc      	bpl.n	80089ec <ICS_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80089f2:	f06f 0201 	mvn.w	r2, #1
 80089f6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80089f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089fe:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008a00:	7c0a      	ldrb	r2, [r1, #16]
 8008a02:	2a02      	cmp	r2, #2
 8008a04:	d007      	beq.n	8008a16 <ICS_SwitchOnPWM+0x4e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a06:	f06f 0201 	mvn.w	r2, #1
 8008a0a:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	f042 0201 	orr.w	r2, r2, #1
 8008a12:	60da      	str	r2, [r3, #12]
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 8008a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8008a16:	6a1d      	ldr	r5, [r3, #32]
 8008a18:	f240 5c55 	movw	ip, #1365	@ 0x555
 8008a1c:	ea3c 0c05 	bics.w	ip, ip, r5
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008a20:	e9d1 e405 	ldrd	lr, r4, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008a24:	e9d1 7007 	ldrd	r7, r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008a28:	e9d1 6209 	ldrd	r6, r2, [r1, #36]	@ 0x24
 8008a2c:	d007      	beq.n	8008a3e <ICS_SwitchOnPWM+0x76>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008a2e:	0424      	lsls	r4, r4, #16
 8008a30:	0400      	lsls	r0, r0, #16
 8008a32:	0412      	lsls	r2, r2, #16
 8008a34:	f8ce 4018 	str.w	r4, [lr, #24]
 8008a38:	61b8      	str	r0, [r7, #24]
 8008a3a:	61b2      	str	r2, [r6, #24]
}
 8008a3c:	e7e3      	b.n	8008a06 <ICS_SwitchOnPWM+0x3e>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008a3e:	f8ce 4018 	str.w	r4, [lr, #24]
 8008a42:	61b8      	str	r0, [r7, #24]
 8008a44:	61b2      	str	r2, [r6, #24]
}
 8008a46:	e7de      	b.n	8008a06 <ICS_SwitchOnPWM+0x3e>

08008a48 <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008a48:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8008a4a:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008a4c:	68d1      	ldr	r1, [r2, #12]
 8008a4e:	f021 0101 	bic.w	r1, r1, #1
 8008a52:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008a54:	6c51      	ldr	r1, [r2, #68]	@ 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8008a56:	f04f 0c00 	mov.w	ip, #0
 8008a5a:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8008a5e:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
 8008a62:	6451      	str	r1, [r2, #68]	@ 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008a64:	7c19      	ldrb	r1, [r3, #16]
 8008a66:	2902      	cmp	r1, #2
 8008a68:	d009      	beq.n	8008a7e <ICS_SwitchOffPWM+0x36>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a6a:	f06f 0301 	mvn.w	r3, #1
 8008a6e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a70:	6913      	ldr	r3, [r2, #16]
 8008a72:	07db      	lsls	r3, r3, #31
 8008a74:	d5fc      	bpl.n	8008a70 <ICS_SwitchOffPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008a76:	f06f 0301 	mvn.w	r3, #1
 8008a7a:	6113      	str	r3, [r2, #16]
 8008a7c:	4770      	bx	lr
{
 8008a7e:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008a80:	699c      	ldr	r4, [r3, #24]
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008a82:	695d      	ldr	r5, [r3, #20]
 8008a84:	6a18      	ldr	r0, [r3, #32]
 8008a86:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8008a88:	0424      	lsls	r4, r4, #16
 8008a8a:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008a8c:	69dd      	ldr	r5, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008a8e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008a90:	0400      	lsls	r0, r0, #16
 8008a92:	0409      	lsls	r1, r1, #16
 8008a94:	f06f 0301 	mvn.w	r3, #1
 8008a98:	61a8      	str	r0, [r5, #24]
 8008a9a:	61a1      	str	r1, [r4, #24]
 8008a9c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008a9e:	6913      	ldr	r3, [r2, #16]
 8008aa0:	07d9      	lsls	r1, r3, #31
 8008aa2:	d5fc      	bpl.n	8008a9e <ICS_SwitchOffPWM+0x56>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008aa4:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 8008aa8:	bc30      	pop	{r4, r5}
 8008aaa:	6113      	str	r3, [r2, #16]
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop

08008ab0 <ICS_CurrentReadingCalibration>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008ab0:	6f02      	ldr	r2, [r0, #112]	@ 0x70
{
 8008ab2:	b538      	push	{r3, r4, r5, lr}
  pHandle->PhaseAOffset = 0u;
 8008ab4:	2300      	movs	r3, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008ab6:	68d4      	ldr	r4, [r2, #12]
  pHandle->PolarizationCounter = 0u;
 8008ab8:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
  pHandle->PhaseAOffset = 0u;
 8008abc:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 8008ac0:	6a23      	ldr	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8008ac2:	4a21      	ldr	r2, [pc, #132]	@ (8008b48 <ICS_CurrentReadingCalibration+0x98>)
 8008ac4:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
{
 8008ac8:	4605      	mov	r5, r0
 8008aca:	f023 0305 	bic.w	r3, r3, #5
 8008ace:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8008ad0:	6042      	str	r2, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 8008ad2:	f7ff ff79 	bl	80089c8 <ICS_SwitchOnPWM>
  						  pHandle->pParams_str->RepetitionCounter,
 8008ad6:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
  waitForPolarizationEnd( TIMx,
 8008ad8:	f105 0366 	add.w	r3, r5, #102	@ 0x66
 8008adc:	7a12      	ldrb	r2, [r2, #8]
 8008ade:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 fa06 	bl	8008ef4 <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f7ff ffad 	bl	8008a48 <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 8008aee:	e9d5 2317 	ldrd	r2, r3, [r5, #92]	@ 0x5c
  pHandle->PhaseAOffset >>= 3;
 8008af2:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseBOffset >>= 3;
 8008af4:	08db      	lsrs	r3, r3, #3
 8008af6:	e9c5 2317 	strd	r2, r3, [r5, #92]	@ 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008afa:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8008afc:	f8b5 3064 	ldrh.w	r3, [r5, #100]	@ 0x64
 8008b00:	f022 0208 	bic.w	r2, r2, #8
 8008b04:	61a2      	str	r2, [r4, #24]
 8008b06:	69a2      	ldr	r2, [r4, #24]
 8008b08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b0c:	61a2      	str	r2, [r4, #24]
 8008b0e:	69e2      	ldr	r2, [r4, #28]
 8008b10:	f022 0208 	bic.w	r2, r2, #8
 8008b14:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b16:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008b18:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008b1a:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008b1c:	69a3      	ldr	r3, [r4, #24]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 8008b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8008b4c <ICS_CurrentReadingCalibration+0x9c>)
 8008b20:	f043 0308 	orr.w	r3, r3, #8
 8008b24:	61a3      	str	r3, [r4, #24]
 8008b26:	69a3      	ldr	r3, [r4, #24]
 8008b28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008b2c:	61a3      	str	r3, [r4, #24]
 8008b2e:	69e3      	ldr	r3, [r4, #28]
 8008b30:	f043 0308 	orr.w	r3, r3, #8
 8008b34:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008b36:	6a23      	ldr	r3, [r4, #32]
 8008b38:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8008b3c:	f043 0305 	orr.w	r3, r3, #5
 8008b40:	6223      	str	r3, [r4, #32]
 8008b42:	606a      	str	r2, [r5, #4]
}
 8008b44:	bd38      	pop	{r3, r4, r5, pc}
 8008b46:	bf00      	nop
 8008b48:	0800885d 	.word	0x0800885d
 8008b4c:	080087cd 	.word	0x080087cd

08008b50 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008b50:	6f03      	ldr	r3, [r0, #112]	@ 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8008b52:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008b54:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8008b56:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
{
 8008b58:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 8008b5a:	8e44      	ldrh	r4, [r0, #50]	@ 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b5c:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008b5e:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008b60:	63da      	str	r2, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8008b62:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8008b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b68:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop

08008b70 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8008b70:	4922      	ldr	r1, [pc, #136]	@ (8008bfc <ICS_TIMx_UP_IRQHandler+0x8c>)
 8008b72:	680b      	ldr	r3, [r1, #0]
{
 8008b74:	b470      	push	{r4, r5, r6}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8008b76:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008b7a:	6f04      	ldr	r4, [r0, #112]	@ 0x70

  if ( adcinjflags == CONV_STARTED )
 8008b7c:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008b7e:	68e2      	ldr	r2, [r4, #12]
  if ( adcinjflags == CONV_STARTED )
 8008b80:	d026      	beq.n	8008bd0 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 8008b82:	b94b      	cbnz	r3, 8008b98 <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8008b84:	8861      	ldrh	r1, [r4, #2]
 8008b86:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	d3fc      	bcc.n	8008b86 <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8008b8c:	491b      	ldr	r1, [pc, #108]	@ (8008bfc <ICS_TIMx_UP_IRQHandler+0x8c>)
 8008b8e:	680b      	ldr	r3, [r1, #0]
 8008b90:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 8008b94:	2b08      	cmp	r3, #8
 8008b96:	d026      	beq.n	8008be6 <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 8008b98:	4e18      	ldr	r6, [pc, #96]	@ (8008bfc <ICS_TIMx_UP_IRQHandler+0x8c>)
 8008b9a:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8008b9c:	68b3      	ldr	r3, [r6, #8]
 8008b9e:	4d18      	ldr	r5, [pc, #96]	@ (8008c00 <ICS_TIMx_UP_IRQHandler+0x90>)
 8008ba0:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
 8008ba4:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	60b3      	str	r3, [r6, #8]
 8008bac:	68ab      	ldr	r3, [r5, #8]
 8008bae:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8008bb2:	430b      	orrs	r3, r1
 8008bb4:	60ab      	str	r3, [r5, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 8008bb6:	79a3      	ldrb	r3, [r4, #6]
 8008bb8:	03db      	lsls	r3, r3, #15
 8008bba:	63b3      	str	r3, [r6, #56]	@ 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 8008bbc:	79e3      	ldrb	r3, [r4, #7]
 8008bbe:	03db      	lsls	r3, r3, #15
 8008bc0:	63ab      	str	r3, [r5, #56]	@ 0x38
  SET_BIT(TIMx->CCER, Channels);
 8008bc2:	6a13      	ldr	r3, [r2, #32]
 8008bc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 8008bc8:	3046      	adds	r0, #70	@ 0x46
 8008bca:	bc70      	pop	{r4, r5, r6}
 8008bcc:	6213      	str	r3, [r2, #32]
 8008bce:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8008bd0:	680b      	ldr	r3, [r1, #0]
 8008bd2:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8008bd6:	2b0c      	cmp	r3, #12
 8008bd8:	d0de      	beq.n	8008b98 <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8008bda:	680b      	ldr	r3, [r1, #0]
 8008bdc:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8008be0:	2b0c      	cmp	r3, #12
 8008be2:	d1f5      	bne.n	8008bd0 <ICS_TIMx_UP_IRQHandler+0x60>
 8008be4:	e7d8      	b.n	8008b98 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8008be6:	680b      	ldr	r3, [r1, #0]
 8008be8:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8008bec:	2b0c      	cmp	r3, #12
 8008bee:	d0d3      	beq.n	8008b98 <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8008bf0:	680b      	ldr	r3, [r1, #0]
 8008bf2:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8008bf6:	2b0c      	cmp	r3, #12
 8008bf8:	d1f5      	bne.n	8008be6 <ICS_TIMx_UP_IRQHandler+0x76>
 8008bfa:	e7cd      	b.n	8008b98 <ICS_TIMx_UP_IRQHandler+0x28>
 8008bfc:	40012000 	.word	0x40012000
 8008c00:	40012100 	.word	0x40012100

08008c04 <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008c04:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8008c06:	7c1a      	ldrb	r2, [r3, #16]
 8008c08:	2a02      	cmp	r2, #2
 8008c0a:	d004      	beq.n	8008c16 <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c

  return &( pHandle->_Super.Motor );
}
 8008c12:	3046      	adds	r0, #70	@ 0x46
 8008c14:	4770      	bx	lr
{
 8008c16:	b430      	push	{r4, r5}
 8008c18:	699c      	ldr	r4, [r3, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008c1a:	695d      	ldr	r5, [r3, #20]
 8008c1c:	6a19      	ldr	r1, [r3, #32]
 8008c1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c20:	0424      	lsls	r4, r4, #16
 8008c22:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008c24:	69dd      	ldr	r5, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008c26:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008c28:	0409      	lsls	r1, r1, #16
 8008c2a:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	61a9      	str	r1, [r5, #24]
}
 8008c30:	3046      	adds	r0, #70	@ 0x46
 8008c32:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 8008c34:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
}
 8008c38:	bc30      	pop	{r4, r5}
 8008c3a:	4770      	bx	lr

08008c3c <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8008c3c:	f890 306c 	ldrb.w	r3, [r0, #108]	@ 0x6c
 8008c40:	b90b      	cbnz	r3, 8008c46 <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 8008c42:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 8008c44:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8008c46:	2300      	movs	r3, #0
 8008c48:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
    retval = MC_BREAK_IN;
 8008c4c:	2040      	movs	r0, #64	@ 0x40
 8008c4e:	4770      	bx	lr

08008c50 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8008c50:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8008c52:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 8008c56:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8008c58:	2100      	movs	r1, #0
 8008c5a:	f001 f889 	bl	8009d70 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8008c64:	bd10      	pop	{r4, pc}
 8008c66:	bf00      	nop

08008c68 <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 8008c68:	b538      	push	{r3, r4, r5, lr}
 8008c6a:	4604      	mov	r4, r0
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8008c6c:	f8b0 0100 	ldrh.w	r0, [r0, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8008c70:	1c42      	adds	r2, r0, #1
 8008c72:	b292      	uxth	r2, r2
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8008c74:	2a80      	cmp	r2, #128	@ 0x80
 8008c76:	bf28      	it	cs
 8008c78:	2200      	movcs	r2, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8008c7a:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
{
 8008c7e:	460d      	mov	r5, r1
 8008c80:	f8a4 2100 	strh.w	r2, [r4, #256]	@ 0x100
 8008c84:	1ea3      	subs	r3, r4, #2
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8008c86:	f8a4 0102 	strh.w	r0, [r4, #258]	@ 0x102
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8008c8a:	f104 0efe 	add.w	lr, r4, #254	@ 0xfe
  int32_t wAux = 0;
 8008c8e:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8008c90:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8008c94:	459e      	cmp	lr, r3
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8008c96:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8008c98:	d1fa      	bne.n	8008c90 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8008c9a:	2a00      	cmp	r2, #0
 8008c9c:	bfb8      	it	lt
 8008c9e:	327f      	addlt	r2, #127	@ 0x7f
 8008ca0:	11d0      	asrs	r0, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8008ca2:	f8a4 0104 	strh.w	r0, [r4, #260]	@ 0x104
  /*User Interface with motor_param*/
  setMOTORPower(wAux);
 8008ca6:	f7f8 f8d3 	bl	8000e50 <setMOTORPower>
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8008caa:	4628      	mov	r0, r5
 8008cac:	bd38      	pop	{r3, r4, r5, pc}
 8008cae:	bf00      	nop

08008cb0 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8008cb0:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	@ 0x104
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop

08008cb8 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8008cb8:	8a03      	ldrh	r3, [r0, #16]
 8008cba:	8b42      	ldrh	r2, [r0, #26]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d306      	bcc.n	8008cce <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8008cc0:	8b82      	ldrh	r2, [r0, #28]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d901      	bls.n	8008cca <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8008cc6:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8008cc8:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8008cca:	8ac0      	ldrh	r0, [r0, #22]
 8008ccc:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8008cce:	2008      	movs	r0, #8
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop

08008cd4 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	8203      	strh	r3, [r0, #16]
}
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop

08008cdc <NTC_Init>:
{
 8008cdc:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8008cde:	7803      	ldrb	r3, [r0, #0]
{
 8008ce0:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8008ce2:	b123      	cbz	r3, 8008cee <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008ce4:	8a43      	ldrh	r3, [r0, #18]
 8008ce6:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8008ce8:	2200      	movs	r2, #0
 8008cea:	82c2      	strh	r2, [r0, #22]
}
 8008cec:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8008cee:	3004      	adds	r0, #4
 8008cf0:	f7f9 fff6 	bl	8002ce0 <RCM_RegisterRegConv>
 8008cf4:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
    NTC_Clear( pHandle );
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f7ff ffeb 	bl	8008cd4 <NTC_Clear>
}
 8008cfe:	bd10      	pop	{r4, pc}

08008d00 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8008d00:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8008d02:	7803      	ldrb	r3, [r0, #0]
{
 8008d04:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8008d06:	b113      	cbz	r3, 8008d0e <NTC_CalcAvTemp+0xe>
 8008d08:	2000      	movs	r0, #0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8008d0a:	82e0      	strh	r0, [r4, #22]
  {
    pHandle->hFaultState = MC_NO_ERROR;
  }

  return ( pHandle->hFaultState );
}
 8008d0c:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008d0e:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8008d12:	f7fa f8bf 	bl	8002e94 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8008d16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d1a:	4298      	cmp	r0, r3
 8008d1c:	d007      	beq.n	8008d2e <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8008d1e:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8008d20:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8008d22:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8008d24:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8008d28:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8008d2c:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f7ff ffc2 	bl	8008cb8 <NTC_SetFaultState>
 8008d34:	82e0      	strh	r0, [r4, #22]
}
 8008d36:	bd10      	pop	{r4, pc}

08008d38 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8008d38:	7803      	ldrb	r3, [r0, #0]
 8008d3a:	b983      	cbnz	r3, 8008d5e <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8008d3c:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8008d3e:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8008d40:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8008d44:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8008d46:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8008d48:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bfbc      	itt	lt
 8008d50:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8008d54:	33ff      	addlt	r3, #255	@ 0xff
 8008d56:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8008d5a:	b200      	sxth	r0, r0
 8008d5c:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8008d5e:	8a80      	ldrh	r0, [r0, #20]
}
 8008d60:	b200      	sxth	r0, r0
 8008d62:	4770      	bx	lr

08008d64 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8008d64:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8008d66:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8008d68:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8008d6a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8008d6c:	8442      	strh	r2, [r0, #34]	@ 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8008d6e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8008d70:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8008d72:	4770      	bx	lr

08008d74 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8008d74:	8081      	strh	r1, [r0, #4]
}
 8008d76:	4770      	bx	lr

08008d78 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8008d78:	80c1      	strh	r1, [r0, #6]
}
 8008d7a:	4770      	bx	lr

08008d7c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8008d7c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop

08008d84 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8008d84:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop

08008d8c <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8008d8c:	6081      	str	r1, [r0, #8]

  return;
}
 8008d8e:	4770      	bx	lr

08008d90 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8008d90:	8b00      	ldrh	r0, [r0, #24]
 8008d92:	4770      	bx	lr

08008d94 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8008d94:	8b40      	ldrh	r0, [r0, #26]
 8008d96:	4770      	bx	lr

08008d98 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8008d98:	8441      	strh	r1, [r0, #34]	@ 0x22
}
 8008d9a:	4770      	bx	lr

08008d9c <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8008d9c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop

08008da4 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008da4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8008da8:	4603      	mov	r3, r0
 8008daa:	b530      	push	{r4, r5, lr}

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8008dac:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8008db0:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8008db4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008db8:	fb01 f202 	mul.w	r2, r1, r2
  if ( pHandle->hKiGain == 0 )
 8008dbc:	b17c      	cbz	r4, 8008dde <PI_Controller+0x3a>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8008dbe:	fb04 f101 	mul.w	r1, r4, r1
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8008dc2:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
    if ( wIntegral_sum_temp < 0 )
 8008dc6:	eb15 0e01 	adds.w	lr, r5, r1
 8008dca:	d41d      	bmi.n	8008e08 <PI_Controller+0x64>
          wIntegral_sum_temp = -INT32_MAX;
 8008dcc:	420d      	tst	r5, r1
 8008dce:	4914      	ldr	r1, [pc, #80]	@ (8008e20 <PI_Controller+0x7c>)
 8008dd0:	bf48      	it	mi
 8008dd2:	468e      	movmi	lr, r1
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8008dd4:	45a6      	cmp	lr, r4
 8008dd6:	dc02      	bgt.n	8008dde <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8008dd8:	691c      	ldr	r4, [r3, #16]
 8008dda:	4574      	cmp	r4, lr
 8008ddc:	dd1d      	ble.n	8008e1a <PI_Controller+0x76>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8008dde:	8b99      	ldrh	r1, [r3, #28]
 8008de0:	410a      	asrs	r2, r1
 8008de2:	8bd9      	ldrh	r1, [r3, #30]
 8008de4:	fa44 f101 	asr.w	r1, r4, r1
 8008de8:	440a      	add	r2, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8008dea:	4290      	cmp	r0, r2
 8008dec:	da03      	bge.n	8008df6 <PI_Controller+0x52>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8008dee:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8008df0:	4414      	add	r4, r2
 8008df2:	609c      	str	r4, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8008df4:	bd30      	pop	{r4, r5, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8008df6:	4594      	cmp	ip, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
 8008df8:	bfc5      	ittet	gt
 8008dfa:	ebac 0202 	subgt.w	r2, ip, r2
  pHandle->wIntegralTerm += wDischarge;
 8008dfe:	18a4      	addgt	r4, r4, r2
  return ( ( int16_t )( wOutput_32 ) );
 8008e00:	b210      	sxthle	r0, r2
    wOutput_32 = hLowerOutputLimit;
 8008e02:	4660      	movgt	r0, ip
  pHandle->wIntegralTerm += wDischarge;
 8008e04:	609c      	str	r4, [r3, #8]
}
 8008e06:	bd30      	pop	{r4, r5, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8008e08:	2d00      	cmp	r5, #0
 8008e0a:	dde3      	ble.n	8008dd4 <PI_Controller+0x30>
        if ( wIntegral_Term > 0 )
 8008e0c:	2900      	cmp	r1, #0
 8008e0e:	dde1      	ble.n	8008dd4 <PI_Controller+0x30>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8008e10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e14:	428c      	cmp	r4, r1
 8008e16:	d1e2      	bne.n	8008dde <PI_Controller+0x3a>
 8008e18:	46a6      	mov	lr, r4
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 8008e1a:	4674      	mov	r4, lr
 8008e1c:	e7df      	b.n	8008dde <PI_Controller+0x3a>
 8008e1e:	bf00      	nop
 8008e20:	80000001 	.word	0x80000001

08008e24 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8008e24:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
{
 8008e28:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8008e2a:	89d1      	ldrh	r1, [r2, #14]
 8008e2c:	8b14      	ldrh	r4, [r2, #24]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8008e2e:	8993      	ldrh	r3, [r2, #12]
{
 8008e30:	4605      	mov	r5, r0
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8008e32:	8ad0      	ldrh	r0, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008e34:	f8d5 6108 	ldr.w	r6, [r5, #264]	@ 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8008e38:	fb11 f204 	smulbb	r2, r1, r4
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8008e3c:	fb13 2400 	smlabb	r4, r3, r0, r2
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008e40:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
 8008e44:	f7ff f884 	bl	8007f50 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8008e48:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8008e4a:	490f      	ldr	r1, [pc, #60]	@ (8008e88 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008e4c:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8008e50:	bfb8      	it	lt
 8008e52:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8008e56:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 8008e5a:	bfb8      	it	lt
 8008e5c:	33ff      	addlt	r3, #255	@ 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8008e5e:	fb81 1000 	smull	r1, r0, r1, r0
 8008e62:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
  wAux /= 65536;
 8008e66:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8008e68:	fb02 f303 	mul.w	r3, r2, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8008e6c:	4907      	ldr	r1, [pc, #28]	@ (8008e8c <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8008e6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e72:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8008e74:	fb81 2103 	smull	r2, r1, r1, r3
 8008e78:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8008e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8008e84:	f7ff bef0 	b.w	8008c68 <MPM_CalcElMotorPower>
 8008e88:	1b4e81b5 	.word	0x1b4e81b5
 8008e8c:	66666667 	.word	0x66666667

08008e90 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8008e90:	4b17      	ldr	r3, [pc, #92]	@ (8008ef0 <startTimers+0x60>)
 8008e92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8008e94:	07d2      	lsls	r2, r2, #31
 8008e96:	d415      	bmi.n	8008ec4 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8008e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e9a:	f042 0201 	orr.w	r2, r2, #1
 8008e9e:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8008ea0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8008ea2:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008ea4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008ea8:	f002 0201 	and.w	r2, r2, #1
 8008eac:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8008eae:	9a01      	ldr	r2, [sp, #4]
 8008eb0:	694a      	ldr	r2, [r1, #20]
 8008eb2:	f042 0201 	orr.w	r2, r2, #1
 8008eb6:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8008eb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008eba:	f022 0201 	bic.w	r2, r2, #1
 8008ebe:	641a      	str	r2, [r3, #64]	@ 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8008ec0:	b002      	add	sp, #8
 8008ec2:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8008ec4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ec8:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008eca:	6859      	ldr	r1, [r3, #4]
 8008ecc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8008ed0:	f041 0120 	orr.w	r1, r1, #32
 8008ed4:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008ed6:	6959      	ldr	r1, [r3, #20]
 8008ed8:	f041 0101 	orr.w	r1, r1, #1
 8008edc:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008ede:	6859      	ldr	r1, [r3, #4]
 8008ee0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8008ee4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	605a      	str	r2, [r3, #4]
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	40023800 	.word	0x40023800

08008ef4 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8008ef4:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8008ef6:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8008ef8:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8008efc:	f102 0201 	add.w	r2, r2, #1
 8008f00:	d11b      	bne.n	8008f3a <waitForPolarizationEnd+0x46>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8008f02:	6804      	ldr	r4, [r0, #0]
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8008f04:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008f06:	f06f 0602 	mvn.w	r6, #2
 8008f0a:	0155      	lsls	r5, r2, #5
 8008f0c:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8008f0e:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8008f10:	f893 c000 	ldrb.w	ip, [r3]
 8008f14:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8008f18:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8008f1c:	d80c      	bhi.n	8008f38 <waitForPolarizationEnd+0x44>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8008f1e:	6904      	ldr	r4, [r0, #16]
 8008f20:	07a4      	lsls	r4, r4, #30
 8008f22:	d5f5      	bpl.n	8008f10 <waitForPolarizationEnd+0x1c>
      hCalibrationPeriodCounter++;
 8008f24:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8008f28:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008f2a:	6106      	str	r6, [r0, #16]
 8008f2c:	d8f0      	bhi.n	8008f10 <waitForPolarizationEnd+0x1c>
      {
        if (*cnt < NB_CONVERSIONS)
 8008f2e:	781c      	ldrb	r4, [r3, #0]
 8008f30:	2c0f      	cmp	r4, #15
 8008f32:	d8ed      	bhi.n	8008f10 <waitForPolarizationEnd+0x1c>
        {
          *SWerror = 1u;
 8008f34:	2301      	movs	r3, #1
 8008f36:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8008f38:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8008f3a:	2c60      	cmp	r4, #96	@ 0x60
 8008f3c:	d0e3      	beq.n	8008f06 <waitForPolarizationEnd+0x12>
 8008f3e:	e7e1      	b.n	8008f04 <waitForPolarizationEnd+0x10>

08008f40 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8008f40:	6843      	ldr	r3, [r0, #4]
 8008f42:	4718      	bx	r3

08008f44 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8008f44:	b530      	push	{r4, r5, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008f46:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8008f4a:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008f4c:	ea4f 4c21 	mov.w	ip, r1, asr #16
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8008f50:	b20b      	sxth	r3, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008f52:	fb04 fc0c 	mul.w	ip, r4, ip
 8008f56:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8008f5a:	fb02 f303 	mul.w	r3, r2, r3

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8008f5e:	eb03 024c 	add.w	r2, r3, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8008f62:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8008f66:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8008f6a:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8008f6e:	1c55      	adds	r5, r2, #1
{
 8008f70:	b083      	sub	sp, #12
  {
    if ( wZ < 0 )
    {
      pHandle->Sector = SECTOR_5;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8008f72:	ea4f 0494 	mov.w	r4, r4, lsr #2
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008f76:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8008f7a:	ea4f 0161 	mov.w	r1, r1, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8008f7e:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  if ( wY < 0 )
 8008f82:	db7a      	blt.n	800907a <PWMC_SetPhaseVoltage+0x136>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8008f84:	1c5d      	adds	r5, r3, #1
 8008f86:	db57      	blt.n	8009038 <PWMC_SetPhaseVoltage+0xf4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8008f88:	ebb1 010e 	subs.w	r1, r1, lr
 8008f8c:	bf44      	itt	mi
 8008f8e:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8008f92:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	bfbc      	itt	lt
 8008f9a:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8008f9e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8008fa2:	2a00      	cmp	r2, #0
 8008fa4:	bfb8      	it	lt
 8008fa6:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8008faa:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8008fae:	bfb8      	it	lt
 8008fb0:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8008fb4:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8008fb8:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhB;
 8008fbc:	fa1f fe83 	uxth.w	lr, r3
      pHandle->midDuty = wTimePhA;
 8008fc0:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhC;
 8008fc4:	b294      	uxth	r4, r2
 8008fc6:	2501      	movs	r5, #1
        pHandle->highDuty = wTimePhA;
 8008fc8:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8008fcc:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
        pHandle->Sector = SECTOR_4;
 8008fd0:	f880 503a 	strb.w	r5, [r0, #58]	@ 0x3a
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8008fd4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8008fd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8008fdc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8008fe0:	b289      	uxth	r1, r1
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	b292      	uxth	r2, r2
  if ( pHandle->DTTest == 1u )
 8008fe6:	2c01      	cmp	r4, #1
        pHandle->lowDuty = wTimePhC;
 8008fe8:	f8a0 e03c 	strh.w	lr, [r0, #60]	@ 0x3c
        pHandle->midDuty = wTimePhB;
 8008fec:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8008ff0:	8641      	strh	r1, [r0, #50]	@ 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8008ff2:	8683      	strh	r3, [r0, #52]	@ 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8008ff4:	86c2      	strh	r2, [r0, #54]	@ 0x36
  if ( pHandle->DTTest == 1u )
 8008ff6:	d11a      	bne.n	800902e <PWMC_SetPhaseVoltage+0xea>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8008ff8:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	@ 0x48
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8008ffc:	f8b0 4054 	ldrh.w	r4, [r0, #84]	@ 0x54
    if ( pHandle->Ia > 0 )
 8009000:	2d00      	cmp	r5, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8009002:	bfcc      	ite	gt
 8009004:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8009006:	1b09      	suble	r1, r1, r4
 8009008:	b289      	uxth	r1, r1
 800900a:	8641      	strh	r1, [r0, #50]	@ 0x32
    }

    if ( pHandle->Ib > 0 )
 800900c:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	@ 0x4a
 8009010:	2900      	cmp	r1, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8009012:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	@ 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8009016:	bfcc      	ite	gt
 8009018:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800901a:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 800901c:	2900      	cmp	r1, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800901e:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8009020:	bfcc      	ite	gt
 8009022:	18a4      	addgt	r4, r4, r2
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8009024:	1b12      	suble	r2, r2, r4
 8009026:	8683      	strh	r3, [r0, #52]	@ 0x34
      pHandle->CntPhC += pHandle->DTCompCnt;
 8009028:	bfcc      	ite	gt
 800902a:	86c4      	strhgt	r4, [r0, #54]	@ 0x36
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800902c:	86c2      	strhle	r2, [r0, #54]	@ 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800902e:	6983      	ldr	r3, [r0, #24]
}
 8009030:	b003      	add	sp, #12
 8009032:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8009036:	4718      	bx	r3
      if ( wX <= 0 )
 8009038:	f1bc 0f00 	cmp.w	ip, #0
 800903c:	dd3d      	ble.n	80090ba <PWMC_SetPhaseVoltage+0x176>
        wTimePhB = wTimePhA + wZ / 131072;
 800903e:	2b00      	cmp	r3, #0
 8009040:	bfb8      	it	lt
 8009042:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8009046:	ebac 0e0e 	sub.w	lr, ip, lr
        wTimePhB = wTimePhA + wZ / 131072;
 800904a:	bfb8      	it	lt
 800904c:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8009050:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8009054:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8009058:	bfb8      	it	lt
 800905a:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800905e:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8009062:	bfb8      	it	lt
 8009064:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8009068:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhA;
 800906c:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhB;
 8009070:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhC;
 8009074:	b294      	uxth	r4, r2
 8009076:	2500      	movs	r5, #0
 8009078:	e7a6      	b.n	8008fc8 <PWMC_SetPhaseVoltage+0x84>
    if ( wZ < 0 )
 800907a:	1c5d      	adds	r5, r3, #1
 800907c:	db5d      	blt.n	800913a <PWMC_SetPhaseVoltage+0x1f6>
      if ( wX <= 0 )
 800907e:	f1bc 0f00 	cmp.w	ip, #0
 8009082:	dd38      	ble.n	80090f6 <PWMC_SetPhaseVoltage+0x1b2>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8009084:	ebb1 010c 	subs.w	r1, r1, ip
 8009088:	bf44      	itt	mi
 800908a:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 800908e:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8009092:	2a00      	cmp	r2, #0
 8009094:	bfb8      	it	lt
 8009096:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800909a:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 800909e:	bfb8      	it	lt
 80090a0:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
 80090a4:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80090a8:	eb02 436c 	add.w	r3, r2, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 80090ac:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = wTimePhC;
 80090b0:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhA;
 80090b4:	b28c      	uxth	r4, r1
 80090b6:	2502      	movs	r5, #2
 80090b8:	e786      	b.n	8008fc8 <PWMC_SetPhaseVoltage+0x84>
        wTimePhC = wTimePhA - wY / 131072;
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	bfb8      	it	lt
 80090be:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80090c2:	eba1 010c 	sub.w	r1, r1, ip
        wTimePhC = wTimePhA - wY / 131072;
 80090c6:	bfb8      	it	lt
 80090c8:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhC + wX / 131072;
 80090cc:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80090d0:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80090d4:	bfb8      	it	lt
 80090d6:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 80090da:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80090de:	bfb8      	it	lt
 80090e0:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 80090e4:	eb02 4363 	add.w	r3, r2, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 80090e8:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhC;
 80090ec:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhB;
 80090f0:	b29c      	uxth	r4, r3
 80090f2:	2505      	movs	r5, #5
 80090f4:	e768      	b.n	8008fc8 <PWMC_SetPhaseVoltage+0x84>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80090f6:	ebbc 0e0e 	subs.w	lr, ip, lr
 80090fa:	bf44      	itt	mi
 80090fc:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8009100:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8009104:	2b00      	cmp	r3, #0
 8009106:	bfbc      	itt	lt
 8009108:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 800910c:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8009110:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8009114:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8009118:	bfb8      	it	lt
 800911a:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800911e:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8009122:	bfb8      	it	lt
 8009124:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8009128:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhC;
 800912c:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = wTimePhB;
 8009130:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhA;
 8009134:	b28c      	uxth	r4, r1
 8009136:	2503      	movs	r5, #3
 8009138:	e746      	b.n	8008fc8 <PWMC_SetPhaseVoltage+0x84>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800913a:	ebb1 010e 	subs.w	r1, r1, lr
 800913e:	bf44      	itt	mi
 8009140:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8009144:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8009148:	2b00      	cmp	r3, #0
 800914a:	bfbc      	itt	lt
 800914c:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8009150:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8009154:	2a00      	cmp	r2, #0
 8009156:	bfb8      	it	lt
 8009158:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800915c:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8009160:	bfb8      	it	lt
 8009162:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8009166:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800916a:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhC;
 800916e:	fa1f fe82 	uxth.w	lr, r2
      pHandle->midDuty = wTimePhA;
 8009172:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhB;
 8009176:	b29c      	uxth	r4, r3
 8009178:	2504      	movs	r5, #4
 800917a:	e725      	b.n	8008fc8 <PWMC_SetPhaseVoltage+0x84>

0800917c <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 800917c:	6883      	ldr	r3, [r0, #8]
 800917e:	4718      	bx	r3

08009180 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8009180:	b510      	push	{r4, lr}
 8009182:	4604      	mov	r4, r0
  bool retVal = false;
  if ( action == CRC_START )
 8009184:	b179      	cbz	r1, 80091a6 <PWMC_CurrentReadingCalibr+0x26>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8009186:	2901      	cmp	r1, #1
 8009188:	d001      	beq.n	800918e <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 800918a:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 800918c:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800918e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8009192:	b19b      	cbz	r3, 80091bc <PWMC_CurrentReadingCalibr+0x3c>
      pHandle->OffCalibrWaitTimeCounter--;
 8009194:	3b01      	subs	r3, #1
 8009196:	b29b      	uxth	r3, r3
 8009198:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800919c:	2b00      	cmp	r3, #0
 800919e:	d1f4      	bne.n	800918a <PWMC_CurrentReadingCalibr+0xa>
        pHandle->pFctCurrReadingCalib( pHandle );
 80091a0:	6903      	ldr	r3, [r0, #16]
 80091a2:	4798      	blx	r3
        retVal = true;
 80091a4:	e00a      	b.n	80091bc <PWMC_CurrentReadingCalibr+0x3c>
    PWMC_SwitchOffPWM( pHandle );
 80091a6:	f7ff ffe9 	bl	800917c <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 80091aa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80091ae:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e9      	bne.n	800918a <PWMC_CurrentReadingCalibr+0xa>
      pHandle->pFctCurrReadingCalib( pHandle );
 80091b6:	6923      	ldr	r3, [r4, #16]
 80091b8:	4620      	mov	r0, r4
 80091ba:	4798      	blx	r3
      retVal = true;
 80091bc:	2001      	movs	r0, #1
}
 80091be:	bd10      	pop	{r4, pc}

080091c0 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 80091c0:	69c3      	ldr	r3, [r0, #28]
 80091c2:	4718      	bx	r3

080091c4 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80091c4:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 80091c8:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80091ca:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80091cc:	4494      	add	ip, r2
 80091ce:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 80091d2:	b430      	push	{r4, r5}
 80091d4:	2500      	movs	r5, #0
 80091d6:	f36c 050f 	bfi	r5, ip, #0, #16
 80091da:	f36c 451f 	bfi	r5, ip, #16, #16
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80091de:	b14b      	cbz	r3, 80091f4 <RVBS_Clear+0x30>
  {
    pHandle->aBuffer[index] = aux;
 80091e0:	6a04      	ldr	r4, [r0, #32]
 80091e2:	2300      	movs	r3, #0
 80091e4:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80091e6:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 80091e8:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80091ec:	8b01      	ldrh	r1, [r0, #24]
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	4291      	cmp	r1, r2
 80091f2:	d8f7      	bhi.n	80091e4 <RVBS_Clear+0x20>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 80091f4:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 80091f6:	6045      	str	r5, [r0, #4]
  pHandle->index = 0;
 80091f8:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
}
 80091fc:	bc30      	pop	{r4, r5}
 80091fe:	4770      	bx	lr

08009200 <RVBS_Init>:
{
 8009200:	b510      	push	{r4, lr}
 8009202:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8009204:	300c      	adds	r0, #12
 8009206:	f7f9 fd6b 	bl	8002ce0 <RCM_RegisterRegConv>
 800920a:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
  RVBS_Clear( pHandle );
 800920e:	4620      	mov	r0, r4
 8009210:	f7ff ffd8 	bl	80091c4 <RVBS_Clear>
}
 8009214:	bd10      	pop	{r4, pc}
 8009216:	bf00      	nop

08009218 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8009218:	88c3      	ldrh	r3, [r0, #6]
 800921a:	8b42      	ldrh	r2, [r0, #26]
 800921c:	429a      	cmp	r2, r3
 800921e:	d306      	bcc.n	800922e <RVBS_CheckFaultState+0x16>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8009220:	8b80      	ldrh	r0, [r0, #28]
 8009222:	4298      	cmp	r0, r3
 8009224:	bf94      	ite	ls
 8009226:	2000      	movls	r0, #0
 8009228:	2001      	movhi	r0, #1
 800922a:	0080      	lsls	r0, r0, #2
 800922c:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 800922e:	2002      	movs	r0, #2
  else
  {
    fault = MC_NO_ERROR;
  }
  return fault;
}
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop

08009234 <RVBS_CalcAvVbus>:
{
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8009238:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 800923c:	f7f9 fe2a 	bl	8002e94 <RCM_ExecRegularConv>
  rawVoltage = hAux;
 8009240:	4a15      	ldr	r2, [pc, #84]	@ (8009298 <RVBS_CalcAvVbus+0x64>)
  if ( hAux != 0xFFFF )
 8009242:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009246:	4298      	cmp	r0, r3
  rawVoltage = hAux;
 8009248:	8010      	strh	r0, [r2, #0]
  if ( hAux != 0xFFFF )
 800924a:	d01e      	beq.n	800928a <RVBS_CalcAvVbus+0x56>
    pHandle->aBuffer[pHandle->index] = hAux;
 800924c:	6a26      	ldr	r6, [r4, #32]
 800924e:	f894 c025 	ldrb.w	ip, [r4, #37]	@ 0x25
 8009252:	f826 001c 	strh.w	r0, [r6, ip, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8009256:	8b25      	ldrh	r5, [r4, #24]
 8009258:	b1e5      	cbz	r5, 8009294 <RVBS_CalcAvVbus+0x60>
 800925a:	2300      	movs	r3, #0
    wtemp = 0;
 800925c:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 800925e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8009262:	3301      	adds	r3, #1
 8009264:	b2db      	uxtb	r3, r3
 8009266:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 8009268:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800926a:	d3f8      	bcc.n	800925e <RVBS_CalcAvVbus+0x2a>
    wtemp /= pHandle->LowPassFilterBW;
 800926c:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8009270:	1e6b      	subs	r3, r5, #1
 8009272:	459c      	cmp	ip, r3
      pHandle->index++;
 8009274:	bfb4      	ite	lt
 8009276:	f10c 0c01 	addlt.w	ip, ip, #1
      pHandle->index = 0;
 800927a:	2300      	movge	r3, #0
    pHandle->_Super.LatestConv = hAux;
 800927c:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800927e:	80e2      	strh	r2, [r4, #6]
      pHandle->index++;
 8009280:	bfb4      	ite	lt
 8009282:	f884 c025 	strblt.w	ip, [r4, #37]	@ 0x25
      pHandle->index = 0;
 8009286:	f884 3025 	strbge.w	r3, [r4, #37]	@ 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800928a:	4620      	mov	r0, r4
 800928c:	f7ff ffc4 	bl	8009218 <RVBS_CheckFaultState>
 8009290:	8120      	strh	r0, [r4, #8]
}
 8009292:	bd70      	pop	{r4, r5, r6, pc}
    wtemp /= pHandle->LowPassFilterBW;
 8009294:	deff      	udf	#255	@ 0xff
 8009296:	bf00      	nop
 8009298:	2000533c 	.word	0x2000533c

0800929c <REMNG_Init>:
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
  pHandle->TargetFinal = 0;
 800929c:	2300      	movs	r3, #0
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800929e:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 80092a0:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 80092a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 80092a8:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 80092aa:	4770      	bx	lr

080092ac <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 80092ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80092b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80092b4:	8182      	strh	r2, [r0, #12]
}
 80092b6:	4770      	bx	lr

080092b8 <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80092b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80092bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80092c0:	81c2      	strh	r2, [r0, #14]
}
 80092c2:	4770      	bx	lr

080092c4 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 80092c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80092c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80092cc:	8202      	strh	r2, [r0, #16]
}
 80092ce:	4770      	bx	lr

080092d0 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 80092d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80092d4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80092d8:	8980      	ldrh	r0, [r0, #12]
 80092da:	4770      	bx	lr

080092dc <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 80092dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80092e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80092e4:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop

080092ec <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 80092ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80092f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80092f4:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop

080092fc <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 80092fc:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop

08009304 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8009304:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop

0800930c <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 800930c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop

08009314 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8009314:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop

0800931c <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800931c:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8009320:	4603      	mov	r3, r0
 8009322:	b510      	push	{r4, lr}
  {
    hAux = -( *pMecSpeedUnit );
 8009324:	fa1f f18c 	uxth.w	r1, ip
  if ( *pMecSpeedUnit < 0 )
 8009328:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( *pMecSpeedUnit );
 800932c:	bfb8      	it	lt
 800932e:	4249      	neglt	r1, r1
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8009330:	f8b3 e016 	ldrh.w	lr, [r3, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8009334:	78c0      	ldrb	r0, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8009336:	781a      	ldrb	r2, [r3, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8009338:	8a9c      	ldrh	r4, [r3, #20]
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800933a:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
    hAux = -( *pMecSpeedUnit );
 800933e:	bfb8      	it	lt
 8009340:	b289      	uxthlt	r1, r1
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8009342:	458e      	cmp	lr, r1
 8009344:	d816      	bhi.n	8009374 <SPD_IsMecSpeedReliable+0x58>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 8009346:	fa1f fe8c 	uxth.w	lr, ip
  if ( pHandle->hMecAccelUnitP < 0 )
 800934a:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( pHandle->hMecAccelUnitP );
 800934e:	bfb8      	it	lt
 8009350:	f1ce 0e00 	rsblt	lr, lr, #0
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8009354:	f8b3 c018 	ldrh.w	ip, [r3, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 8009358:	bfb8      	it	lt
 800935a:	fa1f fe8e 	uxthlt.w	lr, lr
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800935e:	45f4      	cmp	ip, lr
 8009360:	d308      	bcc.n	8009374 <SPD_IsMecSpeedReliable+0x58>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8009362:	428c      	cmp	r4, r1
 8009364:	d306      	bcc.n	8009374 <SPD_IsMecSpeedReliable+0x58>
      bSpeedErrorNumber++;
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8009366:	4290      	cmp	r0, r2
 8009368:	d809      	bhi.n	800937e <SPD_IsMecSpeedReliable+0x62>
    {
      bSpeedErrorNumber = 0u;
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 800936a:	1a10      	subs	r0, r2, r0
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800936c:	701a      	strb	r2, [r3, #0]
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 800936e:	bf18      	it	ne
 8009370:	2001      	movne	r0, #1

  return ( SpeedSensorReliability );
}
 8009372:	bd10      	pop	{r4, pc}
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8009374:	4290      	cmp	r0, r2
 8009376:	d9f8      	bls.n	800936a <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber++;
 8009378:	3201      	adds	r2, #1
 800937a:	b2d2      	uxtb	r2, r2
 800937c:	e7f5      	b.n	800936a <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber = 0u;
 800937e:	2200      	movs	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009380:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8009382:	2001      	movs	r0, #1
}
 8009384:	bd10      	pop	{r4, pc}
 8009386:	bf00      	nop

08009388 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8009388:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800938c:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
  wAux *= INT16_MAX;
 8009390:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8009394:	fb93 f0f2 	sdiv	r0, r3, r2
  return ( int16_t )wAux;
}
 8009398:	b200      	sxth	r0, r0
 800939a:	4770      	bx	lr

0800939c <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800939c:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
  pHandle->PISpeed = pPI;
 80093a0:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80093a2:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
  pHandle->SPD = SPD_Handle;
 80093a6:	6142      	str	r2, [r0, #20]
{
 80093a8:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 80093aa:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 80093ae:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 80093b0:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80093b2:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80093b6:	0409      	lsls	r1, r1, #16
 80093b8:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 80093bc:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 80093be:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 80093c2:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80093c4:	6183      	str	r3, [r0, #24]
}
 80093c6:	4770      	bx	lr

080093c8 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 80093c8:	6940      	ldr	r0, [r0, #20]
 80093ca:	4770      	bx	lr

080093cc <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 80093cc:	7803      	ldrb	r3, [r0, #0]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d000      	beq.n	80093d4 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 80093d2:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 80093d4:	6900      	ldr	r0, [r0, #16]
 80093d6:	2100      	movs	r1, #0
 80093d8:	f7ff bcd8 	b.w	8008d8c <PID_SetIntegralTerm>

080093dc <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 80093dc:	6840      	ldr	r0, [r0, #4]
 80093de:	2800      	cmp	r0, #0
 80093e0:	bfbc      	itt	lt
 80093e2:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 80093e6:	30ff      	addlt	r0, #255	@ 0xff
}
 80093e8:	1400      	asrs	r0, r0, #16
 80093ea:	4770      	bx	lr

080093ec <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 80093ec:	6880      	ldr	r0, [r0, #8]
 80093ee:	2800      	cmp	r0, #0
 80093f0:	bfbc      	itt	lt
 80093f2:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 80093f6:	30ff      	addlt	r0, #255	@ 0xff
}
 80093f8:	1400      	asrs	r0, r0, #16
 80093fa:	4770      	bx	lr

080093fc <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 80093fc:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 80093fe:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009400:	60c3      	str	r3, [r0, #12]
}
 8009402:	4770      	bx	lr

08009404 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8009404:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8009406:	7803      	ldrb	r3, [r0, #0]
{
 8009408:	4604      	mov	r4, r0
 800940a:	460d      	mov	r5, r1
 800940c:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800940e:	b31b      	cbz	r3, 8009458 <STC_ExecRamp+0x54>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009410:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8009412:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009414:	2800      	cmp	r0, #0
 8009416:	bfbc      	itt	lt
 8009418:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 800941c:	30ff      	addlt	r0, #255	@ 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800941e:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009420:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8009424:	dd01      	ble.n	800942a <STC_ExecRamp+0x26>
 8009426:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8009428:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800942a:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 800942e:	428b      	cmp	r3, r1
 8009430:	dcf9      	bgt.n	8009426 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8009432:	8c23      	ldrh	r3, [r4, #32]
 8009434:	4299      	cmp	r1, r3
 8009436:	da03      	bge.n	8009440 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8009438:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 800943c:	428b      	cmp	r3, r1
 800943e:	dbf2      	blt.n	8009426 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8009440:	b9a6      	cbnz	r6, 800946c <STC_ExecRamp+0x68>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8009442:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8009444:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8009446:	2b01      	cmp	r3, #1
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8009448:	bf0c      	ite	eq
 800944a:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800944c:	60a5      	strne	r5, [r4, #8]
      pHandle->IncDecAmount = 0;
 800944e:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
 8009450:	61a0      	str	r0, [r4, #24]
      pHandle->RampRemainingStep++;
 8009452:	60e6      	str	r6, [r4, #12]
      pHandle->IncDecAmount = wAux1;
 8009454:	2001      	movs	r0, #1
}
 8009456:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8009458:	f7ff ffc8 	bl	80093ec <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800945c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800945e:	42ab      	cmp	r3, r5
 8009460:	dbe1      	blt.n	8009426 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8009462:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8009466:	42ab      	cmp	r3, r5
 8009468:	dcdd      	bgt.n	8009426 <STC_ExecRamp+0x22>
 800946a:	e7e9      	b.n	8009440 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800946c:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 800946e:	4a06      	ldr	r2, [pc, #24]	@ (8009488 <STC_ExecRamp+0x84>)
      pHandle->TargetFinal = hTargetFinal;
 8009470:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8009472:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8009476:	fba2 2303 	umull	r2, r3, r2, r3
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800947a:	1a28      	subs	r0, r5, r0
      wAux /= 1000u;
 800947c:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800947e:	1c5e      	adds	r6, r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8009480:	0400      	lsls	r0, r0, #16
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8009482:	fb90 f0f6 	sdiv	r0, r0, r6
      pHandle->IncDecAmount = wAux1;
 8009486:	e7e3      	b.n	8009450 <STC_ExecRamp+0x4c>
 8009488:	10624dd3 	.word	0x10624dd3

0800948c <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 800948c:	2300      	movs	r3, #0
 800948e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8009490:	6183      	str	r3, [r0, #24]
}
 8009492:	4770      	bx	lr

08009494 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8009494:	b570      	push	{r4, r5, r6, lr}
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 8009496:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8009498:	68c3      	ldr	r3, [r0, #12]
{
 800949a:	4604      	mov	r4, r0
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800949c:	b96a      	cbnz	r2, 80094ba <STC_CalcTorqueReference+0x26>
  if ( pHandle->RampRemainingStep > 1u )
 800949e:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->TorqueRef;
 80094a0:	6886      	ldr	r6, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 80094a2:	d923      	bls.n	80094ec <STC_CalcTorqueReference+0x58>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80094a4:	6982      	ldr	r2, [r0, #24]
 80094a6:	4416      	add	r6, r2

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80094a8:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80094aa:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 80094ac:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80094ae:	4630      	mov	r0, r6
 80094b0:	db20      	blt.n	80094f4 <STC_CalcTorqueReference+0x60>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80094b2:	1405      	asrs	r5, r0, #16
 80094b4:	b228      	sxth	r0, r5
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 80094b6:	60a6      	str	r6, [r4, #8]
  }

  return hTorqueReference;
}
 80094b8:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->RampRemainingStep > 1u )
 80094ba:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->SpeedRefUnitExt;
 80094bc:	6846      	ldr	r6, [r0, #4]
  if ( pHandle->RampRemainingStep > 1u )
 80094be:	d91d      	bls.n	80094fc <STC_CalcTorqueReference+0x68>
    wCurrentReference += pHandle->IncDecAmount;
 80094c0:	6981      	ldr	r1, [r0, #24]
 80094c2:	440e      	add	r6, r1
    pHandle->RampRemainingStep--;
 80094c4:	3b01      	subs	r3, #1
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80094c6:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 80094c8:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80094ca:	4630      	mov	r0, r6
 80094cc:	db1a      	blt.n	8009504 <STC_CalcTorqueReference+0x70>
 80094ce:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 80094d0:	2a01      	cmp	r2, #1
 80094d2:	d1ef      	bne.n	80094b4 <STC_CalcTorqueReference+0x20>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 80094d4:	6960      	ldr	r0, [r4, #20]
 80094d6:	f7ff ff19 	bl	800930c <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 80094da:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 80094dc:	b209      	sxth	r1, r1
 80094de:	6920      	ldr	r0, [r4, #16]
 80094e0:	f7ff fc60 	bl	8008da4 <PI_Controller>
    pHandle->SpeedRefUnitExt = wCurrentReference;
 80094e4:	6066      	str	r6, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 80094e6:	0406      	lsls	r6, r0, #16
 80094e8:	60a6      	str	r6, [r4, #8]
}
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80094ec:	d014      	beq.n	8009518 <STC_CalcTorqueReference+0x84>
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80094ee:	2e00      	cmp	r6, #0
 80094f0:	4630      	mov	r0, r6
 80094f2:	dade      	bge.n	80094b2 <STC_CalcTorqueReference+0x1e>
 80094f4:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 80094f8:	30ff      	adds	r0, #255	@ 0xff
 80094fa:	e7da      	b.n	80094b2 <STC_CalcTorqueReference+0x1e>
  else if ( pHandle->RampRemainingStep == 1u )
 80094fc:	d006      	beq.n	800950c <STC_CalcTorqueReference+0x78>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80094fe:	2e00      	cmp	r6, #0
 8009500:	4630      	mov	r0, r6
 8009502:	dae4      	bge.n	80094ce <STC_CalcTorqueReference+0x3a>
 8009504:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8009508:	30ff      	adds	r0, #255	@ 0xff
 800950a:	e7e0      	b.n	80094ce <STC_CalcTorqueReference+0x3a>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800950c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8009510:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8009512:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8009514:	60c3      	str	r3, [r0, #12]
 8009516:	e7db      	b.n	80094d0 <STC_CalcTorqueReference+0x3c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8009518:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 800951c:	60c2      	str	r2, [r0, #12]
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800951e:	042e      	lsls	r6, r5, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8009520:	e7c8      	b.n	80094b4 <STC_CalcTorqueReference+0x20>
 8009522:	bf00      	nop

08009524 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8009524:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop

0800952c <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 800952c:	8bc0      	ldrh	r0, [r0, #30]
 800952e:	4770      	bx	lr

08009530 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8009530:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	@ 0x24
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop

08009538 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8009538:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800953c:	2200      	movs	r2, #0
 800953e:	b299      	uxth	r1, r3
 8009540:	f361 020f 	bfi	r2, r1, #0, #16
 8009544:	0c1b      	lsrs	r3, r3, #16
 8009546:	f363 421f 	bfi	r2, r3, #16, #16
{
 800954a:	b082      	sub	sp, #8
}
 800954c:	4610      	mov	r0, r2
 800954e:	b002      	add	sp, #8
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop

08009554 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8009554:	b510      	push	{r4, lr}
 8009556:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8009558:	6940      	ldr	r0, [r0, #20]
 800955a:	f7ff fed7 	bl	800930c <SPD_GetAvrgMecSpeedUnit>
 800955e:	0400      	lsls	r0, r0, #16
 8009560:	6060      	str	r0, [r4, #4]
}
 8009562:	bd10      	pop	{r4, pc}

08009564 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8009564:	2300      	movs	r3, #0
 8009566:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8009568:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop

08009570 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8009570:	b500      	push	{lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009572:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8009574:	f8b0 e004 	ldrh.w	lr, [r0, #4]
{
 8009578:	4684      	mov	ip, r0
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800957a:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 800957c:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800957e:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8009582:	ea41 010e 	orr.w	r1, r1, lr
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009586:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8009588:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800958a:	f8ac 2002 	strh.w	r2, [ip, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800958e:	f8ac 1004 	strh.w	r1, [ip, #4]
  if ( LocalState == FAULT_NOW )
 8009592:	d008      	beq.n	80095a6 <STM_FaultProcessing+0x36>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8009594:	b90a      	cbnz	r2, 800959a <STM_FaultProcessing+0x2a>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8009596:	f85d fb04 	ldr.w	pc, [sp], #4
      pHandle->bState = FAULT_NOW;
 800959a:	230a      	movs	r3, #10
 800959c:	f88c 3000 	strb.w	r3, [ip]
      LocalState = FAULT_NOW;
 80095a0:	200a      	movs	r0, #10
}
 80095a2:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80095a6:	2a00      	cmp	r2, #0
 80095a8:	d1fa      	bne.n	80095a0 <STM_FaultProcessing+0x30>
      pHandle->bState = FAULT_OVER;
 80095aa:	200b      	movs	r0, #11
 80095ac:	f88c 0000 	strb.w	r0, [ip]
}
 80095b0:	f85d fb04 	ldr.w	pc, [sp], #4

080095b4 <STM_NextState>:
{
 80095b4:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 80095b6:	7803      	ldrb	r3, [r0, #0]
 80095b8:	2b14      	cmp	r3, #20
 80095ba:	d820      	bhi.n	80095fe <STM_NextState+0x4a>
 80095bc:	e8df f003 	tbb	[pc, r3]
 80095c0:	530d2930 	.word	0x530d2930
 80095c4:	260d6547 	.word	0x260d6547
 80095c8:	1f1f421d 	.word	0x1f1f421d
 80095cc:	3a3d0b19 	.word	0x3a3d0b19
 80095d0:	61506937 	.word	0x61506937
 80095d4:	5e          	.byte	0x5e
 80095d5:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80095d6:	290e      	cmp	r1, #14
 80095d8:	d00c      	beq.n	80095f4 <STM_NextState+0x40>
      if ( bState == ANY_STOP )
 80095da:	2907      	cmp	r1, #7
 80095dc:	d00a      	beq.n	80095f4 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80095de:	f001 01fd 	and.w	r1, r1, #253	@ 0xfd
 80095e2:	2901      	cmp	r1, #1
 80095e4:	d003      	beq.n	80095ee <STM_NextState+0x3a>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 80095e6:	2200      	movs	r2, #0
 80095e8:	2180      	movs	r1, #128	@ 0x80
 80095ea:	f7ff ffc1 	bl	8009570 <STM_FaultProcessing>
 80095ee:	2000      	movs	r0, #0
}
 80095f0:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 80095f2:	b921      	cbnz	r1, 80095fe <STM_NextState+0x4a>
    pHandle->bState = bNewState;
 80095f4:	7001      	strb	r1, [r0, #0]
 80095f6:	2001      	movs	r0, #1
}
 80095f8:	bd08      	pop	{r3, pc}
      if ( bState == STOP_IDLE )
 80095fa:	2909      	cmp	r1, #9
 80095fc:	d0fa      	beq.n	80095f4 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80095fe:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 8009602:	2b01      	cmp	r3, #1
 8009604:	d0f3      	beq.n	80095ee <STM_NextState+0x3a>
 8009606:	2907      	cmp	r1, #7
 8009608:	d0f1      	beq.n	80095ee <STM_NextState+0x3a>
 800960a:	e7ec      	b.n	80095e6 <STM_NextState+0x32>
      if ( bState == STOP )
 800960c:	2908      	cmp	r1, #8
 800960e:	d1f6      	bne.n	80095fe <STM_NextState+0x4a>
 8009610:	e7f0      	b.n	80095f4 <STM_NextState+0x40>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8009612:	2907      	cmp	r1, #7
 8009614:	d0ee      	beq.n	80095f4 <STM_NextState+0x40>
 8009616:	f1a1 030d 	sub.w	r3, r1, #13
 800961a:	2b01      	cmp	r3, #1
 800961c:	d8df      	bhi.n	80095de <STM_NextState+0x2a>
 800961e:	e7e9      	b.n	80095f4 <STM_NextState+0x40>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009620:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 8009624:	2b01      	cmp	r3, #1
 8009626:	d0e5      	beq.n	80095f4 <STM_NextState+0x40>
           || ( bState == ICLWAIT ) )
 8009628:	290c      	cmp	r1, #12
 800962a:	d1ec      	bne.n	8009606 <STM_NextState+0x52>
 800962c:	e7e2      	b.n	80095f4 <STM_NextState+0x40>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800962e:	2911      	cmp	r1, #17
 8009630:	d1d3      	bne.n	80095da <STM_NextState+0x26>
 8009632:	e7df      	b.n	80095f4 <STM_NextState+0x40>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8009634:	2902      	cmp	r1, #2
 8009636:	d1d0      	bne.n	80095da <STM_NextState+0x26>
 8009638:	e7dc      	b.n	80095f4 <STM_NextState+0x40>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800963a:	f001 03f7 	and.w	r3, r1, #247	@ 0xf7
 800963e:	2b07      	cmp	r3, #7
 8009640:	d1cd      	bne.n	80095de <STM_NextState+0x2a>
 8009642:	e7d7      	b.n	80095f4 <STM_NextState+0x40>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8009644:	2900      	cmp	r1, #0
 8009646:	d0d5      	beq.n	80095f4 <STM_NextState+0x40>
 8009648:	290c      	cmp	r1, #12
 800964a:	d1d8      	bne.n	80095fe <STM_NextState+0x4a>
 800964c:	e7d2      	b.n	80095f4 <STM_NextState+0x40>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800964e:	2913      	cmp	r1, #19
 8009650:	d0d0      	beq.n	80095f4 <STM_NextState+0x40>
 8009652:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 8009656:	2b05      	cmp	r3, #5
 8009658:	d0cc      	beq.n	80095f4 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800965a:	2b01      	cmp	r3, #1
 800965c:	d1c3      	bne.n	80095e6 <STM_NextState+0x32>
 800965e:	e7c6      	b.n	80095ee <STM_NextState+0x3a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8009660:	2904      	cmp	r1, #4
 8009662:	d1ba      	bne.n	80095da <STM_NextState+0x26>
 8009664:	e7c6      	b.n	80095f4 <STM_NextState+0x40>
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 8009666:	2907      	cmp	r1, #7
 8009668:	d0c4      	beq.n	80095f4 <STM_NextState+0x40>
 800966a:	2911      	cmp	r1, #17
 800966c:	d8bb      	bhi.n	80095e6 <STM_NextState+0x32>
 800966e:	4b0c      	ldr	r3, [pc, #48]	@ (80096a0 <STM_NextState+0xec>)
 8009670:	40cb      	lsrs	r3, r1
 8009672:	07da      	lsls	r2, r3, #31
 8009674:	d4be      	bmi.n	80095f4 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009676:	2903      	cmp	r1, #3
 8009678:	d0b9      	beq.n	80095ee <STM_NextState+0x3a>
 800967a:	e7b4      	b.n	80095e6 <STM_NextState+0x32>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800967c:	2912      	cmp	r1, #18
 800967e:	d1ac      	bne.n	80095da <STM_NextState+0x26>
 8009680:	e7b8      	b.n	80095f4 <STM_NextState+0x40>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8009682:	1f0b      	subs	r3, r1, #4
 8009684:	2b01      	cmp	r3, #1
 8009686:	d8a8      	bhi.n	80095da <STM_NextState+0x26>
 8009688:	e7b4      	b.n	80095f4 <STM_NextState+0x40>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800968a:	1f8b      	subs	r3, r1, #6
 800968c:	2b01      	cmp	r3, #1
 800968e:	d8a6      	bhi.n	80095de <STM_NextState+0x2a>
 8009690:	e7b0      	b.n	80095f4 <STM_NextState+0x40>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8009692:	2914      	cmp	r1, #20
 8009694:	d8a3      	bhi.n	80095de <STM_NextState+0x2a>
 8009696:	4b03      	ldr	r3, [pc, #12]	@ (80096a4 <STM_NextState+0xf0>)
 8009698:	410b      	asrs	r3, r1
 800969a:	07db      	lsls	r3, r3, #31
 800969c:	d5aa      	bpl.n	80095f4 <STM_NextState+0x40>
 800969e:	e79e      	b.n	80095de <STM_NextState+0x2a>
 80096a0:	00030012 	.word	0x00030012
 80096a4:	ffebff7f 	.word	0xffebff7f

080096a8 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80096a8:	7800      	ldrb	r0, [r0, #0]
 80096aa:	4770      	bx	lr

080096ac <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80096ac:	7803      	ldrb	r3, [r0, #0]
 80096ae:	2b0b      	cmp	r3, #11
 80096b0:	d001      	beq.n	80096b6 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80096b2:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80096b4:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80096b6:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80096b8:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80096ba:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80096bc:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80096be:	2001      	movs	r0, #1
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop

080096c4 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80096c4:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80096c6:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80096c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop

080096d0 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80096d0:	f7fe bc7a 	b.w	8007fc8 <FCP_Init>

080096d4 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80096d4:	f890 3097 	ldrb.w	r3, [r0, #151]	@ 0x97
 80096d8:	b17b      	cbz	r3, 80096fa <UFCP_TX_IRQ_Handler+0x26>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80096da:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80096de:	f8d0 1120 	ldr.w	r1, [r0, #288]	@ 0x120
 80096e2:	4602      	mov	r2, r0
    switch ( pBaseHandle->TxFrameLevel )
 80096e4:	b183      	cbz	r3, 8009708 <UFCP_TX_IRQ_Handler+0x34>
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d008      	beq.n	80096fc <UFCP_TX_IRQ_Handler+0x28>
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80096ea:	7d40      	ldrb	r0, [r0, #21]
 80096ec:	3001      	adds	r0, #1
 80096ee:	4283      	cmp	r3, r0
 80096f0:	dc10      	bgt.n	8009714 <UFCP_TX_IRQ_Handler+0x40>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 80096f2:	18d0      	adds	r0, r2, r3
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80096f4:	7d00      	ldrb	r0, [r0, #20]
 80096f6:	6048      	str	r0, [r1, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 80096f8:	e002      	b.n	8009700 <UFCP_TX_IRQ_Handler+0x2c>
 80096fa:	4770      	bx	lr
 80096fc:	7d40      	ldrb	r0, [r0, #21]
 80096fe:	6048      	str	r0, [r1, #4]
    {
      pBaseHandle->TxFrameLevel++;
 8009700:	3301      	adds	r3, #1
 8009702:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 8009706:	4770      	bx	lr
 8009708:	7d00      	ldrb	r0, [r0, #20]
 800970a:	6048      	str	r0, [r1, #4]
 800970c:	3301      	adds	r3, #1
 800970e:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 8009712:	4770      	bx	lr
{
 8009714:	b410      	push	{r4}
 8009716:	f892 3096 	ldrb.w	r3, [r2, #150]	@ 0x96
 800971a:	604b      	str	r3, [r1, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800971c:	310c      	adds	r1, #12
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	e851 3f00 	ldrex	r3, [r1]
 8009722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	e841 3400 	strex	r4, r3, [r1]
 800972a:	2c00      	cmp	r4, #0
 800972c:	d1f7      	bne.n	800971e <UFCP_TX_IRQ_Handler+0x4a>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800972e:	f882 4097 	strb.w	r4, [r2, #151]	@ 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8009732:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8009736:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800973a:	4718      	bx	r3

0800973c <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800973c:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 8009740:	b97b      	cbnz	r3, 8009762 <UFCP_Receive+0x26>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8009742:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8009746:	2301      	movs	r3, #1
 8009748:	f8a0 311c 	strh.w	r3, [r0, #284]	@ 0x11c
 800974c:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974e:	e852 3f00 	ldrex	r3, [r2]
 8009752:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	e842 3100 	strex	r1, r3, [r2]
 800975a:	2900      	cmp	r1, #0
 800975c:	d1f7      	bne.n	800974e <UFCP_Receive+0x12>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800975e:	2002      	movs	r0, #2
 8009760:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8009762:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop

08009768 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800976c:	f890 0097 	ldrb.w	r0, [r0, #151]	@ 0x97
 8009770:	bb88      	cbnz	r0, 80097d6 <UFCP_Send+0x6e>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8009772:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8009774:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8009776:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8009778:	b2c0      	uxtb	r0, r0
 800977a:	b19b      	cbz	r3, 80097a4 <UFCP_Send+0x3c>
 800977c:	2805      	cmp	r0, #5
 800977e:	d94e      	bls.n	800981e <UFCP_Send+0xb6>
 8009780:	f104 0616 	add.w	r6, r4, #22
 8009784:	1c51      	adds	r1, r2, #1
 8009786:	1a75      	subs	r5, r6, r1
 8009788:	2d02      	cmp	r5, #2
 800978a:	d826      	bhi.n	80097da <UFCP_Send+0x72>
 800978c:	3001      	adds	r0, #1
 800978e:	f104 0315 	add.w	r3, r4, #21
 8009792:	4402      	add	r2, r0
 8009794:	e000      	b.n	8009798 <UFCP_Send+0x30>
 8009796:	3101      	adds	r1, #1
 8009798:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800979c:	f803 0f01 	strb.w	r0, [r3, #1]!
 80097a0:	428a      	cmp	r2, r1
 80097a2:	d1f8      	bne.n	8009796 <UFCP_Send+0x2e>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80097a4:	f104 0014 	add.w	r0, r4, #20
 80097a8:	f7fe fc22 	bl	8007ff0 <FCP_CalcCRC>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80097ac:	f8d4 2120 	ldr.w	r2, [r4, #288]	@ 0x120
 80097b0:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96

    pHandle->TxFrameLevel = 0;
 80097b4:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80097b6:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 80097b8:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80097bc:	f884 3097 	strb.w	r3, [r4, #151]	@ 0x97
 80097c0:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	e852 3f00 	ldrex	r3, [r2]
 80097c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	e842 3100 	strex	r1, r3, [r2]
 80097ce:	2900      	cmp	r1, #0
 80097d0:	d1f7      	bne.n	80097c2 <UFCP_Send+0x5a>
 80097d2:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 80097d4:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80097d6:	2001      	movs	r0, #1
}
 80097d8:	bd70      	pop	{r4, r5, r6, pc}
 80097da:	089d      	lsrs	r5, r3, #2
 80097dc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80097e0:	4611      	mov	r1, r2
 80097e2:	46b4      	mov	ip, r6
    while ( size-- ) *dest++ = *buffer++;
 80097e4:	f851 eb04 	ldr.w	lr, [r1], #4
 80097e8:	f84c eb04 	str.w	lr, [ip], #4
 80097ec:	42a9      	cmp	r1, r5
 80097ee:	d1f9      	bne.n	80097e4 <UFCP_Send+0x7c>
 80097f0:	f003 01fc 	and.w	r1, r3, #252	@ 0xfc
 80097f4:	1a40      	subs	r0, r0, r1
 80097f6:	079b      	lsls	r3, r3, #30
 80097f8:	b2c0      	uxtb	r0, r0
 80097fa:	eb02 0c01 	add.w	ip, r2, r1
 80097fe:	eb06 0501 	add.w	r5, r6, r1
 8009802:	d0cf      	beq.n	80097a4 <UFCP_Send+0x3c>
 8009804:	5c53      	ldrb	r3, [r2, r1]
 8009806:	5473      	strb	r3, [r6, r1]
 8009808:	2800      	cmp	r0, #0
 800980a:	d0cb      	beq.n	80097a4 <UFCP_Send+0x3c>
 800980c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8009810:	706b      	strb	r3, [r5, #1]
 8009812:	2801      	cmp	r0, #1
 8009814:	d0c6      	beq.n	80097a4 <UFCP_Send+0x3c>
 8009816:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800981a:	70ab      	strb	r3, [r5, #2]
 800981c:	e7c2      	b.n	80097a4 <UFCP_Send+0x3c>
 800981e:	1c51      	adds	r1, r2, #1
 8009820:	e7b4      	b.n	800978c <UFCP_Send+0x24>
 8009822:	bf00      	nop

08009824 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8009824:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 8009828:	b90b      	cbnz	r3, 800982e <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800982a:	482e      	ldr	r0, [pc, #184]	@ (80098e4 <UFCP_RX_IRQ_Handler+0xc0>)
}
 800982c:	4770      	bx	lr
{
 800982e:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8009830:	f890 311d 	ldrb.w	r3, [r0, #285]	@ 0x11d
{
 8009834:	b083      	sub	sp, #12
 8009836:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8009838:	fa5f fc81 	uxtb.w	ip, r1
    switch ( pBaseHandle->RxFrameLevel )
 800983c:	b39b      	cbz	r3, 80098a6 <UFCP_RX_IRQ_Handler+0x82>
 800983e:	2b01      	cmp	r3, #1
 8009840:	d03b      	beq.n	80098ba <UFCP_RX_IRQ_Handler+0x96>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8009842:	f890 209a 	ldrb.w	r2, [r0, #154]	@ 0x9a
 8009846:	3201      	adds	r2, #1
 8009848:	4293      	cmp	r3, r2
 800984a:	dc08      	bgt.n	800985e <UFCP_RX_IRQ_Handler+0x3a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800984c:	18c2      	adds	r2, r0, r3
          pBaseHandle->RxFrameLevel++;
 800984e:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8009850:	f882 c099 	strb.w	ip, [r2, #153]	@ 0x99
          pBaseHandle->RxFrameLevel++;
 8009854:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009858:	4822      	ldr	r0, [pc, #136]	@ (80098e4 <UFCP_RX_IRQ_Handler+0xc0>)
}
 800985a:	b003      	add	sp, #12
 800985c:	bd30      	pop	{r4, r5, pc}
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800985e:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8009862:	f880 c11b 	strb.w	ip, [r0, #283]	@ 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	8243      	strh	r3, [r0, #18]
 800986a:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986c:	e852 3f00 	ldrex	r3, [r2]
 8009870:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009874:	e842 3100 	strex	r1, r3, [r2]
 8009878:	2900      	cmp	r1, #0
 800987a:	d1f7      	bne.n	800986c <UFCP_RX_IRQ_Handler+0x48>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800987c:	f884 111c 	strb.w	r1, [r4, #284]	@ 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8009880:	f104 0099 	add.w	r0, r4, #153	@ 0x99
 8009884:	f7fe fbb4 	bl	8007ff0 <FCP_CalcCRC>
 8009888:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 800988c:	4283      	cmp	r3, r0
 800988e:	d11d      	bne.n	80098cc <UFCP_RX_IRQ_Handler+0xa8>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8009890:	68a5      	ldr	r5, [r4, #8]
 8009892:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 8009896:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 800989a:	6820      	ldr	r0, [r4, #0]
 800989c:	f104 029b 	add.w	r2, r4, #155	@ 0x9b
 80098a0:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80098a2:	4811      	ldr	r0, [pc, #68]	@ (80098e8 <UFCP_RX_IRQ_Handler+0xc4>)
  return ret_val;
 80098a4:	e7d9      	b.n	800985a <UFCP_RX_IRQ_Handler+0x36>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80098a6:	8a02      	ldrh	r2, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80098a8:	4810      	ldr	r0, [pc, #64]	@ (80098ec <UFCP_RX_IRQ_Handler+0xc8>)
        pBaseHandle->RxFrame.Code = rx_byte;
 80098aa:	f884 c099 	strb.w	ip, [r4, #153]	@ 0x99
        pBaseHandle->RxFrameLevel++;
 80098ae:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80098b0:	8262      	strh	r2, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 80098b2:	f884 311d 	strb.w	r3, [r4, #285]	@ 0x11d
}
 80098b6:	b003      	add	sp, #12
 80098b8:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80098ba:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 80098bc:	bf54      	ite	pl
 80098be:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 80098c0:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 80098c2:	f880 c09a 	strb.w	ip, [r0, #154]	@ 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 80098c6:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
 80098ca:	e7c5      	b.n	8009858 <UFCP_RX_IRQ_Handler+0x34>
            error_code = FCP_MSG_RX_BAD_CRC;
 80098cc:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80098ce:	2301      	movs	r3, #1
 80098d0:	f10d 0207 	add.w	r2, sp, #7
 80098d4:	21ff      	movs	r1, #255	@ 0xff
 80098d6:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 80098d8:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80098dc:	f7ff ff44 	bl	8009768 <UFCP_Send>
 80098e0:	e7df      	b.n	80098a2 <UFCP_RX_IRQ_Handler+0x7e>
 80098e2:	bf00      	nop
 80098e4:	0800a248 	.word	0x0800a248
 80098e8:	0800a244 	.word	0x0800a244
 80098ec:	0800a246 	.word	0x0800a246

080098f0 <UFCP_OVR_IRQ_Handler>:
{
 80098f0:	b500      	push	{lr}
 80098f2:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 80098f4:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80098f8:	2301      	movs	r3, #1
 80098fa:	f10d 0207 	add.w	r2, sp, #7
 80098fe:	21ff      	movs	r1, #255	@ 0xff
  error_code = UFCP_MSG_OVERRUN;
 8009900:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009904:	f7ff ff30 	bl	8009768 <UFCP_Send>
}
 8009908:	b003      	add	sp, #12
 800990a:	f85d fb04 	ldr.w	pc, [sp], #4
 800990e:	bf00      	nop

08009910 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009910:	2300      	movs	r3, #0
 8009912:	f880 311c 	strb.w	r3, [r0, #284]	@ 0x11c
}
 8009916:	4770      	bx	lr

08009918 <GPIO_Init>:
#include "main.h"
#include "UDHAL_GPIO.h"

GPIO_InitTypeDef GPIO_InitStruct = {0};
void GPIO_Init(void)
{
 8009918:	b570      	push	{r4, r5, r6, lr}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800991a:	2400      	movs	r4, #0
{
 800991c:	b08a      	sub	sp, #40	@ 0x28
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800991e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8009922:	e9cd 4406 	strd	r4, r4, [sp, #24]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009926:	4b28      	ldr	r3, [pc, #160]	@ (80099c8 <GPIO_Init+0xb0>)
 8009928:	9400      	str	r4, [sp, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800992a:	9408      	str	r4, [sp, #32]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800992c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
	  __HAL_RCC_GPIOC_CLK_ENABLE();
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DASHBOARD_GPIO_Port, DASHBOARD_Pin, GPIO_PIN_RESET);
 800992e:	4d27      	ldr	r5, [pc, #156]	@ (80099cc <GPIO_Init+0xb4>)

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin, GPIO_PIN_RESET);
 8009930:	4e27      	ldr	r6, [pc, #156]	@ (80099d0 <GPIO_Init+0xb8>)
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009932:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009936:	631a      	str	r2, [r3, #48]	@ 0x30
 8009938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800993a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800993e:	9200      	str	r2, [sp, #0]
 8009940:	9a00      	ldr	r2, [sp, #0]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009942:	9401      	str	r4, [sp, #4]
 8009944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009946:	f042 0204 	orr.w	r2, r2, #4
 800994a:	631a      	str	r2, [r3, #48]	@ 0x30
 800994c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800994e:	f002 0204 	and.w	r2, r2, #4
 8009952:	9201      	str	r2, [sp, #4]
 8009954:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009956:	9402      	str	r4, [sp, #8]
 8009958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800995a:	f042 0201 	orr.w	r2, r2, #1
 800995e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009962:	f002 0201 	and.w	r2, r2, #1
 8009966:	9202      	str	r2, [sp, #8]
 8009968:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800996a:	9403      	str	r4, [sp, #12]
 800996c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800996e:	f042 0202 	orr.w	r2, r2, #2
 8009972:	631a      	str	r2, [r3, #48]	@ 0x30
 8009974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	9303      	str	r3, [sp, #12]
	  HAL_GPIO_WritePin(DASHBOARD_GPIO_Port, DASHBOARD_Pin, GPIO_PIN_RESET);
 800997c:	4622      	mov	r2, r4
 800997e:	4628      	mov	r0, r5
 8009980:	2120      	movs	r1, #32
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009982:	9b03      	ldr	r3, [sp, #12]
	  HAL_GPIO_WritePin(DASHBOARD_GPIO_Port, DASHBOARD_Pin, GPIO_PIN_RESET);
 8009984:	f7fa fe5e 	bl	8004644 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin, GPIO_PIN_RESET);
 8009988:	4622      	mov	r2, r4
 800998a:	4630      	mov	r0, r6
 800998c:	f240 4106 	movw	r1, #1030	@ 0x406
 8009990:	f7fa fe58 	bl	8004644 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : DASHBOARD_Pin */
	  GPIO_InitStruct.Pin = DASHBOARD_Pin;
 8009994:	2400      	movs	r4, #0
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(DASHBOARD_GPIO_Port, &GPIO_InitStruct);
 8009996:	4628      	mov	r0, r5
	  GPIO_InitStruct.Pin = DASHBOARD_Pin;
 8009998:	2220      	movs	r2, #32
 800999a:	2301      	movs	r3, #1
 800999c:	2500      	movs	r5, #0
	  HAL_GPIO_Init(DASHBOARD_GPIO_Port, &GPIO_InitStruct);
 800999e:	a904      	add	r1, sp, #16
	  GPIO_InitStruct.Pin = DASHBOARD_Pin;
 80099a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
	  HAL_GPIO_Init(DASHBOARD_GPIO_Port, &GPIO_InitStruct);
 80099a8:	f7fa fc8e 	bl	80042c8 <HAL_GPIO_Init>

	  /*Configure GPIO pins : FAULT_Pin TAIL_LIGHT_Pin TAIL_LIGHT_2_Pin */
	  GPIO_InitStruct.Pin = FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin;
 80099ac:	f240 4206 	movw	r2, #1030	@ 0x406
 80099b0:	2301      	movs	r3, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099b2:	a904      	add	r1, sp, #16
 80099b4:	4630      	mov	r0, r6
	  GPIO_InitStruct.Pin = FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin;
 80099b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80099ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099be:	f7fa fc83 	bl	80042c8 <HAL_GPIO_Init>

}
 80099c2:	b00a      	add	sp, #40	@ 0x28
 80099c4:	bd70      	pop	{r4, r5, r6, pc}
 80099c6:	bf00      	nop
 80099c8:	40023800 	.word	0x40023800
 80099cc:	40020000 	.word	0x40020000
 80099d0:	40020400 	.word	0x40020400

080099d4 <WakeUpPinInit>:

void WakeUpPinInit(void)
{
 80099d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  /*Use UART1 Rx Pin PB7 as External Interrupt Pin PORTB Pin 7 --> i.e. EXTI9_5*/
  GPIO_InitStruct.Pin  = GPIO_PIN_7; /*UART2 Rx Pin PA3*/
 80099d6:	4c13      	ldr	r4, [pc, #76]	@ (8009a24 <WakeUpPinInit+0x50>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; /*Falling Edge Triggered Interrupt by UART from CC2640 Dash-board*/
  GPIO_InitStruct.Pull = GPIO_NOPULL; /*Activate Internal Pull Up Resistor!*/
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099d8:	4e13      	ldr	r6, [pc, #76]	@ (8009a28 <WakeUpPinInit+0x54>)
  GPIO_InitStruct.Pull = GPIO_NOPULL; /*Activate Internal Pull Up Resistor!*/
 80099da:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin  = GPIO_PIN_7; /*UART2 Rx Pin PA3*/
 80099dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099e0:	4621      	mov	r1, r4
 80099e2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin  = GPIO_PIN_7; /*UART2 Rx Pin PA3*/
 80099e4:	2280      	movs	r2, #128	@ 0x80
 80099e6:	e9c4 2300 	strd	r2, r3, [r4]
  GPIO_InitStruct.Pull = GPIO_NOPULL; /*Activate Internal Pull Up Resistor!*/
 80099ea:	60a5      	str	r5, [r4, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099ec:	f7fa fc6c 	bl	80042c8 <HAL_GPIO_Init>
  /*Activate Falling Edge Triggered Interrupt --> External Line Interrupt 3*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn,3,0);
 80099f0:	462a      	mov	r2, r5
 80099f2:	2103      	movs	r1, #3
 80099f4:	2017      	movs	r0, #23
 80099f6:	f7fa fbdf 	bl	80041b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80099fa:	2017      	movs	r0, #23
 80099fc:	f7fa fc18 	bl	8004230 <HAL_NVIC_EnableIRQ>

  GPIO_InitStruct.Pin  = GPIO_PIN_6; /*UART1 Tx Pin PB6*/
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a00:	2740      	movs	r7, #64	@ 0x40
 8009a02:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a04:	4621      	mov	r1, r4
 8009a06:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a08:	e9c4 7300 	strd	r7, r3, [r4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a0c:	e9c4 5502 	strd	r5, r5, [r4, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a10:	f7fa fc5a 	bl	80042c8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8009a14:	462a      	mov	r2, r5
 8009a16:	4639      	mov	r1, r7
 8009a18:	4630      	mov	r0, r6
}
 8009a1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8009a1e:	f7fa be11 	b.w	8004644 <HAL_GPIO_WritePin>
 8009a22:	bf00      	nop
 8009a24:	20005340 	.word	0x20005340
 8009a28:	40020400 	.word	0x40020400

08009a2c <WakeUpPinDeInit>:

void WakeUpPinDeInit(void)
{
 8009a2c:	b510      	push	{r4, lr}
	HAL_GPIO_DeInit(GPIOB,GPIO_PIN_7);
 8009a2e:	4c05      	ldr	r4, [pc, #20]	@ (8009a44 <WakeUpPinDeInit+0x18>)
 8009a30:	2180      	movs	r1, #128	@ 0x80
 8009a32:	4620      	mov	r0, r4
 8009a34:	f7fa fd58 	bl	80044e8 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB,GPIO_PIN_6);
 8009a38:	4620      	mov	r0, r4
 8009a3a:	2140      	movs	r1, #64	@ 0x40
}
 8009a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_DeInit(GPIOB,GPIO_PIN_6);
 8009a40:	f7fa bd52 	b.w	80044e8 <HAL_GPIO_DeInit>
 8009a44:	40020400 	.word	0x40020400

08009a48 <dashboard_indicator_on>:

void dashboard_indicator_on()
{
	HAL_GPIO_WritePin(DASHBOARD_GPIO_Port,DASHBOARD_Pin,GPIO_PIN_SET);
 8009a48:	4802      	ldr	r0, [pc, #8]	@ (8009a54 <dashboard_indicator_on+0xc>)
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	2120      	movs	r1, #32
 8009a4e:	f7fa bdf9 	b.w	8004644 <HAL_GPIO_WritePin>
 8009a52:	bf00      	nop
 8009a54:	40020000 	.word	0x40020000

08009a58 <fault_warning_on>:
}

void fault_warning_on()
{
	HAL_GPIO_WritePin(GPIOB,FAULT_Pin,GPIO_PIN_SET);
 8009a58:	4802      	ldr	r0, [pc, #8]	@ (8009a64 <fault_warning_on+0xc>)
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	2102      	movs	r1, #2
 8009a5e:	f7fa bdf1 	b.w	8004644 <HAL_GPIO_WritePin>
 8009a62:	bf00      	nop
 8009a64:	40020400 	.word	0x40020400

08009a68 <dashboard_indicator_off>:
}

void dashboard_indicator_off()
{
	HAL_GPIO_WritePin(DASHBOARD_GPIO_Port,DASHBOARD_Pin,GPIO_PIN_RESET);
 8009a68:	4802      	ldr	r0, [pc, #8]	@ (8009a74 <dashboard_indicator_off+0xc>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2120      	movs	r1, #32
 8009a6e:	f7fa bde9 	b.w	8004644 <HAL_GPIO_WritePin>
 8009a72:	bf00      	nop
 8009a74:	40020000 	.word	0x40020000

08009a78 <fault_warning_off>:
}

void fault_warning_off()
{
	HAL_GPIO_WritePin(GPIOB,FAULT_Pin,GPIO_PIN_RESET);
 8009a78:	4802      	ldr	r0, [pc, #8]	@ (8009a84 <fault_warning_off+0xc>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2102      	movs	r1, #2
 8009a7e:	f7fa bde1 	b.w	8004644 <HAL_GPIO_WritePin>
 8009a82:	bf00      	nop
 8009a84:	40020400 	.word	0x40020400

08009a88 <tail_light_turnon>:
	HAL_Delay(200);
}

void tail_light_turnon()
{
	HAL_GPIO_WritePin(GPIOB,TAIL_LIGHT_Pin,GPIO_PIN_SET);
 8009a88:	4802      	ldr	r0, [pc, #8]	@ (8009a94 <tail_light_turnon+0xc>)
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	2104      	movs	r1, #4
 8009a8e:	f7fa bdd9 	b.w	8004644 <HAL_GPIO_WritePin>
 8009a92:	bf00      	nop
 8009a94:	40020400 	.word	0x40020400

08009a98 <tail_light_turnoff>:
}

void tail_light_turnoff()
{
	HAL_GPIO_WritePin(GPIOB,TAIL_LIGHT_Pin,GPIO_PIN_RESET);
 8009a98:	4802      	ldr	r0, [pc, #8]	@ (8009aa4 <tail_light_turnoff+0xc>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	2104      	movs	r1, #4
 8009a9e:	f7fa bdd1 	b.w	8004644 <HAL_GPIO_WritePin>
 8009aa2:	bf00      	nop
 8009aa4:	40020400 	.word	0x40020400

08009aa8 <accelerateIQMotor>:
static uint8_t CURRENT_SAMPLES_INDEX = 0;
float RMS_CURRENT_SAMPLES[CURRENT_SAMPLES];
float RMS_CURRENT_SUM = 0;

void accelerateIQMotor(int16_t torque, uint16_t ramp)
{
 8009aa8:	b508      	push	{r3, lr}
	MC_ProgramTorqueRampMotor1(torque,ramp);
 8009aaa:	f7f7 fed7 	bl	800185c <MC_ProgramTorqueRampMotor1>
	MC_StartMotor1();
}
 8009aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MC_StartMotor1();
 8009ab2:	f7f7 bec7 	b.w	8001844 <MC_StartMotor1>
 8009ab6:	bf00      	nop

08009ab8 <motorStop>:
	MC_StartMotor1();
}

void motorStop()
{
	MC_StopMotor1();
 8009ab8:	f7f7 beca 	b.w	8001850 <MC_StopMotor1>

08009abc <getSpeed>:
{
	MC_AcknowledgeFaultMotor1();
}

int16_t getSpeed()
{
 8009abc:	b508      	push	{r3, lr}
	/*Returns the speed in RPM*/
	int16_t MOTOR_SPEED = (MC_GetMecSpeedAverageMotor1() * _RPM) / SPEED_UNIT;
 8009abe:	f7f7 fed9 	bl	8001874 <MC_GetMecSpeedAverageMotor1>
 8009ac2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8009ac6:	0040      	lsls	r0, r0, #1
	return MOTOR_SPEED;
}
 8009ac8:	b200      	sxth	r0, r0
 8009aca:	bd08      	pop	{r3, pc}
 8009acc:	0000      	movs	r0, r0
	...

08009ad0 <getRMSCurrent>:
	float MOTOR_CURRENT = (MC_GetPhaseCurrentAmplitudeMotor1() * VDD_SUPPLY)/(ADC_RANGE*CURRENT_SENSOR_GAIN);
	return MOTOR_CURRENT;
}

float getRMSCurrent()
{
 8009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float MOTOR_CURRENT = (MC_GetPhaseCurrentAmplitudeMotor1() * VDD_SUPPLY)/(ADC_RANGE*CURRENT_SENSOR_GAIN);
 8009ad2:	f7f7 fed5 	bl	8001880 <MC_GetPhaseCurrentAmplitudeMotor1>
 8009ad6:	f7f6 fced 	bl	80004b4 <__aeabi_i2d>
 8009ada:	4b17      	ldr	r3, [pc, #92]	@ (8009b38 <getRMSCurrent+0x68>)
	float RMS_DC_SAMPLE = (getCurrent()/RMS_FACTOR);
	RMS_CURRENT_SAMPLES[CURRENT_SAMPLES_INDEX] = RMS_DC_SAMPLE;
 8009adc:	4e17      	ldr	r6, [pc, #92]	@ (8009b3c <getRMSCurrent+0x6c>)
 8009ade:	4c18      	ldr	r4, [pc, #96]	@ (8009b40 <getRMSCurrent+0x70>)
 8009ae0:	7835      	ldrb	r5, [r6, #0]
	float MOTOR_CURRENT = (MC_GetPhaseCurrentAmplitudeMotor1() * VDD_SUPPLY)/(ADC_RANGE*CURRENT_SENSOR_GAIN);
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f7f6 fd50 	bl	8000588 <__aeabi_dmul>
 8009ae8:	f7f6 ff60 	bl	80009ac <__aeabi_d2f>
	float RMS_DC_SAMPLE = (getCurrent()/RMS_FACTOR);
 8009aec:	f7f6 fcf4 	bl	80004d8 <__aeabi_f2d>
 8009af0:	a30f      	add	r3, pc, #60	@ (adr r3, 8009b30 <getRMSCurrent+0x60>)
 8009af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af6:	f7f6 fd47 	bl	8000588 <__aeabi_dmul>
 8009afa:	f7f6 ff57 	bl	80009ac <__aeabi_d2f>
	RMS_CURRENT_SAMPLES[CURRENT_SAMPLES_INDEX] = RMS_DC_SAMPLE;
 8009afe:	eb04 0785 	add.w	r7, r4, r5, lsl #2

	uint8_t jj = 0;
	float rmsDCsum = 0;
 8009b02:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8009b44 <getRMSCurrent+0x74>
	float RMS_DC_SAMPLE = (getCurrent()/RMS_FACTOR);
 8009b06:	6038      	str	r0, [r7, #0]

	for(jj = 0; jj<CURRENT_SAMPLES; jj++)
 8009b08:	4623      	mov	r3, r4
 8009b0a:	f504 7270 	add.w	r2, r4, #960	@ 0x3c0
	{
		rmsDCsum += RMS_CURRENT_SAMPLES[jj];
 8009b0e:	ecb3 7a01 	vldmia	r3!, {s14}
	for(jj = 0; jj<CURRENT_SAMPLES; jj++)
 8009b12:	4293      	cmp	r3, r2
		rmsDCsum += RMS_CURRENT_SAMPLES[jj];
 8009b14:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(jj = 0; jj<CURRENT_SAMPLES; jj++)
 8009b18:	d1f9      	bne.n	8009b0e <getRMSCurrent+0x3e>
	}

	float rmsDCAvg = rmsDCsum/CURRENT_SAMPLES;

	CURRENT_SAMPLES_INDEX++;
 8009b1a:	1c6b      	adds	r3, r5, #1
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2bf0      	cmp	r3, #240	@ 0xf0
 8009b20:	bf28      	it	cs
 8009b22:	2300      	movcs	r3, #0
	float rmsDCAvg = rmsDCsum/CURRENT_SAMPLES;
 8009b24:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009b48 <getRMSCurrent+0x78>
	CURRENT_SAMPLES_INDEX++;
 8009b28:	7033      	strb	r3, [r6, #0]
	if(CURRENT_SAMPLES_INDEX >= CURRENT_SAMPLES)
	{
		CURRENT_SAMPLES_INDEX = 0;
	}
	return rmsDCAvg;
}
 8009b2a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b30:	667f723f 	.word	0x667f723f
 8009b34:	3fe6a09e 	.word	0x3fe6a09e
 8009b38:	3f54a000 	.word	0x3f54a000
 8009b3c:	20005714 	.word	0x20005714
 8009b40:	20005354 	.word	0x20005354
 8009b44:	00000000 	.word	0x00000000
 8009b48:	3b888889 	.word	0x3b888889

08009b4c <ShutDownTask>:
		rst_source = 0x7D;
	}
}

void ShutDownTask()
{
 8009b4c:	b510      	push	{r4, lr}
    if(UART_DeInit() == 0x01)
 8009b4e:	f000 f8f7 	bl	8009d40 <UART_DeInit>
 8009b52:	2801      	cmp	r0, #1
 8009b54:	d003      	beq.n	8009b5e <ShutDownTask+0x12>
    {
        /*Fuck Off*/
    	/*System Shutdown Fails*/
    	/*What Happens if UART cannot de-init ??*/
    }
}
 8009b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if(UART_DeInit() == 0xFF)
 8009b5a:	f000 b8f1 	b.w	8009d40 <UART_DeInit>
 8009b5e:	4604      	mov	r4, r0
    	WakeUpPinInit();
 8009b60:	f7ff ff38 	bl	80099d4 <WakeUpPinInit>
    	HAL_SuspendTick();
 8009b64:	f7f9 fbd6 	bl	8003314 <HAL_SuspendTick>
    	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFI);
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4620      	mov	r0, r4
}
 8009b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFI);
 8009b70:	f7fa bd6c 	b.w	800464c <HAL_PWR_EnterSTOPMode>

08009b74 <bootStart>:

void bootStart()
{
 8009b74:	b508      	push	{r3, lr}
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8009b76:	4b1a      	ldr	r3, [pc, #104]	@ (8009be0 <bootStart+0x6c>)
 8009b78:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	db19      	blt.n	8009bb2 <bootStart+0x3e>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8009b7e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009b80:	00d2      	lsls	r2, r2, #3
 8009b82:	d50c      	bpl.n	8009b9e <bootStart+0x2a>
		rst_source = 0x7C;
 8009b84:	4b17      	ldr	r3, [pc, #92]	@ (8009be4 <bootStart+0x70>)
 8009b86:	227c      	movs	r2, #124	@ 0x7c
 8009b88:	701a      	strb	r2, [r3, #0]
	/* Reset all the system peripherals ! Reset the program counter! You could de-active EXTI First
	 * Resume RTOS tasks !
	 * */
	GET_RESET_SOURCE();
	WakeUpPinDeInit();
 8009b8a:	f7ff ff4f 	bl	8009a2c <WakeUpPinDeInit>
	SystemClock();
 8009b8e:	f000 f82b 	bl	8009be8 <SystemClock>
	HAL_ResumeTick();
 8009b92:	f7f9 fbc9 	bl	8003328 <HAL_ResumeTick>
	HAL_NVIC_SystemReset();
}
 8009b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_SystemReset();
 8009b9a:	f7fa bb69 	b.w	8004270 <HAL_NVIC_SystemReset>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8009b9e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009ba0:	0110      	lsls	r0, r2, #4
 8009ba2:	d40a      	bmi.n	8009bba <bootStart+0x46>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8009ba4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009ba6:	0191      	lsls	r1, r2, #6
 8009ba8:	d50b      	bpl.n	8009bc2 <bootStart+0x4e>
		rst_source = 0x79;
 8009baa:	4b0e      	ldr	r3, [pc, #56]	@ (8009be4 <bootStart+0x70>)
 8009bac:	2279      	movs	r2, #121	@ 0x79
 8009bae:	701a      	strb	r2, [r3, #0]
 8009bb0:	e7eb      	b.n	8009b8a <bootStart+0x16>
		rst_source = 0x7F;
 8009bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009be4 <bootStart+0x70>)
 8009bb4:	227f      	movs	r2, #127	@ 0x7f
 8009bb6:	701a      	strb	r2, [r3, #0]
 8009bb8:	e7e7      	b.n	8009b8a <bootStart+0x16>
		rst_source = 0x7B;
 8009bba:	4b0a      	ldr	r3, [pc, #40]	@ (8009be4 <bootStart+0x70>)
 8009bbc:	227b      	movs	r2, #123	@ 0x7b
 8009bbe:	701a      	strb	r2, [r3, #0]
 8009bc0:	e7e3      	b.n	8009b8a <bootStart+0x16>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8009bc2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009bc4:	0052      	lsls	r2, r2, #1
 8009bc6:	d406      	bmi.n	8009bd6 <bootStart+0x62>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8009bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	d5dd      	bpl.n	8009b8a <bootStart+0x16>
		rst_source = 0x7D;
 8009bce:	4b05      	ldr	r3, [pc, #20]	@ (8009be4 <bootStart+0x70>)
 8009bd0:	227d      	movs	r2, #125	@ 0x7d
 8009bd2:	701a      	strb	r2, [r3, #0]
 8009bd4:	e7d9      	b.n	8009b8a <bootStart+0x16>
		rst_source = 0x7E;
 8009bd6:	4b03      	ldr	r3, [pc, #12]	@ (8009be4 <bootStart+0x70>)
 8009bd8:	227e      	movs	r2, #126	@ 0x7e
 8009bda:	701a      	strb	r2, [r3, #0]
 8009bdc:	e7d5      	b.n	8009b8a <bootStart+0x16>
 8009bde:	bf00      	nop
 8009be0:	40023800 	.word	0x40023800
 8009be4:	20005715 	.word	0x20005715

08009be8 <SystemClock>:
#include "UDHAL_SYSCLK.h"
#include "stm32f4xx_hal.h"
#include "main.h"

void SystemClock()
{
 8009be8:	b510      	push	{r4, lr}
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009bea:	2300      	movs	r3, #0
{
 8009bec:	b096      	sub	sp, #88	@ 0x58
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009bee:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8009bf2:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
	 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009bf6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009bfa:	e9cd 3305 	strd	r3, r3, [sp, #20]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8009bfe:	492c      	ldr	r1, [pc, #176]	@ (8009cb0 <SystemClock+0xc8>)
 8009c00:	9301      	str	r3, [sp, #4]
	 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c02:	9307      	str	r3, [sp, #28]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8009c04:	6c08      	ldr	r0, [r1, #64]	@ 0x40
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c06:	4a2b      	ldr	r2, [pc, #172]	@ (8009cb4 <SystemClock+0xcc>)
	  __HAL_RCC_PWR_CLK_ENABLE();
 8009c08:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8009c0c:	6408      	str	r0, [r1, #64]	@ 0x40
 8009c0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009c10:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8009c14:	9101      	str	r1, [sp, #4]
 8009c16:	9901      	ldr	r1, [sp, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c18:	9302      	str	r3, [sp, #8]
 8009c1a:	6813      	ldr	r3, [r2, #0]
 8009c1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c20:	6013      	str	r3, [r2, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009c22:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8009ca0 <SystemClock+0xb8>
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c26:	6813      	ldr	r3, [r2, #0]
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009c28:	ed8d 7b08 	vstr	d7, [sp, #32]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	  RCC_OscInitStruct.PLL.PLLM = 8;
	  RCC_OscInitStruct.PLL.PLLN = 180;
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009c30:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 8009ca8 <SystemClock+0xc0>
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c34:	9302      	str	r3, [sp, #8]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009c36:	2102      	movs	r1, #2
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c38:	9802      	ldr	r0, [sp, #8]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009c3a:	910e      	str	r1, [sp, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009c3c:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8009c40:	2208      	movs	r2, #8
	  RCC_OscInitStruct.PLL.PLLN = 180;
 8009c42:	23b4      	movs	r3, #180	@ 0xb4
	  RCC_OscInitStruct.PLL.PLLQ = 2;
	  RCC_OscInitStruct.PLL.PLLR = 2;
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c44:	a808      	add	r0, sp, #32
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8009c46:	e9cd 420f 	strd	r4, r2, [sp, #60]	@ 0x3c
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009c4a:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8009c4e:	9114      	str	r1, [sp, #80]	@ 0x50
	  RCC_OscInitStruct.PLL.PLLN = 180;
 8009c50:	9311      	str	r3, [sp, #68]	@ 0x44
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c52:	f7fa fe7d 	bl	8004950 <HAL_RCC_OscConfig>
 8009c56:	b9a8      	cbnz	r0, 8009c84 <SystemClock+0x9c>
	    Error_Handler();
	  }

	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009c58:	f7fa fd18 	bl	800468c <HAL_PWREx_EnableOverDrive>
 8009c5c:	b9c0      	cbnz	r0, 8009c90 <SystemClock+0xa8>
	    Error_Handler();
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009c5e:	210f      	movs	r1, #15
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009c60:	2302      	movs	r3, #2
 8009c62:	e9cd 1303 	strd	r1, r3, [sp, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c66:	2400      	movs	r4, #0
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009c68:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009c70:	a803      	add	r0, sp, #12
 8009c72:	2105      	movs	r1, #5
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009c74:	e9cd 4205 	strd	r4, r2, [sp, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009c78:	9307      	str	r3, [sp, #28]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009c7a:	f7fa fd43 	bl	8004704 <HAL_RCC_ClockConfig>
 8009c7e:	b950      	cbnz	r0, 8009c96 <SystemClock+0xae>
	  {
	    Error_Handler();
	  }
}
 8009c80:	b016      	add	sp, #88	@ 0x58
 8009c82:	bd10      	pop	{r4, pc}
	    Error_Handler();
 8009c84:	f7f7 fddc 	bl	8001840 <Error_Handler>
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009c88:	f7fa fd00 	bl	800468c <HAL_PWREx_EnableOverDrive>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d0e6      	beq.n	8009c5e <SystemClock+0x76>
	    Error_Handler();
 8009c90:	f7f7 fdd6 	bl	8001840 <Error_Handler>
 8009c94:	e7e3      	b.n	8009c5e <SystemClock+0x76>
	    Error_Handler();
 8009c96:	f7f7 fdd3 	bl	8001840 <Error_Handler>
}
 8009c9a:	b016      	add	sp, #88	@ 0x58
 8009c9c:	bd10      	pop	{r4, pc}
 8009c9e:	bf00      	nop
 8009ca0:	00000001 	.word	0x00000001
 8009ca4:	00010000 	.word	0x00010000
 8009ca8:	00000002 	.word	0x00000002
 8009cac:	00000002 	.word	0x00000002
 8009cb0:	40023800 	.word	0x40023800
 8009cb4:	40007000 	.word	0x40007000

08009cb8 <UDHAL_TIMEOUT_Stop>:

}

static void UDHAL_TIMEOUT_Stop()
{
	osTimerStop(protocolTimeoutHandle);
 8009cb8:	4b01      	ldr	r3, [pc, #4]	@ (8009cc0 <UDHAL_TIMEOUT_Stop+0x8>)
 8009cba:	6818      	ldr	r0, [r3, #0]
 8009cbc:	f7fb bf90 	b.w	8005be0 <osTimerStop>
 8009cc0:	20005718 	.word	0x20005718

08009cc4 <UDHAL_TIMEOUT_Start>:
	osTimerStart(protocolTimeoutHandle,RECEIVE_TIMEOUT_PERIOD);
 8009cc4:	4b02      	ldr	r3, [pc, #8]	@ (8009cd0 <UDHAL_TIMEOUT_Start+0xc>)
 8009cc6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8009cca:	6818      	ldr	r0, [r3, #0]
 8009ccc:	f7fb bf5a 	b.w	8005b84 <osTimerStart>
 8009cd0:	20005718 	.word	0x20005718

08009cd4 <UDHAL_TIMEOUT_OVClockFxn>:
}

void UDHAL_TIMEOUT_OVClockFxn(void const *argument)
{
	timeOutHandler();
 8009cd4:	f7f7 b9de 	b.w	8001094 <timeOutHandler>

08009cd8 <UDHAL_TIMEOUT_init>:
{
 8009cd8:	b500      	push	{lr}
	STM32MCP_registerTimer(&timeoutHandle);
 8009cda:	4808      	ldr	r0, [pc, #32]	@ (8009cfc <UDHAL_TIMEOUT_init+0x24>)
{
 8009cdc:	b083      	sub	sp, #12
	STM32MCP_registerTimer(&timeoutHandle);
 8009cde:	f7f7 f9c7 	bl	8001070 <STM32MCP_registerTimer>
	osTimerDef(timeout,UDHAL_TIMEOUT_OVClockFxn);
 8009ce2:	4b07      	ldr	r3, [pc, #28]	@ (8009d00 <UDHAL_TIMEOUT_init+0x28>)
 8009ce4:	2200      	movs	r2, #0
	protocolTimeoutHandle = osTimerCreate(osTimer(timeout),osTimerPeriodic,NULL);
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	4668      	mov	r0, sp
	osTimerDef(timeout,UDHAL_TIMEOUT_OVClockFxn);
 8009cea:	e9cd 3200 	strd	r3, r2, [sp]
	protocolTimeoutHandle = osTimerCreate(osTimer(timeout),osTimerPeriodic,NULL);
 8009cee:	f7fb ff2d 	bl	8005b4c <osTimerCreate>
 8009cf2:	4b04      	ldr	r3, [pc, #16]	@ (8009d04 <UDHAL_TIMEOUT_init+0x2c>)
 8009cf4:	6018      	str	r0, [r3, #0]
}
 8009cf6:	b003      	add	sp, #12
 8009cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cfc:	200005f4 	.word	0x200005f4
 8009d00:	08009cd5 	.word	0x08009cd5
 8009d04:	20005718 	.word	0x20005718

08009d08 <UART_Init>:

UART_HandleTypeDef huart1;
uint8_t UART_OFF = 0x00;

void UART_Init()
{
 8009d08:	b510      	push	{r4, lr}
	  huart1.Instance = USART1;
 8009d0a:	480b      	ldr	r0, [pc, #44]	@ (8009d38 <UART_Init+0x30>)
 8009d0c:	4c0b      	ldr	r4, [pc, #44]	@ (8009d3c <UART_Init+0x34>)
	  huart1.Init.BaudRate = 115200;
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009d0e:	2300      	movs	r3, #0
	  huart1.Init.BaudRate = 115200;
 8009d10:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
	  huart1.Init.StopBits = UART_STOPBITS_1;
	  huart1.Init.Parity = UART_PARITY_NONE;
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8009d14:	220c      	movs	r2, #12
	  huart1.Init.BaudRate = 115200;
 8009d16:	e9c0 4100 	strd	r4, r1, [r0]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8009d1a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8009d1e:	e9c0 3204 	strd	r3, r2, [r0, #16]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d22:	e9c0 3306 	strd	r3, r3, [r0, #24]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009d26:	f7fb fe15 	bl	8005954 <HAL_UART_Init>
 8009d2a:	b900      	cbnz	r0, 8009d2e <UART_Init+0x26>
	  {
	    Error_Handler();
	  }
}
 8009d2c:	bd10      	pop	{r4, pc}
 8009d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    Error_Handler();
 8009d32:	f7f7 bd85 	b.w	8001840 <Error_Handler>
 8009d36:	bf00      	nop
 8009d38:	20005720 	.word	0x20005720
 8009d3c:	40011000 	.word	0x40011000

08009d40 <UART_DeInit>:

uint8_t UART_DeInit()
{
 8009d40:	b508      	push	{r3, lr}
    if(HAL_UART_DeInit(&huart1) == HAL_OK)
 8009d42:	4809      	ldr	r0, [pc, #36]	@ (8009d68 <UART_DeInit+0x28>)
 8009d44:	f7fb fe98 	bl	8005a78 <HAL_UART_DeInit>
 8009d48:	b918      	cbnz	r0, 8009d52 <UART_DeInit+0x12>
    {
    	UART_OFF = 0x01;
 8009d4a:	4b08      	ldr	r3, [pc, #32]	@ (8009d6c <UART_DeInit+0x2c>)
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	7018      	strb	r0, [r3, #0]
    else if(HAL_UART_DeInit(&huart1) != HAL_OK)
    {
    	UART_OFF = 0xFF;
    }
    return UART_OFF;
}
 8009d50:	bd08      	pop	{r3, pc}
    else if(HAL_UART_DeInit(&huart1) != HAL_OK)
 8009d52:	4805      	ldr	r0, [pc, #20]	@ (8009d68 <UART_DeInit+0x28>)
 8009d54:	f7fb fe90 	bl	8005a78 <HAL_UART_DeInit>
    	UART_OFF = 0xFF;
 8009d58:	4b04      	ldr	r3, [pc, #16]	@ (8009d6c <UART_DeInit+0x2c>)
    else if(HAL_UART_DeInit(&huart1) != HAL_OK)
 8009d5a:	b110      	cbz	r0, 8009d62 <UART_DeInit+0x22>
    	UART_OFF = 0xFF;
 8009d5c:	20ff      	movs	r0, #255	@ 0xff
 8009d5e:	7018      	strb	r0, [r3, #0]
}
 8009d60:	bd08      	pop	{r3, pc}
    return UART_OFF;
 8009d62:	7818      	ldrb	r0, [r3, #0]
}
 8009d64:	bd08      	pop	{r3, pc}
 8009d66:	bf00      	nop
 8009d68:	20005720 	.word	0x20005720
 8009d6c:	2000571c 	.word	0x2000571c

08009d70 <memset>:
 8009d70:	4402      	add	r2, r0
 8009d72:	4603      	mov	r3, r0
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d100      	bne.n	8009d7a <memset+0xa>
 8009d78:	4770      	bx	lr
 8009d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d7e:	e7f9      	b.n	8009d74 <memset+0x4>

08009d80 <_reclaim_reent>:
 8009d80:	4b29      	ldr	r3, [pc, #164]	@ (8009e28 <_reclaim_reent+0xa8>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4283      	cmp	r3, r0
 8009d86:	b570      	push	{r4, r5, r6, lr}
 8009d88:	4604      	mov	r4, r0
 8009d8a:	d04b      	beq.n	8009e24 <_reclaim_reent+0xa4>
 8009d8c:	69c3      	ldr	r3, [r0, #28]
 8009d8e:	b1ab      	cbz	r3, 8009dbc <_reclaim_reent+0x3c>
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	b16b      	cbz	r3, 8009db0 <_reclaim_reent+0x30>
 8009d94:	2500      	movs	r5, #0
 8009d96:	69e3      	ldr	r3, [r4, #28]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	5959      	ldr	r1, [r3, r5]
 8009d9c:	2900      	cmp	r1, #0
 8009d9e:	d13b      	bne.n	8009e18 <_reclaim_reent+0x98>
 8009da0:	3504      	adds	r5, #4
 8009da2:	2d80      	cmp	r5, #128	@ 0x80
 8009da4:	d1f7      	bne.n	8009d96 <_reclaim_reent+0x16>
 8009da6:	69e3      	ldr	r3, [r4, #28]
 8009da8:	4620      	mov	r0, r4
 8009daa:	68d9      	ldr	r1, [r3, #12]
 8009dac:	f000 f872 	bl	8009e94 <_free_r>
 8009db0:	69e3      	ldr	r3, [r4, #28]
 8009db2:	6819      	ldr	r1, [r3, #0]
 8009db4:	b111      	cbz	r1, 8009dbc <_reclaim_reent+0x3c>
 8009db6:	4620      	mov	r0, r4
 8009db8:	f000 f86c 	bl	8009e94 <_free_r>
 8009dbc:	6961      	ldr	r1, [r4, #20]
 8009dbe:	b111      	cbz	r1, 8009dc6 <_reclaim_reent+0x46>
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 f867 	bl	8009e94 <_free_r>
 8009dc6:	69e1      	ldr	r1, [r4, #28]
 8009dc8:	b111      	cbz	r1, 8009dd0 <_reclaim_reent+0x50>
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f000 f862 	bl	8009e94 <_free_r>
 8009dd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009dd2:	b111      	cbz	r1, 8009dda <_reclaim_reent+0x5a>
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f000 f85d 	bl	8009e94 <_free_r>
 8009dda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ddc:	b111      	cbz	r1, 8009de4 <_reclaim_reent+0x64>
 8009dde:	4620      	mov	r0, r4
 8009de0:	f000 f858 	bl	8009e94 <_free_r>
 8009de4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009de6:	b111      	cbz	r1, 8009dee <_reclaim_reent+0x6e>
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 f853 	bl	8009e94 <_free_r>
 8009dee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009df0:	b111      	cbz	r1, 8009df8 <_reclaim_reent+0x78>
 8009df2:	4620      	mov	r0, r4
 8009df4:	f000 f84e 	bl	8009e94 <_free_r>
 8009df8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009dfa:	b111      	cbz	r1, 8009e02 <_reclaim_reent+0x82>
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f000 f849 	bl	8009e94 <_free_r>
 8009e02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009e04:	b111      	cbz	r1, 8009e0c <_reclaim_reent+0x8c>
 8009e06:	4620      	mov	r0, r4
 8009e08:	f000 f844 	bl	8009e94 <_free_r>
 8009e0c:	6a23      	ldr	r3, [r4, #32]
 8009e0e:	b14b      	cbz	r3, 8009e24 <_reclaim_reent+0xa4>
 8009e10:	4620      	mov	r0, r4
 8009e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e16:	4718      	bx	r3
 8009e18:	680e      	ldr	r6, [r1, #0]
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f000 f83a 	bl	8009e94 <_free_r>
 8009e20:	4631      	mov	r1, r6
 8009e22:	e7bb      	b.n	8009d9c <_reclaim_reent+0x1c>
 8009e24:	bd70      	pop	{r4, r5, r6, pc}
 8009e26:	bf00      	nop
 8009e28:	200005fc 	.word	0x200005fc

08009e2c <__libc_init_array>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8009e64 <__libc_init_array+0x38>)
 8009e30:	4c0d      	ldr	r4, [pc, #52]	@ (8009e68 <__libc_init_array+0x3c>)
 8009e32:	1b64      	subs	r4, r4, r5
 8009e34:	10a4      	asrs	r4, r4, #2
 8009e36:	2600      	movs	r6, #0
 8009e38:	42a6      	cmp	r6, r4
 8009e3a:	d109      	bne.n	8009e50 <__libc_init_array+0x24>
 8009e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8009e6c <__libc_init_array+0x40>)
 8009e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8009e70 <__libc_init_array+0x44>)
 8009e40:	f000 f87e 	bl	8009f40 <_init>
 8009e44:	1b64      	subs	r4, r4, r5
 8009e46:	10a4      	asrs	r4, r4, #2
 8009e48:	2600      	movs	r6, #0
 8009e4a:	42a6      	cmp	r6, r4
 8009e4c:	d105      	bne.n	8009e5a <__libc_init_array+0x2e>
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
 8009e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e54:	4798      	blx	r3
 8009e56:	3601      	adds	r6, #1
 8009e58:	e7ee      	b.n	8009e38 <__libc_init_array+0xc>
 8009e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e5e:	4798      	blx	r3
 8009e60:	3601      	adds	r6, #1
 8009e62:	e7f2      	b.n	8009e4a <__libc_init_array+0x1e>
 8009e64:	0800a254 	.word	0x0800a254
 8009e68:	0800a254 	.word	0x0800a254
 8009e6c:	0800a254 	.word	0x0800a254
 8009e70:	0800a258 	.word	0x0800a258

08009e74 <__retarget_lock_acquire_recursive>:
 8009e74:	4770      	bx	lr

08009e76 <__retarget_lock_release_recursive>:
 8009e76:	4770      	bx	lr

08009e78 <memcpy>:
 8009e78:	440a      	add	r2, r1
 8009e7a:	4291      	cmp	r1, r2
 8009e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e80:	d100      	bne.n	8009e84 <memcpy+0xc>
 8009e82:	4770      	bx	lr
 8009e84:	b510      	push	{r4, lr}
 8009e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e8e:	4291      	cmp	r1, r2
 8009e90:	d1f9      	bne.n	8009e86 <memcpy+0xe>
 8009e92:	bd10      	pop	{r4, pc}

08009e94 <_free_r>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4605      	mov	r5, r0
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	d041      	beq.n	8009f20 <_free_r+0x8c>
 8009e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ea0:	1f0c      	subs	r4, r1, #4
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	bfb8      	it	lt
 8009ea6:	18e4      	addlt	r4, r4, r3
 8009ea8:	f000 f83e 	bl	8009f28 <__malloc_lock>
 8009eac:	4a1d      	ldr	r2, [pc, #116]	@ (8009f24 <_free_r+0x90>)
 8009eae:	6813      	ldr	r3, [r2, #0]
 8009eb0:	b933      	cbnz	r3, 8009ec0 <_free_r+0x2c>
 8009eb2:	6063      	str	r3, [r4, #4]
 8009eb4:	6014      	str	r4, [r2, #0]
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ebc:	f000 b83a 	b.w	8009f34 <__malloc_unlock>
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d908      	bls.n	8009ed6 <_free_r+0x42>
 8009ec4:	6820      	ldr	r0, [r4, #0]
 8009ec6:	1821      	adds	r1, r4, r0
 8009ec8:	428b      	cmp	r3, r1
 8009eca:	bf01      	itttt	eq
 8009ecc:	6819      	ldreq	r1, [r3, #0]
 8009ece:	685b      	ldreq	r3, [r3, #4]
 8009ed0:	1809      	addeq	r1, r1, r0
 8009ed2:	6021      	streq	r1, [r4, #0]
 8009ed4:	e7ed      	b.n	8009eb2 <_free_r+0x1e>
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	b10b      	cbz	r3, 8009ee0 <_free_r+0x4c>
 8009edc:	42a3      	cmp	r3, r4
 8009ede:	d9fa      	bls.n	8009ed6 <_free_r+0x42>
 8009ee0:	6811      	ldr	r1, [r2, #0]
 8009ee2:	1850      	adds	r0, r2, r1
 8009ee4:	42a0      	cmp	r0, r4
 8009ee6:	d10b      	bne.n	8009f00 <_free_r+0x6c>
 8009ee8:	6820      	ldr	r0, [r4, #0]
 8009eea:	4401      	add	r1, r0
 8009eec:	1850      	adds	r0, r2, r1
 8009eee:	4283      	cmp	r3, r0
 8009ef0:	6011      	str	r1, [r2, #0]
 8009ef2:	d1e0      	bne.n	8009eb6 <_free_r+0x22>
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	6053      	str	r3, [r2, #4]
 8009efa:	4408      	add	r0, r1
 8009efc:	6010      	str	r0, [r2, #0]
 8009efe:	e7da      	b.n	8009eb6 <_free_r+0x22>
 8009f00:	d902      	bls.n	8009f08 <_free_r+0x74>
 8009f02:	230c      	movs	r3, #12
 8009f04:	602b      	str	r3, [r5, #0]
 8009f06:	e7d6      	b.n	8009eb6 <_free_r+0x22>
 8009f08:	6820      	ldr	r0, [r4, #0]
 8009f0a:	1821      	adds	r1, r4, r0
 8009f0c:	428b      	cmp	r3, r1
 8009f0e:	bf04      	itt	eq
 8009f10:	6819      	ldreq	r1, [r3, #0]
 8009f12:	685b      	ldreq	r3, [r3, #4]
 8009f14:	6063      	str	r3, [r4, #4]
 8009f16:	bf04      	itt	eq
 8009f18:	1809      	addeq	r1, r1, r0
 8009f1a:	6021      	streq	r1, [r4, #0]
 8009f1c:	6054      	str	r4, [r2, #4]
 8009f1e:	e7ca      	b.n	8009eb6 <_free_r+0x22>
 8009f20:	bd38      	pop	{r3, r4, r5, pc}
 8009f22:	bf00      	nop
 8009f24:	200058a0 	.word	0x200058a0

08009f28 <__malloc_lock>:
 8009f28:	4801      	ldr	r0, [pc, #4]	@ (8009f30 <__malloc_lock+0x8>)
 8009f2a:	f7ff bfa3 	b.w	8009e74 <__retarget_lock_acquire_recursive>
 8009f2e:	bf00      	nop
 8009f30:	2000589c 	.word	0x2000589c

08009f34 <__malloc_unlock>:
 8009f34:	4801      	ldr	r0, [pc, #4]	@ (8009f3c <__malloc_unlock+0x8>)
 8009f36:	f7ff bf9e 	b.w	8009e76 <__retarget_lock_release_recursive>
 8009f3a:	bf00      	nop
 8009f3c:	2000589c 	.word	0x2000589c

08009f40 <_init>:
 8009f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f42:	bf00      	nop
 8009f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f46:	bc08      	pop	{r3}
 8009f48:	469e      	mov	lr, r3
 8009f4a:	4770      	bx	lr

08009f4c <_fini>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	bf00      	nop
 8009f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f52:	bc08      	pop	{r3}
 8009f54:	469e      	mov	lr, r3
 8009f56:	4770      	bx	lr
