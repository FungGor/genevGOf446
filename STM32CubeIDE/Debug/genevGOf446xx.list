
genevGOf446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800aabc  0800aabc  0000babc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800add4  0800add4  0000c63c  2**0
                  CONTENTS
  4 .ARM          00000008  0800add4  0800add4  0000bdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800addc  0800addc  0000c63c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800addc  0800addc  0000bddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade0  0800ade0  0000bde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000063c  20000000  0800ade4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005284  20000640  0800b420  0000c640  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200058c4  0800b420  0000c8c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c63c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00053c6d  00000000  00000000  0000c66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b2fb  00000000  00000000  000602d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002600  00000000  00000000  0006b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000031fe  00000000  00000000  0006dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011c64  00000000  00000000  00070dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00057f92  00000000  00000000  00082a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd8ce  00000000  00000000  000da9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d829a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006774  00000000  00000000  001d82e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00017f56  00000000  00000000  001dea54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  001f69aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000640 	.word	0x20000640
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aaa4 	.word	0x0800aaa4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000644 	.word	0x20000644
 800020c:	0800aaa4 	.word	0x0800aaa4

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2iz>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af0:	d215      	bcs.n	8000b1e <__aeabi_d2iz+0x36>
 8000af2:	d511      	bpl.n	8000b18 <__aeabi_d2iz+0x30>
 8000af4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d912      	bls.n	8000b24 <__aeabi_d2iz+0x3c>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d105      	bne.n	8000b30 <__aeabi_d2iz+0x48>
 8000b24:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b28:	bf08      	it	eq
 8000b2a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <powerModeInit>:

static bool POWER_ON = true;

void powerModeInit()
{
	go_powerOnRegister(&POWER_ON);
 8000ec8:	4801      	ldr	r0, [pc, #4]	@ (8000ed0 <powerModeInit+0x8>)
 8000eca:	f000 bc61 	b.w	8001790 <go_powerOnRegister>
 8000ece:	bf00      	nop
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <powerManagementInit>:
}

void powerManagementInit()
{
	power_management_register(&POWER_ON);
 8000ed4:	4801      	ldr	r0, [pc, #4]	@ (8000edc <powerManagementInit+0x8>)
 8000ed6:	f000 bb23 	b.w	8001520 <power_management_register>
 8000eda:	bf00      	nop
 8000edc:	20000000 	.word	0x20000000

08000ee0 <changePowerMode>:
}

void changePowerMode()
{
	if(POWER_ON == true)
 8000ee0:	4b02      	ldr	r3, [pc, #8]	@ (8000eec <changePowerMode+0xc>)
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	b10a      	cbz	r2, 8000eea <changePowerMode+0xa>
	{
		POWER_ON = false;
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
	}
}
 8000eea:	4770      	bx	lr
 8000eec:	20000000 	.word	0x20000000

08000ef0 <gotoSLEEP>:

void gotoSLEEP()
{
	ShutDownTask();
 8000ef0:	f009 b9bc 	b.w	800a26c <ShutDownTask>

08000ef4 <wakeUp>:
}

void wakeUp()
{
	bootStart();
 8000ef4:	f009 b9ce 	b.w	800a294 <bootStart>

08000ef8 <getBootSource>:
}

uint8_t getBootSource()
{
	uint8_t Boot = GET_RESET_SOURCE();
 8000ef8:	f009 b994 	b.w	800a224 <GET_RESET_SOURCE>

08000efc <ETU_StatusRegister>:
/*Stores Brake and Throttle Parameters*/
uint16_t OBD_BrakeThrottleSensor[BRAKE_THROTTLE_SENSOR_PAYLOAD] = {0};

void ETU_StatusRegister(MOTOR *Motor)
{
	motorPtr = Motor;
 8000efc:	4b01      	ldr	r3, [pc, #4]	@ (8000f04 <ETU_StatusRegister+0x8>)
 8000efe:	6018      	str	r0, [r3, #0]
}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000660 	.word	0x20000660

08000f08 <ETU__brakeThrottleSensorRegister>:

void ETU__brakeThrottleSensorRegister(brakeAndThrottle_t *brakeThrottle)
{
	brakeThrottleSensorPtr = brakeThrottle;
 8000f08:	4b01      	ldr	r3, [pc, #4]	@ (8000f10 <ETU__brakeThrottleSensorRegister+0x8>)
 8000f0a:	6018      	str	r0, [r3, #0]
}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000065c 	.word	0x2000065c

08000f14 <brake_and_throttle_init>:
brakeAndThrottle_t ptr_brakeAndThrottle;
int16_t torque = 0;

void brake_and_throttle_init()
{
	ptr_brakeAndThrottle.IQ_applied = 0;
 8000f14:	4803      	ldr	r0, [pc, #12]	@ (8000f24 <brake_and_throttle_init+0x10>)
 8000f16:	2300      	movs	r3, #0
	ptr_brakeAndThrottle.throttlePercent = 0;
	ptr_brakeAndThrottle.throttleTriggered = false;
 8000f18:	e9c0 3300 	strd	r3, r3, [r0]
	ptr_brakeAndThrottle.brakeTriggered   = false;
	ptr_brakeAndThrottle.allowable_rpm = 0;
 8000f1c:	6083      	str	r3, [r0, #8]
	ptr_brakeAndThrottle.speed_mode_IQmax = 0;
	ptr_brakeAndThrottle.ramp_rate  = 0;
 8000f1e:	8183      	strh	r3, [r0, #12]
	ptr_brakeAndThrottle.throttle_voltage = 0;
	ETU__brakeThrottleSensorRegister(&ptr_brakeAndThrottle);
 8000f20:	f7ff bff2 	b.w	8000f08 <ETU__brakeThrottleSensorRegister>
 8000f24:	20000668 	.word	0x20000668

08000f28 <setIQ>:
}

void setIQ(int16_t IQ)
{
	ptr_brakeAndThrottle.IQ_applied = IQ;
 8000f28:	4b01      	ldr	r3, [pc, #4]	@ (8000f30 <setIQ+0x8>)
 8000f2a:	8018      	strh	r0, [r3, #0]
}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000668 	.word	0x20000668

08000f34 <set_ThrottlePercent>:
	return ptr_brakeAndThrottle.IQ_applied;
}

void set_ThrottlePercent(uint16_t percentage)
{
	ptr_brakeAndThrottle.throttlePercent = percentage;
 8000f34:	4b01      	ldr	r3, [pc, #4]	@ (8000f3c <set_ThrottlePercent+0x8>)
 8000f36:	8058      	strh	r0, [r3, #2]
}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000668 	.word	0x20000668

08000f40 <throttleSignalInput>:
	return ptr_brakeAndThrottle.throttlePercent;
}

void throttleSignalInput()
{
	accelerateIQMotor(ptr_brakeAndThrottle.IQ_applied,0);
 8000f40:	4b02      	ldr	r3, [pc, #8]	@ (8000f4c <throttleSignalInput+0xc>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000f48:	f009 b91a 	b.w	800a180 <accelerateIQMotor>
 8000f4c:	20000668 	.word	0x20000668

08000f50 <refreshThrottleStatus>:
	return ptr_brakeAndThrottle.IQ_applied;
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <refreshThrottleStatus+0x14>)
 8000f52:	f9b3 2000 	ldrsh.w	r2, [r3]
#endif
}

void refreshThrottleStatus()
{
	if (getIQ() == 0)
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	d001      	beq.n	8000f5e <refreshThrottleStatus+0xe>
	{
		ptr_brakeAndThrottle.throttleTriggered = false;
	}
	else if(getIQ() > 0)
 8000f5a:	dd01      	ble.n	8000f60 <refreshThrottleStatus+0x10>
	{
		ptr_brakeAndThrottle.throttleTriggered = true;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	711a      	strb	r2, [r3, #4]
	}
}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000668 	.word	0x20000668

08000f68 <updateBrakeStatus>:
	return ptr_brakeAndThrottle.throttle_voltage;
}

void updateBrakeStatus(bool status)
{
	ptr_brakeAndThrottle.brakeTriggered = status;
 8000f68:	4b01      	ldr	r3, [pc, #4]	@ (8000f70 <updateBrakeStatus+0x8>)
 8000f6a:	7158      	strb	r0, [r3, #5]
}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000668 	.word	0x20000668

08000f74 <getBrakeStatus>:

bool getBrakeStatus()
{
	return ptr_brakeAndThrottle.brakeTriggered;
 8000f74:	4b01      	ldr	r3, [pc, #4]	@ (8000f7c <getBrakeStatus+0x8>)
}
 8000f76:	7958      	ldrb	r0, [r3, #5]
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000668 	.word	0x20000668

08000f80 <changeSpeedMode>:

void changeSpeedMode(int16_t speed_mode_IQmax, int16_t allowable_rpm, uint16_t ramp_rate)
{
	ptr_brakeAndThrottle.speed_mode_IQmax = speed_mode_IQmax;
 8000f80:	4b02      	ldr	r3, [pc, #8]	@ (8000f8c <changeSpeedMode+0xc>)
 8000f82:	8118      	strh	r0, [r3, #8]
	ptr_brakeAndThrottle.allowable_rpm    = allowable_rpm;
 8000f84:	80d9      	strh	r1, [r3, #6]
	ptr_brakeAndThrottle.ramp_rate        = ramp_rate;
 8000f86:	815a      	strh	r2, [r3, #10]
}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000668 	.word	0x20000668

08000f90 <get_ThrottleInformation>:
	return ptr_brakeAndThrottle.IQ_applied;
 8000f90:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <get_ThrottleInformation+0x10>)

int16_t Iq_applied = 0;
uint16_t Iq_Percentage = 0;
void get_ThrottleInformation()
{
    Iq_applied = getIQ();
 8000f92:	4904      	ldr	r1, [pc, #16]	@ (8000fa4 <get_ThrottleInformation+0x14>)
    Iq_Percentage = getThrottlePercent();
 8000f94:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <get_ThrottleInformation+0x18>)
    Iq_applied = getIQ();
 8000f96:	8818      	ldrh	r0, [r3, #0]
    Iq_Percentage = getThrottlePercent();
 8000f98:	885b      	ldrh	r3, [r3, #2]
    Iq_applied = getIQ();
 8000f9a:	8008      	strh	r0, [r1, #0]
    Iq_Percentage = getThrottlePercent();
 8000f9c:	8013      	strh	r3, [r2, #0]
}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000668 	.word	0x20000668
 8000fa4:	20000666 	.word	0x20000666
 8000fa8:	20000664 	.word	0x20000664

08000fac <driveStop>:

void driveStop()
{
	motorStop();
 8000fac:	f009 b8f0 	b.w	800a190 <motorStop>

08000fb0 <getLightSensorStatus>:
    lightSensor = lightStatus;
}

uint8_t getLightSensorStatus()
{
	return lightSensor;
 8000fb0:	4b01      	ldr	r3, [pc, #4]	@ (8000fb8 <getLightSensorStatus+0x8>)
}
 8000fb2:	7818      	ldrb	r0, [r3, #0]
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000001 	.word	0x20000001

08000fbc <motor_param_init>:

MOTOR ptrMotor;

void motor_param_init()
{
	ptrMotor.SPEED = 0;
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <motor_param_init+0x24>)
 8000fbe:	2300      	movs	r3, #0
	ptrMotor.CURRENT = 0;
	ptrMotor.VBUS = 0;
 8000fc0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	ptrMotor.milliVolts = 0;
	ptrMotor.POWERmW = 0;
	ptrMotor.Iq = 0;
 8000fc4:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ptrMotor.Id = 0;
	ptrMotor.milliAmpere = 0;
	ptrMotor.motorTemperature = 0;
	ptrMotor.driverTemperature = 0;
 8000fc8:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
	ptrMotor.SPEED = 0;
 8000fcc:	8003      	strh	r3, [r0, #0]
	ptrMotor.milliVolts = 0;
 8000fce:	60c3      	str	r3, [r0, #12]
	ptrMotor.Id = 0;
 8000fd0:	61c3      	str	r3, [r0, #28]
	ptrMotor.milliAmpere = 0;
 8000fd2:	8403      	strh	r3, [r0, #32]
	ptrMotor.isMotorOverTemperature = false;
 8000fd4:	8583      	strh	r3, [r0, #44]	@ 0x2c
	ptrMotor.isDriverOverTemperature = false;
	ptrMotor.hallSensorState = 0;
 8000fd6:	f880 302e 	strb.w	r3, [r0, #46]	@ 0x2e
	ptrMotor.electricAngle = 0;
 8000fda:	8603      	strh	r3, [r0, #48]	@ 0x30
	ETU_StatusRegister(&ptrMotor);
 8000fdc:	f7ff bf8e 	b.w	8000efc <ETU_StatusRegister>
 8000fe0:	20000678 	.word	0x20000678

08000fe4 <motor_speed>:
}

void motor_speed()
{
 8000fe4:	b508      	push	{r3, lr}
	ptrMotor.SPEED = getSpeed();
 8000fe6:	f009 f8d5 	bl	800a194 <getSpeed>
 8000fea:	4b01      	ldr	r3, [pc, #4]	@ (8000ff0 <motor_speed+0xc>)
 8000fec:	8018      	strh	r0, [r3, #0]
}
 8000fee:	bd08      	pop	{r3, pc}
 8000ff0:	20000678 	.word	0x20000678

08000ff4 <motor_rms_current>:
{
	ptrMotor.CURRENT = getCurrent();
}

void motor_rms_current()
{
 8000ff4:	b508      	push	{r3, lr}
	ptrMotor.RMS_CURRENT = getRMSCurrent();
 8000ff6:	f009 f8d7 	bl	800a1a8 <getRMSCurrent>
 8000ffa:	4b02      	ldr	r3, [pc, #8]	@ (8001004 <motor_rms_current+0x10>)
 8000ffc:	ed83 0a04 	vstr	s0, [r3, #16]

}
 8001000:	bd08      	pop	{r3, pc}
 8001002:	bf00      	nop
 8001004:	20000678 	.word	0x20000678

08001008 <setDCVoltage>:

void setDCVoltage(uint32_t voltage)
{
	ptrMotor.VBUS = voltage;
 8001008:	4b01      	ldr	r3, [pc, #4]	@ (8001010 <setDCVoltage+0x8>)
 800100a:	6098      	str	r0, [r3, #8]
}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000678 	.word	0x20000678

08001014 <setBatteryVoltage>:
{
	return ptrMotor.VBUS;
}

void setBatteryVoltage(int32_t milliVoltage)
{
 8001014:	ee07 0a90 	vmov	s15, r0
	float conversionFactor = ADC_REFERENCE_VOLTAGE/VBUS_PARTITIONING_FACTOR;
	float milliVolts = milliVoltage*conversionFactor;
	milliVolts = milliVolts/65536;
	milliVolts = milliVolts*1000;
 8001018:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001030 <setBatteryVoltage+0x1c>
	/*Conversion Factor*/
	ptrMotor.milliVolts = milliVolts;
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <setBatteryVoltage+0x20>)
	float milliVolts = milliVoltage*conversionFactor;
 800101e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	milliVolts = milliVolts*1000;
 8001022:	ee67 7a87 	vmul.f32	s15, s15, s14
	ptrMotor.milliVolts = milliVolts;
 8001026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800102e:	4770      	bx	lr
 8001030:	3f707f2a 	.word	0x3f707f2a
 8001034:	20000678 	.word	0x20000678

08001038 <getBatteryVoltage>:

int32_t getBatteryVoltage()
{
	return ptrMotor.milliVolts;
 8001038:	4b01      	ldr	r3, [pc, #4]	@ (8001040 <getBatteryVoltage+0x8>)
}
 800103a:	68d8      	ldr	r0, [r3, #12]
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000678 	.word	0x20000678

08001044 <setDriverTemperature>:
	return false;
}

void setDriverTemperature(int32_t temperature)
{
	ptrMotor.driverTemperature = temperature;
 8001044:	4b01      	ldr	r3, [pc, #4]	@ (800104c <setDriverTemperature+0x8>)
 8001046:	6298      	str	r0, [r3, #40]	@ 0x28
}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000678 	.word	0x20000678

08001050 <getDriverTemperature>:

int32_t getDriverTemperature()
{
	return ptrMotor.driverTemperature;
 8001050:	4b01      	ldr	r3, [pc, #4]	@ (8001058 <getDriverTemperature+0x8>)
}
 8001052:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000678 	.word	0x20000678

0800105c <setMOTORPower>:
	return ptrMotor.SPEED;
}

void setMOTORPower(int32_t powerSet)
{
	ptrMotor.POWERmW = powerSet*1000;
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <setMOTORPower+0x10>)
 800105e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001062:	fb02 f000 	mul.w	r0, r2, r0
 8001066:	6158      	str	r0, [r3, #20]
}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000678 	.word	0x20000678

08001070 <getIqIdMotor>:
{
	return ptrMotor.POWERmW;
}

void getIqIdMotor()
{
 8001070:	b500      	push	{lr}
 8001072:	b083      	sub	sp, #12
	qd_t torqueCurrent;
	torqueCurrent = MC_GetIqdMotor1();
 8001074:	f000 fe7a 	bl	8001d6c <MC_GetIqdMotor1>
	ptrMotor.Iq = (int32_t)torqueCurrent.q;
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <getIqIdMotor+0x18>)
 800107a:	b202      	sxth	r2, r0
	ptrMotor.Id = (int32_t)torqueCurrent.d;
 800107c:	1400      	asrs	r0, r0, #16
 800107e:	e9c3 2006 	strd	r2, r0, [r3, #24]
}
 8001082:	b003      	add	sp, #12
 8001084:	f85d fb04 	ldr.w	pc, [sp], #4
 8001088:	20000678 	.word	0x20000678

0800108c <calcDC>:

void calcDC()
{
	ptrMotor.milliAmpere = ptrMotor.POWERmW / ptrMotor.VBUS;
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <calcDC+0x10>)
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	6899      	ldr	r1, [r3, #8]
 8001092:	fbb2 f2f1 	udiv	r2, r2, r1
 8001096:	841a      	strh	r2, [r3, #32]
	ptrMotor.milliAmpere = (uint16_t) ptrMotor.milliAmpere;
	/*Apply Moving average filtering (Optional)*/
}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000678 	.word	0x20000678

080010a0 <getDC>:

int32_t getDC()
{
	return (int32_t)ptrMotor.milliAmpere;
 80010a0:	4b01      	ldr	r3, [pc, #4]	@ (80010a8 <getDC+0x8>)
}
 80010a2:	8c18      	ldrh	r0, [r3, #32]
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000678 	.word	0x20000678

080010ac <setHallState>:

void setHallState(uint8_t hall)
{
	ptrMotor.hallSensorState = hall;
 80010ac:	4b01      	ldr	r3, [pc, #4]	@ (80010b4 <setHallState+0x8>)
 80010ae:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
}
 80010b2:	4770      	bx	lr
 80010b4:	20000678 	.word	0x20000678

080010b8 <set_tail_light_on>:
	tail_light_flash();
}

void set_tail_light_on()
{
	tail_light_turnon();
 80010b8:	f009 b852 	b.w	800a160 <tail_light_turnon>

080010bc <set_tail_light_off>:
}

void set_tail_light_off()
{
    /*The tail light is turned off when we release the brake*/
	tail_light_turnoff();
 80010bc:	f009 b858 	b.w	800a170 <tail_light_turnoff>

080010c0 <led_indicator_on>:
}

uint8_t led_indicator_on()
{
 80010c0:	b508      	push	{r3, lr}
	dashboard_indicator_on();
 80010c2:	f009 f82d 	bl	800a120 <dashboard_indicator_on>
	return 0x01;
}
 80010c6:	2001      	movs	r0, #1
 80010c8:	bd08      	pop	{r3, pc}
 80010ca:	bf00      	nop

080010cc <led_indicator_off>:

uint8_t led_indicator_off()
{
 80010cc:	b508      	push	{r3, lr}
	dashboard_indicator_off();
 80010ce:	f009 f837 	bl	800a140 <dashboard_indicator_off>
	return 0x00;
}
 80010d2:	2000      	movs	r0, #0
 80010d4:	bd08      	pop	{r3, pc}
 80010d6:	bf00      	nop

080010d8 <error_indicator_on>:

void error_indicator_on()
{
	fault_warning_on();
 80010d8:	f009 b82a 	b.w	800a130 <fault_warning_on>

080010dc <error_indicator_off>:
}

void error_indicator_off()
{
	fault_warning_off();
 80010dc:	f009 b838 	b.w	800a150 <fault_warning_off>

080010e0 <set_tail_light_status>:
}

void set_tail_light_status(uint8_t status)
{
	lightStatus = status;
 80010e0:	4b01      	ldr	r3, [pc, #4]	@ (80010e8 <set_tail_light_status+0x8>)
 80010e2:	7018      	strb	r0, [r3, #0]

}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200006ac 	.word	0x200006ac

080010ec <get_tail_light_status>:

uint8_t get_tail_light_status()
{
	return lightStatus;
 80010ec:	4b01      	ldr	r3, [pc, #4]	@ (80010f4 <get_tail_light_status+0x8>)
}
 80010ee:	7818      	ldrb	r0, [r3, #0]
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	200006ac 	.word	0x200006ac

080010f8 <get_tail_light_mode>:

uint8_t get_tail_light_mode()
{
 80010f8:	b508      	push	{r3, lr}
	uint8_t mode = 0xFF;
	if(getBrakeStatus() == 0x01)
 80010fa:	f7ff ff3b 	bl	8000f74 <getBrakeStatus>
 80010fe:	b108      	cbz	r0, 8001104 <get_tail_light_mode+0xc>
	{
		mode = ESCOOTER_TOGGLE_TAIL_LIGHT;
 8001100:	2005      	movs	r0, #5
			mode = ESCOOTER_TAIL_LIGHT_OFF;
		}

	}
	return mode;
}
 8001102:	bd08      	pop	{r3, pc}
	else if(getBrakeStatus() == 0x00)
 8001104:	f7ff ff36 	bl	8000f74 <getBrakeStatus>
 8001108:	b940      	cbnz	r0, 800111c <get_tail_light_mode+0x24>
		if(lightStatus == 0x01)
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <get_tail_light_mode+0x2c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d006      	beq.n	8001120 <get_tail_light_mode+0x28>
			mode = ESCOOTER_TAIL_LIGHT_OFF;
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf14      	ite	ne
 8001116:	20ff      	movne	r0, #255	@ 0xff
 8001118:	2006      	moveq	r0, #6
}
 800111a:	bd08      	pop	{r3, pc}
	uint8_t mode = 0xFF;
 800111c:	20ff      	movs	r0, #255	@ 0xff
}
 800111e:	bd08      	pop	{r3, pc}
			mode = ESCOOTER_TAIL_LIGHT_ON;
 8001120:	2008      	movs	r0, #8
}
 8001122:	bd08      	pop	{r3, pc}
 8001124:	200006ac 	.word	0x200006ac

08001128 <toggle_tail_light>:

uint8_t toggle_tail_light(uint8_t tailLightStatusOld)
{
 8001128:	b508      	push	{r3, lr}
	// toggling between tail light On and Off occurs at a rate of N2_TIME
	if(tailLightStatusOld == 0) //if tail light is OFF, toggle tail light ON
 800112a:	b918      	cbnz	r0, 8001134 <toggle_tail_light+0xc>
	{
		tail_light_turnon();
 800112c:	f009 f818 	bl	800a160 <tail_light_turnon>
		tailLightStatusOld = 1;
 8001130:	2001      	movs	r0, #1
	{
		set_tail_light_off();
		tailLightStatusOld = 0;
	}
	return tailLightStatusOld;
}
 8001132:	bd08      	pop	{r3, pc}
	tail_light_turnoff();
 8001134:	f009 f81c 	bl	800a170 <tail_light_turnoff>
		tailLightStatusOld = 0;
 8001138:	2000      	movs	r0, #0
}
 800113a:	bd08      	pop	{r3, pc}

0800113c <lightSensorStateChange>:

void lightSensorStateChange()
{
 800113c:	b508      	push	{r3, lr}
   if(getLightSensorStatus() == 0x01)
 800113e:	f7ff ff37 	bl	8000fb0 <getLightSensorStatus>
 8001142:	2801      	cmp	r0, #1
 8001144:	d007      	beq.n	8001156 <lightSensorStateChange+0x1a>
   {
	   tail_light_turnon();
   }
   else if(getLightSensorStatus() == 0x00)
 8001146:	f7ff ff33 	bl	8000fb0 <getLightSensorStatus>
 800114a:	b100      	cbz	r0, 800114e <lightSensorStateChange+0x12>
   {
	   set_tail_light_off();
   }
}
 800114c:	bd08      	pop	{r3, pc}
 800114e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tail_light_turnoff();
 8001152:	f009 b80d 	b.w	800a170 <tail_light_turnoff>
}
 8001156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	   tail_light_turnon();
 800115a:	f009 b801 	b.w	800a160 <tail_light_turnon>
 800115e:	bf00      	nop

08001160 <BATTERYCURRENT_Clear>:
{
	pHandle->avBatteryCurrent_s16A = 0u;
	pHandle->rawCurrent = 0u;
	pHandle->sum_current_s16A = 0u;
	pHandle->old_sample_current_s16A = 0u;
	pHandle->currentBuffer[pHandle->LowPassFilterBW] = (uint16_t){0};
 8001160:	8c01      	ldrh	r1, [r0, #32]
 8001162:	6a42      	ldr	r2, [r0, #36]	@ 0x24
	pHandle->rawCurrent = 0u;
 8001164:	2300      	movs	r3, #0
 8001166:	e9c0 3306 	strd	r3, r3, [r0, #24]
	pHandle->currentBuffer[pHandle->LowPassFilterBW] = (uint16_t){0};
 800116a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	pHandle->index = 0u;
 800116e:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
	pHandle->elem = 0u;
 8001172:	8503      	strh	r3, [r0, #40]	@ 0x28

	pHandle->_Super.AvBusCurrent_mA = 0u;
	pHandle->_Super.LatestConv = 0u;
 8001174:	f8c0 3002 	str.w	r3, [r0, #2]
	pHandle->_Super.FaultState = 0;
 8001178:	8103      	strh	r3, [r0, #8]

}
 800117a:	4770      	bx	lr

0800117c <BATTERYCURRENT_Init>:
{
 800117c:	b510      	push	{r4, lr}
 800117e:	4604      	mov	r4, r0
	pHandle->convHandle = RCM_RegisterRegConv(&pHandle->batteryCurrentRegConv);
 8001180:	300c      	adds	r0, #12
 8001182:	f002 f84b 	bl	800321c <RCM_RegisterRegConv>
 8001186:	f884 002b 	strb.w	r0, [r4, #43]	@ 0x2b
	BATTERYCURRENT_Clear(pHandle);
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff ffe8 	bl	8001160 <BATTERYCURRENT_Clear>
}
 8001190:	bd10      	pop	{r4, pc}
 8001192:	bf00      	nop

08001194 <BATTERYCURRENT_CalcAvCurrentOrigin>:
  *
  *  @r Fault status : Error reported in case of an over current detection (if necessary)
  */
uint16_t dllmcfh = 0;
__weak uint16_t BATTERYCURRENT_CalcAvCurrentOrigin(BatteryCurrent_Handle_t *pHandle)
{
 8001194:	b570      	push	{r4, r5, r6, lr}
 8001196:	4605      	mov	r5, r0
	uint32_t wTemp; /*Final result of raw ADC samples*/
	uint16_t hAux; /*Raw ADC Values of Current Sensor ZXCT1084E5TA*/
	uint8_t i;

	/*Performs ADC Conversion to get the raw data*/
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8001198:	f890 002b 	ldrb.w	r0, [r0, #43]	@ 0x2b
 800119c:	f002 f918 	bl	80033d0 <RCM_ExecRegularConv>
    dllmcfh = hAux;
 80011a0:	4a14      	ldr	r2, [pc, #80]	@ (80011f4 <BATTERYCURRENT_CalcAvCurrentOrigin+0x60>)
    if( hAux != 0xFFFFu)
 80011a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011a6:	4298      	cmp	r0, r3
    dllmcfh = hAux;
 80011a8:	8010      	strh	r0, [r2, #0]
    if( hAux != 0xFFFFu)
 80011aa:	d01f      	beq.n	80011ec <BATTERYCURRENT_CalcAvCurrentOrigin+0x58>
    {
    	/*Put all raw ADC values (Samples) of ZXCT1084E5TA into currentBuffer samples */
    	pHandle->currentBuffer[pHandle->index] = hAux;
 80011ac:	4684      	mov	ip, r0
 80011ae:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80011b0:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 80011b4:	f826 c010 	strh.w	ip, [r6, r0, lsl #1]
    	wTemp = 0;
    	for(i = 0; i < pHandle->LowPassFilterBW; i++)
 80011b8:	8c2c      	ldrh	r4, [r5, #32]
 80011ba:	b1cc      	cbz	r4, 80011f0 <BATTERYCURRENT_CalcAvCurrentOrigin+0x5c>
 80011bc:	2300      	movs	r3, #0
    	wTemp = 0;
 80011be:	461a      	mov	r2, r3
    	{
    		/*Sum the samples of raw ADC data*/
    		wTemp += pHandle->currentBuffer[i];
 80011c0:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    	for(i = 0; i < pHandle->LowPassFilterBW; i++)
 80011c4:	3301      	adds	r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	42a3      	cmp	r3, r4
    		wTemp += pHandle->currentBuffer[i];
 80011ca:	440a      	add	r2, r1
    	for(i = 0; i < pHandle->LowPassFilterBW; i++)
 80011cc:	d3f8      	bcc.n	80011c0 <BATTERYCURRENT_CalcAvCurrentOrigin+0x2c>
    	}
    	/*Final Result*/
    	wTemp = wTemp / pHandle->LowPassFilterBW;
 80011ce:	fbb2 f2f4 	udiv	r2, r2, r4
    	pHandle->_Super.AvBusCurrent_s16A = ( uint16_t ) wTemp;
    	pHandle->_Super.LatestConv = hAux;

    	if(pHandle->index < pHandle->LowPassFilterBW - 1)
 80011d2:	1e63      	subs	r3, r4, #1
 80011d4:	4298      	cmp	r0, r3
    	{
    		pHandle->index ++;
 80011d6:	bfba      	itte	lt
 80011d8:	3001      	addlt	r0, #1
 80011da:	b2c3      	uxtblt	r3, r0
 80011dc:	2300      	movge	r3, #0
    	pHandle->_Super.AvBusCurrent_s16A = ( uint16_t ) wTemp;
 80011de:	b290      	uxth	r0, r2
    		pHandle->index ++;
 80011e0:	f885 302a 	strb.w	r3, [r5, #42]	@ 0x2a
    	pHandle->_Super.AvBusCurrent_s16A = ( uint16_t ) wTemp;
 80011e4:	80e8      	strh	r0, [r5, #6]
    	pHandle->_Super.LatestConv = hAux;
 80011e6:	f8a5 c002 	strh.w	ip, [r5, #2]
    		pHandle->index = 0;
    	}
    }
    //BATTERYCURRENT_SetRawCurrent(pHandle->_Super.AvBusCurrent_s16A);
    return (pHandle->_Super.AvBusCurrent_s16A) ; /*Should return pHandle->_Super.AvBusCurrent_s16A */
}
 80011ea:	bd70      	pop	{r4, r5, r6, pc}
    return (pHandle->_Super.AvBusCurrent_s16A) ; /*Should return pHandle->_Super.AvBusCurrent_s16A */
 80011ec:	88e8      	ldrh	r0, [r5, #6]
}
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
    	wTemp = wTemp / pHandle->LowPassFilterBW;
 80011f0:	deff      	udf	#255	@ 0xff
 80011f2:	bf00      	nop
 80011f4:	200006ae 	.word	0x200006ae

080011f8 <MOTORDRIVERTEMP_Clear>:
__weak void MOTORDRIVERTEMP_Clear(DriverTemp_Handle_t *pHandle)
{
	pHandle->avgDriverNTCVoltage = 0u;
	pHandle->avgDriverTemp = 0u;
	pHandle->avgDriverNTCResistance = 0u;
	pHandle->driverNTCVoltageBuffer[pHandle->lowPassFilterBandwidth] = (uint16_t){0};
 80011f8:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80011fa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
	pHandle->avgDriverNTCVoltage = 0u;
 80011fc:	2300      	movs	r3, #0
	pHandle->avgDriverNTCResistance = 0u;
 80011fe:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
	pHandle->avgDriverNTCVoltage = 0u;
 8001202:	8403      	strh	r3, [r0, #32]
	pHandle->driverNTCVoltageBuffer[pHandle->lowPassFilterBandwidth] = (uint16_t){0};
 8001204:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

	pHandle->_Super.AvDriverOutputVoltage = 0u;
	pHandle->_Super.AvDriverTemp = 0u;
	pHandle->_Super.AvDriverTemp_s16R = 0u;
	pHandle->_Super.AvDriverResistance_R = 0u;
 8001208:	60c3      	str	r3, [r0, #12]
	pHandle->_Super.LatestConv = 0u;
 800120a:	f8c0 3002 	str.w	r3, [r0, #2]
 800120e:	f8c0 3006 	str.w	r3, [r0, #6]
	pHandle->_Super.FaultState = 0u;
 8001212:	8203      	strh	r3, [r0, #16]
}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <MOTORDRIVERTEMP_Init>:
{
 8001218:	b510      	push	{r4, lr}
 800121a:	4604      	mov	r4, r0
	pHandle->convHandle = RCM_RegisterRegConv(&pHandle->driverTemp);
 800121c:	3014      	adds	r0, #20
 800121e:	f001 fffd 	bl	800321c <RCM_RegisterRegConv>
 8001222:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
	MOTORDRIVERTEMP_Clear(pHandle);
 8001226:	4620      	mov	r0, r4
 8001228:	f7ff ffe6 	bl	80011f8 <MOTORDRIVERTEMP_Clear>
}
 800122c:	bd10      	pop	{r4, pc}
 800122e:	bf00      	nop

08001230 <MOTORDRIVERTEMP_CalcAvOutputVoltageOrigin>:
  *  @p pHandle : Pointer on Handle structure of DriverTemp_Handle_t component
  *
  *  @r Fault status : Error reported in case of an over temperature detection (if necessary)
  */
__weak void MOTORDRIVERTEMP_CalcAvOutputVoltageOrigin(DriverTemp_Handle_t *pHandle)
{
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	4605      	mov	r5, r0
	uint32_t wTemp; /*Final result of raw ADC samples*/
	uint16_t hAux; /*Raw ADC Values of NTC CMFAX103F3950FB*/
	uint8_t i;
	/*Performs ADC Conversion to get the raw data*/
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8001234:	f890 003b 	ldrb.w	r0, [r0, #59]	@ 0x3b
 8001238:	f002 f8ca 	bl	80033d0 <RCM_ExecRegularConv>
    if( hAux != 0xFFFFu)
 800123c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001240:	4298      	cmp	r0, r3
 8001242:	d020      	beq.n	8001286 <MOTORDRIVERTEMP_CalcAvOutputVoltageOrigin+0x56>
    {
    	/*Put all raw ADC values (Samples) of NTC NTCG163JF103FT into currentBuffer samples */
    	pHandle->driverNTCVoltageBuffer[pHandle->index] = hAux;
 8001244:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8001246:	f895 c03a 	ldrb.w	ip, [r5, #58]	@ 0x3a
 800124a:	f826 001c 	strh.w	r0, [r6, ip, lsl #1]
    	wTemp = 0;
    	for(i = 0; i < pHandle->lowPassFilterBandwidth; i++)
 800124e:	8dac      	ldrh	r4, [r5, #44]	@ 0x2c
 8001250:	b1d4      	cbz	r4, 8001288 <MOTORDRIVERTEMP_CalcAvOutputVoltageOrigin+0x58>
 8001252:	2300      	movs	r3, #0
    	wTemp = 0;
 8001254:	461a      	mov	r2, r3
    	{
    		/*Sum the samples of raw ADC data*/
    		wTemp += pHandle->driverNTCVoltageBuffer[i];
 8001256:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    	for(i = 0; i < pHandle->lowPassFilterBandwidth; i++)
 800125a:	3301      	adds	r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	42a3      	cmp	r3, r4
    		wTemp += pHandle->driverNTCVoltageBuffer[i];
 8001260:	440a      	add	r2, r1
    	for(i = 0; i < pHandle->lowPassFilterBandwidth; i++)
 8001262:	d3f8      	bcc.n	8001256 <MOTORDRIVERTEMP_CalcAvOutputVoltageOrigin+0x26>
    	}
    	/*Final Result*/
    	wTemp = wTemp / pHandle->lowPassFilterBandwidth;
 8001264:	fbb2 f2f4 	udiv	r2, r2, r4
    	pHandle->avgDriverNTCVoltage = (uint16_t) wTemp;
    	pHandle->_Super.AvDriverOutputVoltage = ( uint16_t ) wTemp;
    	pHandle->_Super.LatestConv = hAux;

    	if(pHandle->index < pHandle->lowPassFilterBandwidth - 1)
 8001268:	3c01      	subs	r4, #1
 800126a:	45a4      	cmp	ip, r4
    	pHandle->avgDriverNTCVoltage = (uint16_t) wTemp;
 800126c:	b292      	uxth	r2, r2
    	{
    		pHandle->index ++;
 800126e:	bfb4      	ite	lt
 8001270:	f10c 0c01 	addlt.w	ip, ip, #1
    	}
    	else
    	{
    		pHandle->index = 0;
 8001274:	2300      	movge	r3, #0
    	pHandle->avgDriverNTCVoltage = (uint16_t) wTemp;
 8001276:	842a      	strh	r2, [r5, #32]
    	pHandle->_Super.AvDriverOutputVoltage = ( uint16_t ) wTemp;
 8001278:	80aa      	strh	r2, [r5, #4]
    	pHandle->_Super.LatestConv = hAux;
 800127a:	8068      	strh	r0, [r5, #2]
    		pHandle->index ++;
 800127c:	bfb4      	ite	lt
 800127e:	f885 c03a 	strblt.w	ip, [r5, #58]	@ 0x3a
    		pHandle->index = 0;
 8001282:	f885 303a 	strbge.w	r3, [r5, #58]	@ 0x3a
    	}
    }
}
 8001286:	bd70      	pop	{r4, r5, r6, pc}
    	wTemp = wTemp / pHandle->lowPassFilterBandwidth;
 8001288:	deff      	udf	#255	@ 0xff
 800128a:	bf00      	nop
 800128c:	0000      	movs	r0, r0
	...

08001290 <MOTORDRIVERTEMP_CalcAvR_Value>:
  *
  *  Get s16A Values from ADC --> Based on the conversion factor, get the output voltage
  *  --> Based on the output voltage, back calculate the resistance with conversion factor
  */
__weak void MOTORDRIVERTEMP_CalcAvR_Value(DriverTemp_Handle_t *pHandle)
{
 8001290:	b510      	push	{r4, lr}
 8001292:	4604      	mov	r4, r0
	float outputvoltage = 0;
	float resistanceTemp = 0;
	uint32_t NTC_DRIVER = 0;
	outputvoltage = ((float)(pHandle->avgDriverNTCVoltage)/MAXIMUM_ADC_RANGE)*NTC_VDD;
 8001294:	8c00      	ldrh	r0, [r0, #32]
 8001296:	ee07 0a90 	vmov	s15, r0
 800129a:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 800129e:	ee17 0a90 	vmov	r0, s15
 80012a2:	f7ff f919 	bl	80004d8 <__aeabi_f2d>
 80012a6:	a310      	add	r3, pc, #64	@ (adr r3, 80012e8 <MOTORDRIVERTEMP_CalcAvR_Value+0x58>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f96c 	bl	8000588 <__aeabi_dmul>
 80012b0:	f7ff fc42 	bl	8000b38 <__aeabi_d2f>
	resistanceTemp = ((NTC_VDD*RESISTANCE_DIVIDER)/outputvoltage)-RESISTANCE_DIVIDER;
 80012b4:	f7ff f910 	bl	80004d8 <__aeabi_f2d>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	a10c      	add	r1, pc, #48	@ (adr r1, 80012f0 <MOTORDRIVERTEMP_CalcAvR_Value+0x60>)
 80012be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012c2:	f7ff fa8b 	bl	80007dc <__aeabi_ddiv>
 80012c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80012f8 <MOTORDRIVERTEMP_CalcAvR_Value+0x68>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7fe ffa4 	bl	8000218 <__aeabi_dsub>
 80012d0:	f7ff fc32 	bl	8000b38 <__aeabi_d2f>
 80012d4:	ee07 0a90 	vmov	s15, r0
	NTC_DRIVER = (uint32_t)resistanceTemp;
 80012d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012dc:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
	pHandle->avgDriverNTCResistance = NTC_DRIVER;
}
 80012e0:	bd10      	pop	{r4, pc}
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	66666666 	.word	0x66666666
 80012ec:	400a6666 	.word	0x400a6666
 80012f0:	00000000 	.word	0x00000000
 80012f4:	40d20c00 	.word	0x40d20c00
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40b5e000 	.word	0x40b5e000

08001300 <heatSinkTempOffset50C>:

__weak void heatSinkTempOffset50C(DriverTemp_Handle_t *pHandle)
{
 8001300:	b510      	push	{r4, lr}
    if (pHandle->avgDriverNTCResistance > UPPER_RESISTANCE) {
 8001302:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <heatSinkTempOffset50C+0xb8>)
{
 8001304:	4604      	mov	r4, r0
    if (pHandle->avgDriverNTCResistance > UPPER_RESISTANCE) {
 8001306:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001308:	4298      	cmp	r0, r3
 800130a:	d907      	bls.n	800131c <heatSinkTempOffset50C+0x1c>
    	pHandle->avgDriverNTCResistance = UPPER_RESISTANCE;
 800130c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800130e:	f06f 0027 	mvn.w	r0, #39	@ 0x27
    /*  NTCG163JF103FT Thermistor temperature as a function of resistance  */
    Temp = (BCONSTANT_AV * TEMP0) / (TEMP0 * log((double) pHandle->avgDriverNTCResistance/RESISTANCE0) + BCONSTANT_AV);

    temp_offSet50C = Temp - ABSOLUTE_TEMP; // degree Celcius + 50 degree Celcius

    pHandle->avgDriverTemp = (round(temp_offSet50C));
 8001312:	6260      	str	r0, [r4, #36]	@ 0x24
    setDriverTemperature(pHandle->avgDriverTemp);
}
 8001314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setDriverTemperature(pHandle->avgDriverTemp);
 8001318:	f7ff be94 	b.w	8001044 <setDriverTemperature>
    if (pHandle->avgDriverNTCResistance < LOWER_RESISTANCE) {
 800131c:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8001320:	d208      	bcs.n	8001334 <heatSinkTempOffset50C+0x34>
    	pHandle->avgDriverNTCResistance = LOWER_RESISTANCE;
 8001322:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001326:	2082      	movs	r0, #130	@ 0x82
 8001328:	62a3      	str	r3, [r4, #40]	@ 0x28
    pHandle->avgDriverTemp = (round(temp_offSet50C));
 800132a:	6260      	str	r0, [r4, #36]	@ 0x24
}
 800132c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setDriverTemperature(pHandle->avgDriverTemp);
 8001330:	f7ff be88 	b.w	8001044 <setDriverTemperature>
    Temp = (BCONSTANT_AV * TEMP0) / (TEMP0 * log((double) pHandle->avgDriverNTCResistance/RESISTANCE0) + BCONSTANT_AV);
 8001334:	f7ff f8ae 	bl	8000494 <__aeabi_ui2d>
 8001338:	a315      	add	r3, pc, #84	@ (adr r3, 8001390 <heatSinkTempOffset50C+0x90>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f923 	bl	8000588 <__aeabi_dmul>
 8001342:	ec41 0b10 	vmov	d0, r0, r1
 8001346:	f009 f967 	bl	800a618 <log>
 800134a:	a313      	add	r3, pc, #76	@ (adr r3, 8001398 <heatSinkTempOffset50C+0x98>)
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	ec51 0b10 	vmov	r0, r1, d0
 8001354:	f7ff f918 	bl	8000588 <__aeabi_dmul>
 8001358:	a311      	add	r3, pc, #68	@ (adr r3, 80013a0 <heatSinkTempOffset50C+0xa0>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	f7fe ff5d 	bl	800021c <__adddf3>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	a110      	add	r1, pc, #64	@ (adr r1, 80013a8 <heatSinkTempOffset50C+0xa8>)
 8001368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800136c:	f7ff fa36 	bl	80007dc <__aeabi_ddiv>
    temp_offSet50C = Temp - ABSOLUTE_TEMP; // degree Celcius + 50 degree Celcius
 8001370:	a30f      	add	r3, pc, #60	@ (adr r3, 80013b0 <heatSinkTempOffset50C+0xb0>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7fe ff4f 	bl	8000218 <__aeabi_dsub>
    pHandle->avgDriverTemp = (round(temp_offSet50C));
 800137a:	ec41 0b10 	vmov	d0, r0, r1
 800137e:	f009 f993 	bl	800a6a8 <round>
 8001382:	ec51 0b10 	vmov	r0, r1, d0
 8001386:	f7ff fbaf 	bl	8000ae8 <__aeabi_d2iz>
 800138a:	e7c2      	b.n	8001312 <heatSinkTempOffset50C+0x12>
 800138c:	f3af 8000 	nop.w
 8001390:	eb1c432d 	.word	0xeb1c432d
 8001394:	3f1a36e2 	.word	0x3f1a36e2
 8001398:	66666666 	.word	0x66666666
 800139c:	4072a266 	.word	0x4072a266
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40aac300 	.word	0x40aac300
 80013a8:	a6666666 	.word	0xa6666666
 80013ac:	412f2b01 	.word	0x412f2b01
 80013b0:	66666666 	.word	0x66666666
 80013b4:	40711266 	.word	0x40711266
 80013b8:	0003d540 	.word	0x0003d540

080013bc <ETU_Init>:
  * @param  etuHandle pointer on the component instance to initialize.
  * @retval none.
  */
void ETU_Init(ETU_StateHandle_t *etuHandle)
{
	etuHandle->eState = BOOT_CHECK;
 80013bc:	2300      	movs	r3, #0
 80013be:	7003      	strb	r3, [r0, #0]
	etuHandle->Faults = ETU_NO_FAULTS;
 80013c0:	8043      	strh	r3, [r0, #2]
}
 80013c2:	4770      	bx	lr

080013c4 <ETU_NextState>:
{
	bool eChangeState = false;
	ETU_State_t eCurrentState = etuHandle->eState;
	ETU_State_t eNewState = eCurrentState;

	switch( eCurrentState )
 80013c4:	7803      	ldrb	r3, [r0, #0]
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d80a      	bhi.n	80013e0 <ETU_NextState+0x1c>
 80013ca:	e8df f003 	tbb	[pc, r3]
 80013ce:	030a      	.short	0x030a
 80013d0:	08060608 	.word	0x08060608
			  eChangeState = true;
		  }
		  break;

	   case ETU_START:
		   if((eState == ETU_OBD) || (eState == ETU_OFF) || (eState == ETU_FAULT))
 80013d4:	1e8b      	subs	r3, r1, #2
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d901      	bls.n	80013de <ETU_NextState+0x1a>
		   eChangeState = true;
		   break;


	   case ETU_OBD:
		   if(eState == ETU_OFF)
 80013da:	2905      	cmp	r1, #5
 80013dc:	d100      	bne.n	80013e0 <ETU_NextState+0x1c>
	   default:
		   break;
	}
	if(eChangeState)
	{
		etuHandle->eState = eNewState;
 80013de:	7001      	strb	r1, [r0, #0]
	}
	else
	{

	}
}
 80013e0:	4770      	bx	lr
		  if( (eState == ETU_START) || (eState == ETU_OFF_TRANSITION) || (eState == ETU_OBD) || (eState == ETU_FAULT)
 80013e2:	1e4b      	subs	r3, r1, #1
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d9fa      	bls.n	80013de <ETU_NextState+0x1a>
}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop

080013ec <ETU_GetState>:
  * @retval State_t Current state machine state
  */
ETU_State_t ETU_GetState(ETU_StateHandle_t *etuHandle)
{
	return (etuHandle->eState);
}
 80013ec:	7800      	ldrb	r0, [r0, #0]
 80013ee:	4770      	bx	lr

080013f0 <STM32MCP_registerTimer>:
 *
 * @return  None
 */
void STM32MCP_registerTimer(STM32MCP_protocolHandle_t *STM32MCP_CBs)
{
	STM32MCP_protocolHandle = STM32MCP_CBs;
 80013f0:	4b01      	ldr	r3, [pc, #4]	@ (80013f8 <STM32MCP_registerTimer+0x8>)
 80013f2:	6018      	str	r0, [r3, #0]
}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	200006b8 	.word	0x200006b8

080013fc <timeOutStart>:
 *
 * @return  None
 */
void timeOutStart()
{
	STM32MCP_protocolHandle->timerStart();
 80013fc:	4b01      	ldr	r3, [pc, #4]	@ (8001404 <timeOutStart+0x8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4718      	bx	r3
 8001404:	200006b8 	.word	0x200006b8

08001408 <timeOutStop>:
 *
 * @return  None
 */
void timeOutStop()
{
	STM32MCP_protocolHandle->timerStop();
 8001408:	4b01      	ldr	r3, [pc, #4]	@ (8001410 <timeOutStop+0x8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4718      	bx	r3
 8001410:	200006b8 	.word	0x200006b8

08001414 <timeOutHandler>:
 *
 * @return  None
 */
uint8_t reconnection = 0;
void timeOutHandler()
{
 8001414:	b508      	push	{r3, lr}

	expiration++;
 8001416:	4a15      	ldr	r2, [pc, #84]	@ (800146c <timeOutHandler+0x58>)
 8001418:	7813      	ldrb	r3, [r2, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	7013      	strb	r3, [r2, #0]
	if( (expiration%4) == 0)
 8001420:	f013 0303 	ands.w	r3, r3, #3
 8001424:	d113      	bne.n	800144e <timeOutHandler+0x3a>
	{
		payLoad = 0x00;
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <timeOutHandler+0x5c>)
 8001428:	7013      	strb	r3, [r2, #0]
	}
	if(payLoad == 0x00)
	{
		packetLoss ++;
 800142a:	4912      	ldr	r1, [pc, #72]	@ (8001474 <timeOutHandler+0x60>)
		if(packetLoss > MAXIMUM_NUMBER_OF_LOST_PACKETS)
		{
			//SEND_SOFTWARE_ERROR_REPORT(TIMEOUT_EXPIRATION);
			//updateConnectionStatus(false,payLoad);
			reconnection ++;
 800142c:	4812      	ldr	r0, [pc, #72]	@ (8001478 <timeOutHandler+0x64>)
		packetLoss ++;
 800142e:	780b      	ldrb	r3, [r1, #0]
			reconnection ++;
 8001430:	7802      	ldrb	r2, [r0, #0]
		packetLoss ++;
 8001432:	3301      	adds	r3, #1
 8001434:	b2db      	uxtb	r3, r3
		if(packetLoss > MAXIMUM_NUMBER_OF_LOST_PACKETS)
 8001436:	2b0a      	cmp	r3, #10
		packetLoss ++;
 8001438:	700b      	strb	r3, [r1, #0]
		if(packetLoss > MAXIMUM_NUMBER_OF_LOST_PACKETS)
 800143a:	d812      	bhi.n	8001462 <timeOutHandler+0x4e>
	}

	/*
	 * The following codes are modified on 2025-04-11
	 */
	if(reconnection == MAX_CHANCE_RECONNECTION)
 800143c:	2a06      	cmp	r2, #6
 800143e:	d105      	bne.n	800144c <timeOutHandler+0x38>
	{
		SEND_SOFTWARE_ERROR_REPORT(TIMEOUT_EXPIRATION);
 8001440:	200a      	movs	r0, #10
 8001442:	f000 fa0f 	bl	8001864 <SEND_SOFTWARE_ERROR_REPORT>
    timeOutStop();
}

void updateConnectionStatus(bool received, uint8_t packageCount)
{
	inConnection = received;
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <timeOutHandler+0x68>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
}
 800144c:	bd08      	pop	{r3, pc}
	if(payLoad == 0x00)
 800144e:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <timeOutHandler+0x5c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0e9      	beq.n	800142a <timeOutHandler+0x16>
		packetLoss = 0;
 8001456:	4907      	ldr	r1, [pc, #28]	@ (8001474 <timeOutHandler+0x60>)
		reconnection = 0;
 8001458:	4a07      	ldr	r2, [pc, #28]	@ (8001478 <timeOutHandler+0x64>)
		packetLoss = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	700b      	strb	r3, [r1, #0]
		reconnection = 0;
 800145e:	7013      	strb	r3, [r2, #0]
}
 8001460:	bd08      	pop	{r3, pc}
			reconnection ++;
 8001462:	3201      	adds	r2, #1
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	7002      	strb	r2, [r0, #0]
 8001468:	e7e8      	b.n	800143c <timeOutHandler+0x28>
 800146a:	bf00      	nop
 800146c:	200006b3 	.word	0x200006b3
 8001470:	200006b2 	.word	0x200006b2
 8001474:	200006b4 	.word	0x200006b4
 8001478:	200006b0 	.word	0x200006b0
 800147c:	200006b1 	.word	0x200006b1

08001480 <updateConnectionStatus>:
	inConnection = received;
 8001480:	4a02      	ldr	r2, [pc, #8]	@ (800148c <updateConnectionStatus+0xc>)
	payLoad = packageCount;
 8001482:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <updateConnectionStatus+0x10>)
	inConnection = received;
 8001484:	7010      	strb	r0, [r2, #0]
	payLoad = packageCount;
 8001486:	7019      	strb	r1, [r3, #0]
}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200006b1 	.word	0x200006b1
 8001490:	200006b2 	.word	0x200006b2

08001494 <checkConnectionStatus>:

bool getConnectionStatus()
{
	return inConnection;
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <checkConnectionStatus+0x10>)
 8001496:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <checkConnectionStatus+0x14>)
}

uint8_t connectSkin = 0xFF;
void checkConnectionStatus()
{
	if (getConnectionStatus() == true)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f083 0301 	eor.w	r3, r3, #1
 800149e:	7013      	strb	r3, [r2, #0]
	}
	else if(getConnectionStatus() == false)
	{
		connectSkin = 0x01;
	}
}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	200006b1 	.word	0x200006b1
 80014a8:	20000002 	.word	0x20000002

080014ac <idleBackgroundTask>:


/*Handles with Fault and OBD --> ETU State Machine*/
uint8_t mode = 0x00;
static void idleBackgroundTask(void const *argument)
{
 80014ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014b0:	4c13      	ldr	r4, [pc, #76]	@ (8001500 <idleBackgroundTask+0x54>)
 80014b2:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 800150c <idleBackgroundTask+0x60>
 80014b6:	4d13      	ldr	r5, [pc, #76]	@ (8001504 <idleBackgroundTask+0x58>)
 80014b8:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8001510 <idleBackgroundTask+0x64>
		if(state->eState == ETU_FAULT)
		{
			mode = 0x01;

		}else if(state->eState == ETU_OBD){
			mode = 0x02;
 80014bc:	4e12      	ldr	r6, [pc, #72]	@ (8001508 <idleBackgroundTask+0x5c>)
 80014be:	2702      	movs	r7, #2
		osDelay(POWER_TASK_DELAY);
 80014c0:	2064      	movs	r0, #100	@ 0x64
 80014c2:	f004 fddb 	bl	800607c <osDelay>
		powerOnTime += POWER_ON_INTERVAL;
 80014c6:	6823      	ldr	r3, [r4, #0]
		if(state->eState == ETU_FAULT)
 80014c8:	f8d9 2000 	ldr.w	r2, [r9]
		powerOnTime += POWER_ON_INTERVAL;
 80014cc:	3364      	adds	r3, #100	@ 0x64
 80014ce:	6023      	str	r3, [r4, #0]
		if(state->eState == ETU_FAULT)
 80014d0:	7813      	ldrb	r3, [r2, #0]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d011      	beq.n	80014fa <idleBackgroundTask+0x4e>
		}else if(state->eState == ETU_OBD){
 80014d6:	2b03      	cmp	r3, #3
			mode = 0x02;
 80014d8:	bf08      	it	eq
 80014da:	7037      	strbeq	r7, [r6, #0]
		}

		if(*connectionFault != 0)
 80014dc:	f8d8 2000 	ldr.w	r2, [r8]
		{
			*ptrPowerStatus = false;
 80014e0:	682b      	ldr	r3, [r5, #0]
		if(*connectionFault != 0)
 80014e2:	7812      	ldrb	r2, [r2, #0]
 80014e4:	b12a      	cbz	r2, 80014f2 <idleBackgroundTask+0x46>
			*ptrPowerStatus = false;
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
		{
			break;
		}
	}
	gotoSLEEP();
}
 80014ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	gotoSLEEP();
 80014ee:	f7ff bcff 	b.w	8000ef0 <gotoSLEEP>
		if(*ptrPowerStatus == false)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e3      	bne.n	80014c0 <idleBackgroundTask+0x14>
 80014f8:	e7f7      	b.n	80014ea <idleBackgroundTask+0x3e>
			mode = 0x01;
 80014fa:	2301      	movs	r3, #1
 80014fc:	7033      	strb	r3, [r6, #0]
 80014fe:	e7ed      	b.n	80014dc <idleBackgroundTask+0x30>
 8001500:	200006c4 	.word	0x200006c4
 8001504:	200006cc 	.word	0x200006cc
 8001508:	200006bc 	.word	0x200006bc
 800150c:	200006c0 	.word	0x200006c0
 8001510:	200006c8 	.word	0x200006c8

08001514 <etu_state_ptr_register>:
	state = etuState;
 8001514:	4b01      	ldr	r3, [pc, #4]	@ (800151c <etu_state_ptr_register+0x8>)
 8001516:	6018      	str	r0, [r3, #0]
}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200006c0 	.word	0x200006c0

08001520 <power_management_register>:
	ptrPowerStatus = ptrPower;
 8001520:	4b01      	ldr	r3, [pc, #4]	@ (8001528 <power_management_register+0x8>)
 8001522:	6018      	str	r0, [r3, #0]
}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	200006cc 	.word	0x200006cc

0800152c <connection_behaviour_register>:
	connectionFault = ptrConnection;
 800152c:	4b01      	ldr	r3, [pc, #4]	@ (8001534 <connection_behaviour_register+0x8>)
 800152e:	6018      	str	r0, [r3, #0]
}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	200006c8 	.word	0x200006c8

08001538 <run_background_tasks>:
{
 8001538:	b510      	push	{r4, lr}
	osThreadDef(idleRun,idleBackgroundTask,osPriorityIdle,0,128);
 800153a:	4c08      	ldr	r4, [pc, #32]	@ (800155c <run_background_tasks+0x24>)
 800153c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
 800153e:	b088      	sub	sp, #32
	osThreadDef(idleRun,idleBackgroundTask,osPriorityIdle,0,128);
 8001540:	f10d 0c04 	add.w	ip, sp, #4
 8001544:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001548:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800154c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	idleTaskHandle = osThreadCreate(osThread(idleRun),NULL);
 8001550:	2100      	movs	r1, #0
 8001552:	a801      	add	r0, sp, #4
 8001554:	f004 fd50 	bl	8005ff8 <osThreadCreate>
}
 8001558:	b008      	add	sp, #32
 800155a:	bd10      	pop	{r4, pc}
 800155c:	0800aabc 	.word	0x0800aabc

08001560 <GeneralTasks>:

/*This is the main task for E-Scooter Transmission Unit  (ETU)
 *Why it drains a lots in the battery for the E-Scooter!
 * */
void GeneralTasks(void const * argument)
{
 8001560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	priority = osThreadGetPriority(NULL);
 8001564:	2000      	movs	r0, #0
 8001566:	f004 fd77 	bl	8006058 <osThreadGetPriority>

	if(ETU_GetState(&ETU_State) == BOOT_CHECK)
 800156a:	487d      	ldr	r0, [pc, #500]	@ (8001760 <GeneralTasks+0x200>)
 800156c:	f7ff ff3e 	bl	80013ec <ETU_GetState>
 8001570:	b1f8      	cbz	r0, 80015b2 <GeneralTasks+0x52>
		{
			ETU_NextState(&ETU_State,ETU_OFF_TRANSITION);
		}
	}

	if(ETU_GetState(&ETU_State) == ETU_START)
 8001572:	487b      	ldr	r0, [pc, #492]	@ (8001760 <GeneralTasks+0x200>)
 8001574:	f7ff ff3a 	bl	80013ec <ETU_GetState>
 8001578:	2801      	cmp	r0, #1
 800157a:	d045      	beq.n	8001608 <GeneralTasks+0xa8>
		taskSleepCount++;
	  }
	}


	if(ETU_GetState(&ETU_State) == ETU_OFF_TRANSITION )
 800157c:	4878      	ldr	r0, [pc, #480]	@ (8001760 <GeneralTasks+0x200>)
 800157e:	f7ff ff35 	bl	80013ec <ETU_GetState>
 8001582:	2804      	cmp	r0, #4
 8001584:	d02b      	beq.n	80015de <GeneralTasks+0x7e>
		}
	}


	/*Shut Down Process Begins*/
	if(ETU_GetState(&ETU_State) == ETU_OFF || ETU_GetState(&ETU_State) == ETU_OBD ||
 8001586:	4876      	ldr	r0, [pc, #472]	@ (8001760 <GeneralTasks+0x200>)
 8001588:	f7ff ff30 	bl	80013ec <ETU_GetState>
 800158c:	2805      	cmp	r0, #5
 800158e:	d004      	beq.n	800159a <GeneralTasks+0x3a>
 8001590:	4873      	ldr	r0, [pc, #460]	@ (8001760 <GeneralTasks+0x200>)
 8001592:	f7ff ff2b 	bl	80013ec <ETU_GetState>
 8001596:	2803      	cmp	r0, #3
 8001598:	d104      	bne.n	80015a4 <GeneralTasks+0x44>

			Artificially force an assert() to be triggered if configASSERT() is
			defined, then stop here so application writers can catch the error. static void prvTaskExitError() from port.c*/
		vTaskDelete(NULL); //Kills the task !
	}
}
 800159a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		vTaskDelete(NULL); //Kills the task !
 800159e:	2000      	movs	r0, #0
 80015a0:	f006 b956 	b.w	8007850 <vTaskDelete>
	   ETU_GetState(&ETU_State) == ETU_FAULT)
 80015a4:	486e      	ldr	r0, [pc, #440]	@ (8001760 <GeneralTasks+0x200>)
 80015a6:	f7ff ff21 	bl	80013ec <ETU_GetState>
	if(ETU_GetState(&ETU_State) == ETU_OFF || ETU_GetState(&ETU_State) == ETU_OBD ||
 80015aa:	2802      	cmp	r0, #2
 80015ac:	d0f5      	beq.n	800159a <GeneralTasks+0x3a>
}
 80015ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(getBootSource() == 0x7B)
 80015b2:	f7ff fca1 	bl	8000ef8 <getBootSource>
 80015b6:	287b      	cmp	r0, #123	@ 0x7b
			isPowerByBattery = 0x01;
 80015b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001764 <GeneralTasks+0x204>)
		if(getBootSource() == 0x7B)
 80015ba:	f000 80c1 	beq.w	8001740 <GeneralTasks+0x1e0>
		if(isPowerByBattery == 0x00)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f040 80a3 	bne.w	800170c <GeneralTasks+0x1ac>
			if(mainTaskStart == 0x00)
 80015c6:	4b68      	ldr	r3, [pc, #416]	@ (8001768 <GeneralTasks+0x208>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80c2 	beq.w	8001754 <GeneralTasks+0x1f4>
			else if(mainTaskStart == 0x01)
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d1ce      	bne.n	8001572 <GeneralTasks+0x12>
				ETU_NextState(&ETU_State,ETU_OBD);
 80015d4:	4862      	ldr	r0, [pc, #392]	@ (8001760 <GeneralTasks+0x200>)
 80015d6:	2103      	movs	r1, #3
 80015d8:	f7ff fef4 	bl	80013c4 <ETU_NextState>
 80015dc:	e7c9      	b.n	8001572 <GeneralTasks+0x12>
			error_indicator_on();
 80015de:	f7ff fd7b 	bl	80010d8 <error_indicator_on>
			*ptr_drive_POWER_ON = false;
 80015e2:	4b62      	ldr	r3, [pc, #392]	@ (800176c <GeneralTasks+0x20c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
	Motor_ShutDown();
 80015ea:	f001 f9ef 	bl	80029cc <Motor_ShutDown>
				ledIndicatorStatus = led_indicator_off();
 80015ee:	f7ff fd6d 	bl	80010cc <led_indicator_off>
 80015f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001770 <GeneralTasks+0x210>)
 80015f4:	7018      	strb	r0, [r3, #0]
				set_tail_light_off();
 80015f6:	f7ff fd61 	bl	80010bc <set_tail_light_off>
				error_indicator_off();
 80015fa:	f7ff fd6f 	bl	80010dc <error_indicator_off>
				ETU_NextState(&ETU_State,ETU_OFF);
 80015fe:	4858      	ldr	r0, [pc, #352]	@ (8001760 <GeneralTasks+0x200>)
 8001600:	2105      	movs	r1, #5
 8001602:	f7ff fedf 	bl	80013c4 <ETU_NextState>
				break;
 8001606:	e7be      	b.n	8001586 <GeneralTasks+0x26>
	   updateConnectionStatus(false,0);
 8001608:	2100      	movs	r1, #0
 800160a:	4608      	mov	r0, r1
 800160c:	f7ff ff38 	bl	8001480 <updateConnectionStatus>
	   timeOutStart();
 8001610:	4f56      	ldr	r7, [pc, #344]	@ (800176c <GeneralTasks+0x20c>)
 8001612:	4e57      	ldr	r6, [pc, #348]	@ (8001770 <GeneralTasks+0x210>)
		     if((taskSleepCount % N1_ticks) == 0)
 8001614:	4d57      	ldr	r5, [pc, #348]	@ (8001774 <GeneralTasks+0x214>)
 8001616:	f8df 9170 	ldr.w	r9, [pc, #368]	@ 8001788 <GeneralTasks+0x228>
		     if((taskSleepCount % N2_ticks) == 0)
 800161a:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 800178c <GeneralTasks+0x22c>
	   timeOutStart();
 800161e:	f7ff feed 	bl	80013fc <timeOutStart>
 8001622:	e004      	b.n	800162e <GeneralTasks+0xce>
			    throttleSignalInput();
 8001624:	f7ff fc8c 	bl	8000f40 <throttleSignalInput>
		taskSleepCount++;
 8001628:	882b      	ldrh	r3, [r5, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	802b      	strh	r3, [r5, #0]
		   osDelay(GeneralTask_TIME);
 800162e:	2014      	movs	r0, #20
 8001630:	f004 fd24 	bl	800607c <osDelay>
		   if(*ptr_drive_POWER_ON == true)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d057      	beq.n	80016ec <GeneralTasks+0x18c>
			  if(ledIndicatorStatus == 0)
 800163c:	7833      	ldrb	r3, [r6, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d050      	beq.n	80016e4 <GeneralTasks+0x184>
			  CHECK_MOTOR_STATUS();
 8001642:	f000 f907 	bl	8001854 <CHECK_MOTOR_STATUS>
			  refreshThrottleStatus();
 8001646:	f7ff fc83 	bl	8000f50 <refreshThrottleStatus>
			  lightSensorStateChange();
 800164a:	f7ff fd77 	bl	800113c <lightSensorStateChange>
			  get_ThrottleInformation();
 800164e:	f7ff fc9f 	bl	8000f90 <get_ThrottleInformation>
			  motor_speed();
 8001652:	f7ff fcc7 	bl	8000fe4 <motor_speed>
			  motor_rms_current();
 8001656:	f7ff fccd 	bl	8000ff4 <motor_rms_current>
		     if((taskSleepCount % N1_ticks) == 0)
 800165a:	882b      	ldrh	r3, [r5, #0]
 800165c:	f899 1000 	ldrb.w	r1, [r9]
 8001660:	fbb3 f2f1 	udiv	r2, r3, r1
 8001664:	fb01 3212 	mls	r2, r1, r2, r3
 8001668:	b3b2      	cbz	r2, 80016d8 <GeneralTasks+0x178>
		     if((taskSleepCount % N2_ticks) == 0)
 800166a:	f898 1000 	ldrb.w	r1, [r8]
 800166e:	fbb3 f2f1 	udiv	r2, r3, r1
 8001672:	fb01 3212 	mls	r2, r1, r2, r3
 8001676:	b1f2      	cbz	r2, 80016b6 <GeneralTasks+0x156>
		     if((taskSleepCount % N3_ticks) == 0)
 8001678:	4a3f      	ldr	r2, [pc, #252]	@ (8001778 <GeneralTasks+0x218>)
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001680:	fb02 3311 	mls	r3, r2, r1, r3
 8001684:	b1a3      	cbz	r3, 80016b0 <GeneralTasks+0x150>
		     if(GET_SOFTWARE_ERROR_REPORT() != 0x00)
 8001686:	f000 f90d 	bl	80018a4 <GET_SOFTWARE_ERROR_REPORT>
 800168a:	4604      	mov	r4, r0
 800168c:	bb70      	cbnz	r0, 80016ec <GeneralTasks+0x18c>
			 if(*ptr_error_report == 0x00)
 800168e:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <GeneralTasks+0x21c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0c5      	beq.n	8001624 <GeneralTasks+0xc4>
				setIQ(0);
 8001698:	f7ff fc46 	bl	8000f28 <setIQ>
				set_ThrottlePercent(0);
 800169c:	4620      	mov	r0, r4
 800169e:	f7ff fc49 	bl	8000f34 <set_ThrottlePercent>
				throttleSignalInput();
 80016a2:	f7ff fc4d 	bl	8000f40 <throttleSignalInput>
				driveStop(); /*Neutral Gear*/
 80016a6:	f7ff fc81 	bl	8000fac <driveStop>
				error_indicator_on();
 80016aa:	f7ff fd15 	bl	80010d8 <error_indicator_on>
 80016ae:	e7bb      	b.n	8001628 <GeneralTasks+0xc8>
				checkConnectionStatus();
 80016b0:	f7ff fef0 	bl	8001494 <checkConnectionStatus>
 80016b4:	e7e7      	b.n	8001686 <GeneralTasks+0x126>
		    	tail_light_mode = get_tail_light_mode();
 80016b6:	f7ff fd1f 	bl	80010f8 <get_tail_light_mode>
		    	if(tail_light_mode == ESCOOTER_TOGGLE_TAIL_LIGHT)
 80016ba:	2805      	cmp	r0, #5
		    	tail_light_mode = get_tail_light_mode();
 80016bc:	4604      	mov	r4, r0
		    	if(tail_light_mode == ESCOOTER_TOGGLE_TAIL_LIGHT)
 80016be:	d033      	beq.n	8001728 <GeneralTasks+0x1c8>
		    		if(tail_light_mode_old != tail_light_mode)
 80016c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001784 <GeneralTasks+0x224>
 80016c4:	f89a 3000 	ldrb.w	r3, [sl]
 80016c8:	4283      	cmp	r3, r0
 80016ca:	d003      	beq.n	80016d4 <GeneralTasks+0x174>
		    			if(tail_light_mode == ESCOOTER_TAIL_LIGHT_OFF)
 80016cc:	2806      	cmp	r0, #6
 80016ce:	d03e      	beq.n	800174e <GeneralTasks+0x1ee>
		    			else if(tail_light_mode == ESCOOTER_TAIL_LIGHT_ON)
 80016d0:	2808      	cmp	r0, #8
 80016d2:	d01f      	beq.n	8001714 <GeneralTasks+0x1b4>
		     if((taskSleepCount % N3_ticks) == 0)
 80016d4:	882b      	ldrh	r3, [r5, #0]
 80016d6:	e7cf      	b.n	8001678 <GeneralTasks+0x118>
			   getIqIdMotor();
 80016d8:	f7ff fcca 	bl	8001070 <getIqIdMotor>
			   calcDC();
 80016dc:	f7ff fcd6 	bl	800108c <calcDC>
		     if((taskSleepCount % N2_ticks) == 0)
 80016e0:	882b      	ldrh	r3, [r5, #0]
 80016e2:	e7c2      	b.n	800166a <GeneralTasks+0x10a>
				 ledIndicatorStatus = led_indicator_on();
 80016e4:	f7ff fcec 	bl	80010c0 <led_indicator_on>
 80016e8:	7030      	strb	r0, [r6, #0]
 80016ea:	e7aa      	b.n	8001642 <GeneralTasks+0xe2>
	Motor_ShutDown();
 80016ec:	f001 f96e 	bl	80029cc <Motor_ShutDown>
			ledIndicatorStatus = led_indicator_off();
 80016f0:	f7ff fcec 	bl	80010cc <led_indicator_off>
 80016f4:	7030      	strb	r0, [r6, #0]
			set_tail_light_off();
 80016f6:	f7ff fce1 	bl	80010bc <set_tail_light_off>
			error_indicator_off();
 80016fa:	f7ff fcef 	bl	80010dc <error_indicator_off>
			timeOutStop();
 80016fe:	f7ff fe83 	bl	8001408 <timeOutStop>
			ETU_NextState(&ETU_State,ETU_OFF);
 8001702:	4817      	ldr	r0, [pc, #92]	@ (8001760 <GeneralTasks+0x200>)
 8001704:	2105      	movs	r1, #5
 8001706:	f7ff fe5d 	bl	80013c4 <ETU_NextState>
			break;
 800170a:	e737      	b.n	800157c <GeneralTasks+0x1c>
		else if(isPowerByBattery == 0x01)
 800170c:	2b01      	cmp	r3, #1
 800170e:	f47f af30 	bne.w	8001572 <GeneralTasks+0x12>
 8001712:	e017      	b.n	8001744 <GeneralTasks+0x1e4>
		    				set_tail_light_on();
 8001714:	f7ff fcd0 	bl	80010b8 <set_tail_light_on>
		    				tail_light_status_old = get_tail_light_status(); // either: 1 = ON   or 0 = OFF CAUTION: THIS PARAMETER IS CONTROLLED BY UART
 8001718:	f7ff fce8 	bl	80010ec <get_tail_light_status>
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <GeneralTasks+0x220>)
		    				tail_light_mode_old = ESCOOTER_TAIL_LIGHT_ON;
 800171e:	f88a 4000 	strb.w	r4, [sl]
		    				tail_light_status_old = get_tail_light_status(); // either: 1 = ON   or 0 = OFF CAUTION: THIS PARAMETER IS CONTROLLED BY UART
 8001722:	7018      	strb	r0, [r3, #0]
		     if((taskSleepCount % N3_ticks) == 0)
 8001724:	882b      	ldrh	r3, [r5, #0]
 8001726:	e7a7      	b.n	8001678 <GeneralTasks+0x118>
		    		tail_light_status_old = toggle_tail_light(tail_light_status_old);
 8001728:	f8df a054 	ldr.w	sl, [pc, #84]	@ 8001780 <GeneralTasks+0x220>
 800172c:	f89a 0000 	ldrb.w	r0, [sl]
 8001730:	f7ff fcfa 	bl	8001128 <toggle_tail_light>
		    		tail_light_mode_old = ESCOOTER_TOGGLE_TAIL_LIGHT;
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <GeneralTasks+0x224>)
		    		tail_light_status_old = toggle_tail_light(tail_light_status_old);
 8001736:	f88a 0000 	strb.w	r0, [sl]
		    		tail_light_mode_old = ESCOOTER_TOGGLE_TAIL_LIGHT;
 800173a:	701c      	strb	r4, [r3, #0]
		     if((taskSleepCount % N3_ticks) == 0)
 800173c:	882b      	ldrh	r3, [r5, #0]
 800173e:	e79b      	b.n	8001678 <GeneralTasks+0x118>
			isPowerByBattery = 0x01;
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
			ETU_NextState(&ETU_State,ETU_OFF_TRANSITION);
 8001744:	4806      	ldr	r0, [pc, #24]	@ (8001760 <GeneralTasks+0x200>)
 8001746:	2104      	movs	r1, #4
 8001748:	f7ff fe3c 	bl	80013c4 <ETU_NextState>
 800174c:	e711      	b.n	8001572 <GeneralTasks+0x12>
		    				set_tail_light_off();
 800174e:	f7ff fcb5 	bl	80010bc <set_tail_light_off>
		    				tail_light_status_old = get_tail_light_status(); // either: 1 = ON   or 0 = OFF CAUTION: THIS PARAMETER IS CONTROLLED BY UART
 8001752:	e7e1      	b.n	8001718 <GeneralTasks+0x1b8>
				ETU_NextState(&ETU_State,ETU_START);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <GeneralTasks+0x200>)
 8001756:	2101      	movs	r1, #1
 8001758:	f7ff fe34 	bl	80013c4 <ETU_NextState>
 800175c:	e709      	b.n	8001572 <GeneralTasks+0x12>
 800175e:	bf00      	nop
 8001760:	200006e4 	.word	0x200006e4
 8001764:	200006d1 	.word	0x200006d1
 8001768:	200006d0 	.word	0x200006d0
 800176c:	200006d8 	.word	0x200006d8
 8001770:	200006dc 	.word	0x200006dc
 8001774:	200006de 	.word	0x200006de
 8001778:	200006e1 	.word	0x200006e1
 800177c:	200006d4 	.word	0x200006d4
 8001780:	200006e0 	.word	0x200006e0
 8001784:	20000003 	.word	0x20000003
 8001788:	200006e3 	.word	0x200006e3
 800178c:	200006e2 	.word	0x200006e2

08001790 <go_powerOnRegister>:
	ptr_drive_POWER_ON = ptrpowerOn;
 8001790:	4b01      	ldr	r3, [pc, #4]	@ (8001798 <go_powerOnRegister+0x8>)
 8001792:	6018      	str	r0, [r3, #0]
}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	200006d8 	.word	0x200006d8

0800179c <go_errorReportRegister>:
	ptr_error_report = report;
 800179c:	4b01      	ldr	r3, [pc, #4]	@ (80017a4 <go_errorReportRegister+0x8>)
 800179e:	6018      	str	r0, [r3, #0]
}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	200006d4 	.word	0x200006d4

080017a8 <software_errorReportRegister>:
}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop

080017ac <GoInit>:
{
 80017ac:	b510      	push	{r4, lr}
	osThreadDef(drive, GeneralTasks,osPriorityBelowNormal,0,128);
 80017ae:	4c1b      	ldr	r4, [pc, #108]	@ (800181c <GoInit+0x70>)
{
 80017b0:	b088      	sub	sp, #32
	powerModeInit();
 80017b2:	f7ff fb89 	bl	8000ec8 <powerModeInit>
	ERROR_REPORT_INIT();
 80017b6:	f000 f83b 	bl	8001830 <ERROR_REPORT_INIT>
	SOFTWARE_ERROR_REPORT_INIT();
 80017ba:	f000 f83f 	bl	800183c <SOFTWARE_ERROR_REPORT_INIT>
	brake_and_throttle_init();
 80017be:	f7ff fba9 	bl	8000f14 <brake_and_throttle_init>
	motor_param_init();
 80017c2:	f7ff fbfb 	bl	8000fbc <motor_param_init>
	set_tail_light_off();
 80017c6:	f7ff fc79 	bl	80010bc <set_tail_light_off>
	UDHAL_TIMEOUT_init();
 80017ca:	f008 fde9 	bl	800a3a0 <UDHAL_TIMEOUT_init>
	powerManagementInit();
 80017ce:	f7ff fb81 	bl	8000ed4 <powerManagementInit>
	BACKGROUND_CONNECTION_MONITOR_INIT();
 80017d2:	f000 f839 	bl	8001848 <BACKGROUND_CONNECTION_MONITOR_INIT>
	run_background_tasks();
 80017d6:	f7ff feaf 	bl	8001538 <run_background_tasks>
	osThreadDef(drive, GeneralTasks,osPriorityBelowNormal,0,128);
 80017da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017dc:	f10d 0c04 	add.w	ip, sp, #4
 80017e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017e4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	driveHandle = osThreadCreate(osThread(drive), NULL);
 80017ec:	2100      	movs	r1, #0
 80017ee:	a801      	add	r0, sp, #4
 80017f0:	f004 fc02 	bl	8005ff8 <osThreadCreate>
	N1_ticks = N1_TIME / GeneralTask_TIME;
 80017f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <GoInit+0x74>)
	ETU_Init(&ETU_State);
 80017f6:	4c0b      	ldr	r4, [pc, #44]	@ (8001824 <GoInit+0x78>)
	N2_ticks = N2_TIME / GeneralTask_TIME;
 80017f8:	490b      	ldr	r1, [pc, #44]	@ (8001828 <GoInit+0x7c>)
	N3_ticks = N3_TIME / GeneralTask_TIME;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <GoInit+0x80>)
	N1_ticks = N1_TIME / GeneralTask_TIME;
 80017fc:	2005      	movs	r0, #5
 80017fe:	7010      	strb	r0, [r2, #0]
	N2_ticks = N2_TIME / GeneralTask_TIME;
 8001800:	200a      	movs	r0, #10
	N3_ticks = N3_TIME / GeneralTask_TIME;
 8001802:	220f      	movs	r2, #15
	N2_ticks = N2_TIME / GeneralTask_TIME;
 8001804:	7008      	strb	r0, [r1, #0]
	ETU_Init(&ETU_State);
 8001806:	4620      	mov	r0, r4
	N3_ticks = N3_TIME / GeneralTask_TIME;
 8001808:	701a      	strb	r2, [r3, #0]
	ETU_Init(&ETU_State);
 800180a:	f7ff fdd7 	bl	80013bc <ETU_Init>
	etu_state_ptr_register(&ETU_State);
 800180e:	4620      	mov	r0, r4
}
 8001810:	b008      	add	sp, #32
 8001812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	etu_state_ptr_register(&ETU_State);
 8001816:	f7ff be7d 	b.w	8001514 <etu_state_ptr_register>
 800181a:	bf00      	nop
 800181c:	0800aad8 	.word	0x0800aad8
 8001820:	200006e3 	.word	0x200006e3
 8001824:	200006e4 	.word	0x200006e4
 8001828:	200006e2 	.word	0x200006e2
 800182c:	200006e1 	.word	0x200006e1

08001830 <ERROR_REPORT_INIT>:
uint8_t ERROR_CODE = SYSTEM_NORMAL;
uint8_t SOFTWARE_ERROR = SOFTWARE_OK;

void ERROR_REPORT_INIT()
{
	go_errorReportRegister(&ERROR_OCCURRED);
 8001830:	4801      	ldr	r0, [pc, #4]	@ (8001838 <ERROR_REPORT_INIT+0x8>)
 8001832:	f7ff bfb3 	b.w	800179c <go_errorReportRegister>
 8001836:	bf00      	nop
 8001838:	200006ec 	.word	0x200006ec

0800183c <SOFTWARE_ERROR_REPORT_INIT>:
}

void SOFTWARE_ERROR_REPORT_INIT()
{
	software_errorReportRegister(&SOFTWARE_ERROR);
 800183c:	4801      	ldr	r0, [pc, #4]	@ (8001844 <SOFTWARE_ERROR_REPORT_INIT+0x8>)
 800183e:	f7ff bfb3 	b.w	80017a8 <software_errorReportRegister>
 8001842:	bf00      	nop
 8001844:	200006ea 	.word	0x200006ea

08001848 <BACKGROUND_CONNECTION_MONITOR_INIT>:
}

void BACKGROUND_CONNECTION_MONITOR_INIT()
{
	connection_behaviour_register(&SOFTWARE_ERROR);
 8001848:	4801      	ldr	r0, [pc, #4]	@ (8001850 <BACKGROUND_CONNECTION_MONITOR_INIT+0x8>)
 800184a:	f7ff be6f 	b.w	800152c <connection_behaviour_register>
 800184e:	bf00      	nop
 8001850:	200006ea 	.word	0x200006ea

08001854 <CHECK_MOTOR_STATUS>:
}

void CHECK_MOTOR_STATUS()
{
 8001854:	b508      	push	{r3, lr}
     uint16_t status = MC_GetOccurredFaultsMotor1();
 8001856:	f000 fa91 	bl	8001d7c <MC_GetOccurredFaultsMotor1>
     SEND_MOTOR_ERROR_REPORT(status);
}

void SEND_MOTOR_ERROR_REPORT(uint16_t error_code)
{
    ERROR_OCCURRED = (uint8_t)error_code;
 800185a:	4b01      	ldr	r3, [pc, #4]	@ (8001860 <CHECK_MOTOR_STATUS+0xc>)
 800185c:	7018      	strb	r0, [r3, #0]
}
 800185e:	bd08      	pop	{r3, pc}
 8001860:	200006ec 	.word	0x200006ec

08001864 <SEND_SOFTWARE_ERROR_REPORT>:
}

void SEND_SOFTWARE_ERROR_REPORT(uint8_t fault)
{
	SOFTWARE_ERROR = fault;
 8001864:	4b01      	ldr	r3, [pc, #4]	@ (800186c <SEND_SOFTWARE_ERROR_REPORT+0x8>)
 8001866:	7018      	strb	r0, [r3, #0]
}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	200006ea 	.word	0x200006ea

08001870 <GET_MOTOR_ERROR_REPORT>:

uint8_t GET_MOTOR_ERROR_REPORT()
{
	if(ERROR_OCCURRED == MC_NO_ERROR)
 8001870:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <GET_MOTOR_ERROR_REPORT+0x2c>)
 8001872:	7818      	ldrb	r0, [r3, #0]
	{
		ERROR_CODE = SYSTEM_NORMAL;
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <GET_MOTOR_ERROR_REPORT+0x30>)
	if(ERROR_OCCURRED == MC_NO_ERROR)
 8001876:	b140      	cbz	r0, 800188a <GET_MOTOR_ERROR_REPORT+0x1a>
	}
	else if(ERROR_OCCURRED == MC_SPEED_FDBK)
 8001878:	2820      	cmp	r0, #32
 800187a:	d008      	beq.n	800188e <GET_MOTOR_ERROR_REPORT+0x1e>
	{
		ERROR_CODE = HALL_SENSOR_ERROR_CODE;
	}
	else if(ERROR_OCCURRED == MC_UNDER_VOLT)
 800187c:	2804      	cmp	r0, #4
 800187e:	d009      	beq.n	8001894 <GET_MOTOR_ERROR_REPORT+0x24>
	{
		ERROR_CODE = ABNORMAL_CURRENT;
	}
	else if(ERROR_OCCURRED == MC_OVER_TEMP)
 8001880:	2808      	cmp	r0, #8
 8001882:	d001      	beq.n	8001888 <GET_MOTOR_ERROR_REPORT+0x18>
	{
		ERROR_CODE  = BATTERY_TEMP_ERROR_CODE;
	}
	return ERROR_CODE;
 8001884:	7818      	ldrb	r0, [r3, #0]
 8001886:	4770      	bx	lr
		ERROR_CODE  = BATTERY_TEMP_ERROR_CODE;
 8001888:	201a      	movs	r0, #26
 800188a:	7018      	strb	r0, [r3, #0]
}
 800188c:	4770      	bx	lr
		ERROR_CODE = HALL_SENSOR_ERROR_CODE;
 800188e:	203a      	movs	r0, #58	@ 0x3a
 8001890:	7018      	strb	r0, [r3, #0]
 8001892:	4770      	bx	lr
		ERROR_CODE = ABNORMAL_CURRENT;
 8001894:	202a      	movs	r0, #42	@ 0x2a
 8001896:	7018      	strb	r0, [r3, #0]
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200006ec 	.word	0x200006ec
 80018a0:	200006eb 	.word	0x200006eb

080018a4 <GET_SOFTWARE_ERROR_REPORT>:

uint8_t GET_SOFTWARE_ERROR_REPORT()
{
	return SOFTWARE_ERROR;
 80018a4:	4b01      	ldr	r3, [pc, #4]	@ (80018ac <GET_SOFTWARE_ERROR_REPORT+0x8>)
}
 80018a6:	7818      	ldrb	r0, [r3, #0]
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	200006ea 	.word	0x200006ea

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b4:	480d      	ldr	r0, [pc, #52]	@ (80018ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018b6:	490e      	ldr	r1, [pc, #56]	@ (80018f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b8:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0b      	ldr	r2, [pc, #44]	@ (80018f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018cc:	4c0b      	ldr	r4, [pc, #44]	@ (80018fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018da:	f002 fc8f 	bl	80041fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018de:	f008 fe1b 	bl	800a518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f000 f82d 	bl	8001940 <main>
  bx  lr    
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	2000063c 	.word	0x2000063c
  ldr r2, =_sidata
 80018f4:	0800ade4 	.word	0x0800ade4
  ldr r2, =_sbss
 80018f8:	20000640 	.word	0x20000640
  ldr r4, =_ebss
 80018fc:	200058c4 	.word	0x200058c4

08001900 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <BusFault_Handler>
	...

08001904 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <vApplicationGetIdleTaskMemory+0x14>)
 8001906:	6003      	str	r3, [r0, #0]
{
 8001908:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800190a:	2380      	movs	r3, #128	@ 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800190c:	4c03      	ldr	r4, [pc, #12]	@ (800191c <vApplicationGetIdleTaskMemory+0x18>)
 800190e:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8001910:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001914:	6013      	str	r3, [r2, #0]
}
 8001916:	4770      	bx	lr
 8001918:	20000d90 	.word	0x20000d90
 800191c:	20000b90 	.word	0x20000b90

08001920 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <vApplicationGetTimerTaskMemory+0x18>)
 8001922:	6003      	str	r3, [r0, #0]
{
 8001924:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001926:	f44f 7380 	mov.w	r3, #256	@ 0x100
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800192a:	4c04      	ldr	r4, [pc, #16]	@ (800193c <vApplicationGetTimerTaskMemory+0x1c>)
 800192c:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 800192e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000af0 	.word	0x20000af0
 800193c:	200006f0 	.word	0x200006f0

08001940 <main>:
extern void StartSafetyTask(void const * argument);

static void MX_NVIC_Init(void);

int main(void)
{
 8001940:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001944:	2620      	movs	r6, #32
{
 8001946:	b097      	sub	sp, #92	@ 0x5c

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001948:	4c9e      	ldr	r4, [pc, #632]	@ (8001bc4 <main+0x284>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800194a:	f8df 828c 	ldr.w	r8, [pc, #652]	@ 8001bd8 <main+0x298>
  HAL_Init();
 800194e:	f002 fc5f 	bl	8004210 <HAL_Init>
  SystemClock();
 8001952:	f008 fcad 	bl	800a2b0 <SystemClock>
  GPIO_Init();
 8001956:	f008 fb49 	bl	8009fec <GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800195a:	4632      	mov	r2, r6
 800195c:	2100      	movs	r1, #0
 800195e:	a80e      	add	r0, sp, #56	@ 0x38
 8001960:	f008 fd76 	bl	800a450 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001964:	2300      	movs	r3, #0
 8001966:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800196a:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800196e:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001970:	7623      	strb	r3, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001972:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001976:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001978:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc1.Instance = ADC1;
 800197c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
  hadc1.Init.ScanConvMode = ENABLE;
 8001980:	2501      	movs	r5, #1
  hadc1.Instance = ADC1;
 8001982:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001986:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800198a:	f44f 6700 	mov.w	r7, #2048	@ 0x800
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800198e:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ENABLE;
 8001990:	6125      	str	r5, [r4, #16]
  hadc1.Init.NbrOfConversion = 1;
 8001992:	61e5      	str	r5, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001994:	6165      	str	r5, [r4, #20]
  hadc1.Instance = ADC1;
 8001996:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001998:	f8c4 8028 	str.w	r8, [r4, #40]	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800199c:	f8c4 9004 	str.w	r9, [r4, #4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80019a0:	60e7      	str	r7, [r4, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a2:	f002 fc61 	bl	8004268 <HAL_ADC_Init>
 80019a6:	b108      	cbz	r0, 80019ac <main+0x6c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019aa:	e7fe      	b.n	80019aa <main+0x6a>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019ac:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80019ae:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80019b0:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
  sConfigInjected.InjectedOffset = 0;
 80019b4:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80019b6:	2307      	movs	r3, #7
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80019b8:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80019bc:	a90e      	add	r1, sp, #56	@ 0x38
 80019be:	4620      	mov	r0, r4
  sConfigInjected.InjectedRank = 1;
 80019c0:	950f      	str	r5, [sp, #60]	@ 0x3c
  sConfigInjected.InjectedNbrOfConversion = 1;
 80019c2:	9512      	str	r5, [sp, #72]	@ 0x48
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80019c4:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80019c6:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80019ca:	f002 fdaf 	bl	800452c <HAL_ADCEx_InjectedConfigChannel>
 80019ce:	b108      	cbz	r0, 80019d4 <main+0x94>
 80019d0:	b672      	cpsid	i
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <main+0x92>
  sConfig.Rank = 1;
 80019d4:	e9cd 5008 	strd	r5, r0, [sp, #32]
  sConfig.Channel = ADC_CHANNEL_3;
 80019d8:	f04f 0b03 	mov.w	fp, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019dc:	a907      	add	r1, sp, #28
 80019de:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80019e0:	f8cd b01c 	str.w	fp, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e4:	f002 fcec 	bl	80043c0 <HAL_ADC_ConfigChannel>
 80019e8:	b108      	cbz	r0, 80019ee <main+0xae>
 80019ea:	b672      	cpsid	i
  while (1)
 80019ec:	e7fe      	b.n	80019ec <main+0xac>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019ee:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfig.Rank = 2;
 80019f0:	f04f 0e0a 	mov.w	lr, #10
 80019f4:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f6:	a907      	add	r1, sp, #28
 80019f8:	4620      	mov	r0, r4
  sConfig.Rank = 2;
 80019fa:	e9cd e307 	strd	lr, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fe:	f002 fcdf 	bl	80043c0 <HAL_ADC_ConfigChannel>
 8001a02:	b108      	cbz	r0, 8001a08 <main+0xc8>
 8001a04:	b672      	cpsid	i
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <main+0xc6>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a08:	e9cd b008 	strd	fp, r0, [sp, #32]
  sConfig.Channel = ADC_CHANNEL_12;
 8001a0c:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0e:	a907      	add	r1, sp, #28
 8001a10:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_12;
 8001a12:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a14:	f002 fcd4 	bl	80043c0 <HAL_ADC_ConfigChannel>
 8001a18:	b108      	cbz	r0, 8001a1e <main+0xde>
 8001a1a:	b672      	cpsid	i
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <main+0xdc>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a1e:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfig.Rank = 4;
 8001a20:	f04f 0c08 	mov.w	ip, #8
 8001a24:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a26:	4620      	mov	r0, r4
 8001a28:	a907      	add	r1, sp, #28
  sConfig.Rank = 4;
 8001a2a:	e9cd c307 	strd	ip, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a2e:	f002 fcc7 	bl	80043c0 <HAL_ADC_ConfigChannel>
 8001a32:	4683      	mov	fp, r0
 8001a34:	b108      	cbz	r0, 8001a3a <main+0xfa>
 8001a36:	b672      	cpsid	i
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <main+0xf8>
  hadc2.Instance = ADC2;
 8001a3a:	4c63      	ldr	r4, [pc, #396]	@ (8001bc8 <main+0x288>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	4632      	mov	r2, r6
 8001a40:	a80e      	add	r0, sp, #56	@ 0x38
 8001a42:	f008 fd05 	bl	800a450 <memset>
  hadc2.Instance = ADC2;
 8001a46:	4b61      	ldr	r3, [pc, #388]	@ (8001bcc <main+0x28c>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a48:	f8c4 9004 	str.w	r9, [r4, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a4c:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a4e:	e9cd bb07 	strd	fp, fp, [sp, #28]
 8001a52:	e9cd bb09 	strd	fp, fp, [sp, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a56:	f8c4 8028 	str.w	r8, [r4, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001a5a:	60e7      	str	r7, [r4, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a5c:	f8c4 b008 	str.w	fp, [r4, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001a60:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a62:	f884 b018 	strb.w	fp, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a66:	f884 b020 	strb.w	fp, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a6a:	f8c4 b02c 	str.w	fp, [r4, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001a6e:	f884 b030 	strb.w	fp, [r4, #48]	@ 0x30
  hadc2.Init.NbrOfConversion = 1;
 8001a72:	61e5      	str	r5, [r4, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a74:	6165      	str	r5, [r4, #20]
  hadc2.Instance = ADC2;
 8001a76:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a78:	f002 fbf6 	bl	8004268 <HAL_ADC_Init>
 8001a7c:	b108      	cbz	r0, 8001a82 <main+0x142>
 8001a7e:	b672      	cpsid	i
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <main+0x140>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a82:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8001a84:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001a86:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
  sConfigInjected.InjectedOffset = 0;
 8001a8a:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8001a8c:	270e      	movs	r7, #14
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001a8e:	a90e      	add	r1, sp, #56	@ 0x38
 8001a90:	4620      	mov	r0, r4
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8001a92:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
  sConfigInjected.InjectedRank = 1;
 8001a96:	950f      	str	r5, [sp, #60]	@ 0x3c
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001a98:	9512      	str	r5, [sp, #72]	@ 0x48
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8001a9a:	970e      	str	r7, [sp, #56]	@ 0x38
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001a9c:	f002 fd46 	bl	800452c <HAL_ADCEx_InjectedConfigChannel>
 8001aa0:	b108      	cbz	r0, 8001aa6 <main+0x166>
 8001aa2:	b672      	cpsid	i
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <main+0x164>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aa6:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001aa8:	a907      	add	r1, sp, #28
 8001aaa:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 8001aac:	9707      	str	r7, [sp, #28]
  sConfig.Rank = 1;
 8001aae:	9508      	str	r5, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ab0:	f002 fc86 	bl	80043c0 <HAL_ADC_ConfigChannel>
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	b108      	cbz	r0, 8001abc <main+0x17c>
 8001ab8:	b672      	cpsid	i
  while (1)
 8001aba:	e7fe      	b.n	8001aba <main+0x17a>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8001ac0:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8001ac4:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ac8:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8001acc:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8001ad0:	9002      	str	r0, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad2:	9000      	str	r0, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad4:	900d      	str	r0, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad6:	9001      	str	r0, [sp, #4]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad8:	4601      	mov	r1, r0
 8001ada:	4632      	mov	r2, r6
 8001adc:	a80e      	add	r0, sp, #56	@ 0x38
 8001ade:	f008 fcb7 	bl	800a450 <memset>
  htim1.Instance = TIM1;
 8001ae2:	483b      	ldr	r0, [pc, #236]	@ (8001bd0 <main+0x290>)
 8001ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd4 <main+0x294>)
 8001ae6:	6003      	str	r3, [r0, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001ae8:	f241 57f9 	movw	r7, #5625	@ 0x15f9
 8001aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af0:	e9c0 7303 	strd	r7, r3, [r0, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001af4:	6086      	str	r6, [r0, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001af6:	6145      	str	r5, [r0, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001af8:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afa:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001afc:	f003 fbcc 	bl	8005298 <HAL_TIM_Base_Init>
 8001b00:	b108      	cbz	r0, 8001b06 <main+0x1c6>
 8001b02:	b672      	cpsid	i
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <main+0x1c4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b06:	4832      	ldr	r0, [pc, #200]	@ (8001bd0 <main+0x290>)
 8001b08:	f003 fc92 	bl	8005430 <HAL_TIM_PWM_Init>
 8001b0c:	b108      	cbz	r0, 8001b12 <main+0x1d2>
 8001b0e:	b672      	cpsid	i
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <main+0x1d0>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001b12:	2506      	movs	r5, #6
 8001b14:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001b16:	482e      	ldr	r0, [pc, #184]	@ (8001bd0 <main+0x290>)
 8001b18:	a902      	add	r1, sp, #8
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001b1a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001b1e:	f003 fec5 	bl	80058ac <HAL_TIM_SlaveConfigSynchro>
 8001b22:	b108      	cbz	r0, 8001b28 <main+0x1e8>
 8001b24:	b672      	cpsid	i
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <main+0x1e6>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b2a:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2c:	4828      	ldr	r0, [pc, #160]	@ (8001bd0 <main+0x290>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b2e:	9300      	str	r3, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b30:	4669      	mov	r1, sp
 8001b32:	f004 f941 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4602      	mov	r2, r0
 8001b38:	b108      	cbz	r0, 8001b3e <main+0x1fe>
 8001b3a:	b672      	cpsid	i
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <main+0x1fc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3e:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8001b40:	e9cd 3007 	strd	r3, r0, [sp, #28]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b44:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b48:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4c:	900d      	str	r0, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4e:	a907      	add	r1, sp, #28
 8001b50:	481f      	ldr	r0, [pc, #124]	@ (8001bd0 <main+0x290>)
 8001b52:	f003 fcfd 	bl	8005550 <HAL_TIM_PWM_ConfigChannel>
 8001b56:	b108      	cbz	r0, 8001b5c <main+0x21c>
 8001b58:	b672      	cpsid	i
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <main+0x21a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b5c:	481c      	ldr	r0, [pc, #112]	@ (8001bd0 <main+0x290>)
 8001b5e:	2204      	movs	r2, #4
 8001b60:	a907      	add	r1, sp, #28
 8001b62:	f003 fcf5 	bl	8005550 <HAL_TIM_PWM_ConfigChannel>
 8001b66:	b108      	cbz	r0, 8001b6c <main+0x22c>
 8001b68:	b672      	cpsid	i
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <main+0x22a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b6c:	4818      	ldr	r0, [pc, #96]	@ (8001bd0 <main+0x290>)
 8001b6e:	2208      	movs	r2, #8
 8001b70:	a907      	add	r1, sp, #28
 8001b72:	f003 fced 	bl	8005550 <HAL_TIM_PWM_ConfigChannel>
 8001b76:	b108      	cbz	r0, 8001b7c <main+0x23c>
 8001b78:	b672      	cpsid	i
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <main+0x23a>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001b7c:	2270      	movs	r2, #112	@ 0x70
 8001b7e:	f241 53f8 	movw	r3, #5624	@ 0x15f8
 8001b82:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b86:	4812      	ldr	r0, [pc, #72]	@ (8001bd0 <main+0x290>)
 8001b88:	220c      	movs	r2, #12
 8001b8a:	a907      	add	r1, sp, #28
 8001b8c:	f003 fce0 	bl	8005550 <HAL_TIM_PWM_ConfigChannel>
 8001b90:	b108      	cbz	r0, 8001b96 <main+0x256>
 8001b92:	b672      	cpsid	i
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <main+0x254>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001b96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b9e:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8001ba2:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001ba6:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001baa:	2248      	movs	r2, #72	@ 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bac:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bae:	a90e      	add	r1, sp, #56	@ 0x38
 8001bb0:	4807      	ldr	r0, [pc, #28]	@ (8001bd0 <main+0x290>)
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001bb2:	e9cd 4210 	strd	r4, r2, [sp, #64]	@ 0x40
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bb6:	f004 f93f 	bl	8005e38 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	b170      	cbz	r0, 8001bdc <main+0x29c>
 8001bbe:	b672      	cpsid	i
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <main+0x280>
 8001bc2:	bf00      	nop
 8001bc4:	20000f10 	.word	0x20000f10
 8001bc8:	20000ec8 	.word	0x20000ec8
 8001bcc:	40012100 	.word	0x40012100
 8001bd0:	20000e80 	.word	0x20000e80
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	0f000001 	.word	0x0f000001
  htim2.Instance = TIM2;
 8001bdc:	4d46      	ldr	r5, [pc, #280]	@ (8001cf8 <main+0x3b8>)
  HAL_TIM_MspPostInit(&htim1);
 8001bde:	4847      	ldr	r0, [pc, #284]	@ (8001cfc <main+0x3bc>)
 8001be0:	f001 fd48 	bl	8003674 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8001be4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001be8:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bea:	4628      	mov	r0, r5
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8001bec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf0:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001bf4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001bf8:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 8001bfc:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	e9cd 4402 	strd	r4, r4, [sp, #8]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c04:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c08:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8001c0c:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c0e:	f003 fb43 	bl	8005298 <HAL_TIM_Base_Init>
 8001c12:	b108      	cbz	r0, 8001c18 <main+0x2d8>
 8001c14:	b672      	cpsid	i
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <main+0x2d6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c20:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c22:	f003 fd99 	bl	8005758 <HAL_TIM_ConfigClockSource>
 8001c26:	b108      	cbz	r0, 8001c2c <main+0x2ec>
 8001c28:	b672      	cpsid	i
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <main+0x2ea>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c2c:	2300      	movs	r3, #0
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8001c2e:	220f      	movs	r2, #15
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001c30:	4831      	ldr	r0, [pc, #196]	@ (8001cf8 <main+0x3b8>)
  sConfig.Commutation_Delay = 0;
 8001c32:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001c34:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c36:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8001c3a:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001c3c:	f004 f858 	bl	8005cf0 <HAL_TIMEx_HallSensor_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	b108      	cbz	r0, 8001c48 <main+0x308>
 8001c44:	b672      	cpsid	i
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <main+0x306>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001c48:	2250      	movs	r2, #80	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c4a:	482b      	ldr	r0, [pc, #172]	@ (8001cf8 <main+0x3b8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001c4c:	9202      	str	r2, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c4e:	a902      	add	r1, sp, #8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c50:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c52:	f004 f8b1 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4605      	mov	r5, r0
 8001c58:	b108      	cbz	r0, 8001c5e <main+0x31e>
 8001c5a:	b672      	cpsid	i
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <main+0x31c>
  UART_Init();
 8001c5e:	f008 fbb7 	bl	800a3d0 <UART_Init>
  MX_MotorControl_Init();
 8001c62:	f001 fab1 	bl	80031c8 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8001c66:	462a      	mov	r2, r5
 8001c68:	2102      	movs	r1, #2
 8001c6a:	2012      	movs	r0, #18
 8001c6c:	f002 fd44 	bl	80046f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c70:	2012      	movs	r0, #18
 8001c72:	f002 fd7d 	bl	8004770 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c76:	462a      	mov	r2, r5
 8001c78:	4629      	mov	r1, r5
 8001c7a:	2019      	movs	r0, #25
 8001c7c:	f002 fd3c 	bl	80046f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c80:	2019      	movs	r0, #25
 8001c82:	f002 fd75 	bl	8004770 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 0);
 8001c86:	462a      	mov	r2, r5
 8001c88:	2104      	movs	r1, #4
 8001c8a:	2018      	movs	r0, #24
 8001c8c:	f002 fd34 	bl	80046f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c90:	2018      	movs	r0, #24
 8001c92:	f002 fd6d 	bl	8004770 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001c96:	462a      	mov	r2, r5
 8001c98:	2103      	movs	r1, #3
 8001c9a:	201c      	movs	r0, #28
 8001c9c:	f002 fd2c 	bl	80046f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ca0:	201c      	movs	r0, #28
 8001ca2:	f002 fd65 	bl	8004770 <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 8001ca6:	4c16      	ldr	r4, [pc, #88]	@ (8001d00 <main+0x3c0>)
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001ca8:	462a      	mov	r2, r5
 8001caa:	2103      	movs	r1, #3
 8001cac:	2025      	movs	r0, #37	@ 0x25
 8001cae:	f002 fd23 	bl	80046f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cb2:	2025      	movs	r0, #37	@ 0x25
 8001cb4:	f002 fd5c 	bl	8004770 <HAL_NVIC_EnableIRQ>
  GoInit();
 8001cb8:	f7ff fd78 	bl	80017ac <GoInit>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 8001cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cbe:	ae07      	add	r6, sp, #28
 8001cc0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001cc2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001cc6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 8001cca:	4629      	mov	r1, r5
 8001ccc:	a807      	add	r0, sp, #28
 8001cce:	f004 f993 	bl	8005ff8 <osThreadCreate>
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <main+0x3c4>)
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 8001cd4:	340c      	adds	r4, #12
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 8001cd6:	6018      	str	r0, [r3, #0]
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 8001cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cda:	ae0e      	add	r6, sp, #56	@ 0x38
 8001cdc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001cde:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ce2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  safetyHandle = osThreadCreate(osThread(safety), NULL);
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	a80e      	add	r0, sp, #56	@ 0x38
 8001cea:	f004 f985 	bl	8005ff8 <osThreadCreate>
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <main+0x3c8>)
 8001cf0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001cf2:	f004 f97b 	bl	8005fec <osKernelStart>
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <main+0x3b6>
 8001cf8:	20000e38 	.word	0x20000e38
 8001cfc:	20000e80 	.word	0x20000e80
 8001d00:	0800aaf4 	.word	0x0800aaf4
 8001d04:	20000e34 	.word	0x20000e34
 8001d08:	20000e30 	.word	0x20000e30

08001d0c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001d0e:	6802      	ldr	r2, [r0, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d000      	beq.n	8001d16 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001d14:	4770      	bx	lr
    HAL_IncTick();
 8001d16:	f002 ba95 	b.w	8004244 <HAL_IncTick>
 8001d1a:	bf00      	nop
 8001d1c:	40001000 	.word	0x40001000

08001d20 <Error_Handler>:
 8001d20:	b672      	cpsid	i
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <Error_Handler+0x2>

08001d24 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001d24:	4b01      	ldr	r3, [pc, #4]	@ (8001d2c <MC_StartMotor1+0x8>)
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	f000 b85a 	b.w	8001de0 <MCI_StartMotor>
 8001d2c:	20001390 	.word	0x20001390

08001d30 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001d30:	4b01      	ldr	r3, [pc, #4]	@ (8001d38 <MC_StopMotor1+0x8>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	f000 b85e 	b.w	8001df4 <MCI_StopMotor>
 8001d38:	20001390 	.word	0x20001390

08001d3c <MC_ProgramTorqueRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1( int16_t hFinalTorque, uint16_t hDurationms )
{
 8001d3c:	b410      	push	{r4}
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8001d3e:	4c04      	ldr	r4, [pc, #16]	@ (8001d50 <MC_ProgramTorqueRampMotor1+0x14>)
{
 8001d40:	4603      	mov	r3, r0
 8001d42:	460a      	mov	r2, r1
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8001d44:	6820      	ldr	r0, [r4, #0]
}
 8001d46:	f85d 4b04 	ldr.w	r4, [sp], #4
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f000 b834 	b.w	8001db8 <MCI_ExecTorqueRamp>
 8001d50:	20001390 	.word	0x20001390

08001d54 <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 8001d54:	4b01      	ldr	r3, [pc, #4]	@ (8001d5c <MC_GetMecSpeedAverageMotor1+0x8>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	f000 b8ac 	b.w	8001eb4 <MCI_GetAvrgMecSpeedUnit>
 8001d5c:	20001390 	.word	0x20001390

08001d60 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8001d60:	4b01      	ldr	r3, [pc, #4]	@ (8001d68 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	f000 b90a 	b.w	8001f7c <MCI_GetPhaseCurrentAmplitude>
 8001d68:	20001390 	.word	0x20001390

08001d6c <MC_GetIqdMotor1>:
/**
 * @brief returns Iq and Id current values for Motor 1 in qd_t format
 */
__weak qd_t MC_GetIqdMotor1(void)
{
	return MCI_GetIqd( pMCI[M1] );
 8001d6c:	4b02      	ldr	r3, [pc, #8]	@ (8001d78 <MC_GetIqdMotor1+0xc>)
 8001d6e:	6818      	ldr	r0, [r3, #0]
{
 8001d70:	b082      	sub	sp, #8
}
 8001d72:	b002      	add	sp, #8
	return MCI_GetIqd( pMCI[M1] );
 8001d74:	f000 b8c6 	b.w	8001f04 <MCI_GetIqd>
 8001d78:	20001390 	.word	0x20001390

08001d7c <MC_GetOccurredFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 8001d7c:	4b01      	ldr	r3, [pc, #4]	@ (8001d84 <MC_GetOccurredFaultsMotor1+0x8>)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	f000 b884 	b.w	8001e8c <MCI_GetOccurredFaults>
 8001d84:	20001390 	.word	0x20001390

08001d88 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001d88:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8001d8c:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8001d90:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001d92:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8001d96:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8001d9a:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001d9e:	f880 c018 	strb.w	ip, [r0, #24]
}
 8001da2:	4770      	bx	lr

08001da4 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001da4:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001da8:	f240 1301 	movw	r3, #257	@ 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001dac:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8001db0:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8001db2:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001db4:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8001db6:	4770      	bx	lr

08001db8 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001db8:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001dbc:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001dbe:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8001dc2:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8001dc4:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001dc6:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop

08001dcc <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8001dcc:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001dce:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001dd0:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001dd2:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8001dd4:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001dd8:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8001dda:	b002      	add	sp, #8
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8001de0:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001de2:	2103      	movs	r1, #3
{
 8001de4:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8001de6:	6800      	ldr	r0, [r0, #0]
 8001de8:	f007 ff4e 	bl	8009c88 <STM_NextState>

  if ( RetVal == true )
 8001dec:	b108      	cbz	r0, 8001df2 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001dee:	2301      	movs	r3, #1
 8001df0:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8001df2:	bd10      	pop	{r4, pc}

08001df4 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8001df4:	6800      	ldr	r0, [r0, #0]
 8001df6:	2107      	movs	r1, #7
 8001df8:	f007 bf46 	b.w	8009c88 <STM_NextState>

08001dfc <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8001dfc:	6800      	ldr	r0, [r0, #0]
 8001dfe:	f007 bfbf 	b.w	8009d80 <STM_FaultAcknowledged>
 8001e02:	bf00      	nop

08001e04 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8001e04:	6800      	ldr	r0, [r0, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	f007 bf3e 	b.w	8009c88 <STM_NextState>

08001e0c <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8001e0c:	b178      	cbz	r0, 8001e2e <MCI_ExecBufferedCommands+0x22>
{
 8001e0e:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001e10:	7e03      	ldrb	r3, [r0, #24]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	4604      	mov	r4, r0
 8001e16:	d000      	beq.n	8001e1a <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8001e18:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8001e1a:	7b01      	ldrb	r1, [r0, #12]
 8001e1c:	2902      	cmp	r1, #2
 8001e1e:	d020      	beq.n	8001e62 <MCI_ExecBufferedCommands+0x56>
 8001e20:	2903      	cmp	r1, #3
 8001e22:	d005      	beq.n	8001e30 <MCI_ExecBufferedCommands+0x24>
 8001e24:	2901      	cmp	r1, #1
 8001e26:	d00c      	beq.n	8001e42 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	7623      	strb	r3, [r4, #24]
}
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001e30:	6882      	ldr	r2, [r0, #8]
 8001e32:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001e36:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001e3a:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	7623      	strb	r3, [r4, #24]
}
 8001e40:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001e42:	6883      	ldr	r3, [r0, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001e4a:	6840      	ldr	r0, [r0, #4]
 8001e4c:	f007 fe40 	bl	8009ad0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001e50:	8ae2      	ldrh	r2, [r4, #22]
 8001e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e56:	6860      	ldr	r0, [r4, #4]
 8001e58:	f007 fe3e 	bl	8009ad8 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d0e3      	beq.n	8001e28 <MCI_ExecBufferedCommands+0x1c>
 8001e60:	e7ec      	b.n	8001e3c <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001e62:	6883      	ldr	r3, [r0, #8]
 8001e64:	2100      	movs	r1, #0
 8001e66:	f883 1024 	strb.w	r1, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001e6a:	6840      	ldr	r0, [r0, #4]
 8001e6c:	f007 fe30 	bl	8009ad0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001e70:	8ae2      	ldrh	r2, [r4, #22]
 8001e72:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001e76:	6860      	ldr	r0, [r4, #4]
 8001e78:	f007 fe2e 	bl	8009ad8 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d0d3      	beq.n	8001e28 <MCI_ExecBufferedCommands+0x1c>
 8001e80:	e7dc      	b.n	8001e3c <MCI_ExecBufferedCommands+0x30>
 8001e82:	bf00      	nop

08001e84 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8001e84:	6800      	ldr	r0, [r0, #0]
 8001e86:	f007 bf79 	b.w	8009d7c <STM_GetState>
 8001e8a:	bf00      	nop

08001e8c <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 8001e8c:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 8001e8e:	6800      	ldr	r0, [r0, #0]
 8001e90:	f007 ff82 	bl	8009d98 <STM_GetFaultState>
}
 8001e94:	b280      	uxth	r0, r0
 8001e96:	bd08      	pop	{r3, pc}

08001e98 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8001e98:	7e40      	ldrb	r0, [r0, #25]
 8001e9a:	4770      	bx	lr

08001e9c <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8001e9c:	7b03      	ldrb	r3, [r0, #12]
 8001e9e:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8001ea0:	bf0c      	ite	eq
 8001ea2:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8001ea6:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8001eac:	6840      	ldr	r0, [r0, #4]
 8001eae:	f007 be57 	b.w	8009b60 <STC_StopRamp>
 8001eb2:	bf00      	nop

08001eb4 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8001eb4:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8001eb6:	6840      	ldr	r0, [r0, #4]
 8001eb8:	f007 fdf0 	bl	8009a9c <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8001ebc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8001ec0:	f007 bd8e 	b.w	80099e0 <SPD_GetAvrgMecSpeedUnit>

08001ec4 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8001ec4:	6840      	ldr	r0, [r0, #4]
 8001ec6:	f007 bdf3 	b.w	8009ab0 <STC_GetMecSpeedRefUnit>
 8001eca:	bf00      	nop

08001ecc <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8001ecc:	6882      	ldr	r2, [r0, #8]
 8001ece:	6810      	ldr	r0, [r2, #0]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	b282      	uxth	r2, r0
 8001ed4:	f362 030f 	bfi	r3, r2, #0, #16
 8001ed8:	0c00      	lsrs	r0, r0, #16
 8001eda:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001ede:	b082      	sub	sp, #8
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	b002      	add	sp, #8
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8001ee8:	6882      	ldr	r2, [r0, #8]
 8001eea:	6850      	ldr	r0, [r2, #4]
 8001eec:	2300      	movs	r3, #0
 8001eee:	b282      	uxth	r2, r0
 8001ef0:	f362 030f 	bfi	r3, r2, #0, #16
 8001ef4:	0c00      	lsrs	r0, r0, #16
 8001ef6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001efa:	b082      	sub	sp, #8
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	b002      	add	sp, #8
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop

08001f04 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8001f04:	6882      	ldr	r2, [r0, #8]
 8001f06:	68d0      	ldr	r0, [r2, #12]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	b282      	uxth	r2, r0
 8001f0c:	f362 030f 	bfi	r3, r2, #0, #16
 8001f10:	0c00      	lsrs	r0, r0, #16
 8001f12:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001f16:	b082      	sub	sp, #8
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	b002      	add	sp, #8
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8001f20:	6882      	ldr	r2, [r0, #8]
 8001f22:	6910      	ldr	r0, [r2, #16]
 8001f24:	2300      	movs	r3, #0
 8001f26:	b282      	uxth	r2, r0
 8001f28:	f362 030f 	bfi	r3, r2, #0, #16
 8001f2c:	0c00      	lsrs	r0, r0, #16
 8001f2e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001f32:	b082      	sub	sp, #8
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	b002      	add	sp, #8
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8001f3c:	6882      	ldr	r2, [r0, #8]
 8001f3e:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001f42:	2300      	movs	r3, #0
 8001f44:	b282      	uxth	r2, r0
 8001f46:	f362 030f 	bfi	r3, r2, #0, #16
 8001f4a:	0c00      	lsrs	r0, r0, #16
 8001f4c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001f50:	b082      	sub	sp, #8
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	b002      	add	sp, #8
 8001f56:	4770      	bx	lr

08001f58 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8001f58:	6882      	ldr	r2, [r0, #8]
 8001f5a:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	b282      	uxth	r2, r0
 8001f62:	f362 030f 	bfi	r3, r2, #0, #16
 8001f66:	0c00      	lsrs	r0, r0, #16
 8001f68:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001f6c:	b082      	sub	sp, #8
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	b002      	add	sp, #8
 8001f72:	4770      	bx	lr

08001f74 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8001f74:	6883      	ldr	r3, [r0, #8]
}
 8001f76:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001f7a:	4770      	bx	lr

08001f7c <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8001f7c:	6882      	ldr	r2, [r0, #8]
{
 8001f7e:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8001f80:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8001f84:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 8001f88:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8001f8c:	fb00 3000 	mla	r0, r0, r0, r3
 8001f90:	f000 f8f2 	bl	8002178 <MCM_Sqrt>

  if ( wAux1 > INT16_MAX )
 8001f94:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001f98:	4298      	cmp	r0, r3
 8001f9a:	bfa8      	it	ge
 8001f9c:	4618      	movge	r0, r3
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
}
 8001f9e:	b200      	sxth	r0, r0
 8001fa0:	bd08      	pop	{r3, pc}
 8001fa2:	bf00      	nop

08001fa4 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	6882      	ldr	r2, [r0, #8]
 8001fa8:	f361 030f 	bfi	r3, r1, #0, #16
 8001fac:	f361 431f 	bfi	r3, r1, #16, #16
 8001fb0:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop

08001fb8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001fb8:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8001fba:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8001fbe:	f007 fe25 	bl	8009c0c <STC_GetDefaultIqdref>
 8001fc2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001fc6:	8220      	strh	r0, [r4, #16]
 8001fc8:	8263      	strh	r3, [r4, #18]
}
 8001fca:	bd10      	pop	{r4, pc}

08001fcc <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8001fcc:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001fd0:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001fd4:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001fd8:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001fdc:	fb10 f202 	smulbb	r2, r0, r2
 8001fe0:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8001fe4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8001fe8:	b084      	sub	sp, #16
 8001fea:	b203      	sxth	r3, r0
  if ( wbeta_tmp > INT16_MAX )
 8001fec:	da05      	bge.n	8001ffa <MCM_Clarke+0x2e>
 8001fee:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8001ff0:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8001ff4:	da0c      	bge.n	8002010 <MCM_Clarke+0x44>
 8001ff6:	4a09      	ldr	r2, [pc, #36]	@ (800201c <MCM_Clarke+0x50>)
 8001ff8:	e001      	b.n	8001ffe <MCM_Clarke+0x32>
 8001ffa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2000      	movs	r0, #0
 8002002:	f363 000f 	bfi	r0, r3, #0, #16
 8002006:	b293      	uxth	r3, r2
 8002008:	f363 401f 	bfi	r0, r3, #16, #16
}
 800200c:	b004      	add	sp, #16
 800200e:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <MCM_Clarke+0x50>)
 8002012:	b20a      	sxth	r2, r1
 8002014:	4282      	cmp	r2, r0
 8002016:	bfb8      	it	lt
 8002018:	4602      	movlt	r2, r0
 800201a:	e7f0      	b.n	8001ffe <MCM_Clarke+0x32>
 800201c:	ffff8001 	.word	0xffff8001

08002020 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8002020:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8002024:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8002028:	f400 7140 	and.w	r1, r0, #768	@ 0x300
 800202c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 8002030:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8002032:	d028      	beq.n	8002086 <MCM_Trig_Functions+0x66>
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	461a      	mov	r2, r3
 800203a:	d816      	bhi.n	800206a <MCM_Trig_Functions+0x4a>
 800203c:	b361      	cbz	r1, 8002098 <MCM_Trig_Functions+0x78>
 800203e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8002042:	d109      	bne.n	8002058 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002044:	b2c0      	uxtb	r0, r0
 8002046:	43c2      	mvns	r2, r0
 8002048:	491a      	ldr	r1, [pc, #104]	@ (80020b4 <MCM_Trig_Functions+0x94>)
 800204a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 800204c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002050:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002054:	4252      	negs	r2, r2
 8002056:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8002058:	b29b      	uxth	r3, r3
 800205a:	2000      	movs	r0, #0
 800205c:	f363 000f 	bfi	r0, r3, #0, #16
 8002060:	b292      	uxth	r2, r2
 8002062:	f362 401f 	bfi	r0, r2, #16, #16
}
 8002066:	b002      	add	sp, #8
 8002068:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800206a:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 800206e:	d1f3      	bne.n	8002058 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002070:	4910      	ldr	r1, [pc, #64]	@ (80020b4 <MCM_Trig_Functions+0x94>)
 8002072:	b2c0      	uxtb	r0, r0
 8002074:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002076:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800207a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800207c:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800207e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002082:	b21b      	sxth	r3, r3
      break;
 8002084:	e7e8      	b.n	8002058 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002086:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002088:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800208a:	490a      	ldr	r1, [pc, #40]	@ (80020b4 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800208c:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800208e:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002092:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8002096:	e7df      	b.n	8002058 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002098:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800209a:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800209c:	4905      	ldr	r1, [pc, #20]	@ (80020b4 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800209e:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80020a0:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80020a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80020a8:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80020aa:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80020ac:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80020ae:	b21b      	sxth	r3, r3
      break;
 80020b0:	e7d2      	b.n	8002058 <MCM_Trig_Functions+0x38>
 80020b2:	bf00      	nop
 80020b4:	0800ab54 	.word	0x0800ab54

080020b8 <MCM_Park>:
{
 80020b8:	b530      	push	{r4, r5, lr}
 80020ba:	4605      	mov	r5, r0
 80020bc:	4604      	mov	r4, r0
 80020be:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80020c0:	4608      	mov	r0, r1
 80020c2:	f7ff ffad 	bl	8002020 <MCM_Trig_Functions>
 80020c6:	b22d      	sxth	r5, r5
 80020c8:	b201      	sxth	r1, r0
 80020ca:	1424      	asrs	r4, r4, #16
 80020cc:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 80020ce:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 80020d2:	fb04 3310 	mls	r3, r4, r0, r3
  if ( wqd_tmp > INT16_MAX )
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020da:	da05      	bge.n	80020e8 <MCM_Park+0x30>
 80020dc:	13da      	asrs	r2, r3, #15
  else if ( wqd_tmp < ( -32768 ) )
 80020de:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 80020e2:	da22      	bge.n	800212a <MCM_Park+0x72>
 80020e4:	4a14      	ldr	r2, [pc, #80]	@ (8002138 <MCM_Park+0x80>)
 80020e6:	e001      	b.n	80020ec <MCM_Park+0x34>
 80020e8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 80020ec:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80020f0:	fb05 4400 	mla	r4, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 80020f4:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80020f8:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 80020fc:	da04      	bge.n	8002108 <MCM_Park+0x50>
  else if ( wqd_tmp < ( -32768 ) )
 80020fe:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002102:	da0c      	bge.n	800211e <MCM_Park+0x66>
 8002104:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <MCM_Park+0x80>)
 8002106:	e001      	b.n	800210c <MCM_Park+0x54>
 8002108:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return ( Output );
 800210c:	b292      	uxth	r2, r2
 800210e:	2000      	movs	r0, #0
 8002110:	f362 000f 	bfi	r0, r2, #0, #16
 8002114:	b29b      	uxth	r3, r3
 8002116:	f363 401f 	bfi	r0, r3, #16, #16
}
 800211a:	b005      	add	sp, #20
 800211c:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 800211e:	4906      	ldr	r1, [pc, #24]	@ (8002138 <MCM_Park+0x80>)
 8002120:	b21b      	sxth	r3, r3
 8002122:	428b      	cmp	r3, r1
 8002124:	bfb8      	it	lt
 8002126:	460b      	movlt	r3, r1
 8002128:	e7f0      	b.n	800210c <MCM_Park+0x54>
    hqd_tmp = ( int16_t )( wqd_tmp );
 800212a:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <MCM_Park+0x80>)
 800212c:	b212      	sxth	r2, r2
 800212e:	429a      	cmp	r2, r3
 8002130:	bfb8      	it	lt
 8002132:	461a      	movlt	r2, r3
 8002134:	e7da      	b.n	80020ec <MCM_Park+0x34>
 8002136:	bf00      	nop
 8002138:	ffff8001 	.word	0xffff8001

0800213c <MCM_Rev_Park>:
{
 800213c:	b530      	push	{r4, r5, lr}
 800213e:	4605      	mov	r5, r0
 8002140:	b085      	sub	sp, #20
 8002142:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002144:	4608      	mov	r0, r1
 8002146:	f7ff ff6b 	bl	8002020 <MCM_Trig_Functions>
 800214a:	1424      	asrs	r4, r4, #16
 800214c:	1402      	asrs	r2, r0, #16
 800214e:	b22d      	sxth	r5, r5
 8002150:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8002152:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8002156:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 800215a:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 800215e:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8002162:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8002166:	2000      	movs	r0, #0
 8002168:	f363 000f 	bfi	r0, r3, #0, #16
 800216c:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8002170:	f364 401f 	bfi	r0, r4, #16, #16
}
 8002174:	b005      	add	sp, #20
 8002176:	bd30      	pop	{r4, r5, pc}

08002178 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 8002178:	1e03      	subs	r3, r0, #0
 800217a:	dd32      	ble.n	80021e2 <MCM_Sqrt+0x6a>
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 800217c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002180:	bfd4      	ite	le
 8002182:	2180      	movle	r1, #128	@ 0x80
 8002184:	f44f 5100 	movgt.w	r1, #8192	@ 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002188:	fb93 f2f1 	sdiv	r2, r3, r1
 800218c:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 800218e:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002192:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8002196:	d025      	beq.n	80021e4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002198:	fb93 f2f0 	sdiv	r2, r3, r0
 800219c:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800219e:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80021a2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80021a6:	d01d      	beq.n	80021e4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80021a8:	fb93 f2f1 	sdiv	r2, r3, r1
 80021ac:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 80021ae:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80021b2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80021b6:	d015      	beq.n	80021e4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80021b8:	fb93 f2f0 	sdiv	r2, r3, r0
 80021bc:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 80021be:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80021c2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80021c6:	d00d      	beq.n	80021e4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80021c8:	fb93 f2f1 	sdiv	r2, r3, r1
 80021cc:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 80021ce:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80021d2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80021d6:	d005      	beq.n	80021e4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80021d8:	fb93 f3f0 	sdiv	r3, r3, r0
 80021dc:	4418      	add	r0, r3
 80021de:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 80021e0:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 80021e2:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80021e8:	b538      	push	{r3, r4, r5, lr}
 80021ea:	2326      	movs	r3, #38	@ 0x26
 80021ec:	4916      	ldr	r1, [pc, #88]	@ (8002248 <FOC_Clear+0x60>)
 80021ee:	fb00 f303 	mul.w	r3, r0, r3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 80021f2:	2400      	movs	r4, #0
 80021f4:	50cc      	str	r4, [r1, r3]
{
 80021f6:	4605      	mov	r5, r0
 80021f8:	f103 0208 	add.w	r2, r3, #8
 80021fc:	1858      	adds	r0, r3, r1
 80021fe:	3310      	adds	r3, #16
 8002200:	440a      	add	r2, r1
 8002202:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002204:	4911      	ldr	r1, [pc, #68]	@ (800224c <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8002206:	6044      	str	r4, [r0, #4]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002208:	6054      	str	r4, [r2, #4]
 800220a:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800220c:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8002210:	f8c3 400a 	str.w	r4, [r3, #10]
 8002214:	f8c3 4006 	str.w	r4, [r3, #6]
 8002218:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800221c:	4621      	mov	r1, r4
 800221e:	f007 f91f 	bl	8009460 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8002222:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <FOC_Clear+0x68>)
 8002224:	4621      	mov	r1, r4
 8002226:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800222a:	f007 f919 	bl	8009460 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <FOC_Clear+0x6c>)
 8002230:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002234:	f007 fc34 	bl	8009aa0 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <FOC_Clear+0x70>)
 800223a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800223e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002242:	f007 bb05 	b.w	8009850 <PWMC_SwitchOffPWM>
 8002246:	bf00      	nop
 8002248:	2000135c 	.word	0x2000135c
 800224c:	200012d4 	.word	0x200012d4
 8002250:	200012d0 	.word	0x200012d0
 8002254:	200012dc 	.word	0x200012dc
 8002258:	200012bc 	.word	0x200012bc

0800225c <MCboot>:
{
 800225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8002260:	f8df a1d0 	ldr.w	sl, [pc, #464]	@ 8002434 <MCboot+0x1d8>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8002264:	4e5b      	ldr	r6, [pc, #364]	@ (80023d4 <MCboot+0x178>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002266:	4d5c      	ldr	r5, [pc, #368]	@ (80023d8 <MCboot+0x17c>)
  HALL_Init (&HALL_M1);
 8002268:	f8df b1cc 	ldr.w	fp, [pc, #460]	@ 8002438 <MCboot+0x1dc>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800226c:	4f5b      	ldr	r7, [pc, #364]	@ (80023dc <MCboot+0x180>)
  PID_HandleInit(&PIDIqHandle_M1);
 800226e:	f8df 91cc 	ldr.w	r9, [pc, #460]	@ 800243c <MCboot+0x1e0>
  PID_HandleInit(&PIDIdHandle_M1);
 8002272:	f8df 81cc 	ldr.w	r8, [pc, #460]	@ 8002440 <MCboot+0x1e4>
{
 8002276:	b087      	sub	sp, #28
 8002278:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 800227a:	4650      	mov	r0, sl
{
 800227c:	e9cd 3102 	strd	r3, r1, [sp, #8]
  STM_Init(&STM[M1]);
 8002280:	f007 fcda 	bl	8009c38 <STM_Init>
  bMCBootCompleted = 0;
 8002284:	4a56      	ldr	r2, [pc, #344]	@ (80023e0 <MCboot+0x184>)
  pCLM[M1] = &CircleLimitationM1;
 8002286:	4b57      	ldr	r3, [pc, #348]	@ (80023e4 <MCboot+0x188>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002288:	4857      	ldr	r0, [pc, #348]	@ (80023e8 <MCboot+0x18c>)
 800228a:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 800228c:	2400      	movs	r4, #0
 800228e:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 8002290:	4a56      	ldr	r2, [pc, #344]	@ (80023ec <MCboot+0x190>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8002292:	4d57      	ldr	r5, [pc, #348]	@ (80023f0 <MCboot+0x194>)
  pCLM[M1] = &CircleLimitationM1;
 8002294:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8002296:	f006 fe71 	bl	8008f7c <ICS_Init>
  startTimers();
 800229a:	f007 f963 	bl	8009564 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 800229e:	4630      	mov	r0, r6
 80022a0:	f007 f8ca 	bl	8009438 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 80022a4:	4b53      	ldr	r3, [pc, #332]	@ (80023f4 <MCboot+0x198>)
 80022a6:	602b      	str	r3, [r5, #0]
  HALL_Init (&HALL_M1);
 80022a8:	4658      	mov	r0, fp
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80022aa:	603e      	str	r6, [r7, #0]
  HALL_Init (&HALL_M1);
 80022ac:	f006 f9f2 	bl	8008694 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 80022b0:	465a      	mov	r2, fp
 80022b2:	6839      	ldr	r1, [r7, #0]
 80022b4:	6828      	ldr	r0, [r5, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80022b6:	4e50      	ldr	r6, [pc, #320]	@ (80023f8 <MCboot+0x19c>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 80022b8:	f007 fbda 	bl	8009a70 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80022bc:	4648      	mov	r0, r9
 80022be:	f007 f8bb 	bl	8009438 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80022c2:	4640      	mov	r0, r8
 80022c4:	f007 f8b8 	bl	8009438 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 80022c8:	494c      	ldr	r1, [pc, #304]	@ (80023fc <MCboot+0x1a0>)
  pPIDId[M1] = &PIDIdHandle_M1;
 80022ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002400 <MCboot+0x1a4>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80022cc:	484d      	ldr	r0, [pc, #308]	@ (8002404 <MCboot+0x1a8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 80022ce:	f8c1 9000 	str.w	r9, [r1]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80022d2:	6030      	str	r0, [r6, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 80022d4:	f8c3 8000 	str.w	r8, [r3]
  RVBS_Init(pBusSensorM1);
 80022d8:	f007 fafc 	bl	80098d4 <RVBS_Init>
  pCurrentSensorM1 = &RealBatteryCurrentSensorParamsM1;
 80022dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002408 <MCboot+0x1ac>)
 80022de:	484b      	ldr	r0, [pc, #300]	@ (800240c <MCboot+0x1b0>)
 80022e0:	6018      	str	r0, [r3, #0]
  BATTERYCURRENT_Init(pCurrentSensorM1);
 80022e2:	f7fe ff4b 	bl	800117c <BATTERYCURRENT_Init>
  pMotorDriverTemperatureSensorM1 = &RealMotorDriverTemperatureSensorParamsM1;
 80022e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002410 <MCboot+0x1b4>)
 80022e8:	484a      	ldr	r0, [pc, #296]	@ (8002414 <MCboot+0x1b8>)
  NTC_Init(&TempSensorParamsM1);
 80022ea:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 8002444 <MCboot+0x1e8>
  pMotorDriverTemperatureSensorM1 = &RealMotorDriverTemperatureSensorParamsM1;
 80022ee:	6018      	str	r0, [r3, #0]
  MOTORDRIVERTEMP_Init(pMotorDriverTemperatureSensorM1);
 80022f0:	f7fe ff92 	bl	8001218 <MOTORDRIVERTEMP_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80022f4:	4a48      	ldr	r2, [pc, #288]	@ (8002418 <MCboot+0x1bc>)
 80022f6:	4b49      	ldr	r3, [pc, #292]	@ (800241c <MCboot+0x1c0>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80022f8:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 8002448 <MCboot+0x1ec>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80022fc:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 80022fe:	4648      	mov	r0, r9
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8002300:	6832      	ldr	r2, [r6, #0]
 8002302:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002306:	f8c3 810c 	str.w	r8, [r3, #268]	@ 0x10c
  NTC_Init(&TempSensorParamsM1);
 800230a:	f007 f851 	bl	80093b0 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800230e:	4944      	ldr	r1, [pc, #272]	@ (8002420 <MCboot+0x1c4>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002310:	4b44      	ldr	r3, [pc, #272]	@ (8002424 <MCboot+0x1c8>)
 8002312:	4845      	ldr	r0, [pc, #276]	@ (8002428 <MCboot+0x1cc>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8002314:	f8c1 9000 	str.w	r9, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002318:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 800231a:	f007 fb29 	bl	8009970 <REMNG_Init>
  FOC_Clear(M1);
 800231e:	4620      	mov	r0, r4
 8002320:	f7ff ff62 	bl	80021e8 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8002324:	f04f 0901 	mov.w	r9, #1
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002328:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 800232a:	f888 9024 	strb.w	r9, [r8, #36]	@ 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800232e:	f007 fc6d 	bl	8009c0c <STC_GetDefaultIqdref>
 8002332:	f8c8 0010 	str.w	r0, [r8, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002336:	6828      	ldr	r0, [r5, #0]
 8002338:	f007 fc68 	bl	8009c0c <STC_GetDefaultIqdref>
 800233c:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8002340:	4643      	mov	r3, r8
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002342:	f8a8 0014 	strh.w	r0, [r8, #20]
  oMCInterface[M1] = & Mci[M1];
 8002346:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 800244c <MCboot+0x1f0>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800234a:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 800234c:	4837      	ldr	r0, [pc, #220]	@ (800242c <MCboot+0x1d0>)
 800234e:	f8c8 0000 	str.w	r0, [r8]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8002352:	4651      	mov	r1, sl
 8002354:	f7ff fd18 	bl	8001d88 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8002358:	f8d8 0000 	ldr.w	r0, [r8]
 800235c:	9001      	str	r0, [sp, #4]
 800235e:	6828      	ldr	r0, [r5, #0]
 8002360:	f007 fc4a 	bl	8009bf8 <STC_GetMecSpeedRefUnitDefault>
 8002364:	4622      	mov	r2, r4
 8002366:	4601      	mov	r1, r0
 8002368:	9801      	ldr	r0, [sp, #4]
 800236a:	f7ff fd1b 	bl	8001da4 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 800236e:	9802      	ldr	r0, [sp, #8]
 8002370:	f8d8 3000 	ldr.w	r3, [r8]
 8002374:	6003      	str	r3, [r0, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <MCboot+0x17c>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8002378:	4820      	ldr	r0, [pc, #128]	@ (80023fc <MCboot+0x1a0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800237a:	6819      	ldr	r1, [r3, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 800237c:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800237e:	4b26      	ldr	r3, [pc, #152]	@ (8002418 <MCboot+0x1bc>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8002380:	4d27      	ldr	r5, [pc, #156]	@ (8002420 <MCboot+0x1c4>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8002382:	f8d7 c000 	ldr.w	ip, [r7]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8002386:	6807      	ldr	r7, [r0, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8002388:	481d      	ldr	r0, [pc, #116]	@ (8002400 <MCboot+0x1a4>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800238a:	f8d3 e000 	ldr.w	lr, [r3]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800238e:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8002390:	4b27      	ldr	r3, [pc, #156]	@ (8002430 <MCboot+0x1d4>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8002392:	6836      	ldr	r6, [r6, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8002394:	6800      	ldr	r0, [r0, #0]
 8002396:	6098      	str	r0, [r3, #8]
  MCT[M1].pStateMachine = &STM[M1];
 8002398:	e9c3 2a09 	strd	r2, sl, [r3, #36]	@ 0x24
  MCT[M1].pPIDIq = pPIDIq[M1];
 800239c:	e9c3 c700 	strd	ip, r7, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80023a0:	e9c3 560b 	strd	r5, r6, [r3, #44]	@ 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 80023a4:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 80023a8:	e9c3 440d 	strd	r4, r4, [r3, #52]	@ 0x34
  MCT[M1].pFF = MC_NULL;
 80023ac:	e9c3 4410 	strd	r4, r4, [r3, #64]	@ 0x40
  MCT[M1].pSCC = MC_NULL;
 80023b0:	e9c3 4412 	strd	r4, r4, [r3, #72]	@ 0x48
  bMCBootCompleted = 1;
 80023b4:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <MCboot+0x184>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80023b6:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 80023b8:	f8c3 b018 	str.w	fp, [r3, #24]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80023bc:	f8c3 e03c 	str.w	lr, [r3, #60]	@ 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80023c0:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 80023c2:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 80023c4:	651c      	str	r4, [r3, #80]	@ 0x50
  pMCTList[M1] = &MCT[M1];
 80023c6:	9903      	ldr	r1, [sp, #12]
  bMCBootCompleted = 1;
 80023c8:	f882 9000 	strb.w	r9, [r2]
  pMCTList[M1] = &MCT[M1];
 80023cc:	600b      	str	r3, [r1, #0]
}
 80023ce:	b007      	add	sp, #28
 80023d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023d4:	2000048c 	.word	0x2000048c
 80023d8:	200012bc 	.word	0x200012bc
 80023dc:	200012d8 	.word	0x200012d8
 80023e0:	200012a6 	.word	0x200012a6
 80023e4:	200012b4 	.word	0x200012b4
 80023e8:	2000038c 	.word	0x2000038c
 80023ec:	20000140 	.word	0x20000140
 80023f0:	200012dc 	.word	0x200012dc
 80023f4:	20000400 	.word	0x20000400
 80023f8:	200012cc 	.word	0x200012cc
 80023fc:	200012d4 	.word	0x200012d4
 8002400:	200012d0 	.word	0x200012d0
 8002404:	20000274 	.word	0x20000274
 8002408:	200012c8 	.word	0x200012c8
 800240c:	20000248 	.word	0x20000248
 8002410:	200012c4 	.word	0x200012c4
 8002414:	2000020c 	.word	0x2000020c
 8002418:	200012b8 	.word	0x200012b8
 800241c:	200004b8 	.word	0x200004b8
 8002420:	200012c0 	.word	0x200012c0
 8002424:	200012b0 	.word	0x200012b0
 8002428:	200001f4 	.word	0x200001f4
 800242c:	20001340 	.word	0x20001340
 8002430:	200012e8 	.word	0x200012e8
 8002434:	200012e0 	.word	0x200012e0
 8002438:	200002c4 	.word	0x200002c4
 800243c:	20000460 	.word	0x20000460
 8002440:	20000434 	.word	0x20000434
 8002444:	2000029c 	.word	0x2000029c
 8002448:	2000135c 	.word	0x2000135c
 800244c:	2000133c 	.word	0x2000133c

08002450 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop

08002454 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002454:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8002456:	4c08      	ldr	r4, [pc, #32]	@ (8002478 <FOC_CalcCurrRef+0x24>)
 8002458:	2326      	movs	r3, #38	@ 0x26
 800245a:	fb03 4400 	mla	r4, r3, r0, r4
 800245e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002462:	b103      	cbz	r3, 8002466 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002464:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <FOC_CalcCurrRef+0x28>)
 8002468:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800246c:	f007 fb7c 	bl	8009b68 <STC_CalcTorqueReference>
 8002470:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8002472:	8220      	strh	r0, [r4, #16]
}
 8002474:	bd10      	pop	{r4, pc}
 8002476:	bf00      	nop
 8002478:	2000135c 	.word	0x2000135c
 800247c:	200012dc 	.word	0x200012dc

08002480 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002480:	4b01      	ldr	r3, [pc, #4]	@ (8002488 <TSK_SetChargeBootCapDelayM1+0x8>)
 8002482:	8018      	strh	r0, [r3, #0]
}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	200012aa 	.word	0x200012aa

0800248c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800248e:	8818      	ldrh	r0, [r3, #0]
 8002490:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002492:	fab0 f080 	clz	r0, r0
 8002496:	0940      	lsrs	r0, r0, #5
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	200012aa 	.word	0x200012aa

080024a0 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80024a0:	4b01      	ldr	r3, [pc, #4]	@ (80024a8 <TSK_SetStopPermanencyTimeM1+0x8>)
 80024a2:	8018      	strh	r0, [r3, #0]
}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	200012a8 	.word	0x200012a8

080024ac <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80024ae:	8818      	ldrh	r0, [r3, #0]
 80024b0:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80024b2:	fab0 f080 	clz	r0, r0
 80024b6:	0940      	lsrs	r0, r0, #5
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	200012a8 	.word	0x200012a8

080024c0 <TSK_MediumFrequencyTaskM1>:
{
 80024c0:	b530      	push	{r4, r5, lr}
 80024c2:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80024c4:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80024c6:	f10d 0106 	add.w	r1, sp, #6
 80024ca:	484d      	ldr	r0, [pc, #308]	@ (8002600 <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 80024cc:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80024d0:	f006 fa3a 	bl	8008948 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 80024d4:	4d4b      	ldr	r5, [pc, #300]	@ (8002604 <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80024d6:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 80024d8:	6828      	ldr	r0, [r5, #0]
 80024da:	f007 f80d 	bl	80094f8 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80024de:	484a      	ldr	r0, [pc, #296]	@ (8002608 <TSK_MediumFrequencyTaskM1+0x148>)
 80024e0:	f007 fc4c 	bl	8009d7c <STM_GetState>
  switch ( StateM1 )
 80024e4:	1ec3      	subs	r3, r0, #3
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	d81b      	bhi.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
 80024ea:	e8df f003 	tbb	[pc, r3]
 80024ee:	392d      	.short	0x392d
 80024f0:	6008513e 	.word	0x6008513e
 80024f4:	1a1a1a69 	.word	0x1a1a1a69
 80024f8:	6e1a1a1a 	.word	0x6e1a1a1a
 80024fc:	1c7c      	.short	0x1c7c
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 80024fe:	4b43      	ldr	r3, [pc, #268]	@ (800260c <TSK_MediumFrequencyTaskM1+0x14c>)
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	f006 fe0b 	bl	800911c <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 8002506:	2000      	movs	r0, #0
 8002508:	f7ff fe6e 	bl	80021e8 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 800250c:	6828      	ldr	r0, [r5, #0]
 800250e:	f006 ff09 	bl	8009324 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8002512:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002516:	f7ff ffc3 	bl	80024a0 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800251a:	483b      	ldr	r0, [pc, #236]	@ (8002608 <TSK_MediumFrequencyTaskM1+0x148>)
 800251c:	2108      	movs	r1, #8
 800251e:	f007 fbb3 	bl	8009c88 <STM_NextState>
}
 8002522:	b003      	add	sp, #12
 8002524:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 8002526:	4836      	ldr	r0, [pc, #216]	@ (8002600 <TSK_MediumFrequencyTaskM1+0x140>)
 8002528:	f006 f93e 	bl	80087a8 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 800252c:	4836      	ldr	r0, [pc, #216]	@ (8002608 <TSK_MediumFrequencyTaskM1+0x148>)
 800252e:	2104      	movs	r1, #4
 8002530:	f007 fbaa 	bl	8009c88 <STM_NextState>
 8002534:	2800      	cmp	r0, #0
 8002536:	d0f4      	beq.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
      FOC_Clear( M1 );
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff fe55 	bl	80021e8 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 800253e:	4b33      	ldr	r3, [pc, #204]	@ (800260c <TSK_MediumFrequencyTaskM1+0x14c>)
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	f006 fdab 	bl	800909c <ICS_SwitchOnPWM>
 8002546:	e7ec      	b.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 8002548:	4b30      	ldr	r3, [pc, #192]	@ (800260c <TSK_MediumFrequencyTaskM1+0x14c>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	f006 fd80 	bl	8009050 <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8002550:	2014      	movs	r0, #20
 8002552:	f7ff ff95 	bl	8002480 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8002556:	2110      	movs	r1, #16
 8002558:	482b      	ldr	r0, [pc, #172]	@ (8002608 <TSK_MediumFrequencyTaskM1+0x148>)
 800255a:	f007 fb95 	bl	8009c88 <STM_NextState>
    break;
 800255e:	e7e0      	b.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8002560:	2105      	movs	r1, #5
 8002562:	4829      	ldr	r0, [pc, #164]	@ (8002608 <TSK_MediumFrequencyTaskM1+0x148>)
 8002564:	f007 fb90 	bl	8009c88 <STM_NextState>
    break;
 8002568:	e7db      	b.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
	  FOC_InitAdditionalMethods(M1);
 800256a:	2000      	movs	r0, #0
 800256c:	f7ff ff70 	bl	8002450 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8002570:	2000      	movs	r0, #0
 8002572:	f7ff ff6f 	bl	8002454 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8002576:	2106      	movs	r1, #6
 8002578:	4823      	ldr	r0, [pc, #140]	@ (8002608 <TSK_MediumFrequencyTaskM1+0x148>)
 800257a:	f007 fb85 	bl	8009c88 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 800257e:	4b24      	ldr	r3, [pc, #144]	@ (8002610 <TSK_MediumFrequencyTaskM1+0x150>)
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	f007 fb51 	bl	8009c28 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8002586:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <TSK_MediumFrequencyTaskM1+0x154>)
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	f7ff fc3f 	bl	8001e0c <MCI_ExecBufferedCommands>
    break;
 800258e:	e7c8      	b.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8002590:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <TSK_MediumFrequencyTaskM1+0x154>)
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	f7ff fc3a 	bl	8001e0c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8002598:	2000      	movs	r0, #0
 800259a:	f7ff ff5b 	bl	8002454 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 800259e:	2c00      	cmp	r4, #0
 80025a0:	d1bf      	bne.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80025a2:	4622      	mov	r2, r4
 80025a4:	2120      	movs	r1, #32
 80025a6:	4818      	ldr	r0, [pc, #96]	@ (8002608 <TSK_MediumFrequencyTaskM1+0x148>)
 80025a8:	f007 fb4c 	bl	8009c44 <STM_FaultProcessing>
 80025ac:	e7b9      	b.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80025ae:	f7ff ff7d 	bl	80024ac <TSK_StopPermanencyTimeHasElapsedM1>
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d0b5      	beq.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
      STM_NextState( &STM[M1], STOP_IDLE );
 80025b6:	2109      	movs	r1, #9
 80025b8:	4813      	ldr	r0, [pc, #76]	@ (8002608 <TSK_MediumFrequencyTaskM1+0x148>)
 80025ba:	f007 fb65 	bl	8009c88 <STM_NextState>
 80025be:	e7b0      	b.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
    STM_NextState( &STM[M1], IDLE );
 80025c0:	2100      	movs	r1, #0
 80025c2:	4811      	ldr	r0, [pc, #68]	@ (8002608 <TSK_MediumFrequencyTaskM1+0x148>)
 80025c4:	f007 fb60 	bl	8009c88 <STM_NextState>
}
 80025c8:	e7ab      	b.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80025ca:	f7ff ff5f 	bl	800248c <TSK_ChargeBootCapDelayHasElapsedM1>
 80025ce:	2800      	cmp	r0, #0
 80025d0:	d0a7      	beq.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80025d2:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <TSK_MediumFrequencyTaskM1+0x14c>)
 80025d4:	2100      	movs	r1, #0
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	f007 f93c 	bl	8009854 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80025dc:	2111      	movs	r1, #17
 80025de:	480a      	ldr	r0, [pc, #40]	@ (8002608 <TSK_MediumFrequencyTaskM1+0x148>)
 80025e0:	f007 fb52 	bl	8009c88 <STM_NextState>
 80025e4:	e79d      	b.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <TSK_MediumFrequencyTaskM1+0x14c>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	f007 f932 	bl	8009854 <PWMC_CurrentReadingCalibr>
 80025f0:	2800      	cmp	r0, #0
 80025f2:	d096      	beq.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
      STM_NextState( &STM[M1], CLEAR );
 80025f4:	2112      	movs	r1, #18
 80025f6:	4804      	ldr	r0, [pc, #16]	@ (8002608 <TSK_MediumFrequencyTaskM1+0x148>)
 80025f8:	f007 fb46 	bl	8009c88 <STM_NextState>
 80025fc:	e791      	b.n	8002522 <TSK_MediumFrequencyTaskM1+0x62>
 80025fe:	bf00      	nop
 8002600:	200002c4 	.word	0x200002c4
 8002604:	200012b8 	.word	0x200012b8
 8002608:	200012e0 	.word	0x200012e0
 800260c:	200012bc 	.word	0x200012bc
 8002610:	200012dc 	.word	0x200012dc
 8002614:	2000133c 	.word	0x2000133c

08002618 <MC_Scheduler>:
{
 8002618:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <MC_Scheduler+0x48>)
 800261c:	781c      	ldrb	r4, [r3, #0]
 800261e:	2c01      	cmp	r4, #1
 8002620:	d000      	beq.n	8002624 <MC_Scheduler+0xc>
}
 8002622:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8002624:	4d0f      	ldr	r5, [pc, #60]	@ (8002664 <MC_Scheduler+0x4c>)
 8002626:	882b      	ldrh	r3, [r5, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	b1ab      	cbz	r3, 8002658 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 800262c:	882b      	ldrh	r3, [r5, #0]
 800262e:	3b01      	subs	r3, #1
 8002630:	b29b      	uxth	r3, r3
 8002632:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8002634:	4a0c      	ldr	r2, [pc, #48]	@ (8002668 <MC_Scheduler+0x50>)
 8002636:	8813      	ldrh	r3, [r2, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	b11b      	cbz	r3, 8002644 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 800263c:	8813      	ldrh	r3, [r2, #0]
 800263e:	3b01      	subs	r3, #1
 8002640:	b29b      	uxth	r3, r3
 8002642:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8002644:	4a09      	ldr	r2, [pc, #36]	@ (800266c <MC_Scheduler+0x54>)
 8002646:	8813      	ldrh	r3, [r2, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0e9      	beq.n	8002622 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800264e:	8813      	ldrh	r3, [r2, #0]
 8002650:	3b01      	subs	r3, #1
 8002652:	b29b      	uxth	r3, r3
 8002654:	8013      	strh	r3, [r2, #0]
}
 8002656:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8002658:	f7ff ff32 	bl	80024c0 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800265c:	802c      	strh	r4, [r5, #0]
 800265e:	e7e9      	b.n	8002634 <MC_Scheduler+0x1c>
 8002660:	200012a6 	.word	0x200012a6
 8002664:	200012ac 	.word	0x200012ac
 8002668:	200012aa 	.word	0x200012aa
 800266c:	200012a8 	.word	0x200012a8

08002670 <MC_RunMotorControlTasks>:
{
 8002670:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8002672:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <MC_RunMotorControlTasks+0x18>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	b903      	cbnz	r3, 800267a <MC_RunMotorControlTasks+0xa>
}
 8002678:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800267a:	f7ff ffcd 	bl	8002618 <MC_Scheduler>
}
 800267e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8002682:	f001 ba1d 	b.w	8003ac0 <UI_Scheduler>
 8002686:	bf00      	nop
 8002688:	200012a6 	.word	0x200012a6

0800268c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 800268c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8002690:	4830      	ldr	r0, [pc, #192]	@ (8002754 <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002692:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8002770 <TSK_HighFrequencyTask+0xe4>
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002696:	4c30      	ldr	r4, [pc, #192]	@ (8002758 <TSK_HighFrequencyTask+0xcc>)
{
 8002698:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 800269a:	f006 f937 	bl	800890c <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800269e:	4b2f      	ldr	r3, [pc, #188]	@ (800275c <TSK_HighFrequencyTask+0xd0>)
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	f007 f9fb 	bl	8009a9c <STC_GetSpeedSensor>
 80026a6:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80026a8:	f007 f996 	bl	80099d8 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80026ac:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 80026ae:	4605      	mov	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80026b0:	f8d8 0000 	ldr.w	r0, [r8]
 80026b4:	f006 ffae 	bl	8009614 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80026b8:	9803      	ldr	r0, [sp, #12]
 80026ba:	f7ff fc87 	bl	8001fcc <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80026be:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 80026c0:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80026c2:	f7ff fcf9 	bl	80020b8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 80026c6:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <TSK_HighFrequencyTask+0xd4>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80026c8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80026cc:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80026ce:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80026d0:	1a09      	subs	r1, r1, r0
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	f006 fed0 	bl	8009478 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80026d8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80026dc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 80026e0:	1ac9      	subs	r1, r1, r3
 80026e2:	4b20      	ldr	r3, [pc, #128]	@ (8002764 <TSK_HighFrequencyTask+0xd8>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 80026e4:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	f006 fec6 	bl	8009478 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80026ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <TSK_HighFrequencyTask+0xdc>)
 80026ee:	f8ad 6008 	strh.w	r6, [sp, #8]
 80026f2:	f8ad 000a 	strh.w	r0, [sp, #10]
 80026f6:	9902      	ldr	r1, [sp, #8]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	f005 ff75 	bl	80085e8 <Circle_Limitation>
 80026fe:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002700:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002702:	9602      	str	r6, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002704:	f007 f970 	bl	80099e8 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002708:	4629      	mov	r1, r5
 800270a:	9802      	ldr	r0, [sp, #8]
 800270c:	f7ff fd16 	bl	800213c <MCM_Rev_Park>
 8002710:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002712:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002716:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002718:	f006 ff7e 	bl	8009618 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800271c:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800271e:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 8002720:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002722:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8002724:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002726:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8002728:	f8c4 6016 	str.w	r6, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 800272c:	2901      	cmp	r1, #1
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800272e:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002730:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002732:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8002736:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8002738:	d003      	beq.n	8002742 <TSK_HighFrequencyTask+0xb6>
}
 800273a:	2000      	movs	r0, #0
 800273c:	b006      	add	sp, #24
 800273e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	4809      	ldr	r0, [pc, #36]	@ (800276c <TSK_HighFrequencyTask+0xe0>)
 8002746:	f007 fa7d 	bl	8009c44 <STM_FaultProcessing>
}
 800274a:	2000      	movs	r0, #0
 800274c:	b006      	add	sp, #24
 800274e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002752:	bf00      	nop
 8002754:	200002c4 	.word	0x200002c4
 8002758:	2000135c 	.word	0x2000135c
 800275c:	200012dc 	.word	0x200012dc
 8002760:	200012d4 	.word	0x200012d4
 8002764:	200012d0 	.word	0x200012d0
 8002768:	200012b4 	.word	0x200012b4
 800276c:	200012e0 	.word	0x200012e0
 8002770:	200012bc 	.word	0x200012bc

08002774 <TSK_SafetyTask_PWMOFF>:
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
uint16_t battery = 0;
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  battery = BATTERYCURRENT_CalcAvCurrentOrigin(pCurrentSensorM1);
 8002776:	4b29      	ldr	r3, [pc, #164]	@ (800281c <TSK_SafetyTask_PWMOFF+0xa8>)
  //MOTORTEMP_CalcAvR_Value(pMotorTemperatureSensorM1);
  /*Continuously Monitor Motor's internal temperature (Raw NTC Temperature inside the motor) 2025-03-13*/
  //MOTORTEMP_CalcAvTemp_Value(pMotorTemperatureSensorM1);

  /*Continuously Monitor Motor Driver's internal temperature (Output Voltage of NTC Sensor) 2025-03-21*/
  MOTORDRIVERTEMP_CalcAvOutputVoltageOrigin(pMotorDriverTemperatureSensorM1);
 8002778:	4d29      	ldr	r5, [pc, #164]	@ (8002820 <TSK_SafetyTask_PWMOFF+0xac>)

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800277a:	4e2a      	ldr	r6, [pc, #168]	@ (8002824 <TSK_SafetyTask_PWMOFF+0xb0>)
{
 800277c:	4604      	mov	r4, r0
  battery = BATTERYCURRENT_CalcAvCurrentOrigin(pCurrentSensorM1);
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	f7fe fd08 	bl	8001194 <BATTERYCURRENT_CalcAvCurrentOrigin>
 8002784:	4b28      	ldr	r3, [pc, #160]	@ (8002828 <TSK_SafetyTask_PWMOFF+0xb4>)
 8002786:	4602      	mov	r2, r0
  MOTORDRIVERTEMP_CalcAvOutputVoltageOrigin(pMotorDriverTemperatureSensorM1);
 8002788:	6828      	ldr	r0, [r5, #0]
  battery = BATTERYCURRENT_CalcAvCurrentOrigin(pCurrentSensorM1);
 800278a:	801a      	strh	r2, [r3, #0]
  MOTORDRIVERTEMP_CalcAvOutputVoltageOrigin(pMotorDriverTemperatureSensorM1);
 800278c:	f7fe fd50 	bl	8001230 <MOTORDRIVERTEMP_CalcAvOutputVoltageOrigin>
  MOTORDRIVERTEMP_CalcAvR_Value(pMotorDriverTemperatureSensorM1);
 8002790:	6828      	ldr	r0, [r5, #0]
 8002792:	f7fe fd7d 	bl	8001290 <MOTORDRIVERTEMP_CalcAvR_Value>
  heatSinkTempOffset50C(pMotorDriverTemperatureSensorM1);
 8002796:	6828      	ldr	r0, [r5, #0]
 8002798:	f7fe fdb2 	bl	8001300 <heatSinkTempOffset50C>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800279c:	4b23      	ldr	r3, [pc, #140]	@ (800282c <TSK_SafetyTask_PWMOFF+0xb8>)
 800279e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80027a2:	f006 fe17 	bl	80093d4 <NTC_CalcAvTemp>
 80027a6:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80027a8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80027ac:	f007 f872 	bl	8009894 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80027b0:	f025 0508 	bic.w	r5, r5, #8
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80027b4:	4305      	orrs	r5, r0
 80027b6:	b2ad      	uxth	r5, r5
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80027b8:	b334      	cbz	r4, 8002808 <TSK_SafetyTask_PWMOFF+0x94>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80027ba:	4f1d      	ldr	r7, [pc, #116]	@ (8002830 <TSK_SafetyTask_PWMOFF+0xbc>)
 80027bc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80027c0:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 80027c4:	43ea      	mvns	r2, r5
 80027c6:	b292      	uxth	r2, r2
 80027c8:	4629      	mov	r1, r5
 80027ca:	4638      	mov	r0, r7
 80027cc:	f007 fa3a 	bl	8009c44 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80027d0:	4638      	mov	r0, r7
 80027d2:	f007 fad3 	bl	8009d7c <STM_GetState>
 80027d6:	280a      	cmp	r0, #10
 80027d8:	d002      	beq.n	80027e0 <TSK_SafetyTask_PWMOFF+0x6c>
 80027da:	280b      	cmp	r0, #11
 80027dc:	d00e      	beq.n	80027fc <TSK_SafetyTask_PWMOFF+0x88>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80027de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80027e0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80027e4:	f007 f834 	bl	8009850 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7ff fcfd 	bl	80021e8 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80027ee:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <TSK_SafetyTask_PWMOFF+0xc0>)
 80027f0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80027f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80027f8:	f006 bd94 	b.w	8009324 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80027fc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8002800:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002804:	f007 b824 	b.w	8009850 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8002808:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <TSK_SafetyTask_PWMOFF+0xc4>)
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	f007 f87c 	bl	8009908 <RVBS_CalcAvVbus>
 8002810:	f020 0008 	bic.w	r0, r0, #8
 8002814:	4305      	orrs	r5, r0
 8002816:	b2ad      	uxth	r5, r5
 8002818:	e7cf      	b.n	80027ba <TSK_SafetyTask_PWMOFF+0x46>
 800281a:	bf00      	nop
 800281c:	200012c8 	.word	0x200012c8
 8002820:	200012c4 	.word	0x200012c4
 8002824:	200012bc 	.word	0x200012bc
 8002828:	200012a4 	.word	0x200012a4
 800282c:	200012c0 	.word	0x200012c0
 8002830:	200012e0 	.word	0x200012e0
 8002834:	200012b8 	.word	0x200012b8
 8002838:	200012cc 	.word	0x200012cc

0800283c <TSK_SafetyTask>:
{
 800283c:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800283e:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <TSK_SafetyTask+0x1c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d000      	beq.n	8002848 <TSK_SafetyTask+0xc>
}
 8002846:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002848:	2000      	movs	r0, #0
 800284a:	f7ff ff93 	bl	8002774 <TSK_SafetyTask_PWMOFF>
}
 800284e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8002852:	f000 bdf1 	b.w	8003438 <RCM_ExecUserConv>
 8002856:	bf00      	nop
 8002858:	200012a6 	.word	0x200012a6

0800285c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 800285c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 800285e:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <TSK_HardwareFaultTask+0x18>)
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	f006 fc5b 	bl	800911c <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800286a:	4803      	ldr	r0, [pc, #12]	@ (8002878 <TSK_HardwareFaultTask+0x1c>)
 800286c:	2200      	movs	r2, #0
 800286e:	2180      	movs	r1, #128	@ 0x80
 8002870:	f007 b9e8 	b.w	8009c44 <STM_FaultProcessing>
 8002874:	200012bc 	.word	0x200012bc
 8002878:	200012e0 	.word	0x200012e0

0800287c <startMediumFrequencyTask>:

/* startMediumFrequencyTask function */
void startMediumFrequencyTask(void const * argument)
{
 800287c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 800287e:	2001      	movs	r0, #1
 8002880:	f005 f882 	bl	8007988 <vTaskDelay>
    MC_RunMotorControlTasks();
 8002884:	f7ff fef4 	bl	8002670 <MC_RunMotorControlTasks>
  for(;;)
 8002888:	e7f9      	b.n	800287e <startMediumFrequencyTask+0x2>
 800288a:	bf00      	nop

0800288c <StartSafetyTask>:
  /* USER CODE END MF task 1 */
}

/* startSafetyTask function */
void StartSafetyTask(void const * argument)
{
 800288c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 800288e:	2001      	movs	r0, #1
 8002890:	f005 f87a 	bl	8007988 <vTaskDelay>
    TSK_SafetyTask();
 8002894:	f7ff ffd2 	bl	800283c <TSK_SafetyTask>
  for(;;)
 8002898:	e7f9      	b.n	800288e <StartSafetyTask+0x2>
 800289a:	bf00      	nop

0800289c <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 800289c:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800289e:	4a43      	ldr	r2, [pc, #268]	@ (80029ac <mc_lock_pins+0x110>)
 80028a0:	4b43      	ldr	r3, [pc, #268]	@ (80029b0 <mc_lock_pins+0x114>)
 80028a2:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028a4:	2110      	movs	r1, #16
 80028a6:	b08e      	sub	sp, #56	@ 0x38
 80028a8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028aa:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80028ac:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028ae:	4b41      	ldr	r3, [pc, #260]	@ (80029b4 <mc_lock_pins+0x118>)
  temp = READ_REG(GPIOx->LCKR);
 80028b0:	910d      	str	r1, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028b2:	2002      	movs	r0, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028b4:	4940      	ldr	r1, [pc, #256]	@ (80029b8 <mc_lock_pins+0x11c>)
  (void) temp;
 80028b6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028b8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028ba:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028bc:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80028be:	69d9      	ldr	r1, [r3, #28]
 80028c0:	910c      	str	r1, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028c2:	483e      	ldr	r0, [pc, #248]	@ (80029bc <mc_lock_pins+0x120>)
  (void) temp;
 80028c4:	990c      	ldr	r1, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028c6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028c8:	2504      	movs	r5, #4
 80028ca:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028cc:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80028ce:	69d9      	ldr	r1, [r3, #28]
 80028d0:	910b      	str	r1, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028d2:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028d6:	2601      	movs	r6, #1
  (void) temp;
 80028d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028da:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028dc:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028de:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80028e0:	69d9      	ldr	r1, [r3, #28]
 80028e2:	910a      	str	r1, [sp, #40]	@ 0x28
  (void) temp;
 80028e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028e6:	4936      	ldr	r1, [pc, #216]	@ (80029c0 <mc_lock_pins+0x124>)
 80028e8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028ea:	f44f 7780 	mov.w	r7, #256	@ 0x100
 80028ee:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028f0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80028f2:	69d9      	ldr	r1, [r3, #28]
 80028f4:	9109      	str	r1, [sp, #36]	@ 0x24
  (void) temp;
 80028f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80028f8:	f44f 7700 	mov.w	r7, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80028fc:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
 8002900:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002902:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002904:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002906:	69df      	ldr	r7, [r3, #28]
 8002908:	9708      	str	r7, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800290a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800290e:	f501 3181 	add.w	r1, r1, #66048	@ 0x10200
  (void) temp;
 8002912:	9f08      	ldr	r7, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002914:	f44f 4c80 	mov.w	ip, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002918:	f44f 37a0 	mov.w	r7, #81920	@ 0x14000
 800291c:	61cf      	str	r7, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800291e:	f8c1 c01c 	str.w	ip, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002922:	61cf      	str	r7, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002924:	69cf      	ldr	r7, [r1, #28]
 8002926:	9707      	str	r7, [sp, #28]
  (void) temp;
 8002928:	9f07      	ldr	r7, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800292a:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800292e:	f44f 3782 	mov.w	r7, #66560	@ 0x10400
 8002932:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002934:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002938:	61df      	str	r7, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800293a:	69df      	ldr	r7, [r3, #28]
 800293c:	9706      	str	r7, [sp, #24]
  (void) temp;
 800293e:	9f06      	ldr	r7, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002940:	f44f 4c00 	mov.w	ip, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002944:	f44f 37c0 	mov.w	r7, #98304	@ 0x18000
 8002948:	61cf      	str	r7, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800294a:	f8c1 c01c 	str.w	ip, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800294e:	61cf      	str	r7, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002950:	69cf      	ldr	r7, [r1, #28]
 8002952:	9705      	str	r7, [sp, #20]
  (void) temp;
 8002954:	9f05      	ldr	r7, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002956:	f44f 5c00 	mov.w	ip, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800295a:	f44f 3790 	mov.w	r7, #73728	@ 0x12000
 800295e:	61cf      	str	r7, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002960:	f8c1 c01c 	str.w	ip, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002964:	61cf      	str	r7, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002966:	69c9      	ldr	r1, [r1, #28]
 8002968:	9104      	str	r1, [sp, #16]
  (void) temp;
 800296a:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800296c:	4915      	ldr	r1, [pc, #84]	@ (80029c4 <mc_lock_pins+0x128>)
 800296e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002970:	2708      	movs	r7, #8
 8002972:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002974:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002976:	69d9      	ldr	r1, [r3, #28]
 8002978:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800297a:	2780      	movs	r7, #128	@ 0x80
  (void) temp;
 800297c:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800297e:	4912      	ldr	r1, [pc, #72]	@ (80029c8 <mc_lock_pins+0x12c>)
 8002980:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002982:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002984:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	9302      	str	r3, [sp, #8]
  (void) temp;
 800298a:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800298c:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800298e:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002990:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002992:	69d3      	ldr	r3, [r2, #28]
 8002994:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002996:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002998:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800299a:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800299c:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800299e:	69d3      	ldr	r3, [r2, #28]
 80029a0:	9300      	str	r3, [sp, #0]
  (void) temp;
 80029a2:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
//Lock Pin For Battery Current Sensing ADC
LL_GPIO_LockPin(BATTERY_CURRENT_GPIO_Port,BATTERY_CURRENT_Pin);
//Lock Pin For Motor Temperature Sensing
LL_GPIO_LockPin(MOTOR_TEMP_GPIO_Port,MOTOR_TEMP_Pin);
}
 80029a4:	b00e      	add	sp, #56	@ 0x38
 80029a6:	bcf0      	pop	{r4, r5, r6, r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40020800 	.word	0x40020800
 80029b0:	00010010 	.word	0x00010010
 80029b4:	40020000 	.word	0x40020000
 80029b8:	00010002 	.word	0x00010002
 80029bc:	00010004 	.word	0x00010004
 80029c0:	00010100 	.word	0x00010100
 80029c4:	00010008 	.word	0x00010008
 80029c8:	00010080 	.word	0x00010080

080029cc <Motor_ShutDown>:

/*2025-03-25 Cut off PWM Output to avoid any accidental motor locks which damages motor driver*/
__weak void Motor_ShutDown(void)
{
 80029cc:	b508      	push	{r3, lr}
	/*Shut Down*/
	PWMC_SwitchOffPWM(pwmcHandle[M1]);
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <Motor_ShutDown+0x1c>)
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	f006 ff3d 	bl	8009850 <PWMC_SwitchOffPWM>
	FOC_Clear(M1);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7ff fc06 	bl	80021e8 <FOC_Clear>
	MPM_Clear((MotorPowMeas_Handle_t*)pMPM[M1]);
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <Motor_ShutDown+0x20>)
 80029de:	6818      	ldr	r0, [r3, #0]
}
 80029e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPM_Clear((MotorPowMeas_Handle_t*)pMPM[M1]);
 80029e4:	f006 bc9e 	b.w	8009324 <MPM_Clear>
 80029e8:	200012bc 	.word	0x200012bc
 80029ec:	200012b8 	.word	0x200012b8

080029f0 <MCP_ReceivedFrame>:
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
uint8_t uart = 0;
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	460c      	mov	r4, r1
 80029f4:	b08d      	sub	sp, #52	@ 0x34
 80029f6:	4615      	mov	r5, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 80029f8:	2100      	movs	r1, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 80029fa:	0962      	lsrs	r2, r4, #5
{
 80029fc:	4607      	mov	r7, r0
 80029fe:	461e      	mov	r6, r3
  bool bNoError = false; // Default is error
 8002a00:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8002a04:	d11f      	bne.n	8002a46 <MCP_ReceivedFrame+0x56>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8002a06:	2c1b      	cmp	r4, #27
 8002a08:	d824      	bhi.n	8002a54 <MCP_ReceivedFrame+0x64>
 8002a0a:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002a0e:	0060      	.short	0x0060
 8002a10:	00b80063 	.word	0x00b80063
 8002a14:	00230151 	.word	0x00230151
 8002a18:	015b0023 	.word	0x015b0023
 8002a1c:	003a0184 	.word	0x003a0184
 8002a20:	022a018c 	.word	0x022a018c
 8002a24:	020a01f3 	.word	0x020a01f3
 8002a28:	002301a0 	.word	0x002301a0
 8002a2c:	00230023 	.word	0x00230023
 8002a30:	00600023 	.word	0x00600023
 8002a34:	01be01a9 	.word	0x01be01a9
 8002a38:	00230060 	.word	0x00230060
 8002a3c:	00230023 	.word	0x00230023
 8002a40:	00230023 	.word	0x00230023
 8002a44:	01cd      	.short	0x01cd
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8002a46:	3a01      	subs	r2, #1
 8002a48:	f001 f87a 	bl	8003b40 <UI_SetReg>
 8002a4c:	b198      	cbz	r0, 8002a76 <MCP_ReceivedFrame+0x86>
      Code &= 0x1F; /* Mask: 0001|1111 */
 8002a4e:	f004 041f 	and.w	r4, r4, #31
 8002a52:	e7d8      	b.n	8002a06 <MCP_ReceivedFrame+0x16>
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8002a54:	2301      	movs	r3, #1
    break;
  }

  if (RequireAck)
  {
    if (bNoError)
 8002a56:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8002a5a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	f040 8209 	bne.w	8002e76 <MCP_ReceivedFrame+0x486>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8002a64:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f10d 020e 	add.w	r2, sp, #14
 8002a6e:	21ff      	movs	r1, #255	@ 0xff
 8002a70:	47a0      	blx	r4
    }
  }
}
 8002a72:	b00d      	add	sp, #52	@ 0x34
 8002a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002a76:	230b      	movs	r3, #11
    if (bNoError)
 8002a78:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002a7c:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8002a80:	e7ed      	b.n	8002a5e <MCP_ReceivedFrame+0x6e>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8002a82:	f10d 000e 	add.w	r0, sp, #14
 8002a86:	7829      	ldrb	r1, [r5, #0]
 8002a88:	9000      	str	r0, [sp, #0]
 8002a8a:	ab03      	add	r3, sp, #12
 8002a8c:	f10d 020a 	add.w	r2, sp, #10
 8002a90:	4638      	mov	r0, r7
 8002a92:	f001 fb6b 	bl	800416c <UI_GetRevupData>
      outBuff[4] = (uint8_t)(FinalTorque);
 8002a96:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8002a9a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8002a9e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8002aa2:	69fc      	ldr	r4, [r7, #28]
      outBuff[0] = (uint8_t)(rpm);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f360 0207 	bfi	r2, r0, #0, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8002aaa:	1200      	asrs	r0, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 8002aac:	f360 220f 	bfi	r2, r0, #8, #8
 8002ab0:	f361 4217 	bfi	r2, r1, #16, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8002ab4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8002ab8:	0a09      	lsrs	r1, r1, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8002aba:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8002abc:	f361 621f 	bfi	r2, r1, #24, #8
 8002ac0:	e9cd 3204 	strd	r3, r2, [sp, #16]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8002ac4:	2308      	movs	r3, #8
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&invalidCMD,1);
 8002ac6:	69b8      	ldr	r0, [r7, #24]
 8002ac8:	aa04      	add	r2, sp, #16
 8002aca:	21f0      	movs	r1, #240	@ 0xf0
 8002acc:	47a0      	blx	r4
    if (bNoError)
 8002ace:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002ad2:	e7c4      	b.n	8002a5e <MCP_ReceivedFrame+0x6e>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002ad4:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8002ad6:	2305      	movs	r3, #5
 8002ad8:	2948      	cmp	r1, #72	@ 0x48
 8002ada:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8002ade:	f200 8211 	bhi.w	8002f04 <MCP_ReceivedFrame+0x514>
 8002ae2:	2948      	cmp	r1, #72	@ 0x48
 8002ae4:	f200 8230 	bhi.w	8002f48 <MCP_ReceivedFrame+0x558>
 8002ae8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002aec:	022e0324 	.word	0x022e0324
 8002af0:	031d022e 	.word	0x031d022e
 8002af4:	0261022e 	.word	0x0261022e
 8002af8:	02610261 	.word	0x02610261
 8002afc:	02610261 	.word	0x02610261
 8002b00:	02610261 	.word	0x02610261
 8002b04:	02610261 	.word	0x02610261
 8002b08:	02610261 	.word	0x02610261
 8002b0c:	023e023e 	.word	0x023e023e
 8002b10:	022e022e 	.word	0x022e022e
 8002b14:	02610261 	.word	0x02610261
 8002b18:	02610261 	.word	0x02610261
 8002b1c:	022e0261 	.word	0x022e0261
 8002b20:	022e022e 	.word	0x022e022e
 8002b24:	01b701b7 	.word	0x01b701b7
 8002b28:	022e022e 	.word	0x022e022e
 8002b2c:	022e022e 	.word	0x022e022e
 8002b30:	022e022e 	.word	0x022e022e
 8002b34:	022e022e 	.word	0x022e022e
 8002b38:	022e022e 	.word	0x022e022e
 8002b3c:	022e022e 	.word	0x022e022e
 8002b40:	022e022e 	.word	0x022e022e
 8002b44:	022e022e 	.word	0x022e022e
 8002b48:	022e022e 	.word	0x022e022e
 8002b4c:	022e022e 	.word	0x022e022e
 8002b50:	022e022e 	.word	0x022e022e
 8002b54:	022e022e 	.word	0x022e022e
 8002b58:	022e022e 	.word	0x022e022e
 8002b5c:	022e022e 	.word	0x022e022e
 8002b60:	022e022e 	.word	0x022e022e
 8002b64:	022e022e 	.word	0x022e022e
 8002b68:	022e022e 	.word	0x022e022e
 8002b6c:	0261022e 	.word	0x0261022e
 8002b70:	022e022e 	.word	0x022e022e
 8002b74:	022e022e 	.word	0x022e022e
 8002b78:	023e023e 	.word	0x023e023e
 8002b7c:	023e      	.short	0x023e
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002b7e:	f995 3000 	ldrsb.w	r3, [r5]
 8002b82:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8002b84:	2203      	movs	r2, #3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f88d 200e 	strb.w	r2, [sp, #14]
 8002b8c:	f2c0 819a 	blt.w	8002ec4 <MCP_ReceivedFrame+0x4d4>
 8002b90:	2963      	cmp	r1, #99	@ 0x63
 8002b92:	f200 81f1 	bhi.w	8002f78 <MCP_ReceivedFrame+0x588>
 8002b96:	2941      	cmp	r1, #65	@ 0x41
 8002b98:	f200 8175 	bhi.w	8002e86 <MCP_ReceivedFrame+0x496>
 8002b9c:	2941      	cmp	r1, #65	@ 0x41
 8002b9e:	d896      	bhi.n	8002ace <MCP_ReceivedFrame+0xde>
 8002ba0:	a301      	add	r3, pc, #4	@ (adr r3, 8002ba8 <MCP_ReceivedFrame+0x1b8>)
 8002ba2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8002ba6:	bf00      	nop
 8002ba8:	08002fd1 	.word	0x08002fd1
 8002bac:	08002f8b 	.word	0x08002f8b
 8002bb0:	08002fd1 	.word	0x08002fd1
 8002bb4:	08002fd1 	.word	0x08002fd1
 8002bb8:	08002f8b 	.word	0x08002f8b
 8002bbc:	08002ea1 	.word	0x08002ea1
 8002bc0:	08002ea1 	.word	0x08002ea1
 8002bc4:	08002ea1 	.word	0x08002ea1
 8002bc8:	08002ea1 	.word	0x08002ea1
 8002bcc:	08002ea1 	.word	0x08002ea1
 8002bd0:	08002ea1 	.word	0x08002ea1
 8002bd4:	08002ea1 	.word	0x08002ea1
 8002bd8:	08002ea1 	.word	0x08002ea1
 8002bdc:	08002ea1 	.word	0x08002ea1
 8002be0:	08002ea1 	.word	0x08002ea1
 8002be4:	08002ea1 	.word	0x08002ea1
 8002be8:	08002ea1 	.word	0x08002ea1
 8002bec:	08002ea1 	.word	0x08002ea1
 8002bf0:	08002ea1 	.word	0x08002ea1
 8002bf4:	08002ea1 	.word	0x08002ea1
 8002bf8:	08002ea1 	.word	0x08002ea1
 8002bfc:	08002ea1 	.word	0x08002ea1
 8002c00:	08002ea1 	.word	0x08002ea1
 8002c04:	08002ea1 	.word	0x08002ea1
 8002c08:	08002ea1 	.word	0x08002ea1
 8002c0c:	08002ea1 	.word	0x08002ea1
 8002c10:	08002ea1 	.word	0x08002ea1
 8002c14:	08002ea1 	.word	0x08002ea1
 8002c18:	08002acf 	.word	0x08002acf
 8002c1c:	08002acf 	.word	0x08002acf
 8002c20:	08002f8b 	.word	0x08002f8b
 8002c24:	08002ea1 	.word	0x08002ea1
 8002c28:	08002ea1 	.word	0x08002ea1
 8002c2c:	08002ea1 	.word	0x08002ea1
 8002c30:	08002fd1 	.word	0x08002fd1
 8002c34:	08002acf 	.word	0x08002acf
 8002c38:	08002acf 	.word	0x08002acf
 8002c3c:	08002acf 	.word	0x08002acf
 8002c40:	08002acf 	.word	0x08002acf
 8002c44:	08002acf 	.word	0x08002acf
 8002c48:	08002acf 	.word	0x08002acf
 8002c4c:	08002acf 	.word	0x08002acf
 8002c50:	08002acf 	.word	0x08002acf
 8002c54:	08002acf 	.word	0x08002acf
 8002c58:	08002acf 	.word	0x08002acf
 8002c5c:	08002acf 	.word	0x08002acf
 8002c60:	08002acf 	.word	0x08002acf
 8002c64:	08002acf 	.word	0x08002acf
 8002c68:	08002acf 	.word	0x08002acf
 8002c6c:	08002acf 	.word	0x08002acf
 8002c70:	08002acf 	.word	0x08002acf
 8002c74:	08002acf 	.word	0x08002acf
 8002c78:	08002acf 	.word	0x08002acf
 8002c7c:	08002acf 	.word	0x08002acf
 8002c80:	08002acf 	.word	0x08002acf
 8002c84:	08002acf 	.word	0x08002acf
 8002c88:	08002acf 	.word	0x08002acf
 8002c8c:	08002acf 	.word	0x08002acf
 8002c90:	08002acf 	.word	0x08002acf
 8002c94:	08002acf 	.word	0x08002acf
 8002c98:	08002acf 	.word	0x08002acf
 8002c9c:	08002acf 	.word	0x08002acf
 8002ca0:	08002acf 	.word	0x08002acf
 8002ca4:	08002acf 	.word	0x08002acf
 8002ca8:	08002acf 	.word	0x08002acf
 8002cac:	08002ea1 	.word	0x08002ea1
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8002cb0:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8002cb2:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8002cb4:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8002cb8:	4638      	mov	r0, r7
 8002cba:	f001 fa05 	bl	80040c8 <UI_ExecCmd>
 8002cbe:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002cc2:	e6cc      	b.n	8002a5e <MCP_ReceivedFrame+0x6e>
        outBuff[i] = 0;
 8002cc4:	ac04      	add	r4, sp, #16
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	2220      	movs	r2, #32
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f007 fbc0 	bl	800a450 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002cd0:	f8d7 60a8 	ldr.w	r6, [r7, #168]	@ 0xa8
 8002cd4:	f10d 0112 	add.w	r1, sp, #18
 8002cd8:	1e73      	subs	r3, r6, #1
 8002cda:	f106 051c 	add.w	r5, r6, #28
 8002cde:	e004      	b.n	8002cea <MCP_ReceivedFrame+0x2fa>
 8002ce0:	429d      	cmp	r5, r3
        outBuff[3+i] = pHandle->s_fwVer[i];
 8002ce2:	f801 2f01 	strb.w	r2, [r1, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002ce6:	f000 822d 	beq.w	8003144 <MCP_ReceivedFrame+0x754>
        outBuff[3+i] = pHandle->s_fwVer[i];
 8002cea:	4618      	mov	r0, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002cec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002cf0:	2a09      	cmp	r2, #9
 8002cf2:	d1f5      	bne.n	8002ce0 <MCP_ReceivedFrame+0x2f0>
 8002cf4:	f1c6 0301 	rsb	r3, r6, #1
 8002cf8:	4403      	add	r3, r0
      outBuff[0] = pHandle->s_fwVer[i+5];
 8002cfa:	1d5a      	adds	r2, r3, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8002cfc:	1dd9      	adds	r1, r3, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002cfe:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8002d00:	5cb2      	ldrb	r2, [r6, r2]
 8002d02:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8002d06:	5c72      	ldrb	r2, [r6, r1]
 8002d08:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002d0c:	5cf3      	ldrb	r3, [r6, r3]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002d0e:	69fd      	ldr	r5, [r7, #28]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002d10:	f88d 3012 	strb.w	r3, [sp, #18]
 8002d14:	e09c      	b.n	8002e50 <MCP_ReceivedFrame+0x460>
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8002d16:	88aa      	ldrh	r2, [r5, #4]
 8002d18:	6829      	ldr	r1, [r5, #0]
 8002d1a:	4638      	mov	r0, r7
 8002d1c:	f001 fa0a 	bl	8004134 <UI_ExecSpeedRamp>
 8002d20:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002d24:	e69b      	b.n	8002a5e <MCP_ReceivedFrame+0x6e>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002d26:	f8d5 2001 	ldr.w	r2, [r5, #1]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002d2a:	4bbd      	ldr	r3, [pc, #756]	@ (8003020 <MCP_ReceivedFrame+0x630>)
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002d2c:	f9b5 1005 	ldrsh.w	r1, [r5, #5]
 8002d30:	9100      	str	r1, [sp, #0]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002d32:	fb83 0302 	smull	r0, r3, r3, r2
 8002d36:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002d3a:	7829      	ldrb	r1, [r5, #0]
 8002d3c:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 8002d40:	b21b      	sxth	r3, r3
 8002d42:	4638      	mov	r0, r7
 8002d44:	f001 fa30 	bl	80041a8 <UI_SetRevupData>
 8002d48:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002d4c:	e687      	b.n	8002a5e <MCP_ReceivedFrame+0x6e>
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8002d4e:	6829      	ldr	r1, [r5, #0]
 8002d50:	88aa      	ldrh	r2, [r5, #4]
 8002d52:	b209      	sxth	r1, r1
 8002d54:	4638      	mov	r0, r7
 8002d56:	f001 f9ff 	bl	8004158 <UI_ExecTorqueRamp>
 8002d5a:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002d5e:	e67e      	b.n	8002a5e <MCP_ReceivedFrame+0x6e>
  	   bNoError = true;
 8002d60:	2401      	movs	r4, #1
  	   uint8_t changeDone = 0x13;
 8002d62:	2313      	movs	r3, #19
  	   changeSpeedMode(speed_mode_IQmax,allowable_rpm,ramp);
 8002d64:	892a      	ldrh	r2, [r5, #8]
 8002d66:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 8002d6a:	f9b5 0000 	ldrsh.w	r0, [r5]
  	   bNoError = true;
 8002d6e:	f88d 4009 	strb.w	r4, [sp, #9]
  	   uint8_t changeDone = 0x13;
 8002d72:	f88d 3010 	strb.w	r3, [sp, #16]
  	   changeSpeedMode(speed_mode_IQmax,allowable_rpm,ramp);
 8002d76:	f7fe f903 	bl	8000f80 <changeSpeedMode>
  	   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&IQReceived,1);
 8002d7a:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8002d7e:	4623      	mov	r3, r4
 8002d80:	aa04      	add	r2, sp, #16
 8002d82:	21f0      	movs	r1, #240	@ 0xf0
 8002d84:	47a8      	blx	r5
}
 8002d86:	b00d      	add	sp, #52	@ 0x34
 8002d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	   uint16_t throttlePercentage = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002d8a:	882e      	ldrh	r6, [r5, #0]
  	   setIQ(IQ_value);
 8002d8c:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
  	   uint8_t IQReceived = 0x14;
 8002d90:	2314      	movs	r3, #20
  	   bNoError = true;
 8002d92:	2401      	movs	r4, #1
 8002d94:	f88d 4009 	strb.w	r4, [sp, #9]
  	   uint8_t IQReceived = 0x14;
 8002d98:	f88d 3010 	strb.w	r3, [sp, #16]
  	   setIQ(IQ_value);
 8002d9c:	f7fe f8c4 	bl	8000f28 <setIQ>
  	   set_ThrottlePercent(throttlePercentage);
 8002da0:	4630      	mov	r0, r6
 8002da2:	f7fe f8c7 	bl	8000f34 <set_ThrottlePercent>
 8002da6:	e7e8      	b.n	8002d7a <MCP_ReceivedFrame+0x38a>
    	switch(behaviorID)
 8002da8:	782b      	ldrb	r3, [r5, #0]
 8002daa:	2b0e      	cmp	r3, #14
 8002dac:	f200 81ce 	bhi.w	800314c <MCP_ReceivedFrame+0x75c>
 8002db0:	a201      	add	r2, pc, #4	@ (adr r2, 8002db8 <MCP_ReceivedFrame+0x3c8>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	0800308b 	.word	0x0800308b
 8002dbc:	08003071 	.word	0x08003071
 8002dc0:	08003121 	.word	0x08003121
 8002dc4:	0800310d 	.word	0x0800310d
 8002dc8:	080030f9 	.word	0x080030f9
 8002dcc:	080030f3 	.word	0x080030f3
 8002dd0:	080030df 	.word	0x080030df
 8002dd4:	080030d3 	.word	0x080030d3
 8002dd8:	080030bf 	.word	0x080030bf
 8002ddc:	080030a1 	.word	0x080030a1
 8002de0:	08003065 	.word	0x08003065
 8002de4:	0800304d 	.word	0x0800304d
 8002de8:	08003041 	.word	0x08003041
 8002dec:	08003005 	.word	0x08003005
 8002df0:	08002acf 	.word	0x08002acf
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002df4:	4c8b      	ldr	r4, [pc, #556]	@ (8003024 <MCP_ReceivedFrame+0x634>)
      stepList.data = buffer;
 8002df6:	9504      	str	r5, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002df8:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8002dfe:	f88d 6014 	strb.w	r6, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002e02:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002e06:	f001 f9f7 	bl	80041f8 <UI_GetMPInfo>
 8002e0a:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	f43f ae28 	beq.w	8002a64 <MCP_ReceivedFrame+0x74>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8002e14:	69fd      	ldr	r5, [r7, #28]
 8002e16:	7923      	ldrb	r3, [r4, #4]
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	69b8      	ldr	r0, [r7, #24]
 8002e1c:	21f0      	movs	r1, #240	@ 0xf0
 8002e1e:	47a8      	blx	r5
  if (RequireAck)
 8002e20:	e627      	b.n	8002a72 <MCP_ReceivedFrame+0x82>
 8002e22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e26:	ac04      	add	r4, sp, #16
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	e004      	b.n	8002e3a <MCP_ReceivedFrame+0x44a>
 8002e30:	3001      	adds	r0, #1
 8002e32:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8002e34:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002e38:	d009      	beq.n	8002e4e <MCP_ReceivedFrame+0x45e>
 8002e3a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002e3e:	2900      	cmp	r1, #0
 8002e40:	d1f6      	bne.n	8002e30 <MCP_ReceivedFrame+0x440>
        outBuff[i] = 0;
 8002e42:	f1c0 0220 	rsb	r2, r0, #32
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	4420      	add	r0, r4
 8002e4a:	f007 fb01 	bl	800a450 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002e4e:	69fd      	ldr	r5, [r7, #28]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002e50:	69b8      	ldr	r0, [r7, #24]
 8002e52:	2320      	movs	r3, #32
 8002e54:	4622      	mov	r2, r4
 8002e56:	21f0      	movs	r1, #240	@ 0xf0
 8002e58:	47a8      	blx	r5
      bNoError = true;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8002e60:	e009      	b.n	8002e76 <MCP_ReceivedFrame+0x486>
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8002e62:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8002e66:	f9b5 1000 	ldrsh.w	r1, [r5]
 8002e6a:	4638      	mov	r0, r7
 8002e6c:	f001 f9b6 	bl	80041dc <UI_SetCurrentReferences>
      bNoError = true;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8002e76:	2300      	movs	r3, #0
 8002e78:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	21f0      	movs	r1, #240	@ 0xf0
 8002e80:	47a0      	blx	r4
}
 8002e82:	b00d      	add	sp, #52	@ 0x34
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e86:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b1b      	cmp	r3, #27
 8002e8e:	f63f ae1e 	bhi.w	8002ace <MCP_ReceivedFrame+0xde>
 8002e92:	4865      	ldr	r0, [pc, #404]	@ (8003028 <MCP_ReceivedFrame+0x638>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	4203      	tst	r3, r0
 8002e9c:	f000 80aa 	beq.w	8002ff4 <MCP_ReceivedFrame+0x604>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002ea0:	f10d 0209 	add.w	r2, sp, #9
 8002ea4:	4638      	mov	r0, r7
 8002ea6:	f000 fefb 	bl	8003ca0 <UI_GetReg>
          if ( bNoError == true )
 8002eaa:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002eae:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f43f add7 	beq.w	8002a64 <MCP_ReceivedFrame+0x74>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8002eb6:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002eba:	2302      	movs	r3, #2
 8002ebc:	aa04      	add	r2, sp, #16
 8002ebe:	21f0      	movs	r1, #240	@ 0xf0
 8002ec0:	47a0      	blx	r4
  if (RequireAck)
 8002ec2:	e5d6      	b.n	8002a72 <MCP_ReceivedFrame+0x82>
 8002ec4:	f081 0380 	eor.w	r3, r1, #128	@ 0x80
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 8002ece:	f63f adfe 	bhi.w	8002ace <MCP_ReceivedFrame+0xde>
 8002ed2:	2a08      	cmp	r2, #8
 8002ed4:	f63f adfb 	bhi.w	8002ace <MCP_ReceivedFrame+0xde>
 8002ed8:	a301      	add	r3, pc, #4	@ (adr r3, 8002ee0 <MCP_ReceivedFrame+0x4f0>)
 8002eda:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002fd1 	.word	0x08002fd1
 8002ee4:	08002acf 	.word	0x08002acf
 8002ee8:	08002fd1 	.word	0x08002fd1
 8002eec:	08002f8b 	.word	0x08002f8b
 8002ef0:	08002f8b 	.word	0x08002f8b
 8002ef4:	08002f8b 	.word	0x08002f8b
 8002ef8:	08002ea1 	.word	0x08002ea1
 8002efc:	08002ea1 	.word	0x08002ea1
 8002f00:	08002ea1 	.word	0x08002ea1
 8002f04:	2965      	cmp	r1, #101	@ 0x65
 8002f06:	d91d      	bls.n	8002f44 <MCP_ReceivedFrame+0x554>
 8002f08:	f1a1 0374 	sub.w	r3, r1, #116	@ 0x74
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	2a14      	cmp	r2, #20
 8002f10:	d81a      	bhi.n	8002f48 <MCP_ReceivedFrame+0x558>
 8002f12:	2b14      	cmp	r3, #20
 8002f14:	d818      	bhi.n	8002f48 <MCP_ReceivedFrame+0x558>
 8002f16:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002f1a:	0106      	.short	0x0106
 8002f1c:	00270027 	.word	0x00270027
 8002f20:	00270027 	.word	0x00270027
 8002f24:	00170027 	.word	0x00170027
 8002f28:	00170017 	.word	0x00170017
 8002f2c:	00270027 	.word	0x00270027
 8002f30:	00170017 	.word	0x00170017
 8002f34:	00170017 	.word	0x00170017
 8002f38:	00170017 	.word	0x00170017
 8002f3c:	004a0017 	.word	0x004a0017
 8002f40:	004a004a 	.word	0x004a004a
 8002f44:	294e      	cmp	r1, #78	@ 0x4e
 8002f46:	d805      	bhi.n	8002f54 <MCP_ReceivedFrame+0x564>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002f48:	2302      	movs	r3, #2
    if (bNoError)
 8002f4a:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002f4e:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8002f52:	e584      	b.n	8002a5e <MCP_ReceivedFrame+0x6e>
 8002f54:	f1a1 024f 	sub.w	r2, r1, #79	@ 0x4f
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4093      	lsls	r3, r2
 8002f5e:	4a33      	ldr	r2, [pc, #204]	@ (800302c <MCP_ReceivedFrame+0x63c>)
 8002f60:	4213      	tst	r3, r2
 8002f62:	d124      	bne.n	8002fae <MCP_ReceivedFrame+0x5be>
 8002f64:	295b      	cmp	r1, #91	@ 0x5b
 8002f66:	d1ef      	bne.n	8002f48 <MCP_ReceivedFrame+0x558>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002f68:	f8d5 2001 	ldr.w	r2, [r5, #1]
 8002f6c:	4638      	mov	r0, r7
 8002f6e:	f000 fde7 	bl	8003b40 <UI_SetReg>
 8002f72:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002f76:	e572      	b.n	8002a5e <MCP_ReceivedFrame+0x6e>
 8002f78:	f1a1 0364 	sub.w	r3, r1, #100	@ 0x64
 8002f7c:	482c      	ldr	r0, [pc, #176]	@ (8003030 <MCP_ReceivedFrame+0x640>)
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2201      	movs	r2, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	4018      	ands	r0, r3
 8002f88:	b1c8      	cbz	r0, 8002fbe <MCP_ReceivedFrame+0x5ce>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002f8a:	f10d 0209 	add.w	r2, sp, #9
 8002f8e:	4638      	mov	r0, r7
 8002f90:	f000 fe86 	bl	8003ca0 <UI_GetReg>
          if ( bNoError == true )
 8002f94:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002f98:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f43f ad62 	beq.w	8002a64 <MCP_ReceivedFrame+0x74>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002fa0:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	aa04      	add	r2, sp, #16
 8002fa8:	21f0      	movs	r1, #240	@ 0xf0
 8002faa:	47a0      	blx	r4
  if (RequireAck)
 8002fac:	e561      	b.n	8002a72 <MCP_ReceivedFrame+0x82>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002fae:	f8b5 2001 	ldrh.w	r2, [r5, #1]
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	f000 fdc4 	bl	8003b40 <UI_SetReg>
 8002fb8:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002fbc:	e54f      	b.n	8002a5e <MCP_ReceivedFrame+0x6e>
 8002fbe:	f64c 4203 	movw	r2, #52227	@ 0xcc03
 8002fc2:	4213      	tst	r3, r2
 8002fc4:	f47f af6c 	bne.w	8002ea0 <MCP_ReceivedFrame+0x4b0>
 8002fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8003034 <MCP_ReceivedFrame+0x644>)
 8002fca:	4213      	tst	r3, r2
 8002fcc:	f43f ad7f 	beq.w	8002ace <MCP_ReceivedFrame+0xde>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002fd0:	f10d 0209 	add.w	r2, sp, #9
 8002fd4:	4638      	mov	r0, r7
 8002fd6:	f000 fe63 	bl	8003ca0 <UI_GetReg>
           if ( bNoError == true )
 8002fda:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002fde:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f43f ad3f 	beq.w	8002a64 <MCP_ReceivedFrame+0x74>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002fe6:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002fea:	2301      	movs	r3, #1
 8002fec:	aa04      	add	r2, sp, #16
 8002fee:	21f0      	movs	r1, #240	@ 0xf0
 8002ff0:	47a0      	blx	r4
  if (RequireAck)
 8002ff2:	e53e      	b.n	8002a72 <MCP_ReceivedFrame+0x82>
 8002ff4:	4a10      	ldr	r2, [pc, #64]	@ (8003038 <MCP_ReceivedFrame+0x648>)
 8002ff6:	4213      	tst	r3, r2
 8002ff8:	d1c7      	bne.n	8002f8a <MCP_ReceivedFrame+0x59a>
 8002ffa:	4a10      	ldr	r2, [pc, #64]	@ (800303c <MCP_ReceivedFrame+0x64c>)
 8002ffc:	401a      	ands	r2, r3
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	d1e6      	bne.n	8002fd0 <MCP_ReceivedFrame+0x5e0>
 8003002:	e564      	b.n	8002ace <MCP_ReceivedFrame+0xde>
    		   bNoError = true;
 8003004:	2301      	movs	r3, #1
 8003006:	f88d 3009 	strb.w	r3, [sp, #9]
    		   int32_t BatteryVoltage = getBatteryVoltage(); /*int32_t format*/
 800300a:	f7fe f815 	bl	8001038 <getBatteryVoltage>
 800300e:	4603      	mov	r3, r0
 8003010:	9304      	str	r3, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,(uint8_t*)(&BatteryVoltage),4);
 8003012:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8003016:	2304      	movs	r3, #4
 8003018:	aa04      	add	r2, sp, #16
 800301a:	21f0      	movs	r1, #240	@ 0xf0
 800301c:	47a0      	blx	r4
  if (RequireAck)
 800301e:	e528      	b.n	8002a72 <MCP_ReceivedFrame+0x82>
 8003020:	2aaaaaab 	.word	0x2aaaaaab
 8003024:	20001384 	.word	0x20001384
 8003028:	0f8ffe78 	.word	0x0f8ffe78
 800302c:	006407f1 	.word	0x006407f1
 8003030:	0ffe11f0 	.word	0x0ffe11f0
 8003034:	0001020c 	.word	0x0001020c
 8003038:	00200107 	.word	0x00200107
 800303c:	00100080 	.word	0x00100080
    		   bNoError = true;
 8003040:	2301      	movs	r3, #1
 8003042:	f88d 3009 	strb.w	r3, [sp, #9]
    		   int32_t current = getDC(); /*int32_t format*/
 8003046:	f7fe f82b 	bl	80010a0 <getDC>
 800304a:	e7e0      	b.n	800300e <MCP_ReceivedFrame+0x61e>
    		   bNoError = true;
 800304c:	2301      	movs	r3, #1
    		   uint8_t fake = 0x0A;
 800304e:	220a      	movs	r2, #10
    		   uint8_t toggle = 0x06;
 8003050:	f88d 2010 	strb.w	r2, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&toggle,1);
 8003054:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8003058:	aa04      	add	r2, sp, #16
    		   bNoError = true;
 800305a:	f88d 3009 	strb.w	r3, [sp, #9]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&toggle,1);
 800305e:	21f0      	movs	r1, #240	@ 0xf0
 8003060:	47a0      	blx	r4
  if (RequireAck)
 8003062:	e506      	b.n	8002a72 <MCP_ReceivedFrame+0x82>
    		   bNoError = true;
 8003064:	2301      	movs	r3, #1
 8003066:	f88d 3009 	strb.w	r3, [sp, #9]
    		   int32_t motorDriverTemp = getDriverTemperature(); /*int32_t format*/
 800306a:	f7fd fff1 	bl	8001050 <getDriverTemperature>
 800306e:	e7ce      	b.n	800300e <MCP_ReceivedFrame+0x61e>
    		   bNoError = true;
 8003070:	2401      	movs	r4, #1
 8003072:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t errorReport = GET_MOTOR_ERROR_REPORT();
 8003076:	f7fe fbfb 	bl	8001870 <GET_MOTOR_ERROR_REPORT>
    		   updateConnectionStatus(true,report);
 800307a:	4621      	mov	r1, r4
    		   uint8_t errorReport = GET_MOTOR_ERROR_REPORT();
 800307c:	4603      	mov	r3, r0
    		   updateConnectionStatus(true,report);
 800307e:	4620      	mov	r0, r4
    		   uint8_t errorReport = GET_MOTOR_ERROR_REPORT();
 8003080:	f88d 3010 	strb.w	r3, [sp, #16]
    		   updateConnectionStatus(true,report);
 8003084:	f7fe f9fc 	bl	8001480 <updateConnectionStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR, &errorReport, 1);
 8003088:	e677      	b.n	8002d7a <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 800308a:	2301      	movs	r3, #1
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&bootDone,1);
 800308c:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
    		   uint8_t bootDone = 0x01;
 8003090:	f88d 3010 	strb.w	r3, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&bootDone,1);
 8003094:	aa04      	add	r2, sp, #16
    		   bNoError = true;
 8003096:	f88d 3009 	strb.w	r3, [sp, #9]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&bootDone,1);
 800309a:	21f0      	movs	r1, #240	@ 0xf0
 800309c:	47a0      	blx	r4
  if (RequireAck)
 800309e:	e4e8      	b.n	8002a72 <MCP_ReceivedFrame+0x82>
    		   uart++;
 80030a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003158 <MCP_ReceivedFrame+0x768>)
 80030a2:	7819      	ldrb	r1, [r3, #0]
    		   bNoError = true;
 80030a4:	2401      	movs	r4, #1
    		   uart++;
 80030a6:	4421      	add	r1, r4
    		   uint8_t timeout = 0x0A;
 80030a8:	220a      	movs	r2, #10
    		   uart++;
 80030aa:	b2c9      	uxtb	r1, r1
    		   updateConnectionStatus(true,uart);
 80030ac:	4620      	mov	r0, r4
    		   bNoError = true;
 80030ae:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t timeout = 0x0A;
 80030b2:	f88d 2010 	strb.w	r2, [sp, #16]
    		   uart++;
 80030b6:	7019      	strb	r1, [r3, #0]
    		   updateConnectionStatus(true,uart);
 80030b8:	f7fe f9e2 	bl	8001480 <updateConnectionStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&timeout,1);
 80030bc:	e65d      	b.n	8002d7a <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 80030be:	2401      	movs	r4, #1
    		   uint8_t lightOn = 0x09;
 80030c0:	2309      	movs	r3, #9
    		   set_tail_light_status(0x01);
 80030c2:	4620      	mov	r0, r4
    		   bNoError = true;
 80030c4:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t lightOn = 0x09;
 80030c8:	f88d 3010 	strb.w	r3, [sp, #16]
    		   set_tail_light_status(0x01);
 80030cc:	f7fe f808 	bl	80010e0 <set_tail_light_status>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&lightOn,1);
 80030d0:	e653      	b.n	8002d7a <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f88d 3009 	strb.w	r3, [sp, #9]
    		   changePowerMode();
 80030d8:	f7fd ff02 	bl	8000ee0 <changePowerMode>
  if (RequireAck)
 80030dc:	e4c9      	b.n	8002a72 <MCP_ReceivedFrame+0x82>
    		   bNoError = true;
 80030de:	2401      	movs	r4, #1
    		   uint8_t lightOff = 0x07;
 80030e0:	2307      	movs	r3, #7
    		   set_tail_light_status(0x00);
 80030e2:	2000      	movs	r0, #0
    		   bNoError = true;
 80030e4:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t lightOff = 0x07;
 80030e8:	f88d 3010 	strb.w	r3, [sp, #16]
    		   set_tail_light_status(0x00);
 80030ec:	f7fd fff8 	bl	80010e0 <set_tail_light_status>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&lightOff,1);
 80030f0:	e643      	b.n	8002d7a <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 80030f2:	2301      	movs	r3, #1
    		   uint8_t toggle = 0x06;
 80030f4:	2206      	movs	r2, #6
 80030f6:	e7ab      	b.n	8003050 <MCP_ReceivedFrame+0x660>
    		   bNoError = true;
 80030f8:	2401      	movs	r4, #1
    		   uint8_t releaseBrake = 0x05;
 80030fa:	2305      	movs	r3, #5
    		   updateBrakeStatus(false);
 80030fc:	2000      	movs	r0, #0
    		   bNoError = true;
 80030fe:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t releaseBrake = 0x05;
 8003102:	f88d 3010 	strb.w	r3, [sp, #16]
    		   updateBrakeStatus(false);
 8003106:	f7fd ff2f 	bl	8000f68 <updateBrakeStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&releaseBrake,1);
 800310a:	e636      	b.n	8002d7a <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 800310c:	2401      	movs	r4, #1
    		   uint8_t pressBrake = 0x04;
 800310e:	2304      	movs	r3, #4
    		   updateBrakeStatus(true);
 8003110:	4620      	mov	r0, r4
    		   bNoError = true;
 8003112:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t pressBrake = 0x04;
 8003116:	f88d 3010 	strb.w	r3, [sp, #16]
    		   updateBrakeStatus(true);
 800311a:	f7fd ff25 	bl	8000f68 <updateBrakeStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&pressBrake,1);
 800311e:	e62c      	b.n	8002d7a <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 8003120:	2301      	movs	r3, #1
    		   uint8_t twistedThorttle = 0x03;
 8003122:	2203      	movs	r2, #3
 8003124:	e794      	b.n	8003050 <MCP_ReceivedFrame+0x660>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8003126:	786a      	ldrb	r2, [r5, #1]
 8003128:	4638      	mov	r0, r7
 800312a:	f000 fd09 	bl	8003b40 <UI_SetReg>
 800312e:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8003132:	e494      	b.n	8002a5e <MCP_ReceivedFrame+0x6e>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8003134:	786a      	ldrb	r2, [r5, #1]
 8003136:	2100      	movs	r1, #0
 8003138:	4638      	mov	r0, r7
 800313a:	f000 fd01 	bl	8003b40 <UI_SetReg>
 800313e:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8003142:	e48c      	b.n	8002a5e <MCP_ReceivedFrame+0x6e>
 8003144:	2326      	movs	r3, #38	@ 0x26
 8003146:	2124      	movs	r1, #36	@ 0x24
 8003148:	2222      	movs	r2, #34	@ 0x22
 800314a:	e5d9      	b.n	8002d00 <MCP_ReceivedFrame+0x310>
    		   uint8_t invalidCMD = 0xFF;
 800314c:	23ff      	movs	r3, #255	@ 0xff
 800314e:	f88d 3010 	strb.w	r3, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&invalidCMD,1);
 8003152:	69fc      	ldr	r4, [r7, #28]
 8003154:	2301      	movs	r3, #1
 8003156:	e4b6      	b.n	8002ac6 <MCP_ReceivedFrame+0xd6>
 8003158:	20001382 	.word	0x20001382

0800315c <MCP_WaitNextFrame>:
{
 800315c:	b510      	push	{r4, lr}
 800315e:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8003160:	6980      	ldr	r0, [r0, #24]
 8003162:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003164:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8003166:	2280      	movs	r2, #128	@ 0x80
 8003168:	f884 20ac 	strb.w	r2, [r4, #172]	@ 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 800316c:	6a23      	ldr	r3, [r4, #32]
 800316e:	69a0      	ldr	r0, [r4, #24]
}
 8003170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8003174:	4718      	bx	r3
 8003176:	bf00      	nop

08003178 <MCP_Init>:
{
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	4604      	mov	r4, r0
 800317e:	461d      	mov	r5, r3
 8003180:	9b07      	ldr	r3, [sp, #28]
  pHandle->s_fwVer = s_fwVer;
 8003182:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
  FCP_SetClient( pFCP, pHandle,
 8003186:	4b09      	ldr	r3, [pc, #36]	@ (80031ac <MCP_Init+0x34>)
  pHandle->pFCP = pFCP;
 8003188:	61a1      	str	r1, [r4, #24]
{
 800318a:	4608      	mov	r0, r1
 800318c:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	4a07      	ldr	r2, [pc, #28]	@ (80031b0 <MCP_Init+0x38>)
 8003192:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <MCP_Init+0x3c>)
 8003194:	4621      	mov	r1, r4
 8003196:	f005 fa63 	bl	8008660 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 800319a:	9b06      	ldr	r3, [sp, #24]
 800319c:	6263      	str	r3, [r4, #36]	@ 0x24
  pHandle->fFcpReceive = fFcpReceive;
 800319e:	e9c4 6507 	strd	r6, r5, [r4, #28]
  MCP_WaitNextFrame(pHandle);
 80031a2:	4620      	mov	r0, r4
 80031a4:	f7ff ffda 	bl	800315c <MCP_WaitNextFrame>
}
 80031a8:	b002      	add	sp, #8
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
 80031ac:	080031b9 	.word	0x080031b9
 80031b0:	080031c1 	.word	0x080031c1
 80031b4:	080029f1 	.word	0x080029f1

080031b8 <MCP_OnTimeOut>:
{
 80031b8:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 80031ba:	f7ff ffcf 	bl	800315c <MCP_WaitNextFrame>
}
 80031be:	bd08      	pop	{r3, pc}

080031c0 <MCP_SentFrame>:
{
 80031c0:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 80031c2:	f7ff ffcb 	bl	800315c <MCP_WaitNextFrame>
}
 80031c6:	bd08      	pop	{r3, pc}

080031c8 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80031c8:	b530      	push	{r4, r5, lr}
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80031ca:	4d09      	ldr	r5, [pc, #36]	@ (80031f0 <MX_MotorControl_Init+0x28>)
 80031cc:	4c09      	ldr	r4, [pc, #36]	@ (80031f4 <MX_MotorControl_Init+0x2c>)
{
 80031ce:	b083      	sub	sp, #12
  MCboot(pMCI,pMCT);
 80031d0:	4629      	mov	r1, r5
 80031d2:	4620      	mov	r0, r4
 80031d4:	f7ff f842 	bl	800225c <MCboot>
  mc_lock_pins();
 80031d8:	f7ff fb60 	bl	800289c <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80031dc:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <MX_MotorControl_Init+0x30>)
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	4806      	ldr	r0, [pc, #24]	@ (80031fc <MX_MotorControl_Init+0x34>)
 80031e2:	462b      	mov	r3, r5
 80031e4:	4622      	mov	r2, r4
 80031e6:	2101      	movs	r1, #1
 80031e8:	f000 fc28 	bl	8003a3c <UI_TaskInit>
}
 80031ec:	b003      	add	sp, #12
 80031ee:	bd30      	pop	{r4, r5, pc}
 80031f0:	2000138c 	.word	0x2000138c
 80031f4:	20001390 	.word	0x20001390
 80031f8:	0800ad84 	.word	0x0800ad84
 80031fc:	200005cc 	.word	0x200005cc

08003200 <vPortSetupTimerInterrupt>:

void vPortSetupTimerInterrupt( void )
{
 8003200:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8003202:	f001 fdbd 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8003206:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <vPortSetupTimerInterrupt+0x18>)
 8003208:	fba3 3000 	umull	r3, r0, r3, r0
 800320c:	09c0      	lsrs	r0, r0, #7
}
 800320e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8003212:	f001 badf 	b.w	80047d4 <HAL_SYSTICK_Config>
 8003216:	bf00      	nop
 8003218:	10624dd3 	.word	0x10624dd3

0800321c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800321c:	4b6a      	ldr	r3, [pc, #424]	@ (80033c8 <RCM_RegisterRegConv+0x1ac>)
{
 800321e:	b570      	push	{r4, r5, r6, lr}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003220:	681c      	ldr	r4, [r3, #0]
{
 8003222:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003224:	2c00      	cmp	r4, #0
 8003226:	d077      	beq.n	8003318 <RCM_RegisterRegConv+0xfc>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003228:	7922      	ldrb	r2, [r4, #4]
 800322a:	f890 c004 	ldrb.w	ip, [r0, #4]
 800322e:	4562      	cmp	r2, ip
 8003230:	d01d      	beq.n	800326e <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	2a00      	cmp	r2, #0
 8003236:	f000 808a 	beq.w	800334e <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800323a:	7914      	ldrb	r4, [r2, #4]
 800323c:	4564      	cmp	r4, ip
  uint8_t handle=255;
 800323e:	f04f 00ff 	mov.w	r0, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003242:	d072      	beq.n	800332a <RCM_RegisterRegConv+0x10e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003244:	689c      	ldr	r4, [r3, #8]
 8003246:	2c00      	cmp	r4, #0
 8003248:	f000 8085 	beq.w	8003356 <RCM_RegisterRegConv+0x13a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800324c:	7922      	ldrb	r2, [r4, #4]
 800324e:	4562      	cmp	r2, ip
 8003250:	d077      	beq.n	8003342 <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003252:	68dc      	ldr	r4, [r3, #12]
 8003254:	2c00      	cmp	r4, #0
 8003256:	f000 808d 	beq.w	8003374 <RCM_RegisterRegConv+0x158>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800325a:	7922      	ldrb	r2, [r4, #4]
 800325c:	4562      	cmp	r2, ip
 800325e:	f000 8095 	beq.w	800338c <RCM_RegisterRegConv+0x170>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8003262:	2803      	cmp	r0, #3
 8003264:	bf98      	it	ls
 8003266:	680a      	ldrls	r2, [r1, #0]
 8003268:	d906      	bls.n	8003278 <RCM_RegisterRegConv+0x5c>
 800326a:	20ff      	movs	r0, #255	@ 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 800326c:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800326e:	6802      	ldr	r2, [r0, #0]
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	4282      	cmp	r2, r0
 8003274:	d1dd      	bne.n	8003232 <RCM_RegisterRegConv+0x16>
  uint8_t i=0;
 8003276:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 8003278:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800327c:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800327e:	4c53      	ldr	r4, [pc, #332]	@ (80033cc <RCM_RegisterRegConv+0x1b0>)
 8003280:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003282:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003284:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003288:	d411      	bmi.n	80032ae <RCM_RegisterRegConv+0x92>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800328a:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800328c:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003290:	f023 0320 	bic.w	r3, r3, #32
 8003294:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003296:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003298:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800329a:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800329e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032a2:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80032a4:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80032a6:	6893      	ldr	r3, [r2, #8]
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80032ae:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80032b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80032b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80032b6:	790b      	ldrb	r3, [r1, #4]
 80032b8:	2b09      	cmp	r3, #9
 80032ba:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80032be:	d83a      	bhi.n	8003336 <RCM_RegisterRegConv+0x11a>
 80032c0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80032c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032c8:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
 80032d0:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80032d4:	fab4 f484 	clz	r4, r4
 80032d8:	fa2e fe04 	lsr.w	lr, lr, r4
 80032dc:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 80032de:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80032e2:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 80032e6:	f04f 7cf8 	mov.w	ip, #32505856	@ 0x1f00000
 80032ea:	fa9c f5ac 	rbit	r5, ip
 80032ee:	fab5 f585 	clz	r5, r5
 80032f2:	fa9c fcac 	rbit	ip, ip
 80032f6:	688e      	ldr	r6, [r1, #8]
 80032f8:	fabc fc8c 	clz	ip, ip
 80032fc:	fa23 f105 	lsr.w	r1, r3, r5
 8003300:	fa23 f30c 	lsr.w	r3, r3, ip
 8003304:	fa06 f503 	lsl.w	r5, r6, r3
 8003308:	2307      	movs	r3, #7
 800330a:	408b      	lsls	r3, r1
 800330c:	ea24 0303 	bic.w	r3, r4, r3
 8003310:	432b      	orrs	r3, r5
 8003312:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8003316:	bd70      	pop	{r4, r5, r6, pc}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	2a00      	cmp	r2, #0
 800331c:	d03c      	beq.n	8003398 <RCM_RegisterRegConv+0x17c>
 800331e:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8003322:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003324:	7914      	ldrb	r4, [r2, #4]
 8003326:	4564      	cmp	r4, ip
 8003328:	d18c      	bne.n	8003244 <RCM_RegisterRegConv+0x28>
 800332a:	6814      	ldr	r4, [r2, #0]
 800332c:	680a      	ldr	r2, [r1, #0]
 800332e:	4294      	cmp	r4, r2
 8003330:	d188      	bne.n	8003244 <RCM_RegisterRegConv+0x28>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003332:	2001      	movs	r0, #1
 8003334:	e7a0      	b.n	8003278 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003336:	3c1e      	subs	r4, #30
 8003338:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800333c:	f003 7e00 	and.w	lr, r3, #33554432	@ 0x2000000
 8003340:	e7c4      	b.n	80032cc <RCM_RegisterRegConv+0xb0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003342:	6824      	ldr	r4, [r4, #0]
 8003344:	680a      	ldr	r2, [r1, #0]
 8003346:	4294      	cmp	r4, r2
 8003348:	d183      	bne.n	8003252 <RCM_RegisterRegConv+0x36>
      i++;
 800334a:	2002      	movs	r0, #2
 800334c:	e794      	b.n	8003278 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800334e:	689c      	ldr	r4, [r3, #8]
 8003350:	b1b4      	cbz	r4, 8003380 <RCM_RegisterRegConv+0x164>
 8003352:	2001      	movs	r0, #1
 8003354:	e77a      	b.n	800324c <RCM_RegisterRegConv+0x30>
 8003356:	2804      	cmp	r0, #4
 8003358:	d924      	bls.n	80033a4 <RCM_RegisterRegConv+0x188>
 800335a:	68d8      	ldr	r0, [r3, #12]
 800335c:	2800      	cmp	r0, #0
 800335e:	d02f      	beq.n	80033c0 <RCM_RegisterRegConv+0x1a4>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003360:	7902      	ldrb	r2, [r0, #4]
 8003362:	4562      	cmp	r2, ip
 8003364:	680a      	ldr	r2, [r1, #0]
 8003366:	d1f0      	bne.n	800334a <RCM_RegisterRegConv+0x12e>
 8003368:	6800      	ldr	r0, [r0, #0]
      i++;
 800336a:	4282      	cmp	r2, r0
 800336c:	bf0c      	ite	eq
 800336e:	2003      	moveq	r0, #3
 8003370:	2002      	movne	r0, #2
 8003372:	e781      	b.n	8003278 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003374:	2804      	cmp	r0, #4
 8003376:	680a      	ldr	r2, [r1, #0]
 8003378:	f67f af7e 	bls.w	8003278 <RCM_RegisterRegConv+0x5c>
 800337c:	2003      	movs	r0, #3
 800337e:	e77b      	b.n	8003278 <RCM_RegisterRegConv+0x5c>
 8003380:	68dc      	ldr	r4, [r3, #12]
 8003382:	b1dc      	cbz	r4, 80033bc <RCM_RegisterRegConv+0x1a0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003384:	7922      	ldrb	r2, [r4, #4]
 8003386:	4562      	cmp	r2, ip
 8003388:	d118      	bne.n	80033bc <RCM_RegisterRegConv+0x1a0>
 800338a:	2001      	movs	r0, #1
 800338c:	6824      	ldr	r4, [r4, #0]
 800338e:	680a      	ldr	r2, [r1, #0]
 8003390:	4294      	cmp	r4, r2
 8003392:	f47f af66 	bne.w	8003262 <RCM_RegisterRegConv+0x46>
 8003396:	e7f1      	b.n	800337c <RCM_RegisterRegConv+0x160>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003398:	689c      	ldr	r4, [r3, #8]
 800339a:	b11c      	cbz	r4, 80033a4 <RCM_RegisterRegConv+0x188>
 800339c:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 80033a0:	4610      	mov	r0, r2
 80033a2:	e753      	b.n	800324c <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80033a4:	68dc      	ldr	r4, [r3, #12]
 80033a6:	b914      	cbnz	r4, 80033ae <RCM_RegisterRegConv+0x192>
 80033a8:	680a      	ldr	r2, [r1, #0]
 80033aa:	4620      	mov	r0, r4
 80033ac:	e764      	b.n	8003278 <RCM_RegisterRegConv+0x5c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80033ae:	7920      	ldrb	r0, [r4, #4]
 80033b0:	790a      	ldrb	r2, [r1, #4]
 80033b2:	4290      	cmp	r0, r2
 80033b4:	d006      	beq.n	80033c4 <RCM_RegisterRegConv+0x1a8>
 80033b6:	680a      	ldr	r2, [r1, #0]
 80033b8:	2000      	movs	r0, #0
 80033ba:	e75d      	b.n	8003278 <RCM_RegisterRegConv+0x5c>
 80033bc:	680a      	ldr	r2, [r1, #0]
 80033be:	e7b8      	b.n	8003332 <RCM_RegisterRegConv+0x116>
 80033c0:	680a      	ldr	r2, [r1, #0]
 80033c2:	e7c2      	b.n	800334a <RCM_RegisterRegConv+0x12e>
 80033c4:	2000      	movs	r0, #0
 80033c6:	e7e1      	b.n	800338c <RCM_RegisterRegConv+0x170>
 80033c8:	200013bc 	.word	0x200013bc
 80033cc:	2000139c 	.word	0x2000139c

080033d0 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80033d0:	4b18      	ldr	r3, [pc, #96]	@ (8003434 <RCM_ExecRegularConv+0x64>)
 80033d2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80033d6:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80033d8:	6812      	ldr	r2, [r2, #0]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80033da:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80033de:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80033e0:	bf93      	iteet	ls
 80033e2:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 80033e6:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80033e8:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
 80033ec:	f043 7300 	orrls.w	r3, r3, #33554432	@ 0x2000000
 80033f0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80033f4:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80033f8:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80033fc:	fab1 f181 	clz	r1, r1
 8003400:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8003404:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 8003410:	f021 011f 	bic.w	r1, r1, #31
 8003414:	4319      	orrs	r1, r3

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8003416:	0153      	lsls	r3, r2, #5
 8003418:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
 800341c:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 8003420:	2101      	movs	r1, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003422:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8003424:	f8c3 1178 	str.w	r1, [r3, #376]	@ 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8003428:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 800342a:	079b      	lsls	r3, r3, #30
 800342c:	d5fc      	bpl.n	8003428 <RCM_ExecRegularConv+0x58>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800342e:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8003430:	b280      	uxth	r0, r0
 8003432:	4770      	bx	lr
 8003434:	200013bc 	.word	0x200013bc

08003438 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8003438:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 800343a:	4c0e      	ldr	r4, [pc, #56]	@ (8003474 <RCM_ExecUserConv+0x3c>)
 800343c:	7823      	ldrb	r3, [r4, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d000      	beq.n	8003444 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8003442:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003444:	4d0c      	ldr	r5, [pc, #48]	@ (8003478 <RCM_ExecUserConv+0x40>)
 8003446:	7828      	ldrb	r0, [r5, #0]
 8003448:	f7ff ffc2 	bl	80033d0 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800344c:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <RCM_ExecUserConv+0x44>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800344e:	4a0c      	ldr	r2, [pc, #48]	@ (8003480 <RCM_ExecUserConv+0x48>)
 8003450:	4601      	mov	r1, r0
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003452:	7828      	ldrb	r0, [r5, #0]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003454:	8011      	strh	r1, [r2, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003456:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 800345a:	2202      	movs	r2, #2
 800345c:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800345e:	2d00      	cmp	r5, #0
 8003460:	d0ef      	beq.n	8003442 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003462:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8003466:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003468:	2300      	movs	r3, #0
 800346a:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800346c:	462b      	mov	r3, r5
}
 800346e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003472:	4718      	bx	r3
 8003474:	20001394 	.word	0x20001394
 8003478:	20001398 	.word	0x20001398
 800347c:	2000139c 	.word	0x2000139c
 8003480:	20001396 	.word	0x20001396

08003484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003484:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003486:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <HAL_MspInit+0x3c>)
 8003488:	2200      	movs	r2, #0
 800348a:	9200      	str	r2, [sp, #0]
 800348c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800348e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8003492:	6459      	str	r1, [r3, #68]	@ 0x44
 8003494:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003496:	f400 4080 	and.w	r0, r0, #16384	@ 0x4000
 800349a:	9000      	str	r0, [sp, #0]
 800349c:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	9201      	str	r2, [sp, #4]
 80034a0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80034a2:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 80034a6:	6418      	str	r0, [r3, #64]	@ 0x40
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80034b2:	210f      	movs	r1, #15
 80034b4:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b8:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80034ba:	f001 b91d 	b.w	80046f8 <HAL_NVIC_SetPriority>
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	00000000 	.word	0x00000000

080034c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034c8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80034ca:	6803      	ldr	r3, [r0, #0]
 80034cc:	4a3c      	ldr	r2, [pc, #240]	@ (80035c0 <HAL_ADC_MspInit+0xf8>)
{
 80034ce:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80034d2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80034d8:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80034dc:	940a      	str	r4, [sp, #40]	@ 0x28
  if(hadc->Instance==ADC1)
 80034de:	d004      	beq.n	80034ea <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80034e0:	4a38      	ldr	r2, [pc, #224]	@ (80035c4 <HAL_ADC_MspInit+0xfc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d046      	beq.n	8003574 <HAL_ADC_MspInit+0xac>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80034e6:	b00c      	add	sp, #48	@ 0x30
 80034e8:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034ea:	4b37      	ldr	r3, [pc, #220]	@ (80035c8 <HAL_ADC_MspInit+0x100>)
 80034ec:	9400      	str	r4, [sp, #0]
 80034ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f0:	4836      	ldr	r0, [pc, #216]	@ (80035cc <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80034f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034fa:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80034fe:	9200      	str	r2, [sp, #0]
 8003500:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003502:	9401      	str	r4, [sp, #4]
 8003504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003506:	f042 0204 	orr.w	r2, r2, #4
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
 800350c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800350e:	f002 0204 	and.w	r2, r2, #4
 8003512:	9201      	str	r2, [sp, #4]
 8003514:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003516:	9402      	str	r4, [sp, #8]
 8003518:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003522:	f002 0201 	and.w	r2, r2, #1
 8003526:	9202      	str	r2, [sp, #8]
 8003528:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800352a:	9403      	str	r4, [sp, #12]
 800352c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800352e:	f042 0202 	orr.w	r2, r2, #2
 8003532:	631a      	str	r2, [r3, #48]	@ 0x30
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = BATTERY_CURRENT_Pin|MOTOR_TEMP_Pin;
 800353e:	2205      	movs	r2, #5
 8003540:	2303      	movs	r3, #3
 8003542:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003546:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003548:	f001 f95e 	bl	8004808 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 800354e:	2288      	movs	r2, #136	@ 0x88
 8003550:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003552:	481f      	ldr	r0, [pc, #124]	@ (80035d0 <HAL_ADC_MspInit+0x108>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 8003556:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	f001 f955 	bl	8004808 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMPERATURE_Pin;
 800355e:	2201      	movs	r2, #1
 8003560:	2303      	movs	r3, #3
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8003562:	481c      	ldr	r0, [pc, #112]	@ (80035d4 <HAL_ADC_MspInit+0x10c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8003566:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = TEMPERATURE_Pin;
 8003568:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 800356c:	f001 f94c 	bl	8004808 <HAL_GPIO_Init>
}
 8003570:	b00c      	add	sp, #48	@ 0x30
 8003572:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003574:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <HAL_ADC_MspInit+0x100>)
 8003576:	9404      	str	r4, [sp, #16]
 8003578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 800357a:	4814      	ldr	r0, [pc, #80]	@ (80035cc <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800357c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
 8003582:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003584:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8003588:	9204      	str	r2, [sp, #16]
 800358a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800358c:	9405      	str	r4, [sp, #20]
 800358e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003590:	f042 0204 	orr.w	r2, r2, #4
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30
 8003596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8003598:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80035b8 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80035a2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 80035a4:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a8:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 80035aa:	f001 f92d 	bl	8004808 <HAL_GPIO_Init>
}
 80035ae:	b00c      	add	sp, #48	@ 0x30
 80035b0:	bd10      	pop	{r4, pc}
 80035b2:	bf00      	nop
 80035b4:	f3af 8000 	nop.w
 80035b8:	00000010 	.word	0x00000010
 80035bc:	00000003 	.word	0x00000003
 80035c0:	40012000 	.word	0x40012000
 80035c4:	40012100 	.word	0x40012100
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40020800 	.word	0x40020800
 80035d0:	40020000 	.word	0x40020000
 80035d4:	40020400 	.word	0x40020400

080035d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035d8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80035da:	6802      	ldr	r2, [r0, #0]
 80035dc:	4922      	ldr	r1, [pc, #136]	@ (8003668 <HAL_TIM_Base_MspInit+0x90>)
{
 80035de:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 80035e2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80035e8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80035ec:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 80035ee:	d004      	beq.n	80035fa <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80035f0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80035f4:	d00e      	beq.n	8003614 <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80035f6:	b00a      	add	sp, #40	@ 0x28
 80035f8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035fa:	4a1c      	ldr	r2, [pc, #112]	@ (800366c <HAL_TIM_Base_MspInit+0x94>)
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6453      	str	r3, [r2, #68]	@ 0x44
 8003606:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	9b01      	ldr	r3, [sp, #4]
}
 8003610:	b00a      	add	sp, #40	@ 0x28
 8003612:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003614:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8003618:	9302      	str	r3, [sp, #8]
 800361a:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 800361c:	f040 0001 	orr.w	r0, r0, #1
 8003620:	6410      	str	r0, [r2, #64]	@ 0x40
 8003622:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8003624:	f000 0001 	and.w	r0, r0, #1
 8003628:	9002      	str	r0, [sp, #8]
 800362a:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362c:	9303      	str	r3, [sp, #12]
 800362e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003630:	480f      	ldr	r0, [pc, #60]	@ (8003670 <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6313      	str	r3, [r2, #48]	@ 0x30
 8003638:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 800363a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8003660 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003644:	2202      	movs	r2, #2
 8003646:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003648:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 800364a:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800364e:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003652:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003654:	f001 f8d8 	bl	8004808 <HAL_GPIO_Init>
}
 8003658:	b00a      	add	sp, #40	@ 0x28
 800365a:	bd10      	pop	{r4, pc}
 800365c:	f3af 8000 	nop.w
 8003660:	00000007 	.word	0x00000007
 8003664:	00000002 	.word	0x00000002
 8003668:	40010000 	.word	0x40010000
 800366c:	40023800 	.word	0x40023800
 8003670:	40020000 	.word	0x40020000

08003674 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003674:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003676:	4a1f      	ldr	r2, [pc, #124]	@ (80036f4 <HAL_TIM_MspPostInit+0x80>)
 8003678:	6801      	ldr	r1, [r0, #0]
{
 800367a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800367c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800367e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003680:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003684:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003688:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800368a:	d001      	beq.n	8003690 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800368c:	b008      	add	sp, #32
 800368e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003690:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003698:	4817      	ldr	r0, [pc, #92]	@ (80036f8 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800369a:	f041 0102 	orr.w	r1, r1, #2
 800369e:	6311      	str	r1, [r2, #48]	@ 0x30
 80036a0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80036a2:	f001 0102 	and.w	r1, r1, #2
 80036a6:	9100      	str	r1, [sp, #0]
 80036a8:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036ae:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b0:	4323      	orrs	r3, r4
 80036b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036b6:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b8:	4023      	ands	r3, r4
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036be:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80036c0:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80036c4:	2302      	movs	r3, #2
 80036c6:	2602      	movs	r6, #2
 80036c8:	2702      	movs	r7, #2
 80036ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d2:	f001 f899 	bl	8004808 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80036d6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80036da:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036dc:	4807      	ldr	r0, [pc, #28]	@ (80036fc <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036de:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80036e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80036e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ea:	f001 f88d 	bl	8004808 <HAL_GPIO_Init>
}
 80036ee:	b008      	add	sp, #32
 80036f0:	bdd0      	pop	{r4, r6, r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40020400 	.word	0x40020400
 80036fc:	40020000 	.word	0x40020000

08003700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003700:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8003702:	4a1b      	ldr	r2, [pc, #108]	@ (8003770 <HAL_UART_MspInit+0x70>)
 8003704:	6801      	ldr	r1, [r0, #0]
{
 8003706:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 800370a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003710:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003714:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 8003716:	d002      	beq.n	800371e <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003718:	b009      	add	sp, #36	@ 0x24
 800371a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800371e:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8003726:	f040 0010 	orr.w	r0, r0, #16
 800372a:	6450      	str	r0, [r2, #68]	@ 0x44
 800372c:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 800372e:	f000 0010 	and.w	r0, r0, #16
 8003732:	9000      	str	r0, [sp, #0]
 8003734:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373a:	480e      	ldr	r0, [pc, #56]	@ (8003774 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	6313      	str	r3, [r2, #48]	@ 0x30
 8003742:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003744:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8003768 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003750:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003752:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003756:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003758:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375a:	f001 f855 	bl	8004808 <HAL_GPIO_Init>
}
 800375e:	b009      	add	sp, #36	@ 0x24
 8003760:	f85d fb04 	ldr.w	pc, [sp], #4
 8003764:	f3af 8000 	nop.w
 8003768:	000000c0 	.word	0x000000c0
 800376c:	00000002 	.word	0x00000002
 8003770:	40011000 	.word	0x40011000
 8003774:	40020400 	.word	0x40020400

08003778 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003778:	b508      	push	{r3, lr}
  if(huart->Instance==USART1)
 800377a:	6802      	ldr	r2, [r0, #0]
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <HAL_UART_MspDeInit+0x28>)
 800377e:	429a      	cmp	r2, r3
 8003780:	d000      	beq.n	8003784 <HAL_UART_MspDeInit+0xc>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8003782:	bd08      	pop	{r3, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 8003784:	4a07      	ldr	r2, [pc, #28]	@ (80037a4 <HAL_UART_MspDeInit+0x2c>)
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 8003786:	4808      	ldr	r0, [pc, #32]	@ (80037a8 <HAL_UART_MspDeInit+0x30>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8003788:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800378a:	f023 0310 	bic.w	r3, r3, #16
 800378e:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 8003790:	21c0      	movs	r1, #192	@ 0xc0
 8003792:	f001 f949 	bl	8004a28 <HAL_GPIO_DeInit>
}
 8003796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800379a:	2025      	movs	r0, #37	@ 0x25
 800379c:	f000 bff6 	b.w	800478c <HAL_NVIC_DisableIRQ>
 80037a0:	40011000 	.word	0x40011000
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40020400 	.word	0x40020400

080037ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80037b0:	4b23      	ldr	r3, [pc, #140]	@ (8003840 <HAL_InitTick+0x94>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	9202      	str	r2, [sp, #8]
 80037b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037b8:	f042 0210 	orr.w	r2, r2, #16
 80037bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	9302      	str	r3, [sp, #8]
{
 80037c6:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037c8:	a901      	add	r1, sp, #4
 80037ca:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80037cc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037ce:	f001 fafd 	bl	8004dcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80037d2:	9b06      	ldr	r3, [sp, #24]
 80037d4:	b9d3      	cbnz	r3, 800380c <HAL_InitTick+0x60>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80037d6:	f001 fad9 	bl	8004d8c <HAL_RCC_GetPCLK1Freq>
 80037da:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037dc:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <HAL_InitTick+0x98>)

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037de:	4c1a      	ldr	r4, [pc, #104]	@ (8003848 <HAL_InitTick+0x9c>)
 80037e0:	491a      	ldr	r1, [pc, #104]	@ (800384c <HAL_InitTick+0xa0>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0c9b      	lsrs	r3, r3, #18
 80037e8:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80037ea:	2200      	movs	r2, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80037ec:	e9c4 1300 	strd	r1, r3, [r4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 80037f0:	4620      	mov	r0, r4
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037f2:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim6.Init.ClockDivision = 0;
 80037f6:	6122      	str	r2, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f8:	60a2      	str	r2, [r4, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037fa:	61a2      	str	r2, [r4, #24]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037fc:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim6);
 80037fe:	f001 fd4b 	bl	8005298 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003802:	4606      	mov	r6, r0
 8003804:	b130      	cbz	r0, 8003814 <HAL_InitTick+0x68>
    }
  }

 /* Return function status */
  return status;
}
 8003806:	4630      	mov	r0, r6
 8003808:	b008      	add	sp, #32
 800380a:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800380c:	f001 fabe 	bl	8004d8c <HAL_RCC_GetPCLK1Freq>
 8003810:	0043      	lsls	r3, r0, #1
 8003812:	e7e3      	b.n	80037dc <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003814:	4620      	mov	r0, r4
 8003816:	f001 fdcf 	bl	80053b8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800381a:	4606      	mov	r6, r0
 800381c:	2800      	cmp	r0, #0
 800381e:	d1f2      	bne.n	8003806 <HAL_InitTick+0x5a>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003820:	2036      	movs	r0, #54	@ 0x36
 8003822:	f000 ffa5 	bl	8004770 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003826:	2d0f      	cmp	r5, #15
 8003828:	d901      	bls.n	800382e <HAL_InitTick+0x82>
        status = HAL_ERROR;
 800382a:	2601      	movs	r6, #1
 800382c:	e7eb      	b.n	8003806 <HAL_InitTick+0x5a>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800382e:	4632      	mov	r2, r6
 8003830:	4629      	mov	r1, r5
 8003832:	2036      	movs	r0, #54	@ 0x36
 8003834:	f000 ff60 	bl	80046f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003838:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_InitTick+0xa4>)
 800383a:	601d      	str	r5, [r3, #0]
 800383c:	e7e3      	b.n	8003806 <HAL_InitTick+0x5a>
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	431bde83 	.word	0x431bde83
 8003848:	200013cc 	.word	0x200013cc
 800384c:	40001000 	.word	0x40001000
 8003850:	200005dc 	.word	0x200005dc

08003854 <HAL_SuspendTick>:
  * @retval None
  */
void HAL_SuspendTick(void)
{
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 8003854:	4b03      	ldr	r3, [pc, #12]	@ (8003864 <HAL_SuspendTick+0x10>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68d3      	ldr	r3, [r2, #12]
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	60d3      	str	r3, [r2, #12]
}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	200013cc 	.word	0x200013cc

08003868 <HAL_ResumeTick>:
  * @retval None
  */
void HAL_ResumeTick(void)
{
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8003868:	4b03      	ldr	r3, [pc, #12]	@ (8003878 <HAL_ResumeTick+0x10>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68d3      	ldr	r3, [r2, #12]
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	60d3      	str	r3, [r2, #12]
}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	200013cc 	.word	0x200013cc

0800387c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800387c:	4801      	ldr	r0, [pc, #4]	@ (8003884 <TIM6_DAC_IRQHandler+0x8>)
 800387e:	f002 b8a9 	b.w	80059d4 <HAL_TIM_IRQHandler>
 8003882:	bf00      	nop
 8003884:	200013cc 	.word	0x200013cc

08003888 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8003888:	4b08      	ldr	r3, [pc, #32]	@ (80038ac <ADC_IRQHandler+0x24>)
 800388a:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 800388c:	0752      	lsls	r2, r2, #29
 800388e:	d505      	bpl.n	800389c <ADC_IRQHandler+0x14>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	f022 020c 	bic.w	r2, r2, #12
 8003896:	601a      	str	r2, [r3, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8003898:	f7fe bef8 	b.w	800268c <TSK_HighFrequencyTask>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 800389c:	4a04      	ldr	r2, [pc, #16]	@ (80038b0 <ADC_IRQHandler+0x28>)
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	f023 030c 	bic.w	r3, r3, #12
 80038a4:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80038a6:	f7fe bef1 	b.w	800268c <TSK_HighFrequencyTask>
 80038aa:	bf00      	nop
 80038ac:	40012000 	.word	0x40012000
 80038b0:	40012200 	.word	0x40012200

080038b4 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 80038b4:	4803      	ldr	r0, [pc, #12]	@ (80038c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80038b6:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80038b8:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80038ba:	f06f 0201 	mvn.w	r2, #1
 80038be:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80038c0:	f005 bcc0 	b.w	8009244 <ICS_TIMx_UP_IRQHandler>
 80038c4:	2000038c 	.word	0x2000038c

080038c8 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80038c8:	4807      	ldr	r0, [pc, #28]	@ (80038e8 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 80038ca:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80038cc:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80038ce:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	0612      	lsls	r2, r2, #24
 80038d4:	d504      	bpl.n	80038e0 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80038d6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038da:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 80038dc:	f005 fcfc 	bl	80092d8 <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80038e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80038e4:	f7fe be98 	b.w	8002618 <MC_Scheduler>
 80038e8:	2000038c 	.word	0x2000038c

080038ec <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 80038ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 80038ee:	4c0c      	ldr	r4, [pc, #48]	@ (8003920 <TIM2_IRQHandler+0x34>)
 80038f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	07d1      	lsls	r1, r2, #31
 80038f6:	d506      	bpl.n	8003906 <TIM2_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80038f8:	f06f 0201 	mvn.w	r2, #1
 80038fc:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(HALL_M1.TIMx);
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 80038fe:	4620      	mov	r0, r4
 8003900:	f005 fa0e 	bl	8008d20 <HALL_TIMx_UP_IRQHandler>
  else
  {
    /* Nothing to do */
  }
  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 8003904:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	0792      	lsls	r2, r2, #30
 800390a:	d507      	bpl.n	800391c <TIM2_IRQHandler+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800390c:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8003914:	4802      	ldr	r0, [pc, #8]	@ (8003920 <TIM2_IRQHandler+0x34>)
 8003916:	611a      	str	r2, [r3, #16]
 8003918:	f005 b862 	b.w	80089e0 <HALL_TIMx_CC_IRQHandler>
}
 800391c:	bd10      	pop	{r4, pc}
 800391e:	bf00      	nop
 8003920:	200002c4 	.word	0x200002c4

08003924 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8003924:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003926:	4c1f      	ldr	r4, [pc, #124]	@ (80039a4 <USART1_IRQHandler+0x80>)
 8003928:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	0691      	lsls	r1, r2, #26
{
 8003930:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003932:	d407      	bmi.n	8003944 <USART1_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003934:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003936:	0612      	lsls	r2, r2, #24
 8003938:	d413      	bmi.n	8003962 <USART1_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800393a:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800393c:	071b      	lsls	r3, r3, #28
 800393e:	d418      	bmi.n	8003972 <USART1_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8003940:	b002      	add	sp, #8
 8003942:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003944:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8003946:	4620      	mov	r0, r4
 8003948:	b2c9      	uxtb	r1, r1
 800394a:	f006 fad5 	bl	8009ef8 <UFCP_RX_IRQ_Handler>
 800394e:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8003950:	2b01      	cmp	r3, #1
 8003952:	d01e      	beq.n	8003992 <USART1_IRQHandler+0x6e>
    if (retVal == 2)
 8003954:	2b02      	cmp	r3, #2
 8003956:	d021      	beq.n	800399c <USART1_IRQHandler+0x78>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003958:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	0612      	lsls	r2, r2, #24
 8003960:	d5eb      	bpl.n	800393a <USART1_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 8003962:	4810      	ldr	r0, [pc, #64]	@ (80039a4 <USART1_IRQHandler+0x80>)
 8003964:	f006 fa20 	bl	8009da8 <UFCP_TX_IRQ_Handler>
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003968:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	071b      	lsls	r3, r3, #28
 8003970:	d5e6      	bpl.n	8003940 <USART1_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 8003972:	480c      	ldr	r0, [pc, #48]	@ (80039a4 <USART1_IRQHandler+0x80>)
 8003974:	f006 fb26 	bl	8009fc4 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003978:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  tmpreg = USARTx->SR;
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003980:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003986:	9b01      	ldr	r3, [sp, #4]
}
 8003988:	b002      	add	sp, #8
 800398a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 800398e:	f000 b8b9 	b.w	8003b04 <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStart();
 8003992:	f000 f8bd 	bl	8003b10 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003996:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 800399a:	e7cb      	b.n	8003934 <USART1_IRQHandler+0x10>
      UI_SerialCommunicationTimeOutStop();
 800399c:	f000 f8b2 	bl	8003b04 <UI_SerialCommunicationTimeOutStop>
 80039a0:	e7da      	b.n	8003958 <USART1_IRQHandler+0x34>
 80039a2:	bf00      	nop
 80039a4:	20000004 	.word	0x20000004

080039a8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80039a8:	b510      	push	{r4, lr}
 80039aa:	b082      	sub	sp, #8
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80039ac:	f7fe ff56 	bl	800285c <TSK_HardwareFaultTask>
 80039b0:	4c1b      	ldr	r4, [pc, #108]	@ (8003a20 <HardFault_Handler+0x78>)

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80039b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	0712      	lsls	r2, r2, #28
 80039ba:	d41d      	bmi.n	80039f8 <HardFault_Handler+0x50>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80039bc:	681a      	ldr	r2, [r3, #0]
        UFCP_OVR_IRQ_Handler(&pUSART);
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80039be:	0610      	lsls	r0, r2, #24
 80039c0:	d40f      	bmi.n	80039e2 <HardFault_Handler+0x3a>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80039c2:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80039c4:	0692      	lsls	r2, r2, #26
 80039c6:	d5f6      	bpl.n	80039b6 <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80039c8:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80039ca:	4620      	mov	r0, r4
 80039cc:	b2c9      	uxtb	r1, r1
 80039ce:	f006 fa93 	bl	8009ef8 <UFCP_RX_IRQ_Handler>
 80039d2:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d01f      	beq.n	8003a18 <HardFault_Handler+0x70>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d1ea      	bne.n	80039b2 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 80039dc:	f000 f892 	bl	8003b04 <UI_SerialCommunicationTimeOutStop>
 80039e0:	e7e7      	b.n	80039b2 <HardFault_Handler+0xa>
        UFCP_TX_IRQ_Handler(&pUSART);
 80039e2:	4620      	mov	r0, r4
 80039e4:	f006 f9e0 	bl	8009da8 <UFCP_TX_IRQ_Handler>
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80039e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	0691      	lsls	r1, r2, #26
 80039f0:	d4ea      	bmi.n	80039c8 <HardFault_Handler+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80039f2:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80039f4:	0712      	lsls	r2, r2, #28
 80039f6:	d5e1      	bpl.n	80039bc <HardFault_Handler+0x14>
        UFCP_OVR_IRQ_Handler(&pUSART);
 80039f8:	4620      	mov	r0, r4
 80039fa:	f006 fae3 	bl	8009fc4 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80039fe:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  tmpreg = USARTx->SR;
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003a06:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003a0c:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8003a0e:	f000 f879 	bl	8003b04 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003a12:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8003a16:	e7d1      	b.n	80039bc <HardFault_Handler+0x14>
          UI_SerialCommunicationTimeOutStart();
 8003a18:	f000 f87a 	bl	8003b10 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8003a1c:	e7c9      	b.n	80039b2 <HardFault_Handler+0xa>
 8003a1e:	bf00      	nop
 8003a20:	20000004 	.word	0x20000004

08003a24 <EXTI9_5_IRQHandler>:
/*External Interrupt triggers motor controller reset
 *Wakes Up motor controller by External Interrupt
 * */
void EXTI9_5_IRQHandler(void)
{
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET)
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <EXTI9_5_IRQHandler+0x14>)
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	0612      	lsls	r2, r2, #24
 8003a2a:	d400      	bmi.n	8003a2e <EXTI9_5_IRQHandler+0xa>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
		wakeUp();
	}

}
 8003a2c:	4770      	bx	lr
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8003a2e:	2280      	movs	r2, #128	@ 0x80
 8003a30:	615a      	str	r2, [r3, #20]
		wakeUp();
 8003a32:	f7fd ba5f 	b.w	8000ef4 <wakeUp>
 8003a36:	bf00      	nop
 8003a38:	40013c00 	.word	0x40013c00

08003a3c <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8003a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
 8003a40:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 8003ab4 <UI_TaskInit+0x78>
    pMCP->_Super = UI_Params;
 8003a44:	f8df e070 	ldr.w	lr, [pc, #112]	@ 8003ab8 <UI_TaskInit+0x7c>

    UFCP_Init( & pUSART );
 8003a48:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8003abc <UI_TaskInit+0x80>
{
 8003a4c:	461e      	mov	r6, r3
    pMCP = &MCP_UI_Params;
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <UI_TaskInit+0x68>)
 8003a50:	f8c8 3000 	str.w	r3, [r8]
{
 8003a54:	4607      	mov	r7, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	4615      	mov	r5, r2
    pMCP->_Super = UI_Params;
 8003a5a:	469c      	mov	ip, r3
 8003a5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003a60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003a64:	e89e 0003 	ldmia.w	lr, {r0, r1}
{
 8003a68:	b082      	sub	sp, #8
    pMCP->_Super = UI_Params;
 8003a6a:	e88c 0003 	stmia.w	ip, {r0, r1}
    UFCP_Init( & pUSART );
 8003a6e:	4648      	mov	r0, r9
{
 8003a70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    UFCP_Init( & pUSART );
 8003a74:	f006 f996 	bl	8009da4 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8003a78:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa8 <UI_TaskInit+0x6c>)
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	f8cd a004 	str.w	sl, [sp, #4]
 8003a80:	f8d8 0000 	ldr.w	r0, [r8]
 8003a84:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <UI_TaskInit+0x70>)
 8003a86:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab0 <UI_TaskInit+0x74>)
 8003a88:	4649      	mov	r1, r9
 8003a8a:	f7ff fb75 	bl	8003178 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8003a8e:	f8d8 0000 	ldr.w	r0, [r8]
 8003a92:	970a      	str	r7, [sp, #40]	@ 0x28
 8003a94:	4633      	mov	r3, r6
 8003a96:	462a      	mov	r2, r5
 8003a98:	4621      	mov	r1, r4

}
 8003a9a:	b002      	add	sp, #8
 8003a9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8003aa0:	f000 b83c 	b.w	8003b1c <UI_Init>
 8003aa4:	20001418 	.word	0x20001418
 8003aa8:	08009fe5 	.word	0x08009fe5
 8003aac:	08009e11 	.word	0x08009e11
 8003ab0:	08009e3d 	.word	0x08009e3d
 8003ab4:	200014c8 	.word	0x200014c8
 8003ab8:	20000f58 	.word	0x20000f58
 8003abc:	20000004 	.word	0x20000004

08003ac0 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8003ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8003af8 <UI_Scheduler+0x38>)
 8003ac2:	8813      	ldrh	r3, [r2, #0]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	b11b      	cbz	r3, 8003ad0 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8003ac8:	8813      	ldrh	r3, [r2, #0]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8003ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <UI_Scheduler+0x3c>)
 8003ad2:	8813      	ldrh	r3, [r2, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d903      	bls.n	8003ae2 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8003ada:	8813      	ldrh	r3, [r2, #0]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8003ae2:	4a07      	ldr	r2, [pc, #28]	@ (8003b00 <UI_Scheduler+0x40>)
 8003ae4:	8813      	ldrh	r3, [r2, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d903      	bls.n	8003af4 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8003aec:	8813      	ldrh	r3, [r2, #0]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	8013      	strh	r3, [r2, #0]
  }
}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20001416 	.word	0x20001416
 8003afc:	20001414 	.word	0x20001414
 8003b00:	200005d0 	.word	0x200005d0

08003b04 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8003b04:	4b01      	ldr	r3, [pc, #4]	@ (8003b0c <UI_SerialCommunicationTimeOutStop+0x8>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	801a      	strh	r2, [r3, #0]
}
 8003b0a:	4770      	bx	lr
 8003b0c:	20001414 	.word	0x20001414

08003b10 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8003b10:	4b01      	ldr	r3, [pc, #4]	@ (8003b18 <UI_SerialCommunicationTimeOutStart+0x8>)
 8003b12:	224f      	movs	r2, #79	@ 0x4f
 8003b14:	801a      	strh	r2, [r3, #0]
}
 8003b16:	4770      	bx	lr
 8003b18:	20001414 	.word	0x20001414

08003b1c <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8003b1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
  pHandle->bDriveNum = bMCNum;
 8003b20:	7101      	strb	r1, [r0, #4]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8003b22:	9b00      	ldr	r3, [sp, #0]
 8003b24:	6103      	str	r3, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8003b26:	2100      	movs	r1, #0
 8003b28:	7501      	strb	r1, [r0, #20]
}
 8003b2a:	4770      	bx	lr

08003b2c <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8003b2c:	7903      	ldrb	r3, [r0, #4]
 8003b2e:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8003b30:	bf86      	itte	hi
 8003b32:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8003b34:	2001      	movhi	r0, #1
    retVal = false;
 8003b36:	2000      	movls	r0, #0
  }
  return retVal;
}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop

08003b3c <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8003b3c:	7d00      	ldrb	r0, [r0, #20]
 8003b3e:	4770      	bx	lr

08003b40 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8003b40:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003b42:	6884      	ldr	r4, [r0, #8]
 8003b44:	7d03      	ldrb	r3, [r0, #20]
 8003b46:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8003b4a:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003b4c:	68c2      	ldr	r2, [r0, #12]
{
 8003b4e:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8003b54:	295b      	cmp	r1, #91	@ 0x5b
 8003b56:	d82f      	bhi.n	8003bb8 <UI_SetReg+0x78>
 8003b58:	e8df f001 	tbb	[pc, r1]
 8003b5c:	412e2e3d 	.word	0x412e2e3d
 8003b60:	59544f2e 	.word	0x59544f2e
 8003b64:	736e695e 	.word	0x736e695e
 8003b68:	8d888378 	.word	0x8d888378
 8003b6c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b70:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b74:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b78:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b7c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b80:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b84:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b88:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b8c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b90:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b94:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b98:	2e2e2e2e 	.word	0x2e2e2e2e
 8003b9c:	2e2e922e 	.word	0x2e2e922e
 8003ba0:	2e2e2e2e 	.word	0x2e2e2e2e
 8003ba4:	2e2e2e2e 	.word	0x2e2e2e2e
 8003ba8:	2e2e2e2e 	.word	0x2e2e2e2e
 8003bac:	2e2e2e2e 	.word	0x2e2e2e2e
 8003bb0:	2e2e2e2e 	.word	0x2e2e2e2e
 8003bb4:	312e2e2e 	.word	0x312e2e2e
 8003bb8:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8003bba:	b003      	add	sp, #12
 8003bbc:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8003bbe:	4937      	ldr	r1, [pc, #220]	@ (8003c9c <UI_SetReg+0x15c>)
 8003bc0:	fb81 3104 	smull	r3, r1, r1, r4
 8003bc4:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8003bc8:	2200      	movs	r2, #0
 8003bca:	b209      	sxth	r1, r1
 8003bcc:	4628      	mov	r0, r5
 8003bce:	f7fe f8e9 	bl	8001da4 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	e7f1      	b.n	8003bba <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8003bd6:	b2e1      	uxtb	r1, r4
 8003bd8:	f7ff ffa8 	bl	8003b2c <UI_SelectMC>
    break;
 8003bdc:	e7ed      	b.n	8003bba <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8003bde:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8003be2:	d052      	beq.n	8003c8a <UI_SetReg+0x14a>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8003be4:	2c01      	cmp	r4, #1
 8003be6:	d1f4      	bne.n	8003bd2 <UI_SetReg+0x92>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8003be8:	4628      	mov	r0, r5
 8003bea:	f7fe f96b 	bl	8001ec4 <MCI_GetMecSpeedRefUnit>
 8003bee:	2200      	movs	r2, #0
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f7fe f8d6 	bl	8001da4 <MCI_ExecSpeedRamp>
 8003bf8:	e7eb      	b.n	8003bd2 <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	b221      	sxth	r1, r4
 8003bfe:	f005 fc23 	bl	8009448 <PID_SetKP>
    break;
 8003c02:	e7e6      	b.n	8003bd2 <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	b221      	sxth	r1, r4
 8003c08:	f005 fc20 	bl	800944c <PID_SetKI>
    break;
 8003c0c:	e7e1      	b.n	8003bd2 <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	b221      	sxth	r1, r4
 8003c12:	f005 fc2b 	bl	800946c <PID_SetKD>
    break;
 8003c16:	e7dc      	b.n	8003bd2 <UI_SetReg+0x92>
      currComp = MCI_GetIqdref(pMCI);
 8003c18:	4628      	mov	r0, r5
 8003c1a:	f7fe f981 	bl	8001f20 <MCI_GetIqdref>
 8003c1e:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8003c20:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8003c24:	9901      	ldr	r1, [sp, #4]
 8003c26:	4628      	mov	r0, r5
 8003c28:	f7fe f8d0 	bl	8001dcc <MCI_SetCurrentReferences>
    break;
 8003c2c:	e7d1      	b.n	8003bd2 <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8003c2e:	6858      	ldr	r0, [r3, #4]
 8003c30:	b221      	sxth	r1, r4
 8003c32:	f005 fc09 	bl	8009448 <PID_SetKP>
    break;
 8003c36:	e7cc      	b.n	8003bd2 <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8003c38:	6858      	ldr	r0, [r3, #4]
 8003c3a:	b221      	sxth	r1, r4
 8003c3c:	f005 fc06 	bl	800944c <PID_SetKI>
    break;
 8003c40:	e7c7      	b.n	8003bd2 <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8003c42:	6858      	ldr	r0, [r3, #4]
 8003c44:	b221      	sxth	r1, r4
 8003c46:	f005 fc11 	bl	800946c <PID_SetKD>
    break;
 8003c4a:	e7c2      	b.n	8003bd2 <UI_SetReg+0x92>
      currComp = MCI_GetIqdref(pMCI);
 8003c4c:	4628      	mov	r0, r5
 8003c4e:	f7fe f967 	bl	8001f20 <MCI_GetIqdref>
 8003c52:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8003c54:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8003c58:	9901      	ldr	r1, [sp, #4]
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f7fe f8b6 	bl	8001dcc <MCI_SetCurrentReferences>
    break;
 8003c60:	e7b7      	b.n	8003bd2 <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8003c62:	6898      	ldr	r0, [r3, #8]
 8003c64:	b221      	sxth	r1, r4
 8003c66:	f005 fbef 	bl	8009448 <PID_SetKP>
    break;
 8003c6a:	e7b2      	b.n	8003bd2 <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8003c6c:	6898      	ldr	r0, [r3, #8]
 8003c6e:	b221      	sxth	r1, r4
 8003c70:	f005 fbec 	bl	800944c <PID_SetKI>
    break;
 8003c74:	e7ad      	b.n	8003bd2 <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8003c76:	6898      	ldr	r0, [r3, #8]
 8003c78:	b221      	sxth	r1, r4
 8003c7a:	f005 fbf7 	bl	800946c <PID_SetKD>
    break;
 8003c7e:	e7a8      	b.n	8003bd2 <UI_SetReg+0x92>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8003c80:	b221      	sxth	r1, r4
 8003c82:	4628      	mov	r0, r5
 8003c84:	f7fe f98e 	bl	8001fa4 <MCI_SetIdref>
    break;
 8003c88:	e7a3      	b.n	8003bd2 <UI_SetReg+0x92>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f7fe f972 	bl	8001f74 <MCI_GetTeref>
 8003c90:	4622      	mov	r2, r4
 8003c92:	4601      	mov	r1, r0
 8003c94:	4628      	mov	r0, r5
 8003c96:	f7fe f88f 	bl	8001db8 <MCI_ExecTorqueRamp>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8003c9a:	e79a      	b.n	8003bd2 <UI_SetReg+0x92>
 8003c9c:	2aaaaaab 	.word	0x2aaaaaab

08003ca0 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8003ca0:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003ca2:	68c4      	ldr	r4, [r0, #12]
 8003ca4:	7d03      	ldrb	r3, [r0, #20]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003ca6:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003ca8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003cac:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8003cb0:	b08d      	sub	sp, #52	@ 0x34

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8003cb2:	2a00      	cmp	r2, #0
 8003cb4:	f000 808b 	beq.w	8003dce <UI_GetReg+0x12e>
  {
    *success = true;
 8003cb8:	f04f 0c01 	mov.w	ip, #1
 8003cbc:	f882 c000 	strb.w	ip, [r2]
  }

  switch (bRegID)
 8003cc0:	2981      	cmp	r1, #129	@ 0x81
 8003cc2:	f200 8111 	bhi.w	8003ee8 <UI_GetReg+0x248>
 8003cc6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003cca:	0143      	.short	0x0143
 8003ccc:	016d0171 	.word	0x016d0171
 8003cd0:	01620169 	.word	0x01620169
 8003cd4:	015a015e 	.word	0x015a015e
 8003cd8:	01130156 	.word	0x01130156
 8003cdc:	01d30126 	.word	0x01d30126
 8003ce0:	010901cf 	.word	0x010901cf
 8003ce4:	0146014a 	.word	0x0146014a
 8003ce8:	010f014e 	.word	0x010f014e
 8003cec:	010f010f 	.word	0x010f010f
 8003cf0:	010f010f 	.word	0x010f010f
 8003cf4:	010f010f 	.word	0x010f010f
 8003cf8:	010f010f 	.word	0x010f010f
 8003cfc:	01520122 	.word	0x01520122
 8003d00:	010f01ea 	.word	0x010f01ea
 8003d04:	01e3010f 	.word	0x01e3010f
 8003d08:	011d0118 	.word	0x011d0118
 8003d0c:	01dc010f 	.word	0x01dc010f
 8003d10:	013401d7 	.word	0x013401d7
 8003d14:	012a012f 	.word	0x012a012f
 8003d18:	011d0118 	.word	0x011d0118
 8003d1c:	01090113 	.word	0x01090113
 8003d20:	01770139 	.word	0x01770139
 8003d24:	01c8013e 	.word	0x01c8013e
 8003d28:	019e01b3 	.word	0x019e01b3
 8003d2c:	010f010f 	.word	0x010f010f
 8003d30:	010f010f 	.word	0x010f010f
 8003d34:	010f010f 	.word	0x010f010f
 8003d38:	010f010f 	.word	0x010f010f
 8003d3c:	010f010f 	.word	0x010f010f
 8003d40:	010f010f 	.word	0x010f010f
 8003d44:	010f010f 	.word	0x010f010f
 8003d48:	01900197 	.word	0x01900197
 8003d4c:	010f0109 	.word	0x010f0109
 8003d50:	010f010f 	.word	0x010f010f
 8003d54:	010f010f 	.word	0x010f010f
 8003d58:	010f010f 	.word	0x010f010f
 8003d5c:	010f010f 	.word	0x010f010f
 8003d60:	010f010f 	.word	0x010f010f
 8003d64:	010f010f 	.word	0x010f010f
 8003d68:	010f010f 	.word	0x010f010f
 8003d6c:	010f010f 	.word	0x010f010f
 8003d70:	010f010f 	.word	0x010f010f
 8003d74:	010f010f 	.word	0x010f010f
 8003d78:	010f010f 	.word	0x010f010f
 8003d7c:	010f010f 	.word	0x010f010f
 8003d80:	010f0180 	.word	0x010f0180
 8003d84:	010f010f 	.word	0x010f010f
 8003d88:	010f010f 	.word	0x010f010f
 8003d8c:	010f010f 	.word	0x010f010f
 8003d90:	010f010f 	.word	0x010f010f
 8003d94:	010f010f 	.word	0x010f010f
 8003d98:	010f010f 	.word	0x010f010f
 8003d9c:	010f010f 	.word	0x010f010f
 8003da0:	010f010f 	.word	0x010f010f
 8003da4:	017c010f 	.word	0x017c010f
 8003da8:	01cd018c 	.word	0x01cd018c
 8003dac:	0111010f 	.word	0x0111010f
 8003db0:	010f0111 	.word	0x010f0111
 8003db4:	010f010f 	.word	0x010f010f
 8003db8:	010f010f 	.word	0x010f010f
 8003dbc:	010f010f 	.word	0x010f010f
 8003dc0:	010f010f 	.word	0x010f010f
 8003dc4:	010f010f 	.word	0x010f010f
 8003dc8:	010f010f 	.word	0x010f010f
 8003dcc:	0111      	.short	0x0111
 8003dce:	2981      	cmp	r1, #129	@ 0x81
 8003dd0:	f200 808c 	bhi.w	8003eec <UI_GetReg+0x24c>
 8003dd4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003dd8:	00ea00bc 	.word	0x00ea00bc
 8003ddc:	00e200e6 	.word	0x00e200e6
 8003de0:	00d700db 	.word	0x00d700db
 8003de4:	00cf00d3 	.word	0x00cf00d3
 8003de8:	009f008c 	.word	0x009f008c
 8003dec:	0148014c 	.word	0x0148014c
 8003df0:	00c30082 	.word	0x00c30082
 8003df4:	00c700bf 	.word	0x00c700bf
 8003df8:	008a008a 	.word	0x008a008a
 8003dfc:	008a008a 	.word	0x008a008a
 8003e00:	008a008a 	.word	0x008a008a
 8003e04:	008a008a 	.word	0x008a008a
 8003e08:	009b008a 	.word	0x009b008a
 8003e0c:	016300cb 	.word	0x016300cb
 8003e10:	008a008a 	.word	0x008a008a
 8003e14:	0091015c 	.word	0x0091015c
 8003e18:	008a0096 	.word	0x008a0096
 8003e1c:	01500155 	.word	0x01500155
 8003e20:	00a800ad 	.word	0x00a800ad
 8003e24:	009100a3 	.word	0x009100a3
 8003e28:	008c0096 	.word	0x008c0096
 8003e2c:	00b20082 	.word	0x00b20082
 8003e30:	00b700f0 	.word	0x00b700f0
 8003e34:	012c0141 	.word	0x012c0141
 8003e38:	008a0117 	.word	0x008a0117
 8003e3c:	008a008a 	.word	0x008a008a
 8003e40:	008a008a 	.word	0x008a008a
 8003e44:	008a008a 	.word	0x008a008a
 8003e48:	008a008a 	.word	0x008a008a
 8003e4c:	008a008a 	.word	0x008a008a
 8003e50:	008a008a 	.word	0x008a008a
 8003e54:	0110008a 	.word	0x0110008a
 8003e58:	00820109 	.word	0x00820109
 8003e5c:	008a008a 	.word	0x008a008a
 8003e60:	008a008a 	.word	0x008a008a
 8003e64:	008a008a 	.word	0x008a008a
 8003e68:	008a008a 	.word	0x008a008a
 8003e6c:	008a008a 	.word	0x008a008a
 8003e70:	008a008a 	.word	0x008a008a
 8003e74:	008a008a 	.word	0x008a008a
 8003e78:	008a008a 	.word	0x008a008a
 8003e7c:	008a008a 	.word	0x008a008a
 8003e80:	008a008a 	.word	0x008a008a
 8003e84:	008a008a 	.word	0x008a008a
 8003e88:	008a008a 	.word	0x008a008a
 8003e8c:	00f9008a 	.word	0x00f9008a
 8003e90:	008a008a 	.word	0x008a008a
 8003e94:	008a008a 	.word	0x008a008a
 8003e98:	008a008a 	.word	0x008a008a
 8003e9c:	008a008a 	.word	0x008a008a
 8003ea0:	008a008a 	.word	0x008a008a
 8003ea4:	008a008a 	.word	0x008a008a
 8003ea8:	008a008a 	.word	0x008a008a
 8003eac:	008a008a 	.word	0x008a008a
 8003eb0:	008a008a 	.word	0x008a008a
 8003eb4:	010500f5 	.word	0x010500f5
 8003eb8:	008a0146 	.word	0x008a0146
 8003ebc:	008a008a 	.word	0x008a008a
 8003ec0:	008a008a 	.word	0x008a008a
 8003ec4:	008a008a 	.word	0x008a008a
 8003ec8:	008a008a 	.word	0x008a008a
 8003ecc:	008a008a 	.word	0x008a008a
 8003ed0:	008a008a 	.word	0x008a008a
 8003ed4:	008a008a 	.word	0x008a008a
 8003ed8:	008a008a 	.word	0x008a008a
    }
    break;

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 8003edc:	4628      	mov	r0, r5
 8003ede:	f7fe f81f 	bl	8001f20 <MCI_GetIqdref>
 8003ee2:	1400      	asrs	r0, r0, #16
      }
	}
    break;
  }
  return bRetVal;
}
 8003ee4:	b00d      	add	sp, #52	@ 0x34
 8003ee6:	bd30      	pop	{r4, r5, pc}
        *success = false;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	7013      	strb	r3, [r2, #0]
      bRetVal = CTRBDID;
 8003eec:	2000      	movs	r0, #0
  return bRetVal;
 8003eee:	e7f9      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f7fe f815 	bl	8001f20 <MCI_GetIqdref>
 8003ef6:	b200      	sxth	r0, r0
    break;
 8003ef8:	e7f4      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqd(pMCI).q;
 8003efa:	4628      	mov	r0, r5
 8003efc:	f7fe f802 	bl	8001f04 <MCI_GetIqd>
 8003f00:	b200      	sxth	r0, r0
    break;
 8003f02:	e7ef      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIqd(pMCI).d;
 8003f04:	4628      	mov	r0, r5
 8003f06:	f7fd fffd 	bl	8001f04 <MCI_GetIqd>
 8003f0a:	1400      	asrs	r0, r0, #16
    break;
 8003f0c:	e7ea      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8003f0e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003f10:	f004 fb5a 	bl	80085c8 <VBS_GetAvBusVoltage_V>
    break;
 8003f14:	e7e6      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8003f16:	6860      	ldr	r0, [r4, #4]
 8003f18:	f005 fa9a 	bl	8009450 <PID_GetKP>
    break;
 8003f1c:	e7e2      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8003f1e:	4628      	mov	r0, r5
 8003f20:	f7fd ffe2 	bl	8001ee8 <MCI_GetIalphabeta>
 8003f24:	1400      	asrs	r0, r0, #16
    break;
 8003f26:	e7dd      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f7fd ffdd 	bl	8001ee8 <MCI_GetIalphabeta>
 8003f2e:	b200      	sxth	r0, r0
    break;
 8003f30:	e7d8      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIab(pMCI).b;
 8003f32:	4628      	mov	r0, r5
 8003f34:	f7fd ffca 	bl	8001ecc <MCI_GetIab>
 8003f38:	1400      	asrs	r0, r0, #16
    break;
 8003f3a:	e7d3      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = MCI_GetVqd(pMCI).q;
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f7fd fffd 	bl	8001f3c <MCI_GetVqd>
 8003f42:	b200      	sxth	r0, r0
    break;
 8003f44:	e7ce      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8003f46:	4628      	mov	r0, r5
 8003f48:	f7fe f806 	bl	8001f58 <MCI_GetValphabeta>
 8003f4c:	b200      	sxth	r0, r0
    break;
 8003f4e:	e7c9      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003f50:	f7ff fdf4 	bl	8003b3c <UI_GetSelectedMC>
    break;
 8003f54:	e7c6      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8003f56:	68a0      	ldr	r0, [r4, #8]
 8003f58:	f005 fa7e 	bl	8009458 <PID_GetKI>
    break;
 8003f5c:	e7c2      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8003f5e:	68a0      	ldr	r0, [r4, #8]
 8003f60:	f005 fa76 	bl	8009450 <PID_GetKP>
    break;
 8003f64:	e7be      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8003f66:	68a0      	ldr	r0, [r4, #8]
 8003f68:	f005 fa82 	bl	8009470 <PID_GetKD>
    break;
 8003f6c:	e7ba      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003f6e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003f70:	f005 fa4c 	bl	800940c <NTC_GetAvTemp_C>
    break;
 8003f74:	e7b6      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8003f76:	6820      	ldr	r0, [r4, #0]
 8003f78:	f005 fa7a 	bl	8009470 <PID_GetKD>
    break;
 8003f7c:	e7b2      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8003f7e:	6820      	ldr	r0, [r4, #0]
 8003f80:	f005 fa6a 	bl	8009458 <PID_GetKI>
    break;
 8003f84:	e7ae      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8003f86:	6820      	ldr	r0, [r4, #0]
 8003f88:	f005 fa62 	bl	8009450 <PID_GetKP>
    break;
 8003f8c:	e7aa      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f7fd ff98 	bl	8001ec4 <MCI_GetMecSpeedRefUnit>
 8003f94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003f98:	0040      	lsls	r0, r0, #1
    break;
 8003f9a:	e7a3      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f7fd ff7b 	bl	8001e98 <MCI_GetControlMode>
    break;
 8003fa2:	e79f      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8003fa4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003fa6:	f005 fee9 	bl	8009d7c <STM_GetState>
	break;
 8003faa:	e79b      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003fac:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
}
 8003fae:	b00d      	add	sp, #52	@ 0x34
 8003fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003fb4:	f005 bef0 	b.w	8009d98 <STM_GetFaultState>
      bRetVal = MCI_GetVqd(pMCI).d;
 8003fb8:	4628      	mov	r0, r5
 8003fba:	f7fd ffbf 	bl	8001f3c <MCI_GetVqd>
 8003fbe:	1400      	asrs	r0, r0, #16
    break;
 8003fc0:	e790      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003fc2:	6820      	ldr	r0, [r4, #0]
 8003fc4:	f005 fa4e 	bl	8009464 <PID_GetKPDivisor>
    break;
 8003fc8:	e78c      	b.n	8003ee4 <UI_GetReg+0x244>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f7fd ff64 	bl	8001e98 <MCI_GetControlMode>
 8003fd0:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003fd2:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003fd4:	d06f      	beq.n	80040b6 <UI_GetReg+0x416>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8003fd6:	f7fd ff75 	bl	8001ec4 <MCI_GetMecSpeedRefUnit>
 8003fda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003fde:	0040      	lsls	r0, r0, #1
 8003fe0:	e780      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8003fe2:	6820      	ldr	r0, [r4, #0]
 8003fe4:	f005 fa40 	bl	8009468 <PID_GetKIDivisor>
    break;
 8003fe8:	e77c      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8003fea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003fec:	f005 fe0a 	bl	8009c04 <STC_GetMinAppNegativeMecSpeedUnit>
 8003ff0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003ff4:	0040      	lsls	r0, r0, #1
    break;
 8003ff6:	e775      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8003ff8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003ffa:	f005 fe01 	bl	8009c00 <STC_GetMaxAppPositiveMecSpeedUnit>
 8003ffe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004002:	0040      	lsls	r0, r0, #1
    break;
 8004004:	e76e      	b.n	8003ee4 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004006:	6902      	ldr	r2, [r0, #16]
 8004008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800400c:	0f1a      	lsrs	r2, r3, #28
 800400e:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004010:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004014:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004016:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800401a:	d948      	bls.n	80040ae <UI_GetReg+0x40e>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800401c:	2b01      	cmp	r3, #1
 800401e:	f63f af65 	bhi.w	8003eec <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 8004022:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8004024:	2800      	cmp	r0, #0
 8004026:	f43f af61 	beq.w	8003eec <UI_GetReg+0x24c>
        bRetVal = SPD_GetS16Speed(pSPD);
 800402a:	f005 fd17 	bl	8009a5c <SPD_GetS16Speed>
 800402e:	e759      	b.n	8003ee4 <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004030:	6902      	ldr	r2, [r0, #16]
 8004032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004036:	0f1a      	lsrs	r2, r3, #28
 8004038:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800403a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800403e:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004040:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004044:	d92f      	bls.n	80040a6 <UI_GetReg+0x406>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004046:	2b01      	cmp	r3, #1
 8004048:	f63f af50 	bhi.w	8003eec <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 800404c:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800404e:	2800      	cmp	r0, #0
 8004050:	f43f af4c 	beq.w	8003eec <UI_GetReg+0x24c>
        bRetVal = SPD_GetElAngle(pSPD);
 8004054:	f005 fcc0 	bl	80099d8 <SPD_GetElAngle>
 8004058:	e744      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 800405a:	4628      	mov	r0, r5
 800405c:	f7fd ff7c 	bl	8001f58 <MCI_GetValphabeta>
 8004060:	1400      	asrs	r0, r0, #16
    break;
 8004062:	e73f      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)(MC_UID);
 8004064:	4817      	ldr	r0, [pc, #92]	@ (80040c4 <UI_GetReg+0x424>)
 8004066:	e73d      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8004068:	6860      	ldr	r0, [r4, #4]
 800406a:	f005 fa01 	bl	8009470 <PID_GetKD>
    break;
 800406e:	e739      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8004070:	6860      	ldr	r0, [r4, #4]
 8004072:	f005 f9f1 	bl	8009458 <PID_GetKI>
    break;
 8004076:	e735      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = MCI_GetIab(pMCI).a;
 8004078:	4628      	mov	r0, r5
 800407a:	f7fd ff27 	bl	8001ecc <MCI_GetIab>
 800407e:	b200      	sxth	r0, r0
    break;
 8004080:	e730      	b.n	8003ee4 <UI_GetReg+0x244>
      if (pMCT->pRevupCtrl)
 8004082:	6960      	ldr	r0, [r4, #20]
 8004084:	2800      	cmp	r0, #0
 8004086:	f43f af31 	beq.w	8003eec <UI_GetReg+0x24c>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 800408a:	f005 fca1 	bl	80099d0 <RUC_GetNumberOfPhases>
 800408e:	e729      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8004090:	4628      	mov	r0, r5
 8004092:	f7fd ff0f 	bl	8001eb4 <MCI_GetAvrgMecSpeedUnit>
 8004096:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800409a:	0040      	lsls	r0, r0, #1
    break;
 800409c:	e722      	b.n	8003ee4 <UI_GetReg+0x244>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 800409e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80040a0:	f005 f970 	bl	8009384 <MPM_GetAvrgElMotorPowerW>
    break;
 80040a4:	e71e      	b.n	8003ee4 <UI_GetReg+0x244>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d9d0      	bls.n	800404c <UI_GetReg+0x3ac>
        pSPD = pMCT->pSpeedSensorMain;
 80040aa:	69a0      	ldr	r0, [r4, #24]
 80040ac:	e7cf      	b.n	800404e <UI_GetReg+0x3ae>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d9b7      	bls.n	8004022 <UI_GetReg+0x382>
        pSPD = pMCT->pSpeedSensorMain;
 80040b2:	69a0      	ldr	r0, [r4, #24]
 80040b4:	e7b6      	b.n	8004024 <UI_GetReg+0x384>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80040b6:	f7fd fef1 	bl	8001e9c <MCI_GetLastRampFinalSpeed>
 80040ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80040be:	0040      	lsls	r0, r0, #1
 80040c0:	e710      	b.n	8003ee4 <UI_GetReg+0x244>
 80040c2:	bf00      	nop
 80040c4:	34a6847a 	.word	0x34a6847a

080040c8 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80040c8:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80040ca:	6883      	ldr	r3, [r0, #8]
 80040cc:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 80040ce:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80040d0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 80040d4:	290d      	cmp	r1, #13
 80040d6:	d811      	bhi.n	80040fc <UI_ExecCmd+0x34>
 80040d8:	e8df f001 	tbb	[pc, r1]
 80040dc:	0e160b12 	.word	0x0e160b12
 80040e0:	231f070e 	.word	0x231f070e
 80040e4:	10101027 	.word	0x10101027
 80040e8:	0b10      	.short	0x0b10
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7fd feca 	bl	8001e84 <MCI_GetSTMState>
 80040f0:	b130      	cbz	r0, 8004100 <UI_ExecCmd+0x38>
      MCI_StopMotor(pMCI);
 80040f2:	4620      	mov	r0, r4
 80040f4:	f7fd fe7e 	bl	8001df4 <MCI_StopMotor>
  bool retVal = true;
 80040f8:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80040fa:	bd10      	pop	{r4, pc}
    retVal = false;
 80040fc:	2000      	movs	r0, #0
}
 80040fe:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8004100:	4620      	mov	r0, r4
 8004102:	f7fd fe6d 	bl	8001de0 <MCI_StartMotor>
 8004106:	e7f7      	b.n	80040f8 <UI_ExecCmd+0x30>
      if (MCI_GetSTMState(pMCI) == RUN)
 8004108:	4620      	mov	r0, r4
 800410a:	f7fd febb 	bl	8001e84 <MCI_GetSTMState>
 800410e:	2806      	cmp	r0, #6
 8004110:	d1f2      	bne.n	80040f8 <UI_ExecCmd+0x30>
        MCI_StopRamp(pMCI);
 8004112:	4620      	mov	r0, r4
 8004114:	f7fd feca 	bl	8001eac <MCI_StopRamp>
 8004118:	e7ee      	b.n	80040f8 <UI_ExecCmd+0x30>
      MCI_FaultAcknowledged(pMCI);
 800411a:	4620      	mov	r0, r4
 800411c:	f7fd fe6e 	bl	8001dfc <MCI_FaultAcknowledged>
    break;
 8004120:	e7ea      	b.n	80040f8 <UI_ExecCmd+0x30>
      MCI_EncoderAlign(pMCI);
 8004122:	4620      	mov	r0, r4
 8004124:	f7fd fe6e 	bl	8001e04 <MCI_EncoderAlign>
    break;
 8004128:	e7e6      	b.n	80040f8 <UI_ExecCmd+0x30>
      MCI_Clear_Iqdref(pMCI);
 800412a:	4620      	mov	r0, r4
 800412c:	f7fd ff44 	bl	8001fb8 <MCI_Clear_Iqdref>
    break;
 8004130:	e7e2      	b.n	80040f8 <UI_ExecCmd+0x30>
 8004132:	bf00      	nop

08004134 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8004134:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8004136:	4b07      	ldr	r3, [pc, #28]	@ (8004154 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004138:	f890 c014 	ldrb.w	ip, [r0, #20]
 800413c:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800413e:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8004142:	fb83 c301 	smull	ip, r3, r3, r1
 8004146:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 800414a:	b209      	sxth	r1, r1
 800414c:	f7fd fe2a 	bl	8001da4 <MCI_ExecSpeedRamp>
  return true;
}
 8004150:	2001      	movs	r0, #1
 8004152:	bd08      	pop	{r3, pc}
 8004154:	2aaaaaab 	.word	0x2aaaaaab

08004158 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8004158:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800415a:	6883      	ldr	r3, [r0, #8]
 800415c:	f890 c014 	ldrb.w	ip, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8004160:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8004164:	f7fd fe28 	bl	8001db8 <MCI_ExecTorqueRamp>
  return true;
}
 8004168:	2001      	movs	r0, #1
 800416a:	bd08      	pop	{r3, pc}

0800416c <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	4617      	mov	r7, r2
 8004170:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8004172:	7d02      	ldrb	r2, [r0, #20]
 8004174:	68c3      	ldr	r3, [r0, #12]
 8004176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417a:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 800417c:	b18c      	cbz	r4, 80041a2 <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800417e:	4620      	mov	r0, r4
 8004180:	460d      	mov	r5, r1
 8004182:	f005 fc0f 	bl	80099a4 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8004186:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8004188:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800418a:	4620      	mov	r0, r4
 800418c:	f005 fc10 	bl	80099b0 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8004190:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8004192:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8004194:	4620      	mov	r0, r4
 8004196:	f005 fc13 	bl	80099c0 <RUC_GetPhaseFinalTorque>
 800419a:	9b06      	ldr	r3, [sp, #24]
 800419c:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 800419e:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80041a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 80041a2:	4620      	mov	r0, r4
}
 80041a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a6:	bf00      	nop

080041a8 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	461e      	mov	r6, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80041ac:	7d05      	ldrb	r5, [r0, #20]
 80041ae:	68c3      	ldr	r3, [r0, #12]
{
 80041b0:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80041b4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80041b8:	695d      	ldr	r5, [r3, #20]
{
 80041ba:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80041bc:	4628      	mov	r0, r5
 80041be:	f005 fbdf 	bl	8009980 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80041c2:	4632      	mov	r2, r6
 80041c4:	4621      	mov	r1, r4
 80041c6:	4628      	mov	r0, r5
 80041c8:	f005 fbe0 	bl	800998c <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80041cc:	4628      	mov	r0, r5
 80041ce:	463a      	mov	r2, r7
 80041d0:	4621      	mov	r1, r4
 80041d2:	f005 fbe1 	bl	8009998 <RUC_SetPhaseFinalTorque>
  return true;
}
 80041d6:	2001      	movs	r0, #1
 80041d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041da:	bf00      	nop

080041dc <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80041dc:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80041de:	f890 c014 	ldrb.w	ip, [r0, #20]
 80041e2:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 80041e4:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 80041e8:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 80041ec:	9901      	ldr	r1, [sp, #4]
 80041ee:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 80041f2:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 80041f4:	f7fd bdea 	b.w	8001dcc <MCI_SetCurrentReferences>

080041f8 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80041f8:	2000      	movs	r0, #0
 80041fa:	4770      	bx	lr

080041fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041fc:	4a03      	ldr	r2, [pc, #12]	@ (800420c <SystemInit+0x10>)
 80041fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004202:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004206:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004210:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004212:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <HAL_Init+0x30>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800421a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004222:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800422a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800422c:	2003      	movs	r0, #3
 800422e:	f000 fa51 	bl	80046d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004232:	200f      	movs	r0, #15
 8004234:	f7ff faba 	bl	80037ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004238:	f7ff f924 	bl	8003484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800423c:	2000      	movs	r0, #0
 800423e:	bd08      	pop	{r3, pc}
 8004240:	40023c00 	.word	0x40023c00

08004244 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004244:	4a03      	ldr	r2, [pc, #12]	@ (8004254 <HAL_IncTick+0x10>)
 8004246:	4b04      	ldr	r3, [pc, #16]	@ (8004258 <HAL_IncTick+0x14>)
 8004248:	6811      	ldr	r1, [r2, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	440b      	add	r3, r1
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	200014cc 	.word	0x200014cc
 8004258:	200005d8 	.word	0x200005d8

0800425c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800425c:	4b01      	ldr	r3, [pc, #4]	@ (8004264 <HAL_GetTick+0x8>)
 800425e:	6818      	ldr	r0, [r3, #0]
}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	200014cc 	.word	0x200014cc

08004268 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004268:	2800      	cmp	r0, #0
 800426a:	f000 809e 	beq.w	80043aa <HAL_ADC_Init+0x142>
{
 800426e:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004270:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8004272:	4604      	mov	r4, r0
 8004274:	b13d      	cbz	r5, 8004286 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004276:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004278:	06db      	lsls	r3, r3, #27
 800427a:	d50c      	bpl.n	8004296 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800427c:	2300      	movs	r3, #0
 800427e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 8004282:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8004284:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8004286:	f7ff f91f 	bl	80034c8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800428a:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800428c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 800428e:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004292:	06db      	lsls	r3, r3, #27
 8004294:	d4f2      	bmi.n	800427c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8004296:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004298:	4a47      	ldr	r2, [pc, #284]	@ (80043b8 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 800429a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800429e:	f023 0302 	bic.w	r3, r3, #2
 80042a2:	f043 0302 	orr.w	r3, r3, #2
 80042a6:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042a8:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042aa:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042ac:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80042b0:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042b2:	6851      	ldr	r1, [r2, #4]
 80042b4:	6860      	ldr	r0, [r4, #4]
 80042b6:	4301      	orrs	r1, r0
 80042b8:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042ba:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042bc:	6920      	ldr	r0, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042be:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80042cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042ce:	685a      	ldr	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042d0:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042d2:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80042d6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042de:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042e0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	4302      	orrs	r2, r0
 80042ec:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042ee:	4a33      	ldr	r2, [pc, #204]	@ (80043bc <HAL_ADC_Init+0x154>)
 80042f0:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042f2:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042f4:	d051      	beq.n	800439a <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042fa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	4311      	orrs	r1, r2
 8004302:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800430a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	4302      	orrs	r2, r0
 8004310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	f022 0202 	bic.w	r2, r2, #2
 8004318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	7e21      	ldrb	r1, [r4, #24]
 800431e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004322:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004324:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004328:	2a00      	cmp	r2, #0
 800432a:	d040      	beq.n	80043ae <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800432c:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800432e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004330:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004334:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800433c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	3901      	subs	r1, #1
 8004342:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004346:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800434a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800434c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004350:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004354:	3901      	subs	r1, #1
 8004356:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800435a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800435c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800435e:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004360:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 800436c:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8004370:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800437a:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800437c:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800437e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004382:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004384:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004386:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004388:	f023 0303 	bic.w	r3, r3, #3
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8004392:	2300      	movs	r3, #0
 8004394:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004398:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800439a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800439e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	e7b3      	b.n	8004312 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 80043aa:	2001      	movs	r0, #1
}
 80043ac:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	e7c7      	b.n	8004348 <HAL_ADC_Init+0xe0>
 80043b8:	40012300 	.word	0x40012300
 80043bc:	0f000001 	.word	0x0f000001

080043c0 <HAL_ADC_ConfigChannel>:
{
 80043c0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80043c2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80043c6:	b082      	sub	sp, #8
 80043c8:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80043ca:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80043cc:	f04f 0000 	mov.w	r0, #0
 80043d0:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80043d2:	f000 809e 	beq.w	8004512 <HAL_ADC_ConfigChannel+0x152>
 80043d6:	2301      	movs	r3, #1
 80043d8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043dc:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043de:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043e0:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043e2:	2d09      	cmp	r5, #9
 80043e4:	b2a8      	uxth	r0, r5
 80043e6:	d828      	bhi.n	800443a <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043e8:	691e      	ldr	r6, [r3, #16]
 80043ea:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80043ee:	f04f 0c07 	mov.w	ip, #7
 80043f2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80043f6:	ea26 060c 	bic.w	r6, r6, ip
 80043fa:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043fc:	691e      	ldr	r6, [r3, #16]
 80043fe:	fa04 f40e 	lsl.w	r4, r4, lr
 8004402:	4334      	orrs	r4, r6
 8004404:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 8004406:	684c      	ldr	r4, [r1, #4]
 8004408:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800440a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 800440e:	d82a      	bhi.n	8004466 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004410:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8004412:	3905      	subs	r1, #5
 8004414:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004418:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800441a:	fa0c f101 	lsl.w	r1, ip, r1
 800441e:	ea24 0101 	bic.w	r1, r4, r1
 8004422:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004424:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004426:	4308      	orrs	r0, r1
 8004428:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800442a:	493b      	ldr	r1, [pc, #236]	@ (8004518 <HAL_ADC_ConfigChannel+0x158>)
 800442c:	428b      	cmp	r3, r1
 800442e:	d02b      	beq.n	8004488 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8004430:	2000      	movs	r0, #0
 8004432:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 8004436:	b002      	add	sp, #8
 8004438:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800443a:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800443e:	68de      	ldr	r6, [r3, #12]
 8004440:	f1ac 0c1e 	sub.w	ip, ip, #30
 8004444:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004448:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800444c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004450:	ea26 060c 	bic.w	r6, r6, ip
 8004454:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004456:	68de      	ldr	r6, [r3, #12]
 8004458:	4334      	orrs	r4, r6
 800445a:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 800445c:	684c      	ldr	r4, [r1, #4]
 800445e:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004460:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8004464:	d9d4      	bls.n	8004410 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8004466:	2c0c      	cmp	r4, #12
 8004468:	d81f      	bhi.n	80044aa <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800446a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800446c:	3923      	subs	r1, #35	@ 0x23
 800446e:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004470:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004472:	fa06 f101 	lsl.w	r1, r6, r1
 8004476:	ea24 0101 	bic.w	r1, r4, r1
 800447a:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800447c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800447e:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004480:	4925      	ldr	r1, [pc, #148]	@ (8004518 <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004482:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004484:	428b      	cmp	r3, r1
 8004486:	d1d3      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x70>
 8004488:	2d12      	cmp	r5, #18
 800448a:	d01b      	beq.n	80044c4 <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800448c:	4b23      	ldr	r3, [pc, #140]	@ (800451c <HAL_ADC_ConfigChannel+0x15c>)
 800448e:	429d      	cmp	r5, r3
 8004490:	d022      	beq.n	80044d8 <HAL_ADC_ConfigChannel+0x118>
 8004492:	2d11      	cmp	r5, #17
 8004494:	d1cc      	bne.n	8004430 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004496:	4b22      	ldr	r3, [pc, #136]	@ (8004520 <HAL_ADC_ConfigChannel+0x160>)
 8004498:	6859      	ldr	r1, [r3, #4]
 800449a:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 800449e:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80044a6:	6059      	str	r1, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044a8:	e7c2      	b.n	8004430 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044aa:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80044ac:	3941      	subs	r1, #65	@ 0x41
 80044ae:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044b0:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044b2:	fa06 f101 	lsl.w	r1, r6, r1
 80044b6:	ea24 0101 	bic.w	r1, r4, r1
 80044ba:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044be:	4308      	orrs	r0, r1
 80044c0:	62d8      	str	r0, [r3, #44]	@ 0x2c
 80044c2:	e7b2      	b.n	800442a <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80044c4:	4b16      	ldr	r3, [pc, #88]	@ (8004520 <HAL_ADC_ConfigChannel+0x160>)
 80044c6:	6859      	ldr	r1, [r3, #4]
 80044c8:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 80044cc:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 80044d4:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044d6:	e7ab      	b.n	8004430 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80044d8:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044da:	4c12      	ldr	r4, [pc, #72]	@ (8004524 <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80044dc:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044de:	4812      	ldr	r0, [pc, #72]	@ (8004528 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80044e0:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 80044e4:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80044ec:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	fba0 0303 	umull	r0, r3, r0, r3
 80044f4:	0c9b      	lsrs	r3, r3, #18
 80044f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80044fe:	9b01      	ldr	r3, [sp, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d095      	beq.n	8004430 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8004504:	9b01      	ldr	r3, [sp, #4]
 8004506:	3b01      	subs	r3, #1
 8004508:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800450a:	9b01      	ldr	r3, [sp, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f9      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x144>
 8004510:	e78e      	b.n	8004430 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8004512:	2002      	movs	r0, #2
}
 8004514:	b002      	add	sp, #8
 8004516:	bd70      	pop	{r4, r5, r6, pc}
 8004518:	40012000 	.word	0x40012000
 800451c:	10000012 	.word	0x10000012
 8004520:	40012300 	.word	0x40012300
 8004524:	200005d4 	.word	0x200005d4
 8004528:	431bde83 	.word	0x431bde83

0800452c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 800452c:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800452e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004532:	698d      	ldr	r5, [r1, #24]
  __HAL_LOCK(hadc);
 8004534:	2b01      	cmp	r3, #1
 8004536:	f000 80c2 	beq.w	80046be <HAL_ADCEx_InjectedConfigChannel+0x192>
 800453a:	2301      	movs	r3, #1
 800453c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004540:	680c      	ldr	r4, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004542:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004544:	688a      	ldr	r2, [r1, #8]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004546:	2c09      	cmp	r4, #9
 8004548:	4684      	mov	ip, r0
 800454a:	b2a0      	uxth	r0, r4
 800454c:	d861      	bhi.n	8004612 <HAL_ADCEx_InjectedConfigChannel+0xe6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800454e:	691e      	ldr	r6, [r3, #16]
 8004550:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8004554:	2707      	movs	r7, #7
 8004556:	fa07 f70e 	lsl.w	r7, r7, lr
 800455a:	ea26 0607 	bic.w	r6, r6, r7
 800455e:	611e      	str	r6, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004560:	691e      	ldr	r6, [r3, #16]
 8004562:	fa02 f20e 	lsl.w	r2, r2, lr
 8004566:	4332      	orrs	r2, r6
 8004568:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800456a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800456c:	690f      	ldr	r7, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800456e:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004570:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004574:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004576:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004578:	f107 3eff 	add.w	lr, r7, #4294967295
 800457c:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 8004580:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004582:	1cf2      	adds	r2, r6, #3
 8004584:	1bd2      	subs	r2, r2, r7
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 800458a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800458e:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004592:	4090      	lsls	r0, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004594:	fa0e f202 	lsl.w	r2, lr, r2
 8004598:	ea27 0202 	bic.w	r2, r7, r2
 800459c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800459e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045a0:	4310      	orrs	r0, r2
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045a2:	4a48      	ldr	r2, [pc, #288]	@ (80046c4 <HAL_ADCEx_InjectedConfigChannel+0x198>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80045a4:	6398      	str	r0, [r3, #56]	@ 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045a6:	4295      	cmp	r5, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80045ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80045b0:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80045b2:	d065      	beq.n	8004680 <HAL_ADCEx_InjectedConfigChannel+0x154>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80045b4:	4315      	orrs	r5, r2
 80045b6:	609d      	str	r5, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80045b8:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80045ba:	69c8      	ldr	r0, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80045bc:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80045c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	4302      	orrs	r2, r0
 80045c6:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80045c8:	7d4a      	ldrb	r2, [r1, #21]
 80045ca:	2a00      	cmp	r2, #0
 80045cc:	d031      	beq.n	8004632 <HAL_ADCEx_InjectedConfigChannel+0x106>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045d4:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80045d6:	7d0a      	ldrb	r2, [r1, #20]
 80045d8:	2a00      	cmp	r2, #0
 80045da:	d031      	beq.n	8004640 <HAL_ADCEx_InjectedConfigChannel+0x114>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045e2:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 80045e4:	2e02      	cmp	r6, #2
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80045e6:	68ca      	ldr	r2, [r1, #12]
  switch(sConfigInjected->InjectedRank)
 80045e8:	d031      	beq.n	800464e <HAL_ADCEx_InjectedConfigChannel+0x122>
 80045ea:	2e03      	cmp	r6, #3
 80045ec:	d056      	beq.n	800469c <HAL_ADCEx_InjectedConfigChannel+0x170>
 80045ee:	2e01      	cmp	r6, #1
 80045f0:	d04a      	beq.n	8004688 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80045f2:	6a19      	ldr	r1, [r3, #32]
 80045f4:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 80045f8:	f021 010f 	bic.w	r1, r1, #15
 80045fc:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80045fe:	6a19      	ldr	r1, [r3, #32]
 8004600:	430a      	orrs	r2, r1
 8004602:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004604:	4a30      	ldr	r2, [pc, #192]	@ (80046c8 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d02d      	beq.n	8004666 <HAL_ADCEx_InjectedConfigChannel+0x13a>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800460a:	2000      	movs	r0, #0
 800460c:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
}
 8004610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004612:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8004616:	68df      	ldr	r7, [r3, #12]
 8004618:	3e1e      	subs	r6, #30
 800461a:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800461e:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004620:	fa0e f606 	lsl.w	r6, lr, r6
 8004624:	ea27 0606 	bic.w	r6, r7, r6
 8004628:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800462a:	68de      	ldr	r6, [r3, #12]
 800462c:	4332      	orrs	r2, r6
 800462e:	60da      	str	r2, [r3, #12]
 8004630:	e79b      	b.n	800456a <HAL_ADCEx_InjectedConfigChannel+0x3e>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004638:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800463a:	7d0a      	ldrb	r2, [r1, #20]
 800463c:	2a00      	cmp	r2, #0
 800463e:	d1cd      	bne.n	80045dc <HAL_ADCEx_InjectedConfigChannel+0xb0>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004646:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8004648:	2e02      	cmp	r6, #2
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800464a:	68ca      	ldr	r2, [r1, #12]
  switch(sConfigInjected->InjectedRank)
 800464c:	d1cd      	bne.n	80045ea <HAL_ADCEx_InjectedConfigChannel+0xbe>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800464e:	6999      	ldr	r1, [r3, #24]
 8004650:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8004654:	f021 010f 	bic.w	r1, r1, #15
 8004658:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800465a:	6999      	ldr	r1, [r3, #24]
 800465c:	430a      	orrs	r2, r1
 800465e:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004660:	4a19      	ldr	r2, [pc, #100]	@ (80046c8 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d1d1      	bne.n	800460a <HAL_ADCEx_InjectedConfigChannel+0xde>
 8004666:	2c12      	cmp	r4, #18
 8004668:	d022      	beq.n	80046b0 <HAL_ADCEx_InjectedConfigChannel+0x184>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800466a:	4b18      	ldr	r3, [pc, #96]	@ (80046cc <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 800466c:	429c      	cmp	r4, r3
 800466e:	d001      	beq.n	8004674 <HAL_ADCEx_InjectedConfigChannel+0x148>
 8004670:	2c11      	cmp	r4, #17
 8004672:	d1ca      	bne.n	800460a <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004674:	4a16      	ldr	r2, [pc, #88]	@ (80046d0 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8004676:	6853      	ldr	r3, [r2, #4]
 8004678:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800467c:	6053      	str	r3, [r2, #4]
 800467e:	e7c4      	b.n	800460a <HAL_ADCEx_InjectedConfigChannel+0xde>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8004680:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004684:	609a      	str	r2, [r3, #8]
 8004686:	e79f      	b.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x9c>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004688:	6959      	ldr	r1, [r3, #20]
 800468a:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 800468e:	f021 010f 	bic.w	r1, r1, #15
 8004692:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004694:	6959      	ldr	r1, [r3, #20]
 8004696:	430a      	orrs	r2, r1
 8004698:	615a      	str	r2, [r3, #20]
      break;
 800469a:	e7b3      	b.n	8004604 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800469c:	69d9      	ldr	r1, [r3, #28]
 800469e:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 80046a2:	f021 010f 	bic.w	r1, r1, #15
 80046a6:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80046a8:	69d9      	ldr	r1, [r3, #28]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	61da      	str	r2, [r3, #28]
      break;
 80046ae:	e7a9      	b.n	8004604 <HAL_ADCEx_InjectedConfigChannel+0xd8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046b0:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 80046b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046b8:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80046bc:	e7a5      	b.n	800460a <HAL_ADCEx_InjectedConfigChannel+0xde>
  __HAL_LOCK(hadc);
 80046be:	2002      	movs	r0, #2
}
 80046c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c2:	bf00      	nop
 80046c4:	000f0001 	.word	0x000f0001
 80046c8:	40012000 	.word	0x40012000
 80046cc:	10000012 	.word	0x10000012
 80046d0:	40012300 	.word	0x40012300

080046d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046d4:	4907      	ldr	r1, [pc, #28]	@ (80046f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80046d6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046d8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046da:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046de:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046e2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046e4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046e6:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80046ee:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000ed00 	.word	0xe000ed00

080046f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004768 <HAL_NVIC_SetPriority+0x70>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004700:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004702:	f1c3 0e07 	rsb	lr, r3, #7
 8004706:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800470a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800470e:	bf28      	it	cs
 8004710:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004714:	f1bc 0f06 	cmp.w	ip, #6
 8004718:	d91c      	bls.n	8004754 <HAL_NVIC_SetPriority+0x5c>
 800471a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800471e:	f04f 33ff 	mov.w	r3, #4294967295
 8004722:	fa03 f30c 	lsl.w	r3, r3, ip
 8004726:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	fa03 f30e 	lsl.w	r3, r3, lr
 8004732:	ea21 0303 	bic.w	r3, r1, r3
 8004736:	fa03 f30c 	lsl.w	r3, r3, ip
 800473a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800473e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004740:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004742:	db0a      	blt.n	800475a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004744:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004748:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800474c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004750:	f85d fb04 	ldr.w	pc, [sp], #4
 8004754:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004756:	4694      	mov	ip, r2
 8004758:	e7e7      	b.n	800472a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800475a:	4a04      	ldr	r2, [pc, #16]	@ (800476c <HAL_NVIC_SetPriority+0x74>)
 800475c:	f000 000f 	and.w	r0, r0, #15
 8004760:	4402      	add	r2, r0
 8004762:	7613      	strb	r3, [r2, #24]
 8004764:	f85d fb04 	ldr.w	pc, [sp], #4
 8004768:	e000ed00 	.word	0xe000ed00
 800476c:	e000ecfc 	.word	0xe000ecfc

08004770 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004770:	2800      	cmp	r0, #0
 8004772:	db07      	blt.n	8004784 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004774:	0941      	lsrs	r1, r0, #5
 8004776:	4a04      	ldr	r2, [pc, #16]	@ (8004788 <HAL_NVIC_EnableIRQ+0x18>)
 8004778:	f000 001f 	and.w	r0, r0, #31
 800477c:	2301      	movs	r3, #1
 800477e:	4083      	lsls	r3, r0
 8004780:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	e000e100 	.word	0xe000e100

0800478c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800478c:	2800      	cmp	r0, #0
 800478e:	db0c      	blt.n	80047aa <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004790:	0943      	lsrs	r3, r0, #5
 8004792:	4906      	ldr	r1, [pc, #24]	@ (80047ac <HAL_NVIC_DisableIRQ+0x20>)
 8004794:	f000 001f 	and.w	r0, r0, #31
 8004798:	3320      	adds	r3, #32
 800479a:	2201      	movs	r2, #1
 800479c:	4082      	lsls	r2, r0
 800479e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80047a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80047a6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80047aa:	4770      	bx	lr
 80047ac:	e000e100 	.word	0xe000e100

080047b0 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80047b0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80047b4:	4905      	ldr	r1, [pc, #20]	@ (80047cc <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80047b6:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80047b8:	68ca      	ldr	r2, [r1, #12]
 80047ba:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80047be:	4313      	orrs	r3, r2
 80047c0:	60cb      	str	r3, [r1, #12]
 80047c2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80047c6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80047c8:	e7fd      	b.n	80047c6 <HAL_NVIC_SystemReset+0x16>
 80047ca:	bf00      	nop
 80047cc:	e000ed00 	.word	0xe000ed00
 80047d0:	05fa0004 	.word	0x05fa0004

080047d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047d4:	3801      	subs	r0, #1
 80047d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80047da:	d301      	bcc.n	80047e0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80047de:	4770      	bx	lr
{
 80047e0:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e6:	4c07      	ldr	r4, [pc, #28]	@ (8004804 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047e8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ea:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80047ee:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047f2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047f4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047f6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047f8:	619a      	str	r2, [r3, #24]
}
 80047fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047fe:	6119      	str	r1, [r3, #16]
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	e000ed00 	.word	0xe000ed00

08004808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480c:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800480e:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004810:	f8df a200 	ldr.w	sl, [pc, #512]	@ 8004a14 <HAL_GPIO_Init+0x20c>
{
 8004814:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8004816:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800481a:	4689      	mov	r9, r1
 800481c:	e003      	b.n	8004826 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481e:	3301      	adds	r3, #1
 8004820:	2b10      	cmp	r3, #16
 8004822:	f000 808c 	beq.w	800493e <HAL_GPIO_Init+0x136>
    ioposition = 0x01U << position;
 8004826:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800482a:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 800482e:	43a2      	bics	r2, r4
 8004830:	d1f5      	bne.n	800481e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004832:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004836:	f001 0203 	and.w	r2, r1, #3
 800483a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800483e:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004840:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004842:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004846:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004848:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484c:	d97a      	bls.n	8004944 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800484e:	2a03      	cmp	r2, #3
 8004850:	f040 80b1 	bne.w	80049b6 <HAL_GPIO_Init+0x1ae>
      temp = GPIOx->MODER;
 8004854:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004856:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800485a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800485c:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800485e:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004862:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004864:	d0db      	beq.n	800481e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004866:	2200      	movs	r2, #0
 8004868:	9203      	str	r2, [sp, #12]
 800486a:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800486e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004872:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8004876:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800487a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800487e:	9203      	str	r2, [sp, #12]
 8004880:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800488a:	f003 0703 	and.w	r7, r3, #3
 800488e:	260f      	movs	r6, #15
 8004890:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8004894:	00bf      	lsls	r7, r7, #2
 8004896:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800489a:	4e5b      	ldr	r6, [pc, #364]	@ (8004a08 <HAL_GPIO_Init+0x200>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800489c:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800489e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048a0:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048a4:	d022      	beq.n	80048ec <HAL_GPIO_Init+0xe4>
 80048a6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80048aa:	42b0      	cmp	r0, r6
 80048ac:	f000 808e 	beq.w	80049cc <HAL_GPIO_Init+0x1c4>
 80048b0:	4e56      	ldr	r6, [pc, #344]	@ (8004a0c <HAL_GPIO_Init+0x204>)
 80048b2:	42b0      	cmp	r0, r6
 80048b4:	f000 8090 	beq.w	80049d8 <HAL_GPIO_Init+0x1d0>
 80048b8:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8004a18 <HAL_GPIO_Init+0x210>
 80048bc:	4560      	cmp	r0, ip
 80048be:	f000 8091 	beq.w	80049e4 <HAL_GPIO_Init+0x1dc>
 80048c2:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8004a1c <HAL_GPIO_Init+0x214>
 80048c6:	4560      	cmp	r0, ip
 80048c8:	f000 8092 	beq.w	80049f0 <HAL_GPIO_Init+0x1e8>
 80048cc:	f8df c150 	ldr.w	ip, [pc, #336]	@ 8004a20 <HAL_GPIO_Init+0x218>
 80048d0:	4560      	cmp	r0, ip
 80048d2:	f000 8093 	beq.w	80049fc <HAL_GPIO_Init+0x1f4>
 80048d6:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 8004a24 <HAL_GPIO_Init+0x21c>
 80048da:	4560      	cmp	r0, ip
 80048dc:	bf0c      	ite	eq
 80048de:	f04f 0c06 	moveq.w	ip, #6
 80048e2:	f04f 0c07 	movne.w	ip, #7
 80048e6:	fa0c f707 	lsl.w	r7, ip, r7
 80048ea:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048ec:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ee:	4a48      	ldr	r2, [pc, #288]	@ (8004a10 <HAL_GPIO_Init+0x208>)
 80048f0:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048f2:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80048f4:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80048f8:	4e45      	ldr	r6, [pc, #276]	@ (8004a10 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 80048fa:	bf54      	ite	pl
 80048fc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80048fe:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8004902:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8004904:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8004906:	4e42      	ldr	r6, [pc, #264]	@ (8004a10 <HAL_GPIO_Init+0x208>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004908:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 800490a:	bf54      	ite	pl
 800490c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800490e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8004912:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8004914:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004916:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004918:	4e3d      	ldr	r6, [pc, #244]	@ (8004a10 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 800491a:	bf54      	ite	pl
 800491c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800491e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8004922:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004924:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004926:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004928:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800492c:	4938      	ldr	r1, [pc, #224]	@ (8004a10 <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 800492e:	bf54      	ite	pl
 8004930:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004932:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004936:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8004938:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800493a:	f47f af74 	bne.w	8004826 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 800493e:	b005      	add	sp, #20
 8004940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8004944:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004946:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800494a:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800494e:	fa07 f70c 	lsl.w	r7, r7, ip
 8004952:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004956:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004958:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800495a:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800495e:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8004962:	409f      	lsls	r7, r3
 8004964:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004968:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800496a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800496c:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004970:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004974:	fa07 f70c 	lsl.w	r7, r7, ip
 8004978:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800497c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800497e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004980:	f47f af68 	bne.w	8004854 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8004984:	08df      	lsrs	r7, r3, #3
 8004986:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800498a:	9701      	str	r7, [sp, #4]
 800498c:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800498e:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8004992:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004994:	f003 0e07 	and.w	lr, r3, #7
 8004998:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800499c:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800499e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049a2:	fa06 fe0e 	lsl.w	lr, r6, lr
 80049a6:	9e00      	ldr	r6, [sp, #0]
 80049a8:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80049ac:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049ae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80049b2:	6237      	str	r7, [r6, #32]
 80049b4:	e74e      	b.n	8004854 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 80049b6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049b8:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049bc:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80049c0:	fa07 f70c 	lsl.w	r7, r7, ip
 80049c4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80049c8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ca:	e743      	b.n	8004854 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049cc:	f04f 0c01 	mov.w	ip, #1
 80049d0:	fa0c f707 	lsl.w	r7, ip, r7
 80049d4:	433d      	orrs	r5, r7
 80049d6:	e789      	b.n	80048ec <HAL_GPIO_Init+0xe4>
 80049d8:	f04f 0c02 	mov.w	ip, #2
 80049dc:	fa0c f707 	lsl.w	r7, ip, r7
 80049e0:	433d      	orrs	r5, r7
 80049e2:	e783      	b.n	80048ec <HAL_GPIO_Init+0xe4>
 80049e4:	f04f 0c03 	mov.w	ip, #3
 80049e8:	fa0c f707 	lsl.w	r7, ip, r7
 80049ec:	433d      	orrs	r5, r7
 80049ee:	e77d      	b.n	80048ec <HAL_GPIO_Init+0xe4>
 80049f0:	f04f 0c04 	mov.w	ip, #4
 80049f4:	fa0c f707 	lsl.w	r7, ip, r7
 80049f8:	433d      	orrs	r5, r7
 80049fa:	e777      	b.n	80048ec <HAL_GPIO_Init+0xe4>
 80049fc:	f04f 0c05 	mov.w	ip, #5
 8004a00:	fa0c f707 	lsl.w	r7, ip, r7
 8004a04:	433d      	orrs	r5, r7
 8004a06:	e771      	b.n	80048ec <HAL_GPIO_Init+0xe4>
 8004a08:	40020000 	.word	0x40020000
 8004a0c:	40020800 	.word	0x40020800
 8004a10:	40013c00 	.word	0x40013c00
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40020c00 	.word	0x40020c00
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40021400 	.word	0x40021400
 8004a24:	40021800 	.word	0x40021800

08004a28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a2c:	2300      	movs	r3, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004a2e:	4f4e      	ldr	r7, [pc, #312]	@ (8004b68 <HAL_GPIO_DeInit+0x140>)
{
 8004a30:	b083      	sub	sp, #12
    ioposition = 0x01U << position;
 8004a32:	2601      	movs	r6, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a34:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a38:	f04f 0a03 	mov.w	sl, #3
 8004a3c:	e002      	b.n	8004a44 <HAL_GPIO_DeInit+0x1c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a3e:	3301      	adds	r3, #1
 8004a40:	2b10      	cmp	r3, #16
 8004a42:	d070      	beq.n	8004b26 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8004a44:	fa06 f203 	lsl.w	r2, r6, r3
    if(iocurrent == ioposition)
 8004a48:	ea32 0401 	bics.w	r4, r2, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8004a4c:	ea02 0c01 	and.w	ip, r2, r1
    if(iocurrent == ioposition)
 8004a50:	d1f5      	bne.n	8004a3e <HAL_GPIO_DeInit+0x16>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a52:	f023 0503 	bic.w	r5, r3, #3
 8004a56:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a5a:	f003 0403 	and.w	r4, r3, #3
 8004a5e:	00a4      	lsls	r4, r4, #2
 8004a60:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 8004a64:	fa09 f804 	lsl.w	r8, r9, r4
 8004a68:	9401      	str	r4, [sp, #4]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a6a:	4c40      	ldr	r4, [pc, #256]	@ (8004b6c <HAL_GPIO_DeInit+0x144>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a6c:	f8d5 e008 	ldr.w	lr, [r5, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a70:	42a0      	cmp	r0, r4
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a72:	ea08 0e0e 	and.w	lr, r8, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a76:	d059      	beq.n	8004b2c <HAL_GPIO_DeInit+0x104>
 8004a78:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a7c:	42a0      	cmp	r0, r4
 8004a7e:	d057      	beq.n	8004b30 <HAL_GPIO_DeInit+0x108>
 8004a80:	4c3b      	ldr	r4, [pc, #236]	@ (8004b70 <HAL_GPIO_DeInit+0x148>)
 8004a82:	42a0      	cmp	r0, r4
 8004a84:	d058      	beq.n	8004b38 <HAL_GPIO_DeInit+0x110>
 8004a86:	4c3b      	ldr	r4, [pc, #236]	@ (8004b74 <HAL_GPIO_DeInit+0x14c>)
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d05b      	beq.n	8004b44 <HAL_GPIO_DeInit+0x11c>
 8004a8c:	4c3a      	ldr	r4, [pc, #232]	@ (8004b78 <HAL_GPIO_DeInit+0x150>)
 8004a8e:	42a0      	cmp	r0, r4
 8004a90:	d05e      	beq.n	8004b50 <HAL_GPIO_DeInit+0x128>
 8004a92:	f8df b0e8 	ldr.w	fp, [pc, #232]	@ 8004b7c <HAL_GPIO_DeInit+0x154>
 8004a96:	4558      	cmp	r0, fp
 8004a98:	d060      	beq.n	8004b5c <HAL_GPIO_DeInit+0x134>
 8004a9a:	f8df b0e4 	ldr.w	fp, [pc, #228]	@ 8004b80 <HAL_GPIO_DeInit+0x158>
 8004a9e:	9c01      	ldr	r4, [sp, #4]
 8004aa0:	4558      	cmp	r0, fp
 8004aa2:	bf14      	ite	ne
 8004aa4:	f04f 0b07 	movne.w	fp, #7
 8004aa8:	f04f 0b06 	moveq.w	fp, #6
 8004aac:	fa0b f404 	lsl.w	r4, fp, r4
 8004ab0:	45a6      	cmp	lr, r4
 8004ab2:	d113      	bne.n	8004adc <HAL_GPIO_DeInit+0xb4>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ab4:	683c      	ldr	r4, [r7, #0]
 8004ab6:	ea24 040c 	bic.w	r4, r4, ip
 8004aba:	603c      	str	r4, [r7, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004abc:	687c      	ldr	r4, [r7, #4]
 8004abe:	ea24 040c 	bic.w	r4, r4, ip
 8004ac2:	607c      	str	r4, [r7, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ac4:	68fc      	ldr	r4, [r7, #12]
 8004ac6:	ea24 040c 	bic.w	r4, r4, ip
 8004aca:	60fc      	str	r4, [r7, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004acc:	68bc      	ldr	r4, [r7, #8]
 8004ace:	ea24 040c 	bic.w	r4, r4, ip
 8004ad2:	60bc      	str	r4, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004ad4:	68ac      	ldr	r4, [r5, #8]
 8004ad6:	ea24 0408 	bic.w	r4, r4, r8
 8004ada:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004adc:	6804      	ldr	r4, [r0, #0]
 8004ade:	005d      	lsls	r5, r3, #1
 8004ae0:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ae4:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ae8:	ea24 0405 	bic.w	r4, r4, r5
 8004aec:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8004af0:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004af2:	f003 0407 	and.w	r4, r3, #7
 8004af6:	f8dc e020 	ldr.w	lr, [ip, #32]
 8004afa:	00a4      	lsls	r4, r4, #2
 8004afc:	fa09 f404 	lsl.w	r4, r9, r4
 8004b00:	ea2e 0404 	bic.w	r4, lr, r4
 8004b04:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b08:	68c4      	ldr	r4, [r0, #12]
 8004b0a:	ea24 0405 	bic.w	r4, r4, r5
 8004b0e:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b10:	6844      	ldr	r4, [r0, #4]
 8004b12:	ea24 0202 	bic.w	r2, r4, r2
 8004b16:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b18:	6882      	ldr	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b1a:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b1c:	ea22 0205 	bic.w	r2, r2, r5
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b20:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b22:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b24:	d18e      	bne.n	8004a44 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004b26:	b003      	add	sp, #12
 8004b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b2c:	2400      	movs	r4, #0
 8004b2e:	e7bf      	b.n	8004ab0 <HAL_GPIO_DeInit+0x88>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004b30:	9c01      	ldr	r4, [sp, #4]
 8004b32:	fa06 f404 	lsl.w	r4, r6, r4
 8004b36:	e7bb      	b.n	8004ab0 <HAL_GPIO_DeInit+0x88>
 8004b38:	9c01      	ldr	r4, [sp, #4]
 8004b3a:	f04f 0b02 	mov.w	fp, #2
 8004b3e:	fa0b f404 	lsl.w	r4, fp, r4
 8004b42:	e7b5      	b.n	8004ab0 <HAL_GPIO_DeInit+0x88>
 8004b44:	9c01      	ldr	r4, [sp, #4]
 8004b46:	f04f 0b03 	mov.w	fp, #3
 8004b4a:	fa0b f404 	lsl.w	r4, fp, r4
 8004b4e:	e7af      	b.n	8004ab0 <HAL_GPIO_DeInit+0x88>
 8004b50:	9c01      	ldr	r4, [sp, #4]
 8004b52:	f04f 0b04 	mov.w	fp, #4
 8004b56:	fa0b f404 	lsl.w	r4, fp, r4
 8004b5a:	e7a9      	b.n	8004ab0 <HAL_GPIO_DeInit+0x88>
 8004b5c:	9c01      	ldr	r4, [sp, #4]
 8004b5e:	f04f 0b05 	mov.w	fp, #5
 8004b62:	fa0b f404 	lsl.w	r4, fp, r4
 8004b66:	e7a3      	b.n	8004ab0 <HAL_GPIO_DeInit+0x88>
 8004b68:	40013c00 	.word	0x40013c00
 8004b6c:	40020000 	.word	0x40020000
 8004b70:	40020800 	.word	0x40020800
 8004b74:	40020c00 	.word	0x40020c00
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40021400 	.word	0x40021400
 8004b80:	40021800 	.word	0x40021800

08004b84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b84:	b902      	cbnz	r2, 8004b88 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b86:	0409      	lsls	r1, r1, #16
 8004b88:	6181      	str	r1, [r0, #24]
  }
}
 8004b8a:	4770      	bx	lr

08004b8c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004b8c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8004b8e:	4c0d      	ldr	r4, [pc, #52]	@ (8004bc4 <HAL_PWR_EnterSTOPMode+0x38>)
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b90:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc8 <HAL_PWR_EnterSTOPMode+0x3c>)
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	f023 0303 	bic.w	r3, r3, #3
 8004b98:	4303      	orrs	r3, r0
 8004b9a:	6023      	str	r3, [r4, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b9c:	6913      	ldr	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004b9e:	2901      	cmp	r1, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	6113      	str	r3, [r2, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004ba6:	d00a      	beq.n	8004bbe <HAL_PWR_EnterSTOPMode+0x32>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004ba8:	bf40      	sev
    __WFE();
 8004baa:	bf20      	wfe
    __WFE();
 8004bac:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8004bae:	4a06      	ldr	r2, [pc, #24]	@ (8004bc8 <HAL_PWR_EnterSTOPMode+0x3c>)
}
 8004bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8004bb4:	6913      	ldr	r3, [r2, #16]
 8004bb6:	f023 0304 	bic.w	r3, r3, #4
 8004bba:	6113      	str	r3, [r2, #16]
}
 8004bbc:	4770      	bx	lr
    __WFI();
 8004bbe:	bf30      	wfi
 8004bc0:	e7f5      	b.n	8004bae <HAL_PWR_EnterSTOPMode+0x22>
 8004bc2:	bf00      	nop
 8004bc4:	40007000 	.word	0x40007000
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bcc:	b530      	push	{r4, r5, lr}
 8004bce:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bd0:	4b19      	ldr	r3, [pc, #100]	@ (8004c38 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bd2:	491a      	ldr	r1, [pc, #104]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bd4:	4d1a      	ldr	r5, [pc, #104]	@ (8004c40 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	9201      	str	r2, [sp, #4]
 8004bda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bdc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004be0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be8:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bea:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bec:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bee:	640a      	str	r2, [r1, #64]	@ 0x40
  tickstart = HAL_GetTick();
 8004bf0:	f7ff fb34 	bl	800425c <HAL_GetTick>
 8004bf4:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bf6:	e005      	b.n	8004c04 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bf8:	f7ff fb30 	bl	800425c <HAL_GetTick>
 8004bfc:	1b00      	subs	r0, r0, r4
 8004bfe:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004c02:	d816      	bhi.n	8004c32 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c04:	686b      	ldr	r3, [r5, #4]
 8004c06:	03da      	lsls	r2, r3, #15
 8004c08:	d5f6      	bpl.n	8004bf8 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c0c:	4d0c      	ldr	r5, [pc, #48]	@ (8004c40 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c0e:	2201      	movs	r2, #1
 8004c10:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 8004c12:	f7ff fb23 	bl	800425c <HAL_GetTick>
 8004c16:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c18:	e005      	b.n	8004c26 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c1a:	f7ff fb1f 	bl	800425c <HAL_GetTick>
 8004c1e:	1b00      	subs	r0, r0, r4
 8004c20:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004c24:	d805      	bhi.n	8004c32 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c26:	686b      	ldr	r3, [r5, #4]
 8004c28:	039b      	lsls	r3, r3, #14
 8004c2a:	d5f6      	bpl.n	8004c1a <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004c2c:	2000      	movs	r0, #0
}
 8004c2e:	b003      	add	sp, #12
 8004c30:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8004c32:	2003      	movs	r0, #3
}
 8004c34:	b003      	add	sp, #12
 8004c36:	bd30      	pop	{r4, r5, pc}
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	420e0000 	.word	0x420e0000
 8004c40:	40007000 	.word	0x40007000

08004c44 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c44:	2800      	cmp	r0, #0
 8004c46:	f000 8087 	beq.w	8004d58 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c4a:	4a48      	ldr	r2, [pc, #288]	@ (8004d6c <HAL_RCC_ClockConfig+0x128>)
 8004c4c:	6813      	ldr	r3, [r2, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	428b      	cmp	r3, r1
{
 8004c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c58:	460d      	mov	r5, r1
 8004c5a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c5c:	d209      	bcs.n	8004c72 <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	b2cb      	uxtb	r3, r1
 8004c60:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	428b      	cmp	r3, r1
 8004c6a:	d002      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004c6c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8004c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	0798      	lsls	r0, r3, #30
 8004c76:	d514      	bpl.n	8004ca2 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c78:	0759      	lsls	r1, r3, #29
 8004c7a:	d504      	bpl.n	8004c86 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c7c:	493c      	ldr	r1, [pc, #240]	@ (8004d70 <HAL_RCC_ClockConfig+0x12c>)
 8004c7e:	688a      	ldr	r2, [r1, #8]
 8004c80:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8004c84:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c86:	071a      	lsls	r2, r3, #28
 8004c88:	d504      	bpl.n	8004c94 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c8a:	4939      	ldr	r1, [pc, #228]	@ (8004d70 <HAL_RCC_ClockConfig+0x12c>)
 8004c8c:	688a      	ldr	r2, [r1, #8]
 8004c8e:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8004c92:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c94:	4936      	ldr	r1, [pc, #216]	@ (8004d70 <HAL_RCC_ClockConfig+0x12c>)
 8004c96:	68a0      	ldr	r0, [r4, #8]
 8004c98:	688a      	ldr	r2, [r1, #8]
 8004c9a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004c9e:	4302      	orrs	r2, r0
 8004ca0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca2:	07df      	lsls	r7, r3, #31
 8004ca4:	d521      	bpl.n	8004cea <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca6:	6862      	ldr	r2, [r4, #4]
 8004ca8:	2a01      	cmp	r2, #1
 8004caa:	d057      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cac:	1e93      	subs	r3, r2, #2
 8004cae:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8004d70 <HAL_RCC_ClockConfig+0x12c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cb4:	d94d      	bls.n	8004d52 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb6:	0799      	lsls	r1, r3, #30
 8004cb8:	d5d8      	bpl.n	8004c6c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cba:	4e2d      	ldr	r6, [pc, #180]	@ (8004d70 <HAL_RCC_ClockConfig+0x12c>)
 8004cbc:	68b3      	ldr	r3, [r6, #8]
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004cc6:	f7ff fac9 	bl	800425c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cca:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004cce:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd0:	e004      	b.n	8004cdc <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd2:	f7ff fac3 	bl	800425c <HAL_GetTick>
 8004cd6:	1bc0      	subs	r0, r0, r7
 8004cd8:	4540      	cmp	r0, r8
 8004cda:	d844      	bhi.n	8004d66 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cdc:	68b3      	ldr	r3, [r6, #8]
 8004cde:	6862      	ldr	r2, [r4, #4]
 8004ce0:	f003 030c 	and.w	r3, r3, #12
 8004ce4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004ce8:	d1f3      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cea:	4a20      	ldr	r2, [pc, #128]	@ (8004d6c <HAL_RCC_ClockConfig+0x128>)
 8004cec:	6813      	ldr	r3, [r2, #0]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	42ab      	cmp	r3, r5
 8004cf4:	d906      	bls.n	8004d04 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	b2eb      	uxtb	r3, r5
 8004cf8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	42ab      	cmp	r3, r5
 8004d02:	d1b3      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	075a      	lsls	r2, r3, #29
 8004d08:	d506      	bpl.n	8004d18 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d0a:	4919      	ldr	r1, [pc, #100]	@ (8004d70 <HAL_RCC_ClockConfig+0x12c>)
 8004d0c:	68e0      	ldr	r0, [r4, #12]
 8004d0e:	688a      	ldr	r2, [r1, #8]
 8004d10:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8004d14:	4302      	orrs	r2, r0
 8004d16:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d18:	071b      	lsls	r3, r3, #28
 8004d1a:	d507      	bpl.n	8004d2c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1c:	4a14      	ldr	r2, [pc, #80]	@ (8004d70 <HAL_RCC_ClockConfig+0x12c>)
 8004d1e:	6921      	ldr	r1, [r4, #16]
 8004d20:	6893      	ldr	r3, [r2, #8]
 8004d22:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004d26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d2a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d2c:	f000 f870 	bl	8004e10 <HAL_RCC_GetSysClockFreq>
 8004d30:	4a0f      	ldr	r2, [pc, #60]	@ (8004d70 <HAL_RCC_ClockConfig+0x12c>)
 8004d32:	4c10      	ldr	r4, [pc, #64]	@ (8004d74 <HAL_RCC_ClockConfig+0x130>)
 8004d34:	6892      	ldr	r2, [r2, #8]
 8004d36:	4910      	ldr	r1, [pc, #64]	@ (8004d78 <HAL_RCC_ClockConfig+0x134>)
 8004d38:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004d40:	480e      	ldr	r0, [pc, #56]	@ (8004d7c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d42:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004d44:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d46:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004d48:	f7fe fd30 	bl	80037ac <HAL_InitTick>
  return HAL_OK;
 8004d4c:	2000      	movs	r0, #0
}
 8004d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d52:	0198      	lsls	r0, r3, #6
 8004d54:	d4b1      	bmi.n	8004cba <HAL_RCC_ClockConfig+0x76>
 8004d56:	e789      	b.n	8004c6c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004d58:	2001      	movs	r0, #1
}
 8004d5a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5c:	4b04      	ldr	r3, [pc, #16]	@ (8004d70 <HAL_RCC_ClockConfig+0x12c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	039e      	lsls	r6, r3, #14
 8004d62:	d4aa      	bmi.n	8004cba <HAL_RCC_ClockConfig+0x76>
 8004d64:	e782      	b.n	8004c6c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004d66:	2003      	movs	r0, #3
 8004d68:	e781      	b.n	8004c6e <HAL_RCC_ClockConfig+0x2a>
 8004d6a:	bf00      	nop
 8004d6c:	40023c00 	.word	0x40023c00
 8004d70:	40023800 	.word	0x40023800
 8004d74:	0800adac 	.word	0x0800adac
 8004d78:	200005d4 	.word	0x200005d4
 8004d7c:	200005dc 	.word	0x200005dc

08004d80 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004d80:	4b01      	ldr	r3, [pc, #4]	@ (8004d88 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	200005d4 	.word	0x200005d4

08004d8c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d8c:	4b04      	ldr	r3, [pc, #16]	@ (8004da0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004d8e:	4905      	ldr	r1, [pc, #20]	@ (8004da4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4a05      	ldr	r2, [pc, #20]	@ (8004da8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004d94:	6808      	ldr	r0, [r1, #0]
 8004d96:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004d9a:	5cd3      	ldrb	r3, [r2, r3]
}
 8004d9c:	40d8      	lsrs	r0, r3
 8004d9e:	4770      	bx	lr
 8004da0:	40023800 	.word	0x40023800
 8004da4:	200005d4 	.word	0x200005d4
 8004da8:	0800ada4 	.word	0x0800ada4

08004dac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dac:	4b04      	ldr	r3, [pc, #16]	@ (8004dc0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004dae:	4905      	ldr	r1, [pc, #20]	@ (8004dc4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	4a05      	ldr	r2, [pc, #20]	@ (8004dc8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004dba:	5cd3      	ldrb	r3, [r2, r3]
}
 8004dbc:	40d8      	lsrs	r0, r3
 8004dbe:	4770      	bx	lr
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	200005d4 	.word	0x200005d4
 8004dc8:	0800ada4 	.word	0x0800ada4

08004dcc <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8004e08 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dce:	220f      	movs	r2, #15
 8004dd0:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	f002 0203 	and.w	r2, r2, #3
 8004dd8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8004de0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8004de8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	08db      	lsrs	r3, r3, #3
{
 8004dee:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004df0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004df4:	4c05      	ldr	r4, [pc, #20]	@ (8004e0c <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004df6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004df8:	6823      	ldr	r3, [r4, #0]
}
 8004dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	600b      	str	r3, [r1, #0]
}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	40023c00 	.word	0x40023c00

08004e10 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e10:	491d      	ldr	r1, [pc, #116]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8004e12:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e14:	688b      	ldr	r3, [r1, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d01a      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0x44>
 8004e1e:	2b0c      	cmp	r3, #12
 8004e20:	d116      	bne.n	8004e50 <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e22:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e24:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e26:	6849      	ldr	r1, [r1, #4]
 8004e28:	4818      	ldr	r0, [pc, #96]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x7c>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e2a:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004e32:	bf18      	it	ne
 8004e34:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e36:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3a:	fba1 0100 	umull	r0, r1, r1, r0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3e:	f7fb fecb 	bl	8000bd8 <__aeabi_uldivmod>
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e42:	4b11      	ldr	r3, [pc, #68]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0x78>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 8004e4a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004e4e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e50:	480e      	ldr	r0, [pc, #56]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x7c>)
}
 8004e52:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e54:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e56:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e58:	6849      	ldr	r1, [r1, #4]
 8004e5a:	480c      	ldr	r0, [pc, #48]	@ (8004e8c <HAL_RCC_GetSysClockFreq+0x7c>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e5c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e60:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004e64:	bf18      	it	ne
 8004e66:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e68:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6c:	fba1 0100 	umull	r0, r1, r1, r0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e70:	f7fb feb2 	bl	8000bd8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e74:	4b04      	ldr	r3, [pc, #16]	@ (8004e88 <HAL_RCC_GetSysClockFreq+0x78>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004e80:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004e84:	bd08      	pop	{r3, pc}
 8004e86:	bf00      	nop
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	00f42400 	.word	0x00f42400

08004e90 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e90:	2800      	cmp	r0, #0
 8004e92:	f000 81fb 	beq.w	800528c <HAL_RCC_OscConfig+0x3fc>
{
 8004e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e9a:	6803      	ldr	r3, [r0, #0]
 8004e9c:	07de      	lsls	r6, r3, #31
{
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea2:	d536      	bpl.n	8004f12 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ea4:	49a1      	ldr	r1, [pc, #644]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 8004ea6:	688a      	ldr	r2, [r1, #8]
 8004ea8:	f002 020c 	and.w	r2, r2, #12
 8004eac:	2a04      	cmp	r2, #4
 8004eae:	f000 80de 	beq.w	800506e <HAL_RCC_OscConfig+0x1de>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004eb2:	688a      	ldr	r2, [r1, #8]
 8004eb4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004eb8:	2a08      	cmp	r2, #8
 8004eba:	f000 80d4 	beq.w	8005066 <HAL_RCC_OscConfig+0x1d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ebe:	499b      	ldr	r1, [pc, #620]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 8004ec0:	688a      	ldr	r2, [r1, #8]
 8004ec2:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ec6:	2a0c      	cmp	r2, #12
 8004ec8:	f000 8104 	beq.w	80050d4 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed2:	f000 8118 	beq.w	8005106 <HAL_RCC_OscConfig+0x276>
 8004ed6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eda:	f000 8192 	beq.w	8005202 <HAL_RCC_OscConfig+0x372>
 8004ede:	4d93      	ldr	r5, [pc, #588]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 8004ee0:	682a      	ldr	r2, [r5, #0]
 8004ee2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ee6:	602a      	str	r2, [r5, #0]
 8004ee8:	682a      	ldr	r2, [r5, #0]
 8004eea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004eee:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 810d 	bne.w	8005110 <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef6:	f7ff f9b1 	bl	800425c <HAL_GetTick>
 8004efa:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004efc:	e005      	b.n	8004f0a <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004efe:	f7ff f9ad 	bl	800425c <HAL_GetTick>
 8004f02:	1b80      	subs	r0, r0, r6
 8004f04:	2864      	cmp	r0, #100	@ 0x64
 8004f06:	f200 80fa 	bhi.w	80050fe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	039f      	lsls	r7, r3, #14
 8004f0e:	d4f6      	bmi.n	8004efe <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	079d      	lsls	r5, r3, #30
 8004f14:	d52f      	bpl.n	8004f76 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f16:	4a85      	ldr	r2, [pc, #532]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 8004f18:	6891      	ldr	r1, [r2, #8]
 8004f1a:	f011 0f0c 	tst.w	r1, #12
 8004f1e:	f000 8099 	beq.w	8005054 <HAL_RCC_OscConfig+0x1c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f22:	6891      	ldr	r1, [r2, #8]
 8004f24:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f28:	2908      	cmp	r1, #8
 8004f2a:	f000 808f 	beq.w	800504c <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2e:	497f      	ldr	r1, [pc, #508]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 8004f30:	688a      	ldr	r2, [r1, #8]
 8004f32:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f36:	2a0c      	cmp	r2, #12
 8004f38:	f000 815e 	beq.w	80051f8 <HAL_RCC_OscConfig+0x368>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f3c:	68e3      	ldr	r3, [r4, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 8112 	beq.w	8005168 <HAL_RCC_OscConfig+0x2d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f44:	4b7a      	ldr	r3, [pc, #488]	@ (8005130 <HAL_RCC_OscConfig+0x2a0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f46:	4e79      	ldr	r6, [pc, #484]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
        __HAL_RCC_HSI_ENABLE();
 8004f48:	2201      	movs	r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004f4c:	f7ff f986 	bl	800425c <HAL_GetTick>
 8004f50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f52:	e005      	b.n	8004f60 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f54:	f7ff f982 	bl	800425c <HAL_GetTick>
 8004f58:	1b40      	subs	r0, r0, r5
 8004f5a:	2802      	cmp	r0, #2
 8004f5c:	f200 80cf 	bhi.w	80050fe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f60:	6833      	ldr	r3, [r6, #0]
 8004f62:	079f      	lsls	r7, r3, #30
 8004f64:	d5f6      	bpl.n	8004f54 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f66:	6833      	ldr	r3, [r6, #0]
 8004f68:	6922      	ldr	r2, [r4, #16]
 8004f6a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004f6e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004f72:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	071a      	lsls	r2, r3, #28
 8004f78:	d452      	bmi.n	8005020 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f7a:	075d      	lsls	r5, r3, #29
 8004f7c:	d530      	bpl.n	8004fe0 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7e:	4a6b      	ldr	r2, [pc, #428]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 8004f80:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004f82:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8004f86:	f000 8099 	beq.w	80050bc <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 8004f8a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8c:	4e69      	ldr	r6, [pc, #420]	@ (8005134 <HAL_RCC_OscConfig+0x2a4>)
 8004f8e:	6833      	ldr	r3, [r6, #0]
 8004f90:	05d8      	lsls	r0, r3, #23
 8004f92:	f140 80a4 	bpl.w	80050de <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f96:	68a3      	ldr	r3, [r4, #8]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	f000 80cd 	beq.w	8005138 <HAL_RCC_OscConfig+0x2a8>
 8004f9e:	2b05      	cmp	r3, #5
 8004fa0:	f000 8139 	beq.w	8005216 <HAL_RCC_OscConfig+0x386>
 8004fa4:	4e61      	ldr	r6, [pc, #388]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 8004fa6:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	6732      	str	r2, [r6, #112]	@ 0x70
 8004fae:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004fb0:	f022 0204 	bic.w	r2, r2, #4
 8004fb4:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f040 80c3 	bne.w	8005142 <HAL_RCC_OscConfig+0x2b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7ff f94e 	bl	800425c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004fc4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc6:	e005      	b.n	8004fd4 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc8:	f7ff f948 	bl	800425c <HAL_GetTick>
 8004fcc:	1bc0      	subs	r0, r0, r7
 8004fce:	4540      	cmp	r0, r8
 8004fd0:	f200 8095 	bhi.w	80050fe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004fd6:	079b      	lsls	r3, r3, #30
 8004fd8:	d4f6      	bmi.n	8004fc8 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fda:	2d00      	cmp	r5, #0
 8004fdc:	f040 8106 	bne.w	80051ec <HAL_RCC_OscConfig+0x35c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fe0:	69a3      	ldr	r3, [r4, #24]
 8004fe2:	b1cb      	cbz	r3, 8005018 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fe4:	4d51      	ldr	r5, [pc, #324]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 8004fe6:	68aa      	ldr	r2, [r5, #8]
 8004fe8:	f002 020c 	and.w	r2, r2, #12
 8004fec:	2a08      	cmp	r2, #8
 8004fee:	f000 80cc 	beq.w	800518a <HAL_RCC_OscConfig+0x2fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff2:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff4:	4b4e      	ldr	r3, [pc, #312]	@ (8005130 <HAL_RCC_OscConfig+0x2a0>)
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ffc:	f000 8115 	beq.w	800522a <HAL_RCC_OscConfig+0x39a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7ff f92c 	bl	800425c <HAL_GetTick>
 8005004:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005006:	e004      	b.n	8005012 <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005008:	f7ff f928 	bl	800425c <HAL_GetTick>
 800500c:	1b00      	subs	r0, r0, r4
 800500e:	2802      	cmp	r0, #2
 8005010:	d875      	bhi.n	80050fe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005012:	682b      	ldr	r3, [r5, #0]
 8005014:	019b      	lsls	r3, r3, #6
 8005016:	d4f7      	bmi.n	8005008 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005018:	2000      	movs	r0, #0
}
 800501a:	b002      	add	sp, #8
 800501c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005020:	6963      	ldr	r3, [r4, #20]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02d      	beq.n	8005082 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_LSI_ENABLE();
 8005026:	4b42      	ldr	r3, [pc, #264]	@ (8005130 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005028:	4e40      	ldr	r6, [pc, #256]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_ENABLE();
 800502a:	2201      	movs	r2, #1
 800502c:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005030:	f7ff f914 	bl	800425c <HAL_GetTick>
 8005034:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005036:	e004      	b.n	8005042 <HAL_RCC_OscConfig+0x1b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005038:	f7ff f910 	bl	800425c <HAL_GetTick>
 800503c:	1b40      	subs	r0, r0, r5
 800503e:	2802      	cmp	r0, #2
 8005040:	d85d      	bhi.n	80050fe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005042:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005044:	079b      	lsls	r3, r3, #30
 8005046:	d5f7      	bpl.n	8005038 <HAL_RCC_OscConfig+0x1a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	e796      	b.n	8004f7a <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800504c:	6852      	ldr	r2, [r2, #4]
 800504e:	0250      	lsls	r0, r2, #9
 8005050:	f53f af6d 	bmi.w	8004f2e <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005054:	4a35      	ldr	r2, [pc, #212]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	0792      	lsls	r2, r2, #30
 800505a:	d523      	bpl.n	80050a4 <HAL_RCC_OscConfig+0x214>
 800505c:	68e2      	ldr	r2, [r4, #12]
 800505e:	2a01      	cmp	r2, #1
 8005060:	d020      	beq.n	80050a4 <HAL_RCC_OscConfig+0x214>
    return HAL_ERROR;
 8005062:	2001      	movs	r0, #1
 8005064:	e7d9      	b.n	800501a <HAL_RCC_OscConfig+0x18a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005066:	684a      	ldr	r2, [r1, #4]
 8005068:	0255      	lsls	r5, r2, #9
 800506a:	f57f af28 	bpl.w	8004ebe <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506e:	4a2f      	ldr	r2, [pc, #188]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	0392      	lsls	r2, r2, #14
 8005074:	f57f af4d 	bpl.w	8004f12 <HAL_RCC_OscConfig+0x82>
 8005078:	6862      	ldr	r2, [r4, #4]
 800507a:	2a00      	cmp	r2, #0
 800507c:	f47f af49 	bne.w	8004f12 <HAL_RCC_OscConfig+0x82>
 8005080:	e7ef      	b.n	8005062 <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_LSI_DISABLE();
 8005082:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005084:	4e29      	ldr	r6, [pc, #164]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_DISABLE();
 8005086:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800508a:	f7ff f8e7 	bl	800425c <HAL_GetTick>
 800508e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005090:	e004      	b.n	800509c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005092:	f7ff f8e3 	bl	800425c <HAL_GetTick>
 8005096:	1b40      	subs	r0, r0, r5
 8005098:	2802      	cmp	r0, #2
 800509a:	d830      	bhi.n	80050fe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800509e:	079f      	lsls	r7, r3, #30
 80050a0:	d4f7      	bmi.n	8005092 <HAL_RCC_OscConfig+0x202>
 80050a2:	e7d1      	b.n	8005048 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a4:	4921      	ldr	r1, [pc, #132]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 80050a6:	6920      	ldr	r0, [r4, #16]
 80050a8:	680a      	ldr	r2, [r1, #0]
 80050aa:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80050ae:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80050b2:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b4:	071a      	lsls	r2, r3, #28
 80050b6:	f57f af60 	bpl.w	8004f7a <HAL_RCC_OscConfig+0xea>
 80050ba:	e7b1      	b.n	8005020 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050c6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80050d0:	2501      	movs	r5, #1
 80050d2:	e75b      	b.n	8004f8c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050d4:	684a      	ldr	r2, [r1, #4]
 80050d6:	0251      	lsls	r1, r2, #9
 80050d8:	f57f aef8 	bpl.w	8004ecc <HAL_RCC_OscConfig+0x3c>
 80050dc:	e7c7      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050de:	6833      	ldr	r3, [r6, #0]
 80050e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050e4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80050e6:	f7ff f8b9 	bl	800425c <HAL_GetTick>
 80050ea:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ec:	6833      	ldr	r3, [r6, #0]
 80050ee:	05d9      	lsls	r1, r3, #23
 80050f0:	f53f af51 	bmi.w	8004f96 <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f4:	f7ff f8b2 	bl	800425c <HAL_GetTick>
 80050f8:	1bc0      	subs	r0, r0, r7
 80050fa:	2802      	cmp	r0, #2
 80050fc:	d9f6      	bls.n	80050ec <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80050fe:	2003      	movs	r0, #3
}
 8005100:	b002      	add	sp, #8
 8005102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005106:	4a09      	ldr	r2, [pc, #36]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
 8005108:	6813      	ldr	r3, [r2, #0]
 800510a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800510e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005110:	f7ff f8a4 	bl	800425c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005114:	4e05      	ldr	r6, [pc, #20]	@ (800512c <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 8005116:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005118:	e004      	b.n	8005124 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800511a:	f7ff f89f 	bl	800425c <HAL_GetTick>
 800511e:	1b40      	subs	r0, r0, r5
 8005120:	2864      	cmp	r0, #100	@ 0x64
 8005122:	d8ec      	bhi.n	80050fe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005124:	6833      	ldr	r3, [r6, #0]
 8005126:	039b      	lsls	r3, r3, #14
 8005128:	d5f7      	bpl.n	800511a <HAL_RCC_OscConfig+0x28a>
 800512a:	e6f1      	b.n	8004f10 <HAL_RCC_OscConfig+0x80>
 800512c:	40023800 	.word	0x40023800
 8005130:	42470000 	.word	0x42470000
 8005134:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005138:	4a55      	ldr	r2, [pc, #340]	@ (8005290 <HAL_RCC_OscConfig+0x400>)
 800513a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8005142:	f7ff f88b 	bl	800425c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005146:	4f52      	ldr	r7, [pc, #328]	@ (8005290 <HAL_RCC_OscConfig+0x400>)
      tickstart = HAL_GetTick();
 8005148:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514e:	e004      	b.n	800515a <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005150:	f7ff f884 	bl	800425c <HAL_GetTick>
 8005154:	1b80      	subs	r0, r0, r6
 8005156:	4540      	cmp	r0, r8
 8005158:	d8d1      	bhi.n	80050fe <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800515c:	079a      	lsls	r2, r3, #30
 800515e:	d5f7      	bpl.n	8005150 <HAL_RCC_OscConfig+0x2c0>
    if(pwrclkchanged == SET)
 8005160:	2d00      	cmp	r5, #0
 8005162:	f43f af3d 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x150>
 8005166:	e041      	b.n	80051ec <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_HSI_DISABLE();
 8005168:	4a4a      	ldr	r2, [pc, #296]	@ (8005294 <HAL_RCC_OscConfig+0x404>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516a:	4e49      	ldr	r6, [pc, #292]	@ (8005290 <HAL_RCC_OscConfig+0x400>)
        __HAL_RCC_HSI_DISABLE();
 800516c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800516e:	f7ff f875 	bl	800425c <HAL_GetTick>
 8005172:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005174:	e004      	b.n	8005180 <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005176:	f7ff f871 	bl	800425c <HAL_GetTick>
 800517a:	1b40      	subs	r0, r0, r5
 800517c:	2802      	cmp	r0, #2
 800517e:	d8be      	bhi.n	80050fe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005180:	6833      	ldr	r3, [r6, #0]
 8005182:	0799      	lsls	r1, r3, #30
 8005184:	d4f7      	bmi.n	8005176 <HAL_RCC_OscConfig+0x2e6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	e6f5      	b.n	8004f76 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800518a:	2b01      	cmp	r3, #1
 800518c:	f43f af69 	beq.w	8005062 <HAL_RCC_OscConfig+0x1d2>
        pll_config = RCC->PLLCFGR;
 8005190:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005192:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005194:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005198:	4291      	cmp	r1, r2
 800519a:	f47f af62 	bne.w	8005062 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051a0:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a4:	4291      	cmp	r1, r2
 80051a6:	f47f af5c 	bne.w	8005062 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80051ac:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80051b0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051b2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80051b6:	f47f af54 	bne.w	8005062 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051ba:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80051bc:	0852      	lsrs	r2, r2, #1
 80051be:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80051c2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051c4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80051c8:	f47f af4b 	bne.w	8005062 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051cc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80051ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051d2:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80051d6:	f47f af44 	bne.w	8005062 <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051da:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80051dc:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051e0:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80051e4:	bf14      	ite	ne
 80051e6:	2001      	movne	r0, #1
 80051e8:	2000      	moveq	r0, #0
 80051ea:	e716      	b.n	800501a <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ec:	4a28      	ldr	r2, [pc, #160]	@ (8005290 <HAL_RCC_OscConfig+0x400>)
 80051ee:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80051f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80051f6:	e6f3      	b.n	8004fe0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f8:	684a      	ldr	r2, [r1, #4]
 80051fa:	0251      	lsls	r1, r2, #9
 80051fc:	f53f ae9e 	bmi.w	8004f3c <HAL_RCC_OscConfig+0xac>
 8005200:	e728      	b.n	8005054 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005202:	4b23      	ldr	r3, [pc, #140]	@ (8005290 <HAL_RCC_OscConfig+0x400>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005212:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005214:	e77c      	b.n	8005110 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005216:	4b1e      	ldr	r3, [pc, #120]	@ (8005290 <HAL_RCC_OscConfig+0x400>)
 8005218:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800521a:	f042 0204 	orr.w	r2, r2, #4
 800521e:	671a      	str	r2, [r3, #112]	@ 0x70
 8005220:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005228:	e78b      	b.n	8005142 <HAL_RCC_OscConfig+0x2b2>
        tickstart = HAL_GetTick();
 800522a:	f7ff f817 	bl	800425c <HAL_GetTick>
 800522e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005230:	e005      	b.n	800523e <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005232:	f7ff f813 	bl	800425c <HAL_GetTick>
 8005236:	1b80      	subs	r0, r0, r6
 8005238:	2802      	cmp	r0, #2
 800523a:	f63f af60 	bhi.w	80050fe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523e:	682b      	ldr	r3, [r5, #0]
 8005240:	0199      	lsls	r1, r3, #6
 8005242:	d4f6      	bmi.n	8005232 <HAL_RCC_OscConfig+0x3a2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005244:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8005248:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800524a:	430b      	orrs	r3, r1
 800524c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005250:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8005254:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005256:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800525a:	0852      	lsrs	r2, r2, #1
 800525c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005260:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8005262:	490c      	ldr	r1, [pc, #48]	@ (8005294 <HAL_RCC_OscConfig+0x404>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005264:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8005268:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800526a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800526c:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800526e:	f7fe fff5 	bl	800425c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005272:	4d07      	ldr	r5, [pc, #28]	@ (8005290 <HAL_RCC_OscConfig+0x400>)
        tickstart = HAL_GetTick();
 8005274:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005276:	e005      	b.n	8005284 <HAL_RCC_OscConfig+0x3f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005278:	f7fe fff0 	bl	800425c <HAL_GetTick>
 800527c:	1b00      	subs	r0, r0, r4
 800527e:	2802      	cmp	r0, #2
 8005280:	f63f af3d 	bhi.w	80050fe <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005284:	682b      	ldr	r3, [r5, #0]
 8005286:	019a      	lsls	r2, r3, #6
 8005288:	d5f6      	bpl.n	8005278 <HAL_RCC_OscConfig+0x3e8>
 800528a:	e6c5      	b.n	8005018 <HAL_RCC_OscConfig+0x188>
    return HAL_ERROR;
 800528c:	2001      	movs	r0, #1
}
 800528e:	4770      	bx	lr
 8005290:	40023800 	.word	0x40023800
 8005294:	42470000 	.word	0x42470000

08005298 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005298:	2800      	cmp	r0, #0
 800529a:	f000 8086 	beq.w	80053aa <HAL_TIM_Base_Init+0x112>
{
 800529e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80052a4:	4604      	mov	r4, r0
 80052a6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d078      	beq.n	80053a0 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ae:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b0:	493f      	ldr	r1, [pc, #252]	@ (80053b0 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 80052b2:	2302      	movs	r3, #2
 80052b4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80052ba:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052bc:	d05c      	beq.n	8005378 <HAL_TIM_Base_Init+0xe0>
 80052be:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80052c2:	d030      	beq.n	8005326 <HAL_TIM_Base_Init+0x8e>
 80052c4:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 80052c8:	428a      	cmp	r2, r1
 80052ca:	d02c      	beq.n	8005326 <HAL_TIM_Base_Init+0x8e>
 80052cc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80052d0:	428a      	cmp	r2, r1
 80052d2:	d028      	beq.n	8005326 <HAL_TIM_Base_Init+0x8e>
 80052d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80052d8:	428a      	cmp	r2, r1
 80052da:	d024      	beq.n	8005326 <HAL_TIM_Base_Init+0x8e>
 80052dc:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 80052e0:	428a      	cmp	r2, r1
 80052e2:	d049      	beq.n	8005378 <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052e4:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 80052e8:	428a      	cmp	r2, r1
 80052ea:	d020      	beq.n	800532e <HAL_TIM_Base_Init+0x96>
 80052ec:	4931      	ldr	r1, [pc, #196]	@ (80053b4 <HAL_TIM_Base_Init+0x11c>)
 80052ee:	428a      	cmp	r2, r1
 80052f0:	d01d      	beq.n	800532e <HAL_TIM_Base_Init+0x96>
 80052f2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80052f6:	428a      	cmp	r2, r1
 80052f8:	d019      	beq.n	800532e <HAL_TIM_Base_Init+0x96>
 80052fa:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 80052fe:	428a      	cmp	r2, r1
 8005300:	d015      	beq.n	800532e <HAL_TIM_Base_Init+0x96>
 8005302:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005306:	428a      	cmp	r2, r1
 8005308:	d011      	beq.n	800532e <HAL_TIM_Base_Init+0x96>
 800530a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800530e:	428a      	cmp	r2, r1
 8005310:	d00d      	beq.n	800532e <HAL_TIM_Base_Init+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005312:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005314:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005316:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800531c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800531e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005320:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005322:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005324:	e010      	b.n	8005348 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8005326:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800532c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005330:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005336:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005338:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800533c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800533e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005340:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005342:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005344:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005346:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005348:	2301      	movs	r3, #1
 800534a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005354:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005358:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800535c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005368:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800536c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005370:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005374:	2000      	movs	r0, #0
}
 8005376:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005378:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800537a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800537c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005380:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005386:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005388:	69a1      	ldr	r1, [r4, #24]
 800538a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800538e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005390:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005392:	68e3      	ldr	r3, [r4, #12]
 8005394:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005396:	6863      	ldr	r3, [r4, #4]
 8005398:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800539a:	6963      	ldr	r3, [r4, #20]
 800539c:	6313      	str	r3, [r2, #48]	@ 0x30
 800539e:	e7d3      	b.n	8005348 <HAL_TIM_Base_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 80053a0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80053a4:	f7fe f918 	bl	80035d8 <HAL_TIM_Base_MspInit>
 80053a8:	e781      	b.n	80052ae <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 80053aa:	2001      	movs	r0, #1
}
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40010000 	.word	0x40010000
 80053b4:	40014400 	.word	0x40014400

080053b8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80053b8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d12f      	bne.n	8005420 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053c0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c2:	4918      	ldr	r1, [pc, #96]	@ (8005424 <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	2202      	movs	r2, #2
 80053c6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053ca:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053cc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d4:	d019      	beq.n	800540a <HAL_TIM_Base_Start_IT+0x52>
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053da:	d016      	beq.n	800540a <HAL_TIM_Base_Start_IT+0x52>
 80053dc:	4a12      	ldr	r2, [pc, #72]	@ (8005428 <HAL_TIM_Base_Start_IT+0x70>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_TIM_Base_Start_IT+0x52>
 80053e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00f      	beq.n	800540a <HAL_TIM_Base_Start_IT+0x52>
 80053ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00b      	beq.n	800540a <HAL_TIM_Base_Start_IT+0x52>
 80053f2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d007      	beq.n	800540a <HAL_TIM_Base_Start_IT+0x52>
 80053fa:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <HAL_TIM_Base_Start_IT+0x52>
 8005402:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005406:	4293      	cmp	r3, r2
 8005408:	d104      	bne.n	8005414 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005410:	2a06      	cmp	r2, #6
 8005412:	d003      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800541c:	2000      	movs	r0, #0
 800541e:	4770      	bx	lr
    return HAL_ERROR;
 8005420:	2001      	movs	r0, #1
}
 8005422:	4770      	bx	lr
 8005424:	40010000 	.word	0x40010000
 8005428:	40000400 	.word	0x40000400

0800542c <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop

08005430 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005430:	2800      	cmp	r0, #0
 8005432:	f000 8086 	beq.w	8005542 <HAL_TIM_PWM_Init+0x112>
{
 8005436:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005438:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800543c:	4604      	mov	r4, r0
 800543e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005442:	2b00      	cmp	r3, #0
 8005444:	d078      	beq.n	8005538 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005446:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005448:	493f      	ldr	r1, [pc, #252]	@ (8005548 <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 800544a:	2302      	movs	r3, #2
 800544c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005450:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005452:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005454:	d05c      	beq.n	8005510 <HAL_TIM_PWM_Init+0xe0>
 8005456:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800545a:	d030      	beq.n	80054be <HAL_TIM_PWM_Init+0x8e>
 800545c:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 8005460:	428a      	cmp	r2, r1
 8005462:	d02c      	beq.n	80054be <HAL_TIM_PWM_Init+0x8e>
 8005464:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005468:	428a      	cmp	r2, r1
 800546a:	d028      	beq.n	80054be <HAL_TIM_PWM_Init+0x8e>
 800546c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005470:	428a      	cmp	r2, r1
 8005472:	d024      	beq.n	80054be <HAL_TIM_PWM_Init+0x8e>
 8005474:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8005478:	428a      	cmp	r2, r1
 800547a:	d049      	beq.n	8005510 <HAL_TIM_PWM_Init+0xe0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800547c:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 8005480:	428a      	cmp	r2, r1
 8005482:	d020      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x96>
 8005484:	4931      	ldr	r1, [pc, #196]	@ (800554c <HAL_TIM_PWM_Init+0x11c>)
 8005486:	428a      	cmp	r2, r1
 8005488:	d01d      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x96>
 800548a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800548e:	428a      	cmp	r2, r1
 8005490:	d019      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x96>
 8005492:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 8005496:	428a      	cmp	r2, r1
 8005498:	d015      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x96>
 800549a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800549e:	428a      	cmp	r2, r1
 80054a0:	d011      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x96>
 80054a2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80054a6:	428a      	cmp	r2, r1
 80054a8:	d00d      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x96>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054aa:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 80054ac:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ae:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054b4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80054b6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80054ba:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054bc:	e010      	b.n	80054e0 <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 80054be:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80054c4:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054c6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80054d8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80054da:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054dc:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80054de:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80054e0:	2301      	movs	r3, #1
 80054e2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e4:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80054ec:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80054f0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80054f4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005500:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005504:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005508:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800550c:	2000      	movs	r0, #0
}
 800550e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005510:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005512:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005518:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800551a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800551e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005520:	69a1      	ldr	r1, [r4, #24]
 8005522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005526:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005528:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800552a:	68e3      	ldr	r3, [r4, #12]
 800552c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800552e:	6863      	ldr	r3, [r4, #4]
 8005530:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005532:	6963      	ldr	r3, [r4, #20]
 8005534:	6313      	str	r3, [r2, #48]	@ 0x30
 8005536:	e7d3      	b.n	80054e0 <HAL_TIM_PWM_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8005538:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800553c:	f7ff ff76 	bl	800542c <HAL_TIM_PWM_MspInit>
 8005540:	e781      	b.n	8005446 <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8005542:	2001      	movs	r0, #1
}
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40010000 	.word	0x40010000
 800554c:	40014400 	.word	0x40014400

08005550 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005550:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005554:	2b01      	cmp	r3, #1
 8005556:	f000 80c6 	beq.w	80056e6 <HAL_TIM_PWM_ConfigChannel+0x196>
 800555a:	2301      	movs	r3, #1
{
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8005560:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005564:	2a0c      	cmp	r2, #12
 8005566:	d808      	bhi.n	800557a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8005568:	e8df f002 	tbb	[pc, r2]
 800556c:	0707073e 	.word	0x0707073e
 8005570:	07070767 	.word	0x07070767
 8005574:	07070793 	.word	0x07070793
 8005578:	0c          	.byte	0x0c
 8005579:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800557a:	2300      	movs	r3, #0
 800557c:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8005580:	2001      	movs	r0, #1
}
 8005582:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005584:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005586:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800558e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005590:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005592:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005594:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005596:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800559a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800559e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80055a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055a4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a8:	4d6a      	ldr	r5, [pc, #424]	@ (8005754 <HAL_TIM_PWM_ConfigChannel+0x204>)
 80055aa:	42ab      	cmp	r3, r5
 80055ac:	f000 80bc 	beq.w	8005728 <HAL_TIM_PWM_ConfigChannel+0x1d8>
 80055b0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80055b4:	42ab      	cmp	r3, r5
 80055b6:	f000 80b7 	beq.w	8005728 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ba:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055bc:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055be:	6848      	ldr	r0, [r1, #4]
 80055c0:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055c4:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055c6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80055dc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80055de:	2300      	movs	r3, #0
 80055e0:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80055e4:	2000      	movs	r0, #0
}
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055e8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80055ea:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ec:	6a1a      	ldr	r2, [r3, #32]
 80055ee:	f022 0201 	bic.w	r2, r2, #1
 80055f2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80055f4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80055f6:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80055f8:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055fa:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80055fe:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8005600:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005602:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8005606:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005608:	4d52      	ldr	r5, [pc, #328]	@ (8005754 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800560a:	42ab      	cmp	r3, r5
 800560c:	d06d      	beq.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x19a>
 800560e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005612:	42ab      	cmp	r3, r5
 8005614:	d069      	beq.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 8005616:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005618:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800561a:	6848      	ldr	r0, [r1, #4]
 800561c:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 800561e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005620:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005622:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005624:	f042 0208 	orr.w	r2, r2, #8
 8005628:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800562a:	699a      	ldr	r2, [r3, #24]
 800562c:	f022 0204 	bic.w	r2, r2, #4
 8005630:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	430a      	orrs	r2, r1
 8005636:	619a      	str	r2, [r3, #24]
      break;
 8005638:	e7d1      	b.n	80055de <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800563a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800563c:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800563e:	6a1a      	ldr	r2, [r3, #32]
 8005640:	f022 0210 	bic.w	r2, r2, #16
 8005644:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005646:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005648:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800564a:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800564c:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005650:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005654:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005656:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800565a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800565e:	4d3d      	ldr	r5, [pc, #244]	@ (8005754 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8005660:	42ab      	cmp	r3, r5
 8005662:	d051      	beq.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x1b8>
 8005664:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005668:	42ab      	cmp	r3, r5
 800566a:	d04d      	beq.n	8005708 <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CR2 = tmpcr2;
 800566c:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800566e:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005670:	6848      	ldr	r0, [r1, #4]
 8005672:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005674:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005676:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005678:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800567a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800567e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800568e:	619a      	str	r2, [r3, #24]
      break;
 8005690:	e7a5      	b.n	80055de <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005692:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005694:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005696:	6a1a      	ldr	r2, [r3, #32]
 8005698:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800569c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800569e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80056a0:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80056a2:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a4:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80056a8:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056aa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80056ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056b0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056b4:	4d27      	ldr	r5, [pc, #156]	@ (8005754 <HAL_TIM_PWM_ConfigChannel+0x204>)
 80056b6:	42ab      	cmp	r3, r5
 80056b8:	d03c      	beq.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 80056ba:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80056be:	42ab      	cmp	r3, r5
 80056c0:	d038      	beq.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x1e4>
  TIMx->CR2 = tmpcr2;
 80056c2:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80056c4:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80056c6:	6848      	ldr	r0, [r1, #4]
 80056c8:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80056ca:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056cc:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ce:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056d0:	f042 0208 	orr.w	r2, r2, #8
 80056d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	f022 0204 	bic.w	r2, r2, #4
 80056dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	61da      	str	r2, [r3, #28]
      break;
 80056e4:	e77b      	b.n	80055de <HAL_TIM_PWM_ConfigChannel+0x8e>
  __HAL_LOCK(htim);
 80056e6:	2002      	movs	r0, #2
}
 80056e8:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80056ea:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80056ec:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80056f0:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80056f2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056f6:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80056fa:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80056fe:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005702:	ea4e 0404 	orr.w	r4, lr, r4
 8005706:	e786      	b.n	8005616 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005708:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800570a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800570e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005712:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005716:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800571a:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800571e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005722:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 8005726:	e7a1      	b.n	800566c <HAL_TIM_PWM_ConfigChannel+0x11c>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005728:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800572a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800572e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005732:	e742      	b.n	80055ba <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005734:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005736:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800573a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800573e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005742:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005746:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800574a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800574e:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 8005752:	e7b6      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005754:	40010000 	.word	0x40010000

08005758 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005758:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d071      	beq.n	8005844 <HAL_TIM_ConfigClockSource+0xec>
 8005760:	4602      	mov	r2, r0
{
 8005762:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8005766:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800576c:	2001      	movs	r0, #1
 800576e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005772:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005774:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005778:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800577c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800577e:	680b      	ldr	r3, [r1, #0]
 8005780:	2b60      	cmp	r3, #96	@ 0x60
 8005782:	d061      	beq.n	8005848 <HAL_TIM_ConfigClockSource+0xf0>
 8005784:	d824      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x78>
 8005786:	2b40      	cmp	r3, #64	@ 0x40
 8005788:	d077      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x122>
 800578a:	d94a      	bls.n	8005822 <HAL_TIM_ConfigClockSource+0xca>
 800578c:	2b50      	cmp	r3, #80	@ 0x50
 800578e:	d117      	bne.n	80057c0 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005790:	684b      	ldr	r3, [r1, #4]
 8005792:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005794:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005796:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800579a:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579c:	6a23      	ldr	r3, [r4, #32]
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a4:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057aa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ae:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80057b0:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b2:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057b8:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057bc:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80057be:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80057c2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80057c4:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80057c8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80057cc:	bc30      	pop	{r4, r5}
 80057ce:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80057d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057d4:	d0f3      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x66>
 80057d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057da:	d110      	bne.n	80057fe <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057dc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80057e0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057e2:	432b      	orrs	r3, r5
 80057e4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e6:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80057ee:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f2:	68a3      	ldr	r3, [r4, #8]
 80057f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057f8:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80057fa:	2000      	movs	r0, #0
 80057fc:	e7e0      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80057fe:	2b70      	cmp	r3, #112	@ 0x70
 8005800:	d1de      	bne.n	80057c0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005802:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005806:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005808:	432b      	orrs	r3, r5
 800580a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800580c:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005810:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005814:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005816:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005818:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800581a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800581e:	60a3      	str	r3, [r4, #8]
      break;
 8005820:	e7cd      	b.n	80057be <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8005822:	2b20      	cmp	r3, #32
 8005824:	d002      	beq.n	800582c <HAL_TIM_ConfigClockSource+0xd4>
 8005826:	d909      	bls.n	800583c <HAL_TIM_ConfigClockSource+0xe4>
 8005828:	2b30      	cmp	r3, #48	@ 0x30
 800582a:	d1c9      	bne.n	80057c0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800582c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800582e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005832:	430b      	orrs	r3, r1
 8005834:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8005838:	60a3      	str	r3, [r4, #8]
}
 800583a:	e7c0      	b.n	80057be <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800583c:	f033 0110 	bics.w	r1, r3, #16
 8005840:	d1be      	bne.n	80057c0 <HAL_TIM_ConfigClockSource+0x68>
 8005842:	e7f3      	b.n	800582c <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8005844:	2002      	movs	r0, #2
}
 8005846:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005848:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800584a:	6848      	ldr	r0, [r1, #4]
 800584c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584e:	f023 0310 	bic.w	r3, r3, #16
 8005852:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005854:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8005856:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005858:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800585c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005860:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005864:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005868:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800586a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800586c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800586e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005872:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005876:	60a3      	str	r3, [r4, #8]
}
 8005878:	e7a1      	b.n	80057be <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800587a:	684b      	ldr	r3, [r1, #4]
 800587c:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800587e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005880:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005884:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005886:	6a23      	ldr	r3, [r4, #32]
 8005888:	f023 0301 	bic.w	r3, r3, #1
 800588c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005890:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005894:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005898:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800589a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800589c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800589e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058a2:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80058a6:	60a3      	str	r3, [r4, #8]
}
 80058a8:	e789      	b.n	80057be <HAL_TIM_ConfigClockSource+0x66>
 80058aa:	bf00      	nop

080058ac <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80058ac:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80058b0:	2a01      	cmp	r2, #1
 80058b2:	d050      	beq.n	8005956 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80058b4:	4603      	mov	r3, r0
{
 80058b6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80058ba:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 80058c0:	2001      	movs	r0, #1
 80058c2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80058c6:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80058c8:	6848      	ldr	r0, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80058ca:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058cc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80058d0:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80058d2:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80058d6:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 80058d8:	2850      	cmp	r0, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 80058da:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80058dc:	d060      	beq.n	80059a0 <HAL_TIM_SlaveConfigSynchro+0xf4>
 80058de:	d90f      	bls.n	8005900 <HAL_TIM_SlaveConfigSynchro+0x54>
 80058e0:	2860      	cmp	r0, #96	@ 0x60
 80058e2:	d03a      	beq.n	800595a <HAL_TIM_SlaveConfigSynchro+0xae>
 80058e4:	2870      	cmp	r0, #112	@ 0x70
 80058e6:	d10e      	bne.n	8005906 <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058e8:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80058ec:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ee:	432a      	orrs	r2, r5
 80058f0:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f2:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80058fa:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80058fc:	60a2      	str	r2, [r4, #8]
 80058fe:	e00f      	b.n	8005920 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8005900:	2840      	cmp	r0, #64	@ 0x40
 8005902:	d03d      	beq.n	8005980 <HAL_TIM_SlaveConfigSynchro+0xd4>
 8005904:	d907      	bls.n	8005916 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 8005906:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005908:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 800590a:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005912:	bc30      	pop	{r4, r5}
 8005914:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005916:	2820      	cmp	r0, #32
 8005918:	d002      	beq.n	8005920 <HAL_TIM_SlaveConfigSynchro+0x74>
 800591a:	d912      	bls.n	8005942 <HAL_TIM_SlaveConfigSynchro+0x96>
 800591c:	2830      	cmp	r0, #48	@ 0x30
 800591e:	d1f2      	bne.n	8005906 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005920:	68e2      	ldr	r2, [r4, #12]
 8005922:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005926:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005928:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 800592a:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 800592c:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800592e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005932:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005934:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005938:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 800593c:	4608      	mov	r0, r1
}
 800593e:	bc30      	pop	{r4, r5}
 8005940:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005942:	f030 0210 	bics.w	r2, r0, #16
 8005946:	d0eb      	beq.n	8005920 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8005948:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 800594a:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 800594c:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005954:	e7dd      	b.n	8005912 <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8005956:	2002      	movs	r0, #2
}
 8005958:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595a:	6a22      	ldr	r2, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800595c:	6888      	ldr	r0, [r1, #8]
 800595e:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005960:	f022 0210 	bic.w	r2, r2, #16
 8005964:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005966:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8005968:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800596a:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800596e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005972:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005976:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800597a:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800597c:	6222      	str	r2, [r4, #32]
 800597e:	e7cf      	b.n	8005920 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005980:	2d05      	cmp	r5, #5
 8005982:	d0c0      	beq.n	8005906 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8005984:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005986:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005988:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005990:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005992:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005996:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800599a:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 800599c:	6220      	str	r0, [r4, #32]
      break;
 800599e:	e7bf      	b.n	8005920 <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a0:	688a      	ldr	r2, [r1, #8]
 80059a2:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 80059a4:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059a6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80059aa:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ac:	6a22      	ldr	r2, [r4, #32]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b4:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059b6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059ba:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80059be:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 80059c0:	6221      	str	r1, [r4, #32]
 80059c2:	e7ad      	b.n	8005920 <HAL_TIM_SlaveConfigSynchro+0x74>

080059c4 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop

080059c8 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop

080059cc <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop

080059d0 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop

080059d4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059d4:	6803      	ldr	r3, [r0, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	0791      	lsls	r1, r2, #30
{
 80059da:	b510      	push	{r4, lr}
 80059dc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059de:	d502      	bpl.n	80059e6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	0792      	lsls	r2, r2, #30
 80059e4:	d45f      	bmi.n	8005aa6 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	0750      	lsls	r0, r2, #29
 80059ea:	d502      	bpl.n	80059f2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	0751      	lsls	r1, r2, #29
 80059f0:	d446      	bmi.n	8005a80 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	0712      	lsls	r2, r2, #28
 80059f6:	d502      	bpl.n	80059fe <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	0710      	lsls	r0, r2, #28
 80059fc:	d42e      	bmi.n	8005a5c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	06d2      	lsls	r2, r2, #27
 8005a02:	d502      	bpl.n	8005a0a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	06d0      	lsls	r0, r2, #27
 8005a08:	d418      	bmi.n	8005a3c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	07d1      	lsls	r1, r2, #31
 8005a0e:	d502      	bpl.n	8005a16 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	07d2      	lsls	r2, r2, #31
 8005a14:	d45d      	bmi.n	8005ad2 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	0610      	lsls	r0, r2, #24
 8005a1a:	d502      	bpl.n	8005a22 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	0611      	lsls	r1, r2, #24
 8005a20:	d45f      	bmi.n	8005ae2 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	0652      	lsls	r2, r2, #25
 8005a26:	d502      	bpl.n	8005a2e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	0650      	lsls	r0, r2, #25
 8005a2c:	d461      	bmi.n	8005af2 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	0691      	lsls	r1, r2, #26
 8005a32:	d502      	bpl.n	8005a3a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	0692      	lsls	r2, r2, #26
 8005a38:	d443      	bmi.n	8005ac2 <HAL_TIM_IRQHandler+0xee>
}
 8005a3a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a3c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a40:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a42:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a44:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a4e:	d064      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a50:	f7ff ffba 	bl	80059c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a54:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a56:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a58:	7722      	strb	r2, [r4, #28]
 8005a5a:	e7d6      	b.n	8005a0a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a5c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a60:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a62:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a64:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a6c:	d152      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	f7ff ffa9 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a72:	4620      	mov	r0, r4
 8005a74:	f7ff ffaa 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a78:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a7a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7c:	7722      	strb	r2, [r4, #28]
 8005a7e:	e7be      	b.n	80059fe <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a80:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a84:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a86:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a88:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005a90:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a92:	d13c      	bne.n	8005b0e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a94:	f7ff ff96 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f7ff ff97 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aa0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa2:	7722      	strb	r2, [r4, #28]
 8005aa4:	e7a5      	b.n	80059f2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aa6:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aaa:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aac:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aae:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	079b      	lsls	r3, r3, #30
 8005ab4:	d025      	beq.n	8005b02 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	f7ff ff87 	bl	80059c8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005abc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	7722      	strb	r2, [r4, #28]
 8005ac0:	e791      	b.n	80059e6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ac2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005ac6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ac8:	611a      	str	r2, [r3, #16]
}
 8005aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005ace:	f000 b9dd 	b.w	8005e8c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ad2:	f06f 0201 	mvn.w	r2, #1
 8005ad6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f7fc f917 	bl	8001d0c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	e799      	b.n	8005a16 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ae2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ae6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 f9d1 	bl	8005e90 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	e797      	b.n	8005a22 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005af2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005af6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005af8:	4620      	mov	r0, r4
 8005afa:	f7ff ff69 	bl	80059d0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	e795      	b.n	8005a2e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b02:	f7ff ff5f 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b06:	4620      	mov	r0, r4
 8005b08:	f7ff ff60 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
 8005b0c:	e7d5      	b.n	8005aba <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0e:	f7ff ff5b 	bl	80059c8 <HAL_TIM_IC_CaptureCallback>
 8005b12:	e7c4      	b.n	8005a9e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b14:	f7ff ff58 	bl	80059c8 <HAL_TIM_IC_CaptureCallback>
 8005b18:	e7ae      	b.n	8005a78 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1a:	f7ff ff53 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f7ff ff54 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
 8005b24:	e796      	b.n	8005a54 <HAL_TIM_IRQHandler+0x80>
 8005b26:	bf00      	nop

08005b28 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b28:	4a35      	ldr	r2, [pc, #212]	@ (8005c00 <TIM_Base_SetConfig+0xd8>)
  tmpcr1 = TIMx->CR1;
 8005b2a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b2c:	4290      	cmp	r0, r2
{
 8005b2e:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b30:	d04d      	beq.n	8005bce <TIM_Base_SetConfig+0xa6>
 8005b32:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005b36:	d034      	beq.n	8005ba2 <TIM_Base_SetConfig+0x7a>
 8005b38:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005b3c:	4290      	cmp	r0, r2
 8005b3e:	d030      	beq.n	8005ba2 <TIM_Base_SetConfig+0x7a>
 8005b40:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b44:	4290      	cmp	r0, r2
 8005b46:	d02c      	beq.n	8005ba2 <TIM_Base_SetConfig+0x7a>
 8005b48:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b4c:	4290      	cmp	r0, r2
 8005b4e:	d028      	beq.n	8005ba2 <TIM_Base_SetConfig+0x7a>
 8005b50:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005b54:	4290      	cmp	r0, r2
 8005b56:	d03a      	beq.n	8005bce <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b58:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8005b5c:	4290      	cmp	r0, r2
 8005b5e:	d024      	beq.n	8005baa <TIM_Base_SetConfig+0x82>
 8005b60:	4a28      	ldr	r2, [pc, #160]	@ (8005c04 <TIM_Base_SetConfig+0xdc>)
 8005b62:	4290      	cmp	r0, r2
 8005b64:	d021      	beq.n	8005baa <TIM_Base_SetConfig+0x82>
 8005b66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b6a:	4290      	cmp	r0, r2
 8005b6c:	d01d      	beq.n	8005baa <TIM_Base_SetConfig+0x82>
 8005b6e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8005b72:	4290      	cmp	r0, r2
 8005b74:	d019      	beq.n	8005baa <TIM_Base_SetConfig+0x82>
 8005b76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b7a:	4290      	cmp	r0, r2
 8005b7c:	d015      	beq.n	8005baa <TIM_Base_SetConfig+0x82>
 8005b7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b82:	4290      	cmp	r0, r2
 8005b84:	d011      	beq.n	8005baa <TIM_Base_SetConfig+0x82>
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b86:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8005b88:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b8a:	6949      	ldr	r1, [r1, #20]
 8005b8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b90:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005b92:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8005b94:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b96:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b98:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8005b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->EGR = TIM_EGR_UG;
 8005b9e:	6143      	str	r3, [r0, #20]
}
 8005ba0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8005ba2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ba8:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005baa:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bac:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bb8:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bba:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8005bbc:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8005bbe:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8005bc0:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc2:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005bc4:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8005bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->EGR = TIM_EGR_UG;
 8005bca:	6143      	str	r3, [r0, #20]
}
 8005bcc:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8005bce:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bd0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005bd6:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bdc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bde:	694a      	ldr	r2, [r1, #20]
}
 8005be0:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005be4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005be8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005bea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bec:	688b      	ldr	r3, [r1, #8]
 8005bee:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005bf0:	680b      	ldr	r3, [r1, #0]
 8005bf2:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf4:	690b      	ldr	r3, [r1, #16]
 8005bf6:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	6143      	str	r3, [r0, #20]
}
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40010000 	.word	0x40010000
 8005c04:	40014400 	.word	0x40014400

08005c08 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c08:	6a03      	ldr	r3, [r0, #32]
 8005c0a:	f023 0310 	bic.w	r3, r3, #16
 8005c0e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005c10:	6a03      	ldr	r3, [r0, #32]
{
 8005c12:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8005c14:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005c16:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c1a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c1e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c22:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005c24:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c2c:	4d0e      	ldr	r5, [pc, #56]	@ (8005c68 <TIM_OC2_SetConfig+0x60>)
 8005c2e:	42a8      	cmp	r0, r5
 8005c30:	d00a      	beq.n	8005c48 <TIM_OC2_SetConfig+0x40>
 8005c32:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005c36:	42a8      	cmp	r0, r5
 8005c38:	d006      	beq.n	8005c48 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 8005c3a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005c3c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005c3e:	6182      	str	r2, [r0, #24]
}
 8005c40:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8005c42:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005c44:	6203      	str	r3, [r0, #32]
}
 8005c46:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c48:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c4e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c52:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c56:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c5a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c62:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 8005c66:	e7e8      	b.n	8005c3a <TIM_OC2_SetConfig+0x32>
 8005c68:	40010000 	.word	0x40010000

08005c6c <TIM_TI1_SetConfig>:
{
 8005c6c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c6e:	6a04      	ldr	r4, [r0, #32]
 8005c70:	f024 0401 	bic.w	r4, r4, #1
 8005c74:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c76:	4c1b      	ldr	r4, [pc, #108]	@ (8005ce4 <TIM_TI1_SetConfig+0x78>)
  tmpccmr1 = TIMx->CCMR1;
 8005c78:	6985      	ldr	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8005c7a:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c7c:	42a0      	cmp	r0, r4
{
 8005c7e:	4694      	mov	ip, r2
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c80:	d01c      	beq.n	8005cbc <TIM_TI1_SetConfig+0x50>
 8005c82:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005c86:	d019      	beq.n	8005cbc <TIM_TI1_SetConfig+0x50>
 8005c88:	4a17      	ldr	r2, [pc, #92]	@ (8005ce8 <TIM_TI1_SetConfig+0x7c>)
 8005c8a:	4290      	cmp	r0, r2
 8005c8c:	d016      	beq.n	8005cbc <TIM_TI1_SetConfig+0x50>
 8005c8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c92:	4290      	cmp	r0, r2
 8005c94:	d012      	beq.n	8005cbc <TIM_TI1_SetConfig+0x50>
 8005c96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c9a:	4290      	cmp	r0, r2
 8005c9c:	d00e      	beq.n	8005cbc <TIM_TI1_SetConfig+0x50>
 8005c9e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005ca2:	4290      	cmp	r0, r2
 8005ca4:	d00a      	beq.n	8005cbc <TIM_TI1_SetConfig+0x50>
 8005ca6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8005caa:	4290      	cmp	r0, r2
 8005cac:	d006      	beq.n	8005cbc <TIM_TI1_SetConfig+0x50>
 8005cae:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005cb2:	4290      	cmp	r0, r2
 8005cb4:	d002      	beq.n	8005cbc <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cb6:	f045 0201 	orr.w	r2, r5, #1
 8005cba:	e003      	b.n	8005cc4 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cbc:	f025 0203 	bic.w	r2, r5, #3
    tmpccmr1 |= TIM_ICSelection;
 8005cc0:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cc4:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cc6:	f026 0c0a 	bic.w	ip, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cca:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cce:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cd0:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cd4:	4313      	orrs	r3, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cd6:	ea41 010c 	orr.w	r1, r1, ip
  TIMx->CCMR1 = tmpccmr1;
 8005cda:	6183      	str	r3, [r0, #24]
}
 8005cdc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8005cde:	6201      	str	r1, [r0, #32]
}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40000400 	.word	0x40000400

08005cec <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop

08005cf0 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d05f      	beq.n	8005db4 <HAL_TIMEx_HallSensor_Init+0xc4>
{
 8005cf4:	b530      	push	{r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
{
 8005cfa:	b089      	sub	sp, #36	@ 0x24
 8005cfc:	460d      	mov	r5, r1
 8005cfe:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005d00:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d050      	beq.n	8005daa <HAL_TIMEx_HallSensor_Init+0xba>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d08:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d10:	f851 0b04 	ldr.w	r0, [r1], #4
 8005d14:	f7ff ff08 	bl	8005b28 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005d18:	68ab      	ldr	r3, [r5, #8]
 8005d1a:	6829      	ldr	r1, [r5, #0]
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	2203      	movs	r2, #3
 8005d20:	f7ff ffa4 	bl	8005c6c <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d24:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005d26:	6869      	ldr	r1, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d28:	6983      	ldr	r3, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005d2a:	68ea      	ldr	r2, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d2c:	f023 030c 	bic.w	r3, r3, #12
 8005d30:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005d32:	6983      	ldr	r3, [r0, #24]
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005d38:	6843      	ldr	r3, [r0, #4]
 8005d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d3e:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005d40:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005d42:	9202      	str	r2, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d48:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005d4a:	6883      	ldr	r3, [r0, #8]
 8005d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d50:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005d52:	6883      	ldr	r3, [r0, #8]
 8005d54:	f023 0307 	bic.w	r3, r3, #7
 8005d58:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005d5a:	6883      	ldr	r3, [r0, #8]
 8005d5c:	f043 0304 	orr.w	r3, r3, #4
 8005d60:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005d62:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005d64:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005d66:	2370      	movs	r3, #112	@ 0x70
 8005d68:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005d6a:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d6e:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005d72:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005d74:	f7ff ff48 	bl	8005c08 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005d78:	6822      	ldr	r2, [r4, #0]
 8005d7a:	6851      	ldr	r1, [r2, #4]
 8005d7c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005d80:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005d82:	6851      	ldr	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d84:	2301      	movs	r3, #1
  return HAL_OK;
 8005d86:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005d88:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 8005d8c:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d8e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d92:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d96:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d9a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8005da2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005da6:	b009      	add	sp, #36	@ 0x24
 8005da8:	bd30      	pop	{r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8005daa:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005dae:	f7ff ff9d 	bl	8005cec <HAL_TIMEx_HallSensor_MspInit>
 8005db2:	e7a9      	b.n	8005d08 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8005db4:	2001      	movs	r0, #1
}
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005db8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005dbc:	2a01      	cmp	r2, #1
 8005dbe:	d037      	beq.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8005dc0:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc2:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	2002      	movs	r0, #2
{
 8005dc6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005dcc:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dce:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005dd0:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd2:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd6:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dda:	4816      	ldr	r0, [pc, #88]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8005ddc:	4282      	cmp	r2, r0
 8005dde:	d01a      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005de0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005de4:	d017      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005de6:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8005dea:	4282      	cmp	r2, r0
 8005dec:	d013      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005dee:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005df2:	4282      	cmp	r2, r0
 8005df4:	d00f      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005df6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005dfa:	4282      	cmp	r2, r0
 8005dfc:	d00b      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005dfe:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8005e02:	4282      	cmp	r2, r0
 8005e04:	d007      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005e06:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8005e0a:	4282      	cmp	r2, r0
 8005e0c:	d003      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005e0e:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8005e12:	4282      	cmp	r2, r0
 8005e14:	d104      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e16:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e18:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e1c:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e1e:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005e20:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005e28:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005e2c:	bc30      	pop	{r4, r5}
 8005e2e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005e30:	2002      	movs	r0, #2
}
 8005e32:	4770      	bx	lr
 8005e34:	40010000 	.word	0x40010000

08005e38 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e38:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d023      	beq.n	8005e88 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8005e40:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e42:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e4e:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e50:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e56:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e5c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e5e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e64:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e66:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e68:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e6e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e74:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8005e76:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e78:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8005e7a:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005e7c:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005e80:	4608      	mov	r0, r1
}
 8005e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e86:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005e88:	2002      	movs	r0, #2
}
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop

08005e90 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop

08005e94 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e94:	2800      	cmp	r0, #0
 8005e96:	f000 8086 	beq.w	8005fa6 <HAL_UART_Init+0x112>
{
 8005e9a:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d078      	beq.n	8005f9c <HAL_UART_Init+0x108>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eaa:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eac:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8005eae:	2224      	movs	r2, #36	@ 0x24
 8005eb0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eba:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ebc:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ebe:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec0:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005ec4:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ec6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec8:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eca:	4302      	orrs	r2, r0
 8005ecc:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005ece:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ed0:	4302      	orrs	r2, r0
 8005ed2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005ed4:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8005ed8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005edc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ee2:	695a      	ldr	r2, [r3, #20]
 8005ee4:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ee6:	4931      	ldr	r1, [pc, #196]	@ (8005fac <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ee8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005eec:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005eee:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ef0:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ef2:	d035      	beq.n	8005f60 <HAL_UART_Init+0xcc>
 8005ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb0 <HAL_UART_Init+0x11c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d032      	beq.n	8005f60 <HAL_UART_Init+0xcc>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005efa:	f7fe ff47 	bl	8004d8c <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efe:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f00:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f02:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f06:	e9d4 5300 	ldrd	r5, r3, [r4]
 8005f0a:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f0e:	d02a      	beq.n	8005f66 <HAL_UART_Init+0xd2>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f10:	009a      	lsls	r2, r3, #2
 8005f12:	0f9b      	lsrs	r3, r3, #30
 8005f14:	f7fa fe60 	bl	8000bd8 <__aeabi_uldivmod>
 8005f18:	4a26      	ldr	r2, [pc, #152]	@ (8005fb4 <HAL_UART_Init+0x120>)
 8005f1a:	fba2 1300 	umull	r1, r3, r2, r0
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	2164      	movs	r1, #100	@ 0x64
 8005f22:	fb01 0013 	mls	r0, r1, r3, r0
 8005f26:	0100      	lsls	r0, r0, #4
 8005f28:	3032      	adds	r0, #50	@ 0x32
 8005f2a:	fba2 2000 	umull	r2, r0, r2, r0
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8005f34:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f36:	692b      	ldr	r3, [r5, #16]
 8005f38:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8005f3c:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f3e:	696b      	ldr	r3, [r5, #20]
 8005f40:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8005f44:	616b      	str	r3, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8005f46:	68eb      	ldr	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8005f4a:	2220      	movs	r2, #32
  __HAL_UART_ENABLE(huart);
 8005f4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005f50:	60eb      	str	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f52:	6421      	str	r1, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f54:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f58:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  return HAL_OK;
 8005f5c:	4608      	mov	r0, r1
}
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f60:	f7fe ff24 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 8005f64:	e7cb      	b.n	8005efe <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f66:	18da      	adds	r2, r3, r3
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	415b      	adcs	r3, r3
 8005f6e:	f7fa fe33 	bl	8000bd8 <__aeabi_uldivmod>
 8005f72:	4a10      	ldr	r2, [pc, #64]	@ (8005fb4 <HAL_UART_Init+0x120>)
 8005f74:	fba2 3100 	umull	r3, r1, r2, r0
 8005f78:	0949      	lsrs	r1, r1, #5
 8005f7a:	2364      	movs	r3, #100	@ 0x64
 8005f7c:	fb03 0311 	mls	r3, r3, r1, r0
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	3332      	adds	r3, #50	@ 0x32
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8005f8c:	091b      	lsrs	r3, r3, #4
 8005f8e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005f92:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f96:	4413      	add	r3, r2
 8005f98:	60ab      	str	r3, [r5, #8]
 8005f9a:	e7cc      	b.n	8005f36 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8005f9c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 8005fa0:	f7fd fbae 	bl	8003700 <HAL_UART_MspInit>
 8005fa4:	e781      	b.n	8005eaa <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8005fa6:	2001      	movs	r0, #1
}
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40011000 	.word	0x40011000
 8005fb0:	40011400 	.word	0x40011400
 8005fb4:	51eb851f 	.word	0x51eb851f

08005fb8 <HAL_UART_DeInit>:
  if (huart == NULL)
 8005fb8:	b1b0      	cbz	r0, 8005fe8 <HAL_UART_DeInit+0x30>
  __HAL_UART_DISABLE(huart);
 8005fba:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005fbc:	2324      	movs	r3, #36	@ 0x24
{
 8005fbe:	b510      	push	{r4, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005fc0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 8005fc4:	68d3      	ldr	r3, [r2, #12]
 8005fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fca:	4604      	mov	r4, r0
 8005fcc:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8005fce:	f7fd fbd3 	bl	8003778 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(huart);
 8005fd6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8005fda:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005fde:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 8005fe2:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe4:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8005fe6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005fe8:	2001      	movs	r0, #1
}
 8005fea:	4770      	bx	lr

08005fec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005fec:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005fee:	f001 fd2b 	bl	8007a48 <vTaskStartScheduler>
  
  return osOK;
}
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	bd08      	pop	{r3, pc}
 8005ff6:	bf00      	nop

08005ff8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	4684      	mov	ip, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ffc:	6945      	ldr	r5, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ffe:	f8dc 2010 	ldr.w	r2, [ip, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006002:	6840      	ldr	r0, [r0, #4]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006004:	f9bc e008 	ldrsh.w	lr, [ip, #8]
{
 8006008:	460b      	mov	r3, r1
 800600a:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800600c:	f8dc 1000 	ldr.w	r1, [ip]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006010:	b17d      	cbz	r5, 8006032 <osThreadCreate+0x3a>
 8006012:	f8dc 6018 	ldr.w	r6, [ip, #24]
 8006016:	b166      	cbz	r6, 8006032 <osThreadCreate+0x3a>
  if (priority != osPriorityError) {
 8006018:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800601c:	bf14      	ite	ne
 800601e:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006022:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006024:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006028:	9400      	str	r4, [sp, #0]
 800602a:	f001 fac5 	bl	80075b8 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 800602e:	b006      	add	sp, #24
 8006030:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8006032:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8006036:	bf14      	ite	ne
 8006038:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800603c:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800603e:	9400      	str	r4, [sp, #0]
 8006040:	ac05      	add	r4, sp, #20
 8006042:	b292      	uxth	r2, r2
 8006044:	9401      	str	r4, [sp, #4]
 8006046:	f001 fb67 	bl	8007718 <xTaskCreate>
 800604a:	2801      	cmp	r0, #1
  return handle;
 800604c:	bf0c      	ite	eq
 800604e:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8006050:	2000      	movne	r0, #0
}
 8006052:	b006      	add	sp, #24
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	bf00      	nop

08006058 <osThreadGetPriority>:
* @param   thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  current priority value of the thread function.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
*/
osPriority osThreadGetPriority (osThreadId thread_id)
{
 8006058:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800605a:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_uxTaskPriorityGet == 1)
  if (inHandlerMode())
 800605e:	b133      	cbz	r3, 800606e <osThreadGetPriority+0x16>
  {
    return makeCmsisPriority(uxTaskPriorityGetFromISR(thread_id));  
 8006060:	f001 fcd6 	bl	8007a10 <uxTaskPriorityGetFromISR>
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 8006064:	2806      	cmp	r0, #6
 8006066:	d806      	bhi.n	8006076 <osThreadGetPriority+0x1e>
    priority = (osPriority)((int)osPriorityIdle + (int)(fpriority - tskIDLE_PRIORITY));
 8006068:	3803      	subs	r0, #3
 800606a:	b200      	sxth	r0, r0
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
  }
#else
  return osPriorityError;
#endif
}
 800606c:	bd08      	pop	{r3, pc}
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
 800606e:	f001 fcbb 	bl	80079e8 <uxTaskPriorityGet>
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 8006072:	2806      	cmp	r0, #6
 8006074:	d9f8      	bls.n	8006068 <osThreadGetPriority+0x10>
  osPriority priority = osPriorityError;
 8006076:	2084      	movs	r0, #132	@ 0x84
}
 8006078:	bd08      	pop	{r3, pc}
 800607a:	bf00      	nop

0800607c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800607c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800607e:	2801      	cmp	r0, #1
 8006080:	bf38      	it	cc
 8006082:	2001      	movcc	r0, #1
 8006084:	f001 fc80 	bl	8007988 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006088:	2000      	movs	r0, #0
 800608a:	bd08      	pop	{r3, pc}

0800608c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800608c:	b530      	push	{r4, r5, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800608e:	e9d0 5400 	ldrd	r5, r4, [r0]
{
 8006092:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8006094:	f1a1 0201 	sub.w	r2, r1, #1
 8006098:	fab2 f282 	clz	r2, r2
 800609c:	4808      	ldr	r0, [pc, #32]	@ (80060c0 <osTimerCreate+0x34>)
{
 800609e:	b083      	sub	sp, #12
    return xTimerCreateStatic((const char *)"",
 80060a0:	0952      	lsrs	r2, r2, #5
  if(timer_def->controlblock != NULL) {
 80060a2:	b134      	cbz	r4, 80060b2 <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 80060a4:	e9cd 5400 	strd	r5, r4, [sp]
 80060a8:	2101      	movs	r1, #1
 80060aa:	f002 f9d7 	bl	800845c <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 80060ae:	b003      	add	sp, #12
 80060b0:	bd30      	pop	{r4, r5, pc}
    return xTimerCreate((const char *)"",
 80060b2:	9500      	str	r5, [sp, #0]
 80060b4:	2101      	movs	r1, #1
 80060b6:	f002 f969 	bl	800838c <xTimerCreate>
}
 80060ba:	b003      	add	sp, #12
 80060bc:	bd30      	pop	{r4, r5, pc}
 80060be:	bf00      	nop
 80060c0:	0800adc0 	.word	0x0800adc0

080060c4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80060c4:	b510      	push	{r4, lr}
 80060c6:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80060c8:	2400      	movs	r4, #0
 80060ca:	2901      	cmp	r1, #1
 80060cc:	460a      	mov	r2, r1
 80060ce:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 80060d0:	bf38      	it	cc
 80060d2:	2201      	movcc	r2, #1
 80060d4:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 80060d8:	b14b      	cbz	r3, 80060ee <osTimerStart+0x2a>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80060da:	9400      	str	r4, [sp, #0]
 80060dc:	ab03      	add	r3, sp, #12
 80060de:	2109      	movs	r1, #9
 80060e0:	f002 fa3c 	bl	800855c <xTimerGenericCommand>
 80060e4:	2801      	cmp	r0, #1
 80060e6:	d00b      	beq.n	8006100 <osTimerStart+0x3c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 80060e8:	20ff      	movs	r0, #255	@ 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 80060ea:	b004      	add	sp, #16
 80060ec:	bd10      	pop	{r4, pc}
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	2104      	movs	r1, #4
 80060f2:	f002 fa33 	bl	800855c <xTimerGenericCommand>
 80060f6:	2801      	cmp	r0, #1
 80060f8:	d1f6      	bne.n	80060e8 <osTimerStart+0x24>
  osStatus result = osOK;
 80060fa:	2000      	movs	r0, #0
}
 80060fc:	b004      	add	sp, #16
 80060fe:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8006100:	9b03      	ldr	r3, [sp, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f9      	beq.n	80060fa <osTimerStart+0x36>
 8006106:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800610a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800610e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800611a:	2000      	movs	r0, #0
  return result;
 800611c:	e7ee      	b.n	80060fc <osTimerStart+0x38>
 800611e:	bf00      	nop

08006120 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8006120:	b500      	push	{lr}
 8006122:	b085      	sub	sp, #20
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006124:	2200      	movs	r2, #0
 8006126:	9203      	str	r2, [sp, #12]
 8006128:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 800612c:	b1b3      	cbz	r3, 800615c <osTimerStop+0x3c>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800612e:	9200      	str	r2, [sp, #0]
 8006130:	ab03      	add	r3, sp, #12
 8006132:	2108      	movs	r1, #8
 8006134:	f002 fa12 	bl	800855c <xTimerGenericCommand>
 8006138:	2801      	cmp	r0, #1
 800613a:	d116      	bne.n	800616a <osTimerStop+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800613c:	9b03      	ldr	r3, [sp, #12]
 800613e:	b14b      	cbz	r3, 8006154 <osTimerStop+0x34>
 8006140:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006148:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8006154:	2000      	movs	r0, #0
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 8006156:	b005      	add	sp, #20
 8006158:	f85d fb04 	ldr.w	pc, [sp], #4
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	2103      	movs	r1, #3
 8006162:	f002 f9fb 	bl	800855c <xTimerGenericCommand>
 8006166:	2801      	cmp	r0, #1
 8006168:	d0f4      	beq.n	8006154 <osTimerStop+0x34>
      return osErrorOS;
 800616a:	20ff      	movs	r0, #255	@ 0xff
}
 800616c:	b005      	add	sp, #20
 800616e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006172:	bf00      	nop

08006174 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006178:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800617a:	f001 fd09 	bl	8007b90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800617e:	4a51      	ldr	r2, [pc, #324]	@ (80062c4 <pvPortMalloc+0x150>)
 8006180:	6815      	ldr	r5, [r2, #0]
 8006182:	2d00      	cmp	r5, #0
 8006184:	d035      	beq.n	80061f2 <pvPortMalloc+0x7e>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006186:	4b50      	ldr	r3, [pc, #320]	@ (80062c8 <pvPortMalloc+0x154>)
 8006188:	681e      	ldr	r6, [r3, #0]
 800618a:	4234      	tst	r4, r6
 800618c:	d12b      	bne.n	80061e6 <pvPortMalloc+0x72>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800618e:	b354      	cbz	r4, 80061e6 <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006190:	f104 0008 	add.w	r0, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006194:	0764      	lsls	r4, r4, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006196:	bf1c      	itt	ne
 8006198:	f020 0007 	bicne.w	r0, r0, #7
 800619c:	3008      	addne	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800619e:	b310      	cbz	r0, 80061e6 <pvPortMalloc+0x72>
 80061a0:	f8df e138 	ldr.w	lr, [pc, #312]	@ 80062dc <pvPortMalloc+0x168>
 80061a4:	f8de c000 	ldr.w	ip, [lr]
 80061a8:	4584      	cmp	ip, r0
 80061aa:	d31c      	bcc.n	80061e6 <pvPortMalloc+0x72>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80061ac:	4c47      	ldr	r4, [pc, #284]	@ (80062cc <pvPortMalloc+0x158>)
 80061ae:	6823      	ldr	r3, [r4, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061b0:	e003      	b.n	80061ba <pvPortMalloc+0x46>
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	b122      	cbz	r2, 80061c0 <pvPortMalloc+0x4c>
 80061b6:	461c      	mov	r4, r3
 80061b8:	4613      	mov	r3, r2
 80061ba:	6859      	ldr	r1, [r3, #4]
 80061bc:	4281      	cmp	r1, r0
 80061be:	d3f8      	bcc.n	80061b2 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80061c0:	42ab      	cmp	r3, r5
 80061c2:	d010      	beq.n	80061e6 <pvPortMalloc+0x72>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	6022      	str	r2, [r4, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061c8:	1a0a      	subs	r2, r1, r0
 80061ca:	2a10      	cmp	r2, #16
 80061cc:	d946      	bls.n	800625c <pvPortMalloc+0xe8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061ce:	181c      	adds	r4, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061d0:	0761      	lsls	r1, r4, #29
 80061d2:	d02c      	beq.n	800622e <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	e7fe      	b.n	80061e4 <pvPortMalloc+0x70>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061e6:	f001 fcdb 	bl	8007ba0 <xTaskResumeAll>
void *pvReturn = NULL;
 80061ea:	2400      	movs	r4, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 80061ec:	4620      	mov	r0, r4
 80061ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061f2:	4b37      	ldr	r3, [pc, #220]	@ (80062d0 <pvPortMalloc+0x15c>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061f4:	4835      	ldr	r0, [pc, #212]	@ (80062cc <pvPortMalloc+0x158>)
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061f6:	4f34      	ldr	r7, [pc, #208]	@ (80062c8 <pvPortMalloc+0x154>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061f8:	075d      	lsls	r5, r3, #29
	uxAddress -= xHeapStructSize;
 80061fa:	4d36      	ldr	r5, [pc, #216]	@ (80062d4 <pvPortMalloc+0x160>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061fc:	bf18      	it	ne
 80061fe:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006200:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006204:	bf18      	it	ne
 8006206:	f023 0307 	bicne.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800620a:	6015      	str	r5, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800620c:	4a32      	ldr	r2, [pc, #200]	@ (80062d8 <pvPortMalloc+0x164>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800620e:	6003      	str	r3, [r0, #0]
 8006210:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006212:	1aeb      	subs	r3, r5, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006214:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006216:	4a31      	ldr	r2, [pc, #196]	@ (80062dc <pvPortMalloc+0x168>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006218:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800621c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800621e:	2200      	movs	r2, #0
 8006220:	6042      	str	r2, [r0, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006222:	603e      	str	r6, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006224:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006228:	e9c1 5300 	strd	r5, r3, [r1]
}
 800622c:	e7ad      	b.n	800618a <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800622e:	6062      	str	r2, [r4, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006230:	4a26      	ldr	r2, [pc, #152]	@ (80062cc <pvPortMalloc+0x158>)
						pxBlock->xBlockSize = xWantedSize;
 8006232:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006234:	4617      	mov	r7, r2
 8006236:	6812      	ldr	r2, [r2, #0]
 8006238:	4294      	cmp	r4, r2
 800623a:	d8fb      	bhi.n	8006234 <pvPortMalloc+0xc0>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800623c:	6879      	ldr	r1, [r7, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800623e:	f8d4 8004 	ldr.w	r8, [r4, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006242:	eb07 0901 	add.w	r9, r7, r1
 8006246:	454c      	cmp	r4, r9
 8006248:	d028      	beq.n	800629c <pvPortMalloc+0x128>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800624a:	eb04 0108 	add.w	r1, r4, r8
 800624e:	428a      	cmp	r2, r1
 8006250:	d02e      	beq.n	80062b0 <pvPortMalloc+0x13c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006252:	6022      	str	r2, [r4, #0]
 8006254:	4601      	mov	r1, r0

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006256:	42a7      	cmp	r7, r4
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006258:	bf18      	it	ne
 800625a:	603c      	strne	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800625c:	481e      	ldr	r0, [pc, #120]	@ (80062d8 <pvPortMalloc+0x164>)
 800625e:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006260:	ebac 0201 	sub.w	r2, ip, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006264:	42a2      	cmp	r2, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006266:	bf38      	it	cc
 8006268:	6002      	strcc	r2, [r0, #0]
					xNumberOfSuccessfulAllocations++;
 800626a:	481d      	ldr	r0, [pc, #116]	@ (80062e0 <pvPortMalloc+0x16c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800626c:	f8ce 2000 	str.w	r2, [lr]
					xNumberOfSuccessfulAllocations++;
 8006270:	6802      	ldr	r2, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006272:	4331      	orrs	r1, r6
					pxBlock->pxNextFreeBlock = NULL;
 8006274:	2500      	movs	r5, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006276:	f103 0408 	add.w	r4, r3, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800627a:	6059      	str	r1, [r3, #4]
					xNumberOfSuccessfulAllocations++;
 800627c:	3201      	adds	r2, #1
					pxBlock->pxNextFreeBlock = NULL;
 800627e:	601d      	str	r5, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006280:	6002      	str	r2, [r0, #0]
	( void ) xTaskResumeAll();
 8006282:	f001 fc8d 	bl	8007ba0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006286:	0763      	lsls	r3, r4, #29
 8006288:	d0b0      	beq.n	80061ec <pvPortMalloc+0x78>
 800628a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	e7fe      	b.n	800629a <pvPortMalloc+0x126>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800629c:	4488      	add	r8, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800629e:	eb07 0108 	add.w	r1, r7, r8
 80062a2:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062a4:	f8c7 8004 	str.w	r8, [r7, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062a8:	d001      	beq.n	80062ae <pvPortMalloc+0x13a>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062aa:	6859      	ldr	r1, [r3, #4]
 80062ac:	e7d6      	b.n	800625c <pvPortMalloc+0xe8>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062ae:	463c      	mov	r4, r7
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062b0:	42aa      	cmp	r2, r5
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062b2:	bf1c      	itt	ne
 80062b4:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062b6:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062b8:	6022      	str	r2, [r4, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ba:	bf1c      	itt	ne
 80062bc:	4441      	addne	r1, r8
 80062be:	6061      	strne	r1, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062c0:	6859      	ldr	r1, [r3, #4]
 80062c2:	e7c8      	b.n	8006256 <pvPortMalloc+0xe2>
 80062c4:	200014e4 	.word	0x200014e4
 80062c8:	200014d0 	.word	0x200014d0
 80062cc:	200014e8 	.word	0x200014e8
 80062d0:	200014f0 	.word	0x200014f0
 80062d4:	200050e8 	.word	0x200050e8
 80062d8:	200014dc 	.word	0x200014dc
 80062dc:	200014e0 	.word	0x200014e0
 80062e0:	200014d8 	.word	0x200014d8

080062e4 <vPortFree>:
	if( pv != NULL )
 80062e4:	b1d0      	cbz	r0, 800631c <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80062e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006398 <vPortFree+0xb4>)
 80062e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	4213      	tst	r3, r2
 80062f0:	d00b      	beq.n	800630a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062f2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80062f6:	b191      	cbz	r1, 800631e <vPortFree+0x3a>
 80062f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	e7fe      	b.n	8006308 <vPortFree+0x24>
 800630a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800631a:	e7fe      	b.n	800631a <vPortFree+0x36>
 800631c:	4770      	bx	lr
{
 800631e:	b570      	push	{r4, r5, r6, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006320:	ea23 0302 	bic.w	r3, r3, r2
{
 8006324:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006326:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 800632a:	4c1c      	ldr	r4, [pc, #112]	@ (800639c <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800632c:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800632e:	f001 fc2f 	bl	8007b90 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006332:	9801      	ldr	r0, [sp, #4]
 8006334:	6822      	ldr	r2, [r4, #0]
 8006336:	f850 5c04 	ldr.w	r5, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800633a:	4b19      	ldr	r3, [pc, #100]	@ (80063a0 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 800633c:	1951      	adds	r1, r2, r5
 800633e:	6021      	str	r1, [r4, #0]
		puc -= xHeapStructSize;
 8006340:	f1a0 0208 	sub.w	r2, r0, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006344:	4619      	mov	r1, r3
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d8fb      	bhi.n	8006344 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800634c:	684e      	ldr	r6, [r1, #4]
 800634e:	198c      	adds	r4, r1, r6
 8006350:	42a2      	cmp	r2, r4
 8006352:	d011      	beq.n	8006378 <vPortFree+0x94>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006354:	eb02 0e05 	add.w	lr, r2, r5
 8006358:	4573      	cmp	r3, lr
 800635a:	d013      	beq.n	8006384 <vPortFree+0xa0>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800635c:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
 8006360:	4291      	cmp	r1, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006362:	bf18      	it	ne
 8006364:	600a      	strne	r2, [r1, #0]
					xNumberOfSuccessfulFrees++;
 8006366:	4a0f      	ldr	r2, [pc, #60]	@ (80063a4 <vPortFree+0xc0>)
 8006368:	6813      	ldr	r3, [r2, #0]
 800636a:	3301      	adds	r3, #1
 800636c:	6013      	str	r3, [r2, #0]
}
 800636e:	b002      	add	sp, #8
 8006370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				( void ) xTaskResumeAll();
 8006374:	f001 bc14 	b.w	8007ba0 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006378:	4435      	add	r5, r6
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800637a:	194a      	adds	r2, r1, r5
 800637c:	4293      	cmp	r3, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800637e:	604d      	str	r5, [r1, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006380:	d1f1      	bne.n	8006366 <vPortFree+0x82>
 8006382:	460a      	mov	r2, r1
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006384:	4808      	ldr	r0, [pc, #32]	@ (80063a8 <vPortFree+0xc4>)
 8006386:	6800      	ldr	r0, [r0, #0]
 8006388:	4283      	cmp	r3, r0
 800638a:	d003      	beq.n	8006394 <vPortFree+0xb0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800638c:	e9d3 0400 	ldrd	r0, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006390:	1963      	adds	r3, r4, r5
 8006392:	6053      	str	r3, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006394:	6010      	str	r0, [r2, #0]
 8006396:	e7e3      	b.n	8006360 <vPortFree+0x7c>
 8006398:	200014d0 	.word	0x200014d0
 800639c:	200014e0 	.word	0x200014e0
 80063a0:	200014e8 	.word	0x200014e8
 80063a4:	200014d4 	.word	0x200014d4
 80063a8:	200014e4 	.word	0x200014e4

080063ac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ac:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063b0:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063b4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063b6:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063be:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop

080063c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop

080063cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80063cc:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80063ce:	6803      	ldr	r3, [r0, #0]
{
 80063d0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063d2:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 80063d4:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063d6:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063da:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063dc:	6091      	str	r1, [r2, #8]
}
 80063de:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80063e2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80063e4:	6003      	str	r3, [r0, #0]
}
 80063e6:	4770      	bx	lr

080063e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063e8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063ea:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063ec:	1c6b      	adds	r3, r5, #1
 80063ee:	d010      	beq.n	8006412 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063f0:	f100 0308 	add.w	r3, r0, #8
 80063f4:	461c      	mov	r4, r3
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	42aa      	cmp	r2, r5
 80063fc:	d9fa      	bls.n	80063f4 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80063fe:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006400:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8006402:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006404:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006406:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006408:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800640a:	6108      	str	r0, [r1, #16]
}
 800640c:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800640e:	6002      	str	r2, [r0, #0]
}
 8006410:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006412:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006414:	6863      	ldr	r3, [r4, #4]
 8006416:	e7f2      	b.n	80063fe <vListInsert+0x16>

08006418 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006418:	6903      	ldr	r3, [r0, #16]
{
 800641a:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800641c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006420:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006422:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8006424:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006426:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006428:	bf08      	it	eq
 800642a:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800642c:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800642e:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8006432:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8006434:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8006436:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006438:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800643a:	6818      	ldr	r0, [r3, #0]
}
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop

08006440 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006440:	4808      	ldr	r0, [pc, #32]	@ (8006464 <prvPortStartFirstTask+0x24>)
 8006442:	6800      	ldr	r0, [r0, #0]
 8006444:	6800      	ldr	r0, [r0, #0]
 8006446:	f380 8808 	msr	MSP, r0
 800644a:	f04f 0000 	mov.w	r0, #0
 800644e:	f380 8814 	msr	CONTROL, r0
 8006452:	b662      	cpsie	i
 8006454:	b661      	cpsie	f
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	df00      	svc	0
 8006460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006462:	0000      	.short	0x0000
 8006464:	e000ed08 	.word	0xe000ed08

08006468 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006468:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006478 <vPortEnableVFP+0x10>
 800646c:	6801      	ldr	r1, [r0, #0]
 800646e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006472:	6001      	str	r1, [r0, #0]
 8006474:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006476:	0000      	.short	0x0000
 8006478:	e000ed88 	.word	0xe000ed88

0800647c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800647c:	4b0e      	ldr	r3, [pc, #56]	@ (80064b8 <prvTaskExitError+0x3c>)
 800647e:	681b      	ldr	r3, [r3, #0]
{
 8006480:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006482:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8006484:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8006486:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006488:	d008      	beq.n	800649c <prvTaskExitError+0x20>
 800648a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	e7fe      	b.n	800649a <prvTaskExitError+0x1e>
 800649c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80064ac:	9b01      	ldr	r3, [sp, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0fc      	beq.n	80064ac <prvTaskExitError+0x30>
}
 80064b2:	b002      	add	sp, #8
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	200005e0 	.word	0x200005e0

080064bc <pxPortInitialiseStack>:
{
 80064bc:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064c2:	4c07      	ldr	r4, [pc, #28]	@ (80064e0 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064c4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064c8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064cc:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064d0:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064d4:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 80064d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064dc:	3844      	subs	r0, #68	@ 0x44
 80064de:	4770      	bx	lr
 80064e0:	0800647d 	.word	0x0800647d
	...

080064f0 <SVC_Handler>:
	__asm volatile (
 80064f0:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <pxCurrentTCBConst2>)
 80064f2:	6819      	ldr	r1, [r3, #0]
 80064f4:	6808      	ldr	r0, [r1, #0]
 80064f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fa:	f380 8809 	msr	PSP, r0
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f04f 0000 	mov.w	r0, #0
 8006506:	f380 8811 	msr	BASEPRI, r0
 800650a:	4770      	bx	lr
 800650c:	f3af 8000 	nop.w

08006510 <pxCurrentTCBConst2>:
 8006510:	2000525c 	.word	0x2000525c

08006514 <vPortEnterCritical>:
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006524:	4a0b      	ldr	r2, [pc, #44]	@ (8006554 <vPortEnterCritical+0x40>)
 8006526:	6813      	ldr	r3, [r2, #0]
 8006528:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800652a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800652c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800652e:	d000      	beq.n	8006532 <vPortEnterCritical+0x1e>
}
 8006530:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006532:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006536:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f7      	beq.n	8006530 <vPortEnterCritical+0x1c>
 8006540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	e7fe      	b.n	8006550 <vPortEnterCritical+0x3c>
 8006552:	bf00      	nop
 8006554:	200005e0 	.word	0x200005e0

08006558 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006558:	4a08      	ldr	r2, [pc, #32]	@ (800657c <vPortExitCritical+0x24>)
 800655a:	6813      	ldr	r3, [r2, #0]
 800655c:	b943      	cbnz	r3, 8006570 <vPortExitCritical+0x18>
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	e7fe      	b.n	800656e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006570:	3b01      	subs	r3, #1
 8006572:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006574:	b90b      	cbnz	r3, 800657a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006576:	f383 8811 	msr	BASEPRI, r3
}
 800657a:	4770      	bx	lr
 800657c:	200005e0 	.word	0x200005e0

08006580 <PendSV_Handler>:
	__asm volatile
 8006580:	f3ef 8009 	mrs	r0, PSP
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	4b15      	ldr	r3, [pc, #84]	@ (80065e0 <pxCurrentTCBConst>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	f01e 0f10 	tst.w	lr, #16
 8006590:	bf08      	it	eq
 8006592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659a:	6010      	str	r0, [r2, #0]
 800659c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80065a4:	f380 8811 	msr	BASEPRI, r0
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f001 fb1c 	bl	8007bec <vTaskSwitchContext>
 80065b4:	f04f 0000 	mov.w	r0, #0
 80065b8:	f380 8811 	msr	BASEPRI, r0
 80065bc:	bc09      	pop	{r0, r3}
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	6808      	ldr	r0, [r1, #0]
 80065c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c6:	f01e 0f10 	tst.w	lr, #16
 80065ca:	bf08      	it	eq
 80065cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065d0:	f380 8809 	msr	PSP, r0
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	f3af 8000 	nop.w

080065e0 <pxCurrentTCBConst>:
 80065e0:	2000525c 	.word	0x2000525c

080065e4 <SysTick_Handler>:
{
 80065e4:	b508      	push	{r3, lr}
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80065f6:	f001 fae9 	bl	8007bcc <xTaskIncrementTick>
 80065fa:	b128      	cbz	r0, 8006608 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006604:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006608:	2300      	movs	r3, #0
 800660a:	f383 8811 	msr	BASEPRI, r3
}
 800660e:	bd08      	pop	{r3, pc}

08006610 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006610:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006614:	4a48      	ldr	r2, [pc, #288]	@ (8006738 <xPortStartScheduler+0x128>)
 8006616:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800661a:	4291      	cmp	r1, r2
 800661c:	d041      	beq.n	80066a2 <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800661e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006622:	4b46      	ldr	r3, [pc, #280]	@ (800673c <xPortStartScheduler+0x12c>)
 8006624:	429a      	cmp	r2, r3
 8006626:	d033      	beq.n	8006690 <xPortStartScheduler+0x80>
{
 8006628:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800662a:	4b45      	ldr	r3, [pc, #276]	@ (8006740 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800662c:	4c45      	ldr	r4, [pc, #276]	@ (8006744 <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800662e:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006630:	4845      	ldr	r0, [pc, #276]	@ (8006748 <xPortStartScheduler+0x138>)
{
 8006632:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006634:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800663a:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006644:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006648:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800664c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006650:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006652:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006654:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006656:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006658:	bf48      	it	mi
 800665a:	2206      	movmi	r2, #6
 800665c:	d50f      	bpl.n	800667e <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800665e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800666a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	4611      	mov	r1, r2
 8006672:	f102 32ff 	add.w	r2, r2, #4294967295
 8006676:	d4f2      	bmi.n	800665e <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006678:	2903      	cmp	r1, #3
 800667a:	d01b      	beq.n	80066b4 <xPortStartScheduler+0xa4>
 800667c:	6001      	str	r1, [r0, #0]
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	e7fe      	b.n	800668e <xPortStartScheduler+0x7e>
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066a0:	e7fe      	b.n	80066a0 <xPortStartScheduler+0x90>
 80066a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066b2:	e7fe      	b.n	80066b2 <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066b4:	9b02      	ldr	r3, [sp, #8]
 80066b6:	4a22      	ldr	r2, [pc, #136]	@ (8006740 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 80066b8:	4d24      	ldr	r5, [pc, #144]	@ (800674c <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066ba:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066be:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066c2:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066c4:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066c6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066c8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80066cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066d0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066d4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80066d8:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066dc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	uxCriticalNesting = 0;
 80066e0:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 80066e2:	f7fc fd8d 	bl	8003200 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80066e6:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 80066e8:	f7ff febe 	bl	8006468 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066ec:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80066f0:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066f4:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80066f8:	f7ff fea2 	bl	8006440 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80066fc:	f001 fa76 	bl	8007bec <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8006700:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8006702:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8006704:	3301      	adds	r3, #1
 8006706:	d008      	beq.n	800671a <xPortStartScheduler+0x10a>
 8006708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	e7fe      	b.n	8006718 <xPortStartScheduler+0x108>
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800672a:	9b03      	ldr	r3, [sp, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0fc      	beq.n	800672a <xPortStartScheduler+0x11a>
}
 8006730:	2000      	movs	r0, #0
 8006732:	b004      	add	sp, #16
 8006734:	bd70      	pop	{r4, r5, r6, pc}
 8006736:	bf00      	nop
 8006738:	410fc271 	.word	0x410fc271
 800673c:	410fc270 	.word	0x410fc270
 8006740:	e000e400 	.word	0xe000e400
 8006744:	200050f4 	.word	0x200050f4
 8006748:	200050f0 	.word	0x200050f0
 800674c:	200005e0 	.word	0x200005e0

08006750 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006750:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006754:	2b0f      	cmp	r3, #15
 8006756:	d90e      	bls.n	8006776 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006758:	4911      	ldr	r1, [pc, #68]	@ (80067a0 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800675a:	4a12      	ldr	r2, [pc, #72]	@ (80067a4 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800675c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d908      	bls.n	8006776 <vPortValidateInterruptPriority+0x26>
 8006764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	e7fe      	b.n	8006774 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006776:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800677a:	4a0b      	ldr	r2, [pc, #44]	@ (80067a8 <vPortValidateInterruptPriority+0x58>)
 800677c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006780:	6812      	ldr	r2, [r2, #0]
 8006782:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006786:	4293      	cmp	r3, r2
 8006788:	d908      	bls.n	800679c <vPortValidateInterruptPriority+0x4c>
 800678a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	e7fe      	b.n	800679a <vPortValidateInterruptPriority+0x4a>
	}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	e000e3f0 	.word	0xe000e3f0
 80067a4:	200050f4 	.word	0x200050f4
 80067a8:	200050f0 	.word	0x200050f0

080067ac <prvCopyDataToQueue>:

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067ac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 80067ae:	b570      	push	{r4, r5, r6, lr}
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 80067b2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067b4:	b92b      	cbnz	r3, 80067c2 <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067b6:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067b8:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067ba:	b35e      	cbz	r6, 8006814 <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 80067bc:	4618      	mov	r0, r3
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067be:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 80067c0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80067c2:	4616      	mov	r6, r2
 80067c4:	b982      	cbnz	r2, 80067e8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067c6:	461a      	mov	r2, r3
 80067c8:	6840      	ldr	r0, [r0, #4]
 80067ca:	f003 fecb 	bl	800a564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067ce:	6863      	ldr	r3, [r4, #4]
 80067d0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067d2:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067d4:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067d6:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067d8:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067da:	bf24      	itt	cs
 80067dc:	6823      	ldrcs	r3, [r4, #0]
 80067de:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067e0:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 80067e2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067e4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067e8:	461a      	mov	r2, r3
 80067ea:	68c0      	ldr	r0, [r0, #12]
 80067ec:	f003 feba 	bl	800a564 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067f0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80067f2:	68e3      	ldr	r3, [r4, #12]
 80067f4:	4251      	negs	r1, r2
 80067f6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067f8:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067fa:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d202      	bcs.n	8006806 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006800:	68a3      	ldr	r3, [r4, #8]
 8006802:	440b      	add	r3, r1
 8006804:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006806:	2e02      	cmp	r6, #2
 8006808:	d1ea      	bne.n	80067e0 <prvCopyDataToQueue+0x34>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800680a:	2d01      	cmp	r5, #1
 800680c:	bf38      	it	cc
 800680e:	2501      	movcc	r5, #1
BaseType_t xReturn = pdFALSE;
 8006810:	2000      	movs	r0, #0
 8006812:	e7d4      	b.n	80067be <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006814:	6880      	ldr	r0, [r0, #8]
 8006816:	f001 fb7d 	bl	8007f14 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800681a:	60a6      	str	r6, [r4, #8]
 800681c:	e7cf      	b.n	80067be <prvCopyDataToQueue+0x12>
 800681e:	bf00      	nop

08006820 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006820:	b940      	cbnz	r0, 8006834 <xQueueGenericCreateStatic+0x14>
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	e7fe      	b.n	8006832 <xQueueGenericCreateStatic+0x12>
	{
 8006834:	b510      	push	{r4, lr}
 8006836:	461c      	mov	r4, r3
 8006838:	b082      	sub	sp, #8
		configASSERT( pxStaticQueue != NULL );
 800683a:	b183      	cbz	r3, 800685e <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800683c:	2a00      	cmp	r2, #0
 800683e:	d048      	beq.n	80068d2 <xQueueGenericCreateStatic+0xb2>
 8006840:	b1b1      	cbz	r1, 8006870 <xQueueGenericCreateStatic+0x50>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006842:	2348      	movs	r3, #72	@ 0x48
 8006844:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	2b48      	cmp	r3, #72	@ 0x48
 800684a:	d01a      	beq.n	8006882 <xQueueGenericCreateStatic+0x62>
 800684c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	e7fe      	b.n	800685c <xQueueGenericCreateStatic+0x3c>
 800685e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800686e:	e7fe      	b.n	800686e <xQueueGenericCreateStatic+0x4e>
 8006870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006880:	e7fe      	b.n	8006880 <xQueueGenericCreateStatic+0x60>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006882:	9b01      	ldr	r3, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006884:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006886:	2301      	movs	r3, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8006888:	e9c4 010f 	strd	r0, r1, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800688c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
	taskENTER_CRITICAL();
 8006890:	f7ff fe40 	bl	8006514 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006894:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
 8006898:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800689a:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800689c:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068a0:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068a2:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068a4:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068a6:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068a8:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80068aa:	22ff      	movs	r2, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068ac:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068ae:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068b0:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068b4:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80068b8:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068bc:	f7ff fd76 	bl	80063ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068c0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80068c4:	f7ff fd72 	bl	80063ac <vListInitialise>
	taskEXIT_CRITICAL();
 80068c8:	f7ff fe46 	bl	8006558 <vPortExitCritical>
	}
 80068cc:	4620      	mov	r0, r4
 80068ce:	b002      	add	sp, #8
 80068d0:	bd10      	pop	{r4, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068d2:	b939      	cbnz	r1, 80068e4 <xQueueGenericCreateStatic+0xc4>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80068d4:	2348      	movs	r3, #72	@ 0x48
 80068d6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80068d8:	9b01      	ldr	r3, [sp, #4]
 80068da:	2b48      	cmp	r3, #72	@ 0x48
 80068dc:	d1b6      	bne.n	800684c <xQueueGenericCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068de:	9b01      	ldr	r3, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068e0:	4622      	mov	r2, r4
 80068e2:	e7cf      	b.n	8006884 <xQueueGenericCreateStatic+0x64>
 80068e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068f4:	e7fe      	b.n	80068f4 <xQueueGenericCreateStatic+0xd4>
 80068f6:	bf00      	nop

080068f8 <xQueueGenericSend>:
{
 80068f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068fc:	b085      	sub	sp, #20
 80068fe:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006900:	2800      	cmp	r0, #0
 8006902:	d043      	beq.n	800698c <xQueueGenericSend+0x94>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006904:	4688      	mov	r8, r1
 8006906:	461f      	mov	r7, r3
 8006908:	4604      	mov	r4, r0
 800690a:	b399      	cbz	r1, 8006974 <xQueueGenericSend+0x7c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800690c:	2f02      	cmp	r7, #2
 800690e:	d10b      	bne.n	8006928 <xQueueGenericSend+0x30>
 8006910:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d008      	beq.n	8006928 <xQueueGenericSend+0x30>
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	e7fe      	b.n	8006926 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006928:	f001 fae4 	bl	8007ef4 <xTaskGetSchedulerState>
 800692c:	2800      	cmp	r0, #0
 800692e:	d036      	beq.n	800699e <xQueueGenericSend+0xa6>
		taskENTER_CRITICAL();
 8006930:	f7ff fdf0 	bl	8006514 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006934:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006936:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006938:	429a      	cmp	r2, r3
 800693a:	d301      	bcc.n	8006940 <xQueueGenericSend+0x48>
 800693c:	2f02      	cmp	r7, #2
 800693e:	d13a      	bne.n	80069b6 <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006940:	463a      	mov	r2, r7
 8006942:	4641      	mov	r1, r8
 8006944:	4620      	mov	r0, r4
 8006946:	f7ff ff31 	bl	80067ac <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800694a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	f040 814b 	bne.w	8006be8 <xQueueGenericSend+0x2f0>
					else if( xYieldRequired != pdFALSE )
 8006952:	b148      	cbz	r0, 8006968 <xQueueGenericSend+0x70>
						queueYIELD_IF_USING_PREEMPTION();
 8006954:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800695c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006968:	f7ff fdf6 	bl	8006558 <vPortExitCritical>
				return pdPASS;
 800696c:	2001      	movs	r0, #1
}
 800696e:	b005      	add	sp, #20
 8006970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006974:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0c8      	beq.n	800690c <xQueueGenericSend+0x14>
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	e7fe      	b.n	800698a <xQueueGenericSend+0x92>
 800698c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800699c:	e7fe      	b.n	800699c <xQueueGenericSend+0xa4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800699e:	9b01      	ldr	r3, [sp, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0c5      	beq.n	8006930 <xQueueGenericSend+0x38>
 80069a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	e7fe      	b.n	80069b4 <xQueueGenericSend+0xbc>
 80069b6:	2200      	movs	r2, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
				if( xTicksToWait == ( TickType_t ) 0 )
 80069bc:	9b01      	ldr	r3, [sp, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 80d1 	beq.w	8006b66 <xQueueGenericSend+0x26e>
				else if( xEntryTimeSet == pdFALSE )
 80069c4:	2a00      	cmp	r2, #0
 80069c6:	f000 80ca 	beq.w	8006b5e <xQueueGenericSend+0x266>
		taskEXIT_CRITICAL();
 80069ca:	f7ff fdc5 	bl	8006558 <vPortExitCritical>
		vTaskSuspendAll();
 80069ce:	f001 f8df 	bl	8007b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069d2:	f7ff fd9f 	bl	8006514 <vPortEnterCritical>
 80069d6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80069da:	2bff      	cmp	r3, #255	@ 0xff
 80069dc:	bf04      	itt	eq
 80069de:	2300      	moveq	r3, #0
 80069e0:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 80069e4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80069e8:	2bff      	cmp	r3, #255	@ 0xff
 80069ea:	bf04      	itt	eq
 80069ec:	2300      	moveq	r3, #0
 80069ee:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 80069f2:	f7ff fdb1 	bl	8006558 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069f6:	a901      	add	r1, sp, #4
 80069f8:	a802      	add	r0, sp, #8
 80069fa:	f001 fa33 	bl	8007e64 <xTaskCheckForTimeOut>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	f040 80b5 	bne.w	8006b6e <xQueueGenericSend+0x276>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a04:	f7ff fd86 	bl	8006514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a08:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006a0a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d04c      	beq.n	8006aaa <xQueueGenericSend+0x1b2>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006a10:	f7ff fda2 	bl	8006558 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006a14:	f7ff fd7e 	bl	8006514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006a18:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8006a1c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a1e:	2d00      	cmp	r5, #0
 8006a20:	dc04      	bgt.n	8006a2c <xQueueGenericSend+0x134>
 8006a22:	e011      	b.n	8006a48 <xQueueGenericSend+0x150>
			--cTxLock;
 8006a24:	1e6a      	subs	r2, r5, #1
 8006a26:	b2d3      	uxtb	r3, r2
 8006a28:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a2a:	b16b      	cbz	r3, 8006a48 <xQueueGenericSend+0x150>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a2c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a2e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a30:	b153      	cbz	r3, 8006a48 <xQueueGenericSend+0x150>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a32:	f001 f9c7 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d0f4      	beq.n	8006a24 <xQueueGenericSend+0x12c>
						vTaskMissedYield();
 8006a3a:	f001 fa55 	bl	8007ee8 <vTaskMissedYield>
			--cTxLock;
 8006a3e:	1e6a      	subs	r2, r5, #1
 8006a40:	b2d3      	uxtb	r3, r2
 8006a42:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1f1      	bne.n	8006a2c <xQueueGenericSend+0x134>
		pxQueue->cTxLock = queueUNLOCKED;
 8006a48:	23ff      	movs	r3, #255	@ 0xff
 8006a4a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006a4e:	f7ff fd83 	bl	8006558 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006a52:	f7ff fd5f 	bl	8006514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006a56:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8006a5a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a5c:	2d00      	cmp	r5, #0
 8006a5e:	dd14      	ble.n	8006a8a <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a60:	f104 0910 	add.w	r9, r4, #16
 8006a64:	e003      	b.n	8006a6e <xQueueGenericSend+0x176>
				--cRxLock;
 8006a66:	1e6a      	subs	r2, r5, #1
 8006a68:	b2d3      	uxtb	r3, r2
 8006a6a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a6c:	b16b      	cbz	r3, 8006a8a <xQueueGenericSend+0x192>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a6e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a70:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a72:	b153      	cbz	r3, 8006a8a <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a74:	f001 f9a6 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d0f4      	beq.n	8006a66 <xQueueGenericSend+0x16e>
					vTaskMissedYield();
 8006a7c:	f001 fa34 	bl	8007ee8 <vTaskMissedYield>
				--cRxLock;
 8006a80:	1e6a      	subs	r2, r5, #1
 8006a82:	b2d3      	uxtb	r3, r2
 8006a84:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f1      	bne.n	8006a6e <xQueueGenericSend+0x176>
		pxQueue->cRxLock = queueUNLOCKED;
 8006a8a:	23ff      	movs	r3, #255	@ 0xff
 8006a8c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006a90:	f7ff fd62 	bl	8006558 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8006a94:	f001 f884 	bl	8007ba0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006a98:	f7ff fd3c 	bl	8006514 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a9c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006a9e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	f4ff af4d 	bcc.w	8006940 <xQueueGenericSend+0x48>
{
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	e788      	b.n	80069bc <xQueueGenericSend+0xc4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006aaa:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8006aae:	f7ff fd53 	bl	8006558 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ab2:	9901      	ldr	r1, [sp, #4]
 8006ab4:	4648      	mov	r0, r9
 8006ab6:	f001 f8d7 	bl	8007c68 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8006aba:	f7ff fd2b 	bl	8006514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006abe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006ac2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	dc04      	bgt.n	8006ad2 <xQueueGenericSend+0x1da>
 8006ac8:	e011      	b.n	8006aee <xQueueGenericSend+0x1f6>
			--cTxLock;
 8006aca:	1e6b      	subs	r3, r5, #1
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ad0:	b16a      	cbz	r2, 8006aee <xQueueGenericSend+0x1f6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ad2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ad4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ad6:	b153      	cbz	r3, 8006aee <xQueueGenericSend+0x1f6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ad8:	f001 f974 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d0f4      	beq.n	8006aca <xQueueGenericSend+0x1d2>
						vTaskMissedYield();
 8006ae0:	f001 fa02 	bl	8007ee8 <vTaskMissedYield>
			--cTxLock;
 8006ae4:	1e6b      	subs	r3, r5, #1
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	d1f1      	bne.n	8006ad2 <xQueueGenericSend+0x1da>
		pxQueue->cTxLock = queueUNLOCKED;
 8006aee:	23ff      	movs	r3, #255	@ 0xff
 8006af0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006af4:	f7ff fd30 	bl	8006558 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006af8:	f7ff fd0c 	bl	8006514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006afc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006b00:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b02:	2d00      	cmp	r5, #0
 8006b04:	dc04      	bgt.n	8006b10 <xQueueGenericSend+0x218>
 8006b06:	e011      	b.n	8006b2c <xQueueGenericSend+0x234>
				--cRxLock;
 8006b08:	1e6b      	subs	r3, r5, #1
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b0e:	b16a      	cbz	r2, 8006b2c <xQueueGenericSend+0x234>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b10:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b12:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b14:	b153      	cbz	r3, 8006b2c <xQueueGenericSend+0x234>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b16:	f001 f955 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d0f4      	beq.n	8006b08 <xQueueGenericSend+0x210>
					vTaskMissedYield();
 8006b1e:	f001 f9e3 	bl	8007ee8 <vTaskMissedYield>
				--cRxLock;
 8006b22:	1e6b      	subs	r3, r5, #1
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b28:	2a00      	cmp	r2, #0
 8006b2a:	d1f1      	bne.n	8006b10 <xQueueGenericSend+0x218>
		pxQueue->cRxLock = queueUNLOCKED;
 8006b2c:	23ff      	movs	r3, #255	@ 0xff
 8006b2e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006b32:	f7ff fd11 	bl	8006558 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8006b36:	f001 f833 	bl	8007ba0 <xTaskResumeAll>
 8006b3a:	b948      	cbnz	r0, 8006b50 <xQueueGenericSend+0x258>
					portYIELD_WITHIN_API();
 8006b3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8006b50:	f7ff fce0 	bl	8006514 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b54:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b56:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d9a4      	bls.n	8006aa6 <xQueueGenericSend+0x1ae>
 8006b5c:	e6f0      	b.n	8006940 <xQueueGenericSend+0x48>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b5e:	a802      	add	r0, sp, #8
 8006b60:	f001 f974 	bl	8007e4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b64:	e731      	b.n	80069ca <xQueueGenericSend+0xd2>
					taskEXIT_CRITICAL();
 8006b66:	f7ff fcf7 	bl	8006558 <vPortExitCritical>
					return errQUEUE_FULL;
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	e6ff      	b.n	800696e <xQueueGenericSend+0x76>
	taskENTER_CRITICAL();
 8006b6e:	f7ff fcd1 	bl	8006514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006b72:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006b76:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b78:	2d00      	cmp	r5, #0
 8006b7a:	dd10      	ble.n	8006b9e <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b7c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 8006b80:	e003      	b.n	8006b8a <xQueueGenericSend+0x292>
			--cTxLock;
 8006b82:	1e6b      	subs	r3, r5, #1
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b88:	b14a      	cbz	r2, 8006b9e <xQueueGenericSend+0x2a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b8a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b8c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b8e:	b133      	cbz	r3, 8006b9e <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b90:	f001 f918 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d0f4      	beq.n	8006b82 <xQueueGenericSend+0x28a>
						vTaskMissedYield();
 8006b98:	f001 f9a6 	bl	8007ee8 <vTaskMissedYield>
 8006b9c:	e7f1      	b.n	8006b82 <xQueueGenericSend+0x28a>
		pxQueue->cTxLock = queueUNLOCKED;
 8006b9e:	23ff      	movs	r3, #255	@ 0xff
 8006ba0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006ba4:	f7ff fcd8 	bl	8006558 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006ba8:	f7ff fcb4 	bl	8006514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006bac:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006bb0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bb2:	2d00      	cmp	r5, #0
 8006bb4:	dd10      	ble.n	8006bd8 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bb6:	f104 0610 	add.w	r6, r4, #16
 8006bba:	e003      	b.n	8006bc4 <xQueueGenericSend+0x2cc>
				--cRxLock;
 8006bbc:	1e6b      	subs	r3, r5, #1
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bc2:	b14a      	cbz	r2, 8006bd8 <xQueueGenericSend+0x2e0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc8:	b133      	cbz	r3, 8006bd8 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bca:	f001 f8fb 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d0f4      	beq.n	8006bbc <xQueueGenericSend+0x2c4>
					vTaskMissedYield();
 8006bd2:	f001 f989 	bl	8007ee8 <vTaskMissedYield>
 8006bd6:	e7f1      	b.n	8006bbc <xQueueGenericSend+0x2c4>
		pxQueue->cRxLock = queueUNLOCKED;
 8006bd8:	23ff      	movs	r3, #255	@ 0xff
 8006bda:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006bde:	f7ff fcbb 	bl	8006558 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8006be2:	f000 ffdd 	bl	8007ba0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006be6:	e7c0      	b.n	8006b6a <xQueueGenericSend+0x272>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006be8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006bec:	f001 f8ea 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	f43f aeb9 	beq.w	8006968 <xQueueGenericSend+0x70>
 8006bf6:	e6ad      	b.n	8006954 <xQueueGenericSend+0x5c>

08006bf8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d048      	beq.n	8006c8e <xQueueGenericSendFromISR+0x96>
{
 8006bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c00:	460e      	mov	r6, r1
 8006c02:	4617      	mov	r7, r2
 8006c04:	461d      	mov	r5, r3
 8006c06:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c08:	b321      	cbz	r1, 8006c54 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c0a:	2d02      	cmp	r5, #2
 8006c0c:	d10b      	bne.n	8006c26 <xQueueGenericSendFromISR+0x2e>
 8006c0e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d008      	beq.n	8006c26 <xQueueGenericSendFromISR+0x2e>
 8006c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	e7fe      	b.n	8006c24 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c26:	f7ff fd93 	bl	8006750 <vPortValidateInterruptPriority>
	__asm volatile
 8006c2a:	f3ef 8811 	mrs	r8, BASEPRI
 8006c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c3e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006c40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d312      	bcc.n	8006c6c <xQueueGenericSendFromISR+0x74>
 8006c46:	2d02      	cmp	r5, #2
 8006c48:	d010      	beq.n	8006c6c <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8006c4a:	2000      	movs	r0, #0
	__asm volatile
 8006c4c:	f388 8811 	msr	BASEPRI, r8
}
 8006c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c54:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0d7      	beq.n	8006c0a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	e7fe      	b.n	8006c6a <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c6c:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c6e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c72:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c74:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c76:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f7ff fd97 	bl	80067ac <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006c7e:	1c6b      	adds	r3, r5, #1
 8006c80:	d00e      	beq.n	8006ca0 <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c82:	1c6b      	adds	r3, r5, #1
 8006c84:	b25b      	sxtb	r3, r3
 8006c86:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	e7de      	b.n	8006c4c <xQueueGenericSendFromISR+0x54>
 8006c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006c9e:	e7fe      	b.n	8006c9e <xQueueGenericSendFromISR+0xa6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ca0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0f1      	beq.n	8006c8a <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ca6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006caa:	f001 f88b 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d0eb      	beq.n	8006c8a <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8006cb2:	2f00      	cmp	r7, #0
 8006cb4:	d0e9      	beq.n	8006c8a <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	603b      	str	r3, [r7, #0]
 8006cba:	e7e6      	b.n	8006c8a <xQueueGenericSendFromISR+0x92>

08006cbc <xQueueReceive>:
{
 8006cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f000 8164 	beq.w	8006f92 <xQueueReceive+0x2d6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cca:	460f      	mov	r7, r1
 8006ccc:	4604      	mov	r4, r0
 8006cce:	2900      	cmp	r1, #0
 8006cd0:	f000 8097 	beq.w	8006e02 <xQueueReceive+0x146>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cd4:	f001 f90e 	bl	8007ef4 <xTaskGetSchedulerState>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	f000 809f 	beq.w	8006e1c <xQueueReceive+0x160>
		taskENTER_CRITICAL();
 8006cde:	f7ff fc19 	bl	8006514 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ce2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ce4:	2d00      	cmp	r5, #0
 8006ce6:	d175      	bne.n	8006dd4 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80f4 	beq.w	8006ed8 <xQueueReceive+0x21c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cf0:	a802      	add	r0, sp, #8
 8006cf2:	f001 f8ab 	bl	8007e4c <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8006cf6:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskEXIT_CRITICAL();
 8006cfc:	f7ff fc2c 	bl	8006558 <vPortExitCritical>
		vTaskSuspendAll();
 8006d00:	f000 ff46 	bl	8007b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d04:	f7ff fc06 	bl	8006514 <vPortEnterCritical>
 8006d08:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006d0c:	2bff      	cmp	r3, #255	@ 0xff
 8006d0e:	bf08      	it	eq
 8006d10:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8006d14:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006d18:	2bff      	cmp	r3, #255	@ 0xff
 8006d1a:	bf08      	it	eq
 8006d1c:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8006d20:	f7ff fc1a 	bl	8006558 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d24:	a901      	add	r1, sp, #4
 8006d26:	a802      	add	r0, sp, #8
 8006d28:	f001 f89c 	bl	8007e64 <xTaskCheckForTimeOut>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f040 8082 	bne.w	8006e36 <xQueueReceive+0x17a>
	taskENTER_CRITICAL();
 8006d32:	f7ff fbef 	bl	8006514 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d36:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 80d3 	beq.w	8006ee4 <xQueueReceive+0x228>
	taskEXIT_CRITICAL();
 8006d3e:	f7ff fc0b 	bl	8006558 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006d42:	f7ff fbe7 	bl	8006514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006d46:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006d4a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d4c:	2d00      	cmp	r5, #0
 8006d4e:	dd14      	ble.n	8006d7a <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d50:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 8006d54:	e003      	b.n	8006d5e <xQueueReceive+0xa2>
			--cTxLock;
 8006d56:	1e6b      	subs	r3, r5, #1
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d5c:	b16a      	cbz	r2, 8006d7a <xQueueReceive+0xbe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d60:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d62:	b153      	cbz	r3, 8006d7a <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d64:	f001 f82e 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d0f4      	beq.n	8006d56 <xQueueReceive+0x9a>
						vTaskMissedYield();
 8006d6c:	f001 f8bc 	bl	8007ee8 <vTaskMissedYield>
			--cTxLock;
 8006d70:	1e6b      	subs	r3, r5, #1
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	d1f1      	bne.n	8006d5e <xQueueReceive+0xa2>
		pxQueue->cTxLock = queueUNLOCKED;
 8006d7a:	23ff      	movs	r3, #255	@ 0xff
 8006d7c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006d80:	f7ff fbea 	bl	8006558 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006d84:	f7ff fbc6 	bl	8006514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006d88:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006d8c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d8e:	2d00      	cmp	r5, #0
 8006d90:	dd14      	ble.n	8006dbc <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d92:	f104 0910 	add.w	r9, r4, #16
 8006d96:	e003      	b.n	8006da0 <xQueueReceive+0xe4>
				--cRxLock;
 8006d98:	1e6b      	subs	r3, r5, #1
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d9e:	b16a      	cbz	r2, 8006dbc <xQueueReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006da0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006da2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006da4:	b153      	cbz	r3, 8006dbc <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006da6:	f001 f80d 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d0f4      	beq.n	8006d98 <xQueueReceive+0xdc>
					vTaskMissedYield();
 8006dae:	f001 f89b 	bl	8007ee8 <vTaskMissedYield>
				--cRxLock;
 8006db2:	1e6b      	subs	r3, r5, #1
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	d1f1      	bne.n	8006da0 <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 8006dbc:	23ff      	movs	r3, #255	@ 0xff
 8006dbe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006dc2:	f7ff fbc9 	bl	8006558 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8006dc6:	f000 feeb 	bl	8007ba0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006dca:	f7ff fba3 	bl	8006514 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dce:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dd0:	2d00      	cmp	r5, #0
 8006dd2:	d07d      	beq.n	8006ed0 <xQueueReceive+0x214>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dd4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006dd6:	b152      	cbz	r2, 8006dee <xQueueReceive+0x132>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dd8:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dda:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ddc:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dde:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006de0:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006de2:	bf24      	itt	cs
 8006de4:	6821      	ldrcs	r1, [r4, #0]
 8006de6:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006de8:	4638      	mov	r0, r7
 8006dea:	f003 fbbb 	bl	800a564 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dee:	3d01      	subs	r5, #1
 8006df0:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f040 80d5 	bne.w	8006fa4 <xQueueReceive+0x2e8>
				taskEXIT_CRITICAL();
 8006dfa:	f7ff fbad 	bl	8006558 <vPortExitCritical>
				return pdPASS;
 8006dfe:	2001      	movs	r0, #1
 8006e00:	e06d      	b.n	8006ede <xQueueReceive+0x222>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e02:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f43f af65 	beq.w	8006cd4 <xQueueReceive+0x18>
 8006e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	e7fe      	b.n	8006e1a <xQueueReceive+0x15e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e1c:	9b01      	ldr	r3, [sp, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f43f af5d 	beq.w	8006cde <xQueueReceive+0x22>
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	e7fe      	b.n	8006e34 <xQueueReceive+0x178>
	taskENTER_CRITICAL();
 8006e36:	f7ff fb6d 	bl	8006514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006e3a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006e3e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	dc04      	bgt.n	8006e4e <xQueueReceive+0x192>
 8006e44:	e011      	b.n	8006e6a <xQueueReceive+0x1ae>
			--cTxLock;
 8006e46:	1e6b      	subs	r3, r5, #1
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e4c:	b16a      	cbz	r2, 8006e6a <xQueueReceive+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e50:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e52:	b153      	cbz	r3, 8006e6a <xQueueReceive+0x1ae>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e54:	f000 ffb6 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d0f4      	beq.n	8006e46 <xQueueReceive+0x18a>
						vTaskMissedYield();
 8006e5c:	f001 f844 	bl	8007ee8 <vTaskMissedYield>
			--cTxLock;
 8006e60:	1e6b      	subs	r3, r5, #1
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e66:	2a00      	cmp	r2, #0
 8006e68:	d1f1      	bne.n	8006e4e <xQueueReceive+0x192>
		pxQueue->cTxLock = queueUNLOCKED;
 8006e6a:	23ff      	movs	r3, #255	@ 0xff
 8006e6c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006e70:	f7ff fb72 	bl	8006558 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006e74:	f7ff fb4e 	bl	8006514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006e78:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006e7c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e7e:	2d00      	cmp	r5, #0
 8006e80:	dd14      	ble.n	8006eac <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e82:	f104 0910 	add.w	r9, r4, #16
 8006e86:	e003      	b.n	8006e90 <xQueueReceive+0x1d4>
				--cRxLock;
 8006e88:	1e6b      	subs	r3, r5, #1
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e8e:	b16a      	cbz	r2, 8006eac <xQueueReceive+0x1f0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e90:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e92:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e94:	b153      	cbz	r3, 8006eac <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e96:	f000 ff95 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d0f4      	beq.n	8006e88 <xQueueReceive+0x1cc>
					vTaskMissedYield();
 8006e9e:	f001 f823 	bl	8007ee8 <vTaskMissedYield>
				--cRxLock;
 8006ea2:	1e6b      	subs	r3, r5, #1
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ea8:	2a00      	cmp	r2, #0
 8006eaa:	d1f1      	bne.n	8006e90 <xQueueReceive+0x1d4>
		pxQueue->cRxLock = queueUNLOCKED;
 8006eac:	23ff      	movs	r3, #255	@ 0xff
 8006eae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006eb2:	f7ff fb51 	bl	8006558 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8006eb6:	f000 fe73 	bl	8007ba0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8006eba:	f7ff fb2b 	bl	8006514 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ebe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ec0:	b153      	cbz	r3, 8006ed8 <xQueueReceive+0x21c>
	taskEXIT_CRITICAL();
 8006ec2:	f7ff fb49 	bl	8006558 <vPortExitCritical>
		taskENTER_CRITICAL();
 8006ec6:	f7ff fb25 	bl	8006514 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eca:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ecc:	2d00      	cmp	r5, #0
 8006ece:	d181      	bne.n	8006dd4 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ed0:	9b01      	ldr	r3, [sp, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f47f af12 	bne.w	8006cfc <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8006ed8:	f7ff fb3e 	bl	8006558 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006edc:	2000      	movs	r0, #0
}
 8006ede:	b005      	add	sp, #20
 8006ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ee4:	f104 0924 	add.w	r9, r4, #36	@ 0x24
	taskEXIT_CRITICAL();
 8006ee8:	f7ff fb36 	bl	8006558 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006eec:	9901      	ldr	r1, [sp, #4]
 8006eee:	4648      	mov	r0, r9
 8006ef0:	f000 feba 	bl	8007c68 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8006ef4:	f7ff fb0e 	bl	8006514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006ef8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006efc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006efe:	2d00      	cmp	r5, #0
 8006f00:	dc04      	bgt.n	8006f0c <xQueueReceive+0x250>
 8006f02:	e011      	b.n	8006f28 <xQueueReceive+0x26c>
			--cTxLock;
 8006f04:	1e6b      	subs	r3, r5, #1
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f0a:	b16a      	cbz	r2, 8006f28 <xQueueReceive+0x26c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f0e:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f10:	b153      	cbz	r3, 8006f28 <xQueueReceive+0x26c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f12:	f000 ff57 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d0f4      	beq.n	8006f04 <xQueueReceive+0x248>
						vTaskMissedYield();
 8006f1a:	f000 ffe5 	bl	8007ee8 <vTaskMissedYield>
			--cTxLock;
 8006f1e:	1e6b      	subs	r3, r5, #1
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f24:	2a00      	cmp	r2, #0
 8006f26:	d1f1      	bne.n	8006f0c <xQueueReceive+0x250>
		pxQueue->cTxLock = queueUNLOCKED;
 8006f28:	23ff      	movs	r3, #255	@ 0xff
 8006f2a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006f2e:	f7ff fb13 	bl	8006558 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006f32:	f7ff faef 	bl	8006514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006f36:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006f3a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f3c:	2d00      	cmp	r5, #0
 8006f3e:	dd14      	ble.n	8006f6a <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f40:	f104 0910 	add.w	r9, r4, #16
 8006f44:	e003      	b.n	8006f4e <xQueueReceive+0x292>
				--cRxLock;
 8006f46:	1e6b      	subs	r3, r5, #1
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f4c:	b16a      	cbz	r2, 8006f6a <xQueueReceive+0x2ae>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f4e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f50:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f52:	b153      	cbz	r3, 8006f6a <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f54:	f000 ff36 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d0f4      	beq.n	8006f46 <xQueueReceive+0x28a>
					vTaskMissedYield();
 8006f5c:	f000 ffc4 	bl	8007ee8 <vTaskMissedYield>
				--cRxLock;
 8006f60:	1e6b      	subs	r3, r5, #1
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	d1f1      	bne.n	8006f4e <xQueueReceive+0x292>
		pxQueue->cRxLock = queueUNLOCKED;
 8006f6a:	23ff      	movs	r3, #255	@ 0xff
 8006f6c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006f70:	f7ff faf2 	bl	8006558 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8006f74:	f000 fe14 	bl	8007ba0 <xTaskResumeAll>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d1a4      	bne.n	8006ec6 <xQueueReceive+0x20a>
					portYIELD_WITHIN_API();
 8006f7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006f80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f84:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8006f90:	e799      	b.n	8006ec6 <xQueueReceive+0x20a>
 8006f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006fa2:	e7fe      	b.n	8006fa2 <xQueueReceive+0x2e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fa4:	f104 0010 	add.w	r0, r4, #16
 8006fa8:	f000 ff0c 	bl	8007dc4 <xTaskRemoveFromEventList>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	f43f af24 	beq.w	8006dfa <xQueueReceive+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 8006fb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	e718      	b.n	8006dfa <xQueueReceive+0x13e>

08006fc8 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fc8:	4b12      	ldr	r3, [pc, #72]	@ (8007014 <vQueueAddToRegistry+0x4c>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	b17a      	cbz	r2, 8006fee <vQueueAddToRegistry+0x26>
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	b162      	cbz	r2, 8006fec <vQueueAddToRegistry+0x24>
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	b192      	cbz	r2, 8006ffc <vQueueAddToRegistry+0x34>
 8006fd6:	699a      	ldr	r2, [r3, #24]
 8006fd8:	b192      	cbz	r2, 8007000 <vQueueAddToRegistry+0x38>
 8006fda:	6a1a      	ldr	r2, [r3, #32]
 8006fdc:	b192      	cbz	r2, 8007004 <vQueueAddToRegistry+0x3c>
 8006fde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fe0:	b192      	cbz	r2, 8007008 <vQueueAddToRegistry+0x40>
 8006fe2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe4:	b192      	cbz	r2, 800700c <vQueueAddToRegistry+0x44>
 8006fe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fe8:	b192      	cbz	r2, 8007010 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fea:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fec:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fee:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ff2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006ff6:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8006ffa:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	e7f6      	b.n	8006fee <vQueueAddToRegistry+0x26>
 8007000:	2203      	movs	r2, #3
 8007002:	e7f4      	b.n	8006fee <vQueueAddToRegistry+0x26>
 8007004:	2204      	movs	r2, #4
 8007006:	e7f2      	b.n	8006fee <vQueueAddToRegistry+0x26>
 8007008:	2205      	movs	r2, #5
 800700a:	e7f0      	b.n	8006fee <vQueueAddToRegistry+0x26>
 800700c:	2206      	movs	r2, #6
 800700e:	e7ee      	b.n	8006fee <vQueueAddToRegistry+0x26>
 8007010:	2207      	movs	r2, #7
 8007012:	e7ec      	b.n	8006fee <vQueueAddToRegistry+0x26>
 8007014:	200050f8 	.word	0x200050f8

08007018 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	4605      	mov	r5, r0
 800701c:	460e      	mov	r6, r1
 800701e:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007020:	f7ff fa78 	bl	8006514 <vPortEnterCritical>
 8007024:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8007028:	2bff      	cmp	r3, #255	@ 0xff
 800702a:	bf04      	itt	eq
 800702c:	2300      	moveq	r3, #0
 800702e:	f885 3044 	strbeq.w	r3, [r5, #68]	@ 0x44
 8007032:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8007036:	2bff      	cmp	r3, #255	@ 0xff
 8007038:	bf04      	itt	eq
 800703a:	2300      	moveq	r3, #0
 800703c:	f885 3045 	strbeq.w	r3, [r5, #69]	@ 0x45
 8007040:	f7ff fa8a 	bl	8006558 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007044:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8007046:	2b00      	cmp	r3, #0
 8007048:	d043      	beq.n	80070d2 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 800704a:	f7ff fa63 	bl	8006514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800704e:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8007052:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007054:	2c00      	cmp	r4, #0
 8007056:	dd14      	ble.n	8007082 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007058:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 800705c:	e003      	b.n	8007066 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 800705e:	1e63      	subs	r3, r4, #1
 8007060:	b2da      	uxtb	r2, r3
 8007062:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007064:	b16a      	cbz	r2, 8007082 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007066:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007068:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800706a:	b153      	cbz	r3, 8007082 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800706c:	f000 feaa 	bl	8007dc4 <xTaskRemoveFromEventList>
 8007070:	2800      	cmp	r0, #0
 8007072:	d0f4      	beq.n	800705e <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8007074:	f000 ff38 	bl	8007ee8 <vTaskMissedYield>
			--cTxLock;
 8007078:	1e63      	subs	r3, r4, #1
 800707a:	b2da      	uxtb	r2, r3
 800707c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800707e:	2a00      	cmp	r2, #0
 8007080:	d1f1      	bne.n	8007066 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8007082:	23ff      	movs	r3, #255	@ 0xff
 8007084:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8007088:	f7ff fa66 	bl	8006558 <vPortExitCritical>
	taskENTER_CRITICAL();
 800708c:	f7ff fa42 	bl	8006514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007090:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8007094:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007096:	2c00      	cmp	r4, #0
 8007098:	dd14      	ble.n	80070c4 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800709a:	f105 0610 	add.w	r6, r5, #16
 800709e:	e003      	b.n	80070a8 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 80070a0:	1e63      	subs	r3, r4, #1
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070a6:	b16a      	cbz	r2, 80070c4 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070a8:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070aa:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ac:	b153      	cbz	r3, 80070c4 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ae:	f000 fe89 	bl	8007dc4 <xTaskRemoveFromEventList>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d0f4      	beq.n	80070a0 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 80070b6:	f000 ff17 	bl	8007ee8 <vTaskMissedYield>
				--cRxLock;
 80070ba:	1e63      	subs	r3, r4, #1
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	d1f1      	bne.n	80070a8 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 80070c4:	23ff      	movs	r3, #255	@ 0xff
 80070c6:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80070ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80070ce:	f7ff ba43 	b.w	8006558 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070d2:	4622      	mov	r2, r4
 80070d4:	4631      	mov	r1, r6
 80070d6:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80070da:	f000 fe15 	bl	8007d08 <vTaskPlaceOnEventListRestricted>
 80070de:	e7b4      	b.n	800704a <vQueueWaitForMessageRestricted+0x32>

080070e0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070e6:	f7ff fa15 	bl	8006514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070ea:	4a34      	ldr	r2, [pc, #208]	@ (80071bc <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80070ec:	4d34      	ldr	r5, [pc, #208]	@ (80071c0 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80070ee:	6813      	ldr	r3, [r2, #0]
 80070f0:	3301      	adds	r3, #1
 80070f2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d031      	beq.n	800715e <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070fa:	4e32      	ldr	r6, [pc, #200]	@ (80071c4 <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80070fe:	6832      	ldr	r2, [r6, #0]
 8007100:	b332      	cbz	r2, 8007150 <prvAddNewTaskToReadyList+0x70>
 8007102:	4f31      	ldr	r7, [pc, #196]	@ (80071c8 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007104:	4831      	ldr	r0, [pc, #196]	@ (80071cc <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007106:	4932      	ldr	r1, [pc, #200]	@ (80071d0 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8007108:	6802      	ldr	r2, [r0, #0]
 800710a:	3201      	adds	r2, #1
 800710c:	6002      	str	r2, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800710e:	6808      	ldr	r0, [r1, #0]
 8007110:	2201      	movs	r2, #1
 8007112:	409a      	lsls	r2, r3
 8007114:	4302      	orrs	r2, r0
 8007116:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800711a:	600a      	str	r2, [r1, #0]
 800711c:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 8007120:	1d21      	adds	r1, r4, #4
 8007122:	f7ff f953 	bl	80063cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007126:	f7ff fa17 	bl	8006558 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800712a:	6833      	ldr	r3, [r6, #0]
 800712c:	b173      	cbz	r3, 800714c <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800712e:	682a      	ldr	r2, [r5, #0]
 8007130:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007132:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007134:	429a      	cmp	r2, r3
 8007136:	d209      	bcs.n	800714c <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007138:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800713c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007140:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800714c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007150:	682a      	ldr	r2, [r5, #0]
 8007152:	4f1d      	ldr	r7, [pc, #116]	@ (80071c8 <prvAddNewTaskToReadyList+0xe8>)
 8007154:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007156:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007158:	bf98      	it	ls
 800715a:	602c      	strls	r4, [r5, #0]
 800715c:	e7d2      	b.n	8007104 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800715e:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007160:	6813      	ldr	r3, [r2, #0]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d003      	beq.n	800716e <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007166:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007168:	4f17      	ldr	r7, [pc, #92]	@ (80071c8 <prvAddNewTaskToReadyList+0xe8>)
 800716a:	4e16      	ldr	r6, [pc, #88]	@ (80071c4 <prvAddNewTaskToReadyList+0xe4>)
 800716c:	e7ca      	b.n	8007104 <prvAddNewTaskToReadyList+0x24>
 800716e:	4f16      	ldr	r7, [pc, #88]	@ (80071c8 <prvAddNewTaskToReadyList+0xe8>)
 8007170:	463e      	mov	r6, r7
 8007172:	f107 088c 	add.w	r8, r7, #140	@ 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007176:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007178:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800717a:	f7ff f917 	bl	80063ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800717e:	4546      	cmp	r6, r8
 8007180:	d1f9      	bne.n	8007176 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007182:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 80071e8 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8007186:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 80071ec <prvAddNewTaskToReadyList+0x10c>
 800718a:	4e0e      	ldr	r6, [pc, #56]	@ (80071c4 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 800718c:	4648      	mov	r0, r9
 800718e:	f7ff f90d 	bl	80063ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007192:	4640      	mov	r0, r8
 8007194:	f7ff f90a 	bl	80063ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007198:	480e      	ldr	r0, [pc, #56]	@ (80071d4 <prvAddNewTaskToReadyList+0xf4>)
 800719a:	f7ff f907 	bl	80063ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800719e:	480e      	ldr	r0, [pc, #56]	@ (80071d8 <prvAddNewTaskToReadyList+0xf8>)
 80071a0:	f7ff f904 	bl	80063ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071a4:	480d      	ldr	r0, [pc, #52]	@ (80071dc <prvAddNewTaskToReadyList+0xfc>)
 80071a6:	f7ff f901 	bl	80063ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071aa:	4b0d      	ldr	r3, [pc, #52]	@ (80071e0 <prvAddNewTaskToReadyList+0x100>)
 80071ac:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071b0:	4b0c      	ldr	r3, [pc, #48]	@ (80071e4 <prvAddNewTaskToReadyList+0x104>)
 80071b2:	f8c3 8000 	str.w	r8, [r3]
		prvAddTaskToReadyList( pxNewTCB );
 80071b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
}
 80071b8:	e7a4      	b.n	8007104 <prvAddNewTaskToReadyList+0x24>
 80071ba:	bf00      	nop
 80071bc:	2000515c 	.word	0x2000515c
 80071c0:	2000525c 	.word	0x2000525c
 80071c4:	20005150 	.word	0x20005150
 80071c8:	200051d0 	.word	0x200051d0
 80071cc:	20005140 	.word	0x20005140
 80071d0:	20005154 	.word	0x20005154
 80071d4:	2000518c 	.word	0x2000518c
 80071d8:	20005178 	.word	0x20005178
 80071dc:	20005160 	.word	0x20005160
 80071e0:	200051a4 	.word	0x200051a4
 80071e4:	200051a0 	.word	0x200051a0
 80071e8:	200051bc 	.word	0x200051bc
 80071ec:	200051a8 	.word	0x200051a8

080071f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007260 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071f4:	4e1b      	ldr	r6, [pc, #108]	@ (8007264 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80071f6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071f8:	6833      	ldr	r3, [r6, #0]
{
 80071fa:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071fc:	1d18      	adds	r0, r3, #4
{
 80071fe:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007200:	f7ff f90a 	bl	8006418 <uxListRemove>
 8007204:	b940      	cbnz	r0, 8007218 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007206:	6833      	ldr	r3, [r6, #0]
 8007208:	4917      	ldr	r1, [pc, #92]	@ (8007268 <prvAddCurrentTaskToDelayedList+0x78>)
 800720a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720c:	2201      	movs	r2, #1
 800720e:	409a      	lsls	r2, r3
 8007210:	680b      	ldr	r3, [r1, #0]
 8007212:	ea23 0302 	bic.w	r3, r3, r2
 8007216:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007218:	1c6b      	adds	r3, r5, #1
 800721a:	d017      	beq.n	800724c <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800721c:	6833      	ldr	r3, [r6, #0]
 800721e:	1964      	adds	r4, r4, r5
 8007220:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007222:	d307      	bcc.n	8007234 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007224:	4b11      	ldr	r3, [pc, #68]	@ (800726c <prvAddCurrentTaskToDelayedList+0x7c>)
 8007226:	6818      	ldr	r0, [r3, #0]
 8007228:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800722a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800722e:	3104      	adds	r1, #4
 8007230:	f7ff b8da 	b.w	80063e8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007234:	4b0e      	ldr	r3, [pc, #56]	@ (8007270 <prvAddCurrentTaskToDelayedList+0x80>)
 8007236:	6818      	ldr	r0, [r3, #0]
 8007238:	6831      	ldr	r1, [r6, #0]
 800723a:	3104      	adds	r1, #4
 800723c:	f7ff f8d4 	bl	80063e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007240:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <prvAddCurrentTaskToDelayedList+0x84>)
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8007246:	bf88      	it	hi
 8007248:	601c      	strhi	r4, [r3, #0]
}
 800724a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800724c:	2f00      	cmp	r7, #0
 800724e:	d0e5      	beq.n	800721c <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007250:	6831      	ldr	r1, [r6, #0]
 8007252:	4809      	ldr	r0, [pc, #36]	@ (8007278 <prvAddCurrentTaskToDelayedList+0x88>)
}
 8007254:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007258:	3104      	adds	r1, #4
 800725a:	f7ff b8b7 	b.w	80063cc <vListInsertEnd>
 800725e:	bf00      	nop
 8007260:	20005158 	.word	0x20005158
 8007264:	2000525c 	.word	0x2000525c
 8007268:	20005154 	.word	0x20005154
 800726c:	200051a0 	.word	0x200051a0
 8007270:	200051a4 	.word	0x200051a4
 8007274:	2000513c 	.word	0x2000513c
 8007278:	20005160 	.word	0x20005160

0800727c <prvIdleTask>:
{
 800727c:	b580      	push	{r7, lr}
 800727e:	4d23      	ldr	r5, [pc, #140]	@ (800730c <prvIdleTask+0x90>)
 8007280:	4f23      	ldr	r7, [pc, #140]	@ (8007310 <prvIdleTask+0x94>)
 8007282:	4e24      	ldr	r6, [pc, #144]	@ (8007314 <prvIdleTask+0x98>)
 8007284:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8007318 <prvIdleTask+0x9c>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b35b      	cbz	r3, 80072e4 <prvIdleTask+0x68>
			taskENTER_CRITICAL();
 800728c:	f7ff f942 	bl	8006514 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007294:	1d20      	adds	r0, r4, #4
 8007296:	f7ff f8bf 	bl	8006418 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800729a:	6833      	ldr	r3, [r6, #0]
 800729c:	3b01      	subs	r3, #1
 800729e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 80072a6:	f7ff f957 	bl	8006558 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072aa:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 80072ae:	f003 f8d7 	bl	800a460 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072b2:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 80072b6:	b163      	cbz	r3, 80072d2 <prvIdleTask+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d022      	beq.n	8007302 <prvIdleTask+0x86>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d0e3      	beq.n	8007288 <prvIdleTask+0xc>
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	e7fe      	b.n	80072d0 <prvIdleTask+0x54>
				vPortFree( pxTCB->pxStack );
 80072d2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80072d4:	f7ff f806 	bl	80062e4 <vPortFree>
				vPortFree( pxTCB );
 80072d8:	4620      	mov	r0, r4
 80072da:	f7ff f803 	bl	80062e4 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072de:	682b      	ldr	r3, [r5, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1d3      	bne.n	800728c <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072e4:	f8d8 3000 	ldr.w	r3, [r8]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d9cd      	bls.n	8007288 <prvIdleTask+0xc>
				taskYIELD();
 80072ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80072f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	e7c2      	b.n	8007288 <prvIdleTask+0xc>
				vPortFree( pxTCB );
 8007302:	4620      	mov	r0, r4
 8007304:	f7fe ffee 	bl	80062e4 <vPortFree>
 8007308:	e7be      	b.n	8007288 <prvIdleTask+0xc>
 800730a:	bf00      	nop
 800730c:	20005174 	.word	0x20005174
 8007310:	20005178 	.word	0x20005178
 8007314:	2000515c 	.word	0x2000515c
 8007318:	200051d0 	.word	0x200051d0

0800731c <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007320:	4b48      	ldr	r3, [pc, #288]	@ (8007444 <xTaskIncrementTick.part.0+0x128>)
 8007322:	681d      	ldr	r5, [r3, #0]
 8007324:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
 8007326:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8007328:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800732a:	2d00      	cmp	r5, #0
 800732c:	d041      	beq.n	80073b2 <xTaskIncrementTick.part.0+0x96>
 800732e:	4b46      	ldr	r3, [pc, #280]	@ (8007448 <xTaskIncrementTick.part.0+0x12c>)
 8007330:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	429d      	cmp	r5, r3
 8007336:	d349      	bcc.n	80073cc <xTaskIncrementTick.part.0+0xb0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007338:	4e44      	ldr	r6, [pc, #272]	@ (800744c <xTaskIncrementTick.part.0+0x130>)
 800733a:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8007460 <xTaskIncrementTick.part.0+0x144>
 800733e:	6833      	ldr	r3, [r6, #0]
 8007340:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 8007464 <xTaskIncrementTick.part.0+0x148>
 8007344:	681c      	ldr	r4, [r3, #0]
 8007346:	2c00      	cmp	r4, #0
 8007348:	d076      	beq.n	8007438 <xTaskIncrementTick.part.0+0x11c>
					prvAddTaskToReadyList( pxTCB );
 800734a:	4f41      	ldr	r7, [pc, #260]	@ (8007450 <xTaskIncrementTick.part.0+0x134>)
BaseType_t xSwitchRequired = pdFALSE;
 800734c:	2400      	movs	r4, #0
 800734e:	e022      	b.n	8007396 <xTaskIncrementTick.part.0+0x7a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007350:	f7ff f862 	bl	8006418 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007354:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007358:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800735c:	b10a      	cbz	r2, 8007362 <xTaskIncrementTick.part.0+0x46>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800735e:	f7ff f85b 	bl	8006418 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007362:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2201      	movs	r2, #1
 800736a:	4082      	lsls	r2, r0
 800736c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007370:	431a      	orrs	r2, r3
 8007372:	4651      	mov	r1, sl
 8007374:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8007378:	603a      	str	r2, [r7, #0]
 800737a:	f7ff f827 	bl	80063cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800737e:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007382:	6830      	ldr	r0, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007384:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 8007388:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800738a:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 800738c:	4291      	cmp	r1, r2
 800738e:	bf28      	it	cs
 8007390:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007392:	2b00      	cmp	r3, #0
 8007394:	d050      	beq.n	8007438 <xTaskIncrementTick.part.0+0x11c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007396:	6833      	ldr	r3, [r6, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800739e:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073a2:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 80073a6:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073a8:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 80073aa:	d2d1      	bcs.n	8007350 <xTaskIncrementTick.part.0+0x34>
						xNextTaskUnblockTime = xItemValue;
 80073ac:	9b01      	ldr	r3, [sp, #4]
 80073ae:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073b0:	e011      	b.n	80073d6 <xTaskIncrementTick.part.0+0xba>
			taskSWITCH_DELAYED_LISTS();
 80073b2:	4b26      	ldr	r3, [pc, #152]	@ (800744c <xTaskIncrementTick.part.0+0x130>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	b30a      	cbz	r2, 80073fe <xTaskIncrementTick.part.0+0xe2>
 80073ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	e7fe      	b.n	80073ca <xTaskIncrementTick.part.0+0xae>
 80073cc:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8007460 <xTaskIncrementTick.part.0+0x144>
 80073d0:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8007464 <xTaskIncrementTick.part.0+0x148>
BaseType_t xSwitchRequired = pdFALSE;
 80073d4:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073d6:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 80073da:	491e      	ldr	r1, [pc, #120]	@ (8007454 <xTaskIncrementTick.part.0+0x138>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 80073e8:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 80073ea:	2a02      	cmp	r2, #2
 80073ec:	bf28      	it	cs
 80073ee:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 80073f0:	2b00      	cmp	r3, #0
}
 80073f2:	bf0c      	ite	eq
 80073f4:	4620      	moveq	r0, r4
 80073f6:	2001      	movne	r0, #1
 80073f8:	b003      	add	sp, #12
 80073fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80073fe:	4a16      	ldr	r2, [pc, #88]	@ (8007458 <xTaskIncrementTick.part.0+0x13c>)
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	6811      	ldr	r1, [r2, #0]
 8007404:	6019      	str	r1, [r3, #0]
 8007406:	4915      	ldr	r1, [pc, #84]	@ (800745c <xTaskIncrementTick.part.0+0x140>)
 8007408:	6010      	str	r0, [r2, #0]
 800740a:	680a      	ldr	r2, [r1, #0]
 800740c:	3201      	adds	r2, #1
 800740e:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	b93a      	cbnz	r2, 8007426 <xTaskIncrementTick.part.0+0x10a>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007416:	4b0c      	ldr	r3, [pc, #48]	@ (8007448 <xTaskIncrementTick.part.0+0x12c>)
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	461a      	mov	r2, r3
 800741c:	f04f 33ff 	mov.w	r3, #4294967295
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	4613      	mov	r3, r2
 8007424:	e785      	b.n	8007332 <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007426:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007428:	4a07      	ldr	r2, [pc, #28]	@ (8007448 <xTaskIncrementTick.part.0+0x12c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800742a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800742c:	9201      	str	r2, [sp, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	4613      	mov	r3, r2
}
 8007436:	e77c      	b.n	8007332 <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007438:	9a01      	ldr	r2, [sp, #4]
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
 800743e:	6013      	str	r3, [r2, #0]
					break;
 8007440:	e7c9      	b.n	80073d6 <xTaskIncrementTick.part.0+0xba>
 8007442:	bf00      	nop
 8007444:	20005158 	.word	0x20005158
 8007448:	2000513c 	.word	0x2000513c
 800744c:	200051a4 	.word	0x200051a4
 8007450:	20005154 	.word	0x20005154
 8007454:	20005148 	.word	0x20005148
 8007458:	200051a0 	.word	0x200051a0
 800745c:	20005144 	.word	0x20005144
 8007460:	200051d0 	.word	0x200051d0
 8007464:	2000525c 	.word	0x2000525c

08007468 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8007468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 800746c:	4d48      	ldr	r5, [pc, #288]	@ (8007590 <xTaskResumeAll.part.0+0x128>)
BaseType_t xTaskResumeAll( void )
 800746e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8007470:	f7ff f850 	bl	8006514 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	3b01      	subs	r3, #1
 8007478:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d16e      	bne.n	800755e <xTaskResumeAll.part.0+0xf6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007480:	4b44      	ldr	r3, [pc, #272]	@ (8007594 <xTaskResumeAll.part.0+0x12c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d06a      	beq.n	800755e <xTaskResumeAll.part.0+0xf6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007488:	f8df a120 	ldr.w	sl, [pc, #288]	@ 80075ac <xTaskResumeAll.part.0+0x144>
 800748c:	f8da 2000 	ldr.w	r2, [sl]
 8007490:	2a00      	cmp	r2, #0
 8007492:	d079      	beq.n	8007588 <xTaskResumeAll.part.0+0x120>
 8007494:	4b40      	ldr	r3, [pc, #256]	@ (8007598 <xTaskResumeAll.part.0+0x130>)
 8007496:	4e41      	ldr	r6, [pc, #260]	@ (800759c <xTaskResumeAll.part.0+0x134>)
 8007498:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 80075b0 <xTaskResumeAll.part.0+0x148>
 800749c:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 80075b4 <xTaskResumeAll.part.0+0x14c>
 80074a0:	9301      	str	r3, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80074a2:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a4:	f8da 200c 	ldr.w	r2, [sl, #12]
 80074a8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ac:	f10b 0404 	add.w	r4, fp, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074b0:	f10b 0018 	add.w	r0, fp, #24
 80074b4:	f7fe ffb0 	bl	8006418 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074b8:	4620      	mov	r0, r4
 80074ba:	f7fe ffad 	bl	8006418 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074be:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 80074c2:	6831      	ldr	r1, [r6, #0]
 80074c4:	fa07 f200 	lsl.w	r2, r7, r0
 80074c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80074cc:	430a      	orrs	r2, r1
 80074ce:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80074d2:	4621      	mov	r1, r4
 80074d4:	6032      	str	r2, [r6, #0]
 80074d6:	f7fe ff79 	bl	80063cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074da:	f8d8 2000 	ldr.w	r2, [r8]
 80074de:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 80074e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074e4:	4291      	cmp	r1, r2
 80074e6:	d341      	bcc.n	800756c <xTaskResumeAll.part.0+0x104>
						xYieldPending = pdTRUE;
 80074e8:	9b01      	ldr	r3, [sp, #4]
 80074ea:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074ec:	f8da 2000 	ldr.w	r2, [sl]
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	d1d7      	bne.n	80074a4 <xTaskResumeAll.part.0+0x3c>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074f4:	4b2a      	ldr	r3, [pc, #168]	@ (80075a0 <xTaskResumeAll.part.0+0x138>)
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	6812      	ldr	r2, [r2, #0]
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	d03f      	beq.n	800757e <xTaskResumeAll.part.0+0x116>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074fe:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007500:	4b28      	ldr	r3, [pc, #160]	@ (80075a4 <xTaskResumeAll.part.0+0x13c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007502:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007504:	68d2      	ldr	r2, [r2, #12]
 8007506:	6852      	ldr	r2, [r2, #4]
 8007508:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800750a:	4e27      	ldr	r6, [pc, #156]	@ (80075a8 <xTaskResumeAll.part.0+0x140>)
 800750c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800750e:	b194      	cbz	r4, 8007536 <xTaskResumeAll.part.0+0xce>
								xYieldPending = pdTRUE;
 8007510:	2701      	movs	r7, #1
 8007512:	e006      	b.n	8007522 <xTaskResumeAll.part.0+0xba>
 8007514:	f7ff ff02 	bl	800731c <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8007518:	b108      	cbz	r0, 800751e <xTaskResumeAll.part.0+0xb6>
								xYieldPending = pdTRUE;
 800751a:	9b01      	ldr	r3, [sp, #4]
 800751c:	601f      	str	r7, [r3, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800751e:	3c01      	subs	r4, #1
 8007520:	d008      	beq.n	8007534 <xTaskResumeAll.part.0+0xcc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007522:	682b      	ldr	r3, [r5, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0f5      	beq.n	8007514 <xTaskResumeAll.part.0+0xac>
		++xPendedTicks;
 8007528:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800752a:	3c01      	subs	r4, #1
		++xPendedTicks;
 800752c:	f103 0301 	add.w	r3, r3, #1
 8007530:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007532:	d1f6      	bne.n	8007522 <xTaskResumeAll.part.0+0xba>
						xPendedTicks = 0;
 8007534:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8007536:	9b01      	ldr	r3, [sp, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	b183      	cbz	r3, 800755e <xTaskResumeAll.part.0+0xf6>
					taskYIELD_IF_USING_PREEMPTION();
 800753c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007544:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007550:	f7ff f802 	bl	8006558 <vPortExitCritical>
						xAlreadyYielded = pdTRUE;
 8007554:	2401      	movs	r4, #1
}
 8007556:	4620      	mov	r0, r4
 8007558:	b003      	add	sp, #12
 800755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	taskEXIT_CRITICAL();
 800755e:	f7fe fffb 	bl	8006558 <vPortExitCritical>
BaseType_t xAlreadyYielded = pdFALSE;
 8007562:	2400      	movs	r4, #0
}
 8007564:	4620      	mov	r0, r4
 8007566:	b003      	add	sp, #12
 8007568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800756c:	f8da 2000 	ldr.w	r2, [sl]
 8007570:	2a00      	cmp	r2, #0
 8007572:	d197      	bne.n	80074a4 <xTaskResumeAll.part.0+0x3c>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007574:	4b0a      	ldr	r3, [pc, #40]	@ (80075a0 <xTaskResumeAll.part.0+0x138>)
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	2a00      	cmp	r2, #0
 800757c:	d1bf      	bne.n	80074fe <xTaskResumeAll.part.0+0x96>
		xNextTaskUnblockTime = portMAX_DELAY;
 800757e:	4b09      	ldr	r3, [pc, #36]	@ (80075a4 <xTaskResumeAll.part.0+0x13c>)
 8007580:	f04f 32ff 	mov.w	r2, #4294967295
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	e7c0      	b.n	800750a <xTaskResumeAll.part.0+0xa2>
 8007588:	4b03      	ldr	r3, [pc, #12]	@ (8007598 <xTaskResumeAll.part.0+0x130>)
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	e7bd      	b.n	800750a <xTaskResumeAll.part.0+0xa2>
 800758e:	bf00      	nop
 8007590:	20005138 	.word	0x20005138
 8007594:	2000515c 	.word	0x2000515c
 8007598:	20005148 	.word	0x20005148
 800759c:	20005154 	.word	0x20005154
 80075a0:	200051a4 	.word	0x200051a4
 80075a4:	2000513c 	.word	0x2000513c
 80075a8:	2000514c 	.word	0x2000514c
 80075ac:	2000518c 	.word	0x2000518c
 80075b0:	200051d0 	.word	0x200051d0
 80075b4:	2000525c 	.word	0x2000525c

080075b8 <xTaskCreateStatic>:
	{
 80075b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80075c2:	b1c5      	cbz	r5, 80075f6 <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
 80075c4:	b174      	cbz	r4, 80075e4 <xTaskCreateStatic+0x2c>
 80075c6:	4606      	mov	r6, r0
			volatile size_t xSize = sizeof( StaticTask_t );
 80075c8:	20a0      	movs	r0, #160	@ 0xa0
 80075ca:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075cc:	9803      	ldr	r0, [sp, #12]
 80075ce:	28a0      	cmp	r0, #160	@ 0xa0
 80075d0:	d01a      	beq.n	8007608 <xTaskCreateStatic+0x50>
 80075d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	e7fe      	b.n	80075e2 <xTaskCreateStatic+0x2a>
 80075e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80075f4:	e7fe      	b.n	80075f4 <xTaskCreateStatic+0x3c>
 80075f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007606:	e7fe      	b.n	8007606 <xTaskCreateStatic+0x4e>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007608:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800760c:	3a01      	subs	r2, #1
 800760e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007612:	6325      	str	r5, [r4, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007614:	f022 0507 	bic.w	r5, r2, #7
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007618:	2202      	movs	r2, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800761a:	9803      	ldr	r0, [sp, #12]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800761c:	f884 209d 	strb.w	r2, [r4, #157]	@ 0x9d
	if( pcName != NULL )
 8007620:	2900      	cmp	r1, #0
 8007622:	d073      	beq.n	800770c <xTaskCreateStatic+0x154>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007624:	780a      	ldrb	r2, [r1, #0]
 8007626:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800762a:	2a00      	cmp	r2, #0
 800762c:	d036      	beq.n	800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800762e:	784a      	ldrb	r2, [r1, #1]
 8007630:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8007634:	b392      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007636:	788a      	ldrb	r2, [r1, #2]
 8007638:	f884 2036 	strb.w	r2, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 800763c:	b372      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800763e:	78ca      	ldrb	r2, [r1, #3]
 8007640:	f884 2037 	strb.w	r2, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8007644:	b352      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007646:	790a      	ldrb	r2, [r1, #4]
 8007648:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800764c:	b332      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800764e:	794a      	ldrb	r2, [r1, #5]
 8007650:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8007654:	b312      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007656:	798a      	ldrb	r2, [r1, #6]
 8007658:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800765c:	b1f2      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800765e:	79ca      	ldrb	r2, [r1, #7]
 8007660:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8007664:	b1d2      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007666:	7a0a      	ldrb	r2, [r1, #8]
 8007668:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 800766c:	b1b2      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800766e:	7a4a      	ldrb	r2, [r1, #9]
 8007670:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8007674:	b192      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007676:	7a8a      	ldrb	r2, [r1, #10]
 8007678:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800767c:	b172      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800767e:	7aca      	ldrb	r2, [r1, #11]
 8007680:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8007684:	b152      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007686:	7b0a      	ldrb	r2, [r1, #12]
 8007688:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800768c:	b132      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800768e:	7b4a      	ldrb	r2, [r1, #13]
 8007690:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8007694:	b112      	cbz	r2, 800769c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007696:	7b8a      	ldrb	r2, [r1, #14]
 8007698:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800769c:	2200      	movs	r2, #0
 800769e:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076a2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	2f06      	cmp	r7, #6
 80076a8:	bf28      	it	cs
 80076aa:	2706      	movcs	r7, #6
		pxNewTCB->uxMutexesHeld = 0;
 80076ac:	f04f 0800 	mov.w	r8, #0
	pxNewTCB->uxPriority = uxPriority;
 80076b0:	62e7      	str	r7, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80076b2:	6467      	str	r7, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076b4:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80076b6:	f8c4 8048 	str.w	r8, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076ba:	f7fe fe83 	bl	80063c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076be:	f104 0018 	add.w	r0, r4, #24
 80076c2:	f7fe fe7f 	bl	80063c4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c6:	f1c7 0707 	rsb	r7, r7, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076ca:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076cc:	61a7      	str	r7, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 80076ce:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076d2:	4641      	mov	r1, r8
 80076d4:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076d6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076d8:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076da:	f884 809c 	strb.w	r8, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076de:	f002 feb7 	bl	800a450 <memset>
 80076e2:	4f0c      	ldr	r7, [pc, #48]	@ (8007714 <xTaskCreateStatic+0x15c>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076e4:	9b01      	ldr	r3, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076e6:	6527      	str	r7, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076e8:	461a      	mov	r2, r3
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80076ee:	37d0      	adds	r7, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076f0:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076f2:	6563      	str	r3, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076f4:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076f6:	65a7      	str	r7, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076f8:	f7fe fee0 	bl	80064bc <pxPortInitialiseStack>
 80076fc:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff fcee 	bl	80070e0 <prvAddNewTaskToReadyList>
	}
 8007704:	4620      	mov	r0, r4
 8007706:	b004      	add	sp, #16
 8007708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800770c:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 8007710:	e7c7      	b.n	80076a2 <xTaskCreateStatic+0xea>
 8007712:	bf00      	nop
 8007714:	20005788 	.word	0x20005788

08007718 <xTaskCreate>:
	{
 8007718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800771c:	0095      	lsls	r5, r2, #2
	{
 800771e:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007720:	4628      	mov	r0, r5
	{
 8007722:	460e      	mov	r6, r1
 8007724:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007726:	f7fe fd25 	bl	8006174 <pvPortMalloc>
			if( pxStack != NULL )
 800772a:	2800      	cmp	r0, #0
 800772c:	f000 8086 	beq.w	800783c <xTaskCreate+0x124>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007730:	4607      	mov	r7, r0
 8007732:	20a0      	movs	r0, #160	@ 0xa0
 8007734:	f7fe fd1e 	bl	8006174 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007738:	4604      	mov	r4, r0
 800773a:	2800      	cmp	r0, #0
 800773c:	d07b      	beq.n	8007836 <xTaskCreate+0x11e>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800773e:	3d04      	subs	r5, #4
 8007740:	443d      	add	r5, r7
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007742:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8007744:	6307      	str	r7, [r0, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007746:	f025 0507 	bic.w	r5, r5, #7
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800774a:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
	if( pcName != NULL )
 800774e:	2e00      	cmp	r6, #0
 8007750:	d078      	beq.n	8007844 <xTaskCreate+0x12c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007752:	7833      	ldrb	r3, [r6, #0]
 8007754:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8007758:	2b00      	cmp	r3, #0
 800775a:	d036      	beq.n	80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800775c:	7873      	ldrb	r3, [r6, #1]
 800775e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8007762:	b393      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007764:	78b3      	ldrb	r3, [r6, #2]
 8007766:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 800776a:	b373      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800776c:	78f3      	ldrb	r3, [r6, #3]
 800776e:	f880 3037 	strb.w	r3, [r0, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8007772:	b353      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007774:	7933      	ldrb	r3, [r6, #4]
 8007776:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 800777a:	b333      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800777c:	7973      	ldrb	r3, [r6, #5]
 800777e:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8007782:	b313      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007784:	79b3      	ldrb	r3, [r6, #6]
 8007786:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 800778a:	b1f3      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800778c:	79f3      	ldrb	r3, [r6, #7]
 800778e:	f880 303b 	strb.w	r3, [r0, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8007792:	b1d3      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007794:	7a33      	ldrb	r3, [r6, #8]
 8007796:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 800779a:	b1b3      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800779c:	7a73      	ldrb	r3, [r6, #9]
 800779e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 80077a2:	b193      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077a4:	7ab3      	ldrb	r3, [r6, #10]
 80077a6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 80077aa:	b173      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077ac:	7af3      	ldrb	r3, [r6, #11]
 80077ae:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 80077b2:	b153      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077b4:	7b33      	ldrb	r3, [r6, #12]
 80077b6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 80077ba:	b133      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077bc:	7b73      	ldrb	r3, [r6, #13]
 80077be:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 80077c2:	b113      	cbz	r3, 80077ca <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077c4:	7bb3      	ldrb	r3, [r6, #14]
 80077c6:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077ca:	2300      	movs	r3, #0
 80077cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077d0:	9e08      	ldr	r6, [sp, #32]
 80077d2:	2e06      	cmp	r6, #6
 80077d4:	bf28      	it	cs
 80077d6:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 80077d8:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 80077da:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80077dc:	6466      	str	r6, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077de:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80077e0:	64a7      	str	r7, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077e2:	f7fe fdef 	bl	80063c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077e6:	f104 0018 	add.w	r0, r4, #24
 80077ea:	f7fe fdeb 	bl	80063c4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ee:	f1c6 0607 	rsb	r6, r6, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80077f2:	224c      	movs	r2, #76	@ 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 80077f4:	f8c4 7098 	str.w	r7, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80077f8:	4639      	mov	r1, r7
 80077fa:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077fc:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077fe:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007800:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007802:	f884 709c 	strb.w	r7, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007806:	f002 fe23 	bl	800a450 <memset>
 800780a:	4b10      	ldr	r3, [pc, #64]	@ (800784c <xTaskCreate+0x134>)
 800780c:	6523      	str	r3, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800780e:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007810:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 8007814:	33d0      	adds	r3, #208	@ 0xd0
 8007816:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007818:	464a      	mov	r2, r9
 800781a:	4641      	mov	r1, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800781c:	6565      	str	r5, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800781e:	f7fe fe4d 	bl	80064bc <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8007822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007824:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007826:	b103      	cbz	r3, 800782a <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007828:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800782a:	4620      	mov	r0, r4
 800782c:	f7ff fc58 	bl	80070e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007830:	2001      	movs	r0, #1
	}
 8007832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007836:	4638      	mov	r0, r7
 8007838:	f7fe fd54 	bl	80062e4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8007840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007844:	f880 6034 	strb.w	r6, [r0, #52]	@ 0x34
 8007848:	e7c2      	b.n	80077d0 <xTaskCreate+0xb8>
 800784a:	bf00      	nop
 800784c:	20005788 	.word	0x20005788

08007850 <vTaskDelete>:
	{
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007854:	4d41      	ldr	r5, [pc, #260]	@ (800795c <vTaskDelete+0x10c>)
		taskENTER_CRITICAL();
 8007856:	f7fe fe5d 	bl	8006514 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800785a:	2c00      	cmp	r4, #0
 800785c:	d059      	beq.n	8007912 <vTaskDelete+0xc2>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800785e:	1d26      	adds	r6, r4, #4
 8007860:	4630      	mov	r0, r6
 8007862:	f7fe fdd9 	bl	8006418 <uxListRemove>
 8007866:	b930      	cbnz	r0, 8007876 <vTaskDelete+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007868:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800786a:	493d      	ldr	r1, [pc, #244]	@ (8007960 <vTaskDelete+0x110>)
 800786c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	58cb      	ldr	r3, [r1, r3]
 8007874:	b323      	cbz	r3, 80078c0 <vTaskDelete+0x70>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007876:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007878:	b11b      	cbz	r3, 8007882 <vTaskDelete+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800787a:	f104 0018 	add.w	r0, r4, #24
 800787e:	f7fe fdcb 	bl	8006418 <uxListRemove>
			uxTaskNumber++;
 8007882:	4a38      	ldr	r2, [pc, #224]	@ (8007964 <vTaskDelete+0x114>)
 8007884:	6813      	ldr	r3, [r2, #0]
 8007886:	3301      	adds	r3, #1
 8007888:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 800788a:	682b      	ldr	r3, [r5, #0]
 800788c:	42a3      	cmp	r3, r4
 800788e:	d037      	beq.n	8007900 <vTaskDelete+0xb0>
				--uxCurrentNumberOfTasks;
 8007890:	4a35      	ldr	r2, [pc, #212]	@ (8007968 <vTaskDelete+0x118>)
 8007892:	6813      	ldr	r3, [r2, #0]
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007894:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
				--uxCurrentNumberOfTasks;
 8007898:	3b01      	subs	r3, #1
 800789a:	6013      	str	r3, [r2, #0]
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800789c:	f002 fde0 	bl	800a460 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078a0:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 80078a4:	b1ab      	cbz	r3, 80078d2 <vTaskDelete+0x82>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d048      	beq.n	800793c <vTaskDelete+0xec>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d017      	beq.n	80078de <vTaskDelete+0x8e>
 80078ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	e7fe      	b.n	80078be <vTaskDelete+0x6e>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078c0:	492a      	ldr	r1, [pc, #168]	@ (800796c <vTaskDelete+0x11c>)
 80078c2:	2301      	movs	r3, #1
 80078c4:	fa03 f202 	lsl.w	r2, r3, r2
 80078c8:	680b      	ldr	r3, [r1, #0]
 80078ca:	ea23 0302 	bic.w	r3, r3, r2
 80078ce:	600b      	str	r3, [r1, #0]
 80078d0:	e7d1      	b.n	8007876 <vTaskDelete+0x26>
				vPortFree( pxTCB->pxStack );
 80078d2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80078d4:	f7fe fd06 	bl	80062e4 <vPortFree>
				vPortFree( pxTCB );
 80078d8:	4620      	mov	r0, r4
 80078da:	f7fe fd03 	bl	80062e4 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078de:	4b24      	ldr	r3, [pc, #144]	@ (8007970 <vTaskDelete+0x120>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	6812      	ldr	r2, [r2, #0]
 80078e4:	b9ba      	cbnz	r2, 8007916 <vTaskDelete+0xc6>
		xNextTaskUnblockTime = portMAX_DELAY;
 80078e6:	4b23      	ldr	r3, [pc, #140]	@ (8007974 <vTaskDelete+0x124>)
 80078e8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ec:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 80078ee:	f7fe fe33 	bl	8006558 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80078f2:	4b21      	ldr	r3, [pc, #132]	@ (8007978 <vTaskDelete+0x128>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	b113      	cbz	r3, 80078fe <vTaskDelete+0xae>
			if( pxTCB == pxCurrentTCB )
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	d012      	beq.n	8007924 <vTaskDelete+0xd4>
	}
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007900:	481e      	ldr	r0, [pc, #120]	@ (800797c <vTaskDelete+0x12c>)
 8007902:	4631      	mov	r1, r6
 8007904:	f7fe fd62 	bl	80063cc <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8007908:	4a1d      	ldr	r2, [pc, #116]	@ (8007980 <vTaskDelete+0x130>)
 800790a:	6813      	ldr	r3, [r2, #0]
 800790c:	3301      	adds	r3, #1
 800790e:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 8007910:	e7ed      	b.n	80078ee <vTaskDelete+0x9e>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007912:	682c      	ldr	r4, [r5, #0]
 8007914:	e7a3      	b.n	800785e <vTaskDelete+0xe>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007916:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007918:	4b16      	ldr	r3, [pc, #88]	@ (8007974 <vTaskDelete+0x124>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800791c:	68d2      	ldr	r2, [r2, #12]
 800791e:	6852      	ldr	r2, [r2, #4]
 8007920:	601a      	str	r2, [r3, #0]
}
 8007922:	e7e4      	b.n	80078ee <vTaskDelete+0x9e>
				configASSERT( uxSchedulerSuspended == 0 );
 8007924:	4b17      	ldr	r3, [pc, #92]	@ (8007984 <vTaskDelete+0x134>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	b163      	cbz	r3, 8007944 <vTaskDelete+0xf4>
 800792a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	e7fe      	b.n	800793a <vTaskDelete+0xea>
				vPortFree( pxTCB );
 800793c:	4620      	mov	r0, r4
 800793e:	f7fe fcd1 	bl	80062e4 <vPortFree>
 8007942:	e7cc      	b.n	80078de <vTaskDelete+0x8e>
				portYIELD_WITHIN_API();
 8007944:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007948:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800794c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	f3bf 8f6f 	isb	sy
	}
 8007958:	bd70      	pop	{r4, r5, r6, pc}
 800795a:	bf00      	nop
 800795c:	2000525c 	.word	0x2000525c
 8007960:	200051d0 	.word	0x200051d0
 8007964:	20005140 	.word	0x20005140
 8007968:	2000515c 	.word	0x2000515c
 800796c:	20005154 	.word	0x20005154
 8007970:	200051a4 	.word	0x200051a4
 8007974:	2000513c 	.word	0x2000513c
 8007978:	20005150 	.word	0x20005150
 800797c:	20005178 	.word	0x20005178
 8007980:	20005174 	.word	0x20005174
 8007984:	20005138 	.word	0x20005138

08007988 <vTaskDelay>:
	{
 8007988:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800798a:	b950      	cbnz	r0, 80079a2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800798c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007994:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
	}
 80079a0:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80079a2:	4c10      	ldr	r4, [pc, #64]	@ (80079e4 <vTaskDelay+0x5c>)
 80079a4:	6821      	ldr	r1, [r4, #0]
 80079a6:	b141      	cbz	r1, 80079ba <vTaskDelay+0x32>
 80079a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	e7fe      	b.n	80079b8 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	3301      	adds	r3, #1
 80079be:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079c0:	f7ff fc16 	bl	80071f0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	b943      	cbnz	r3, 80079da <vTaskDelay+0x52>
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	e7fe      	b.n	80079d8 <vTaskDelay+0x50>
 80079da:	f7ff fd45 	bl	8007468 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80079de:	2800      	cmp	r0, #0
 80079e0:	d0d4      	beq.n	800798c <vTaskDelay+0x4>
	}
 80079e2:	bd10      	pop	{r4, pc}
 80079e4:	20005138 	.word	0x20005138

080079e8 <uxTaskPriorityGet>:
	{
 80079e8:	b510      	push	{r4, lr}
 80079ea:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 80079ec:	f7fe fd92 	bl	8006514 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 80079f0:	b124      	cbz	r4, 80079fc <uxTaskPriorityGet+0x14>
			uxReturn = pxTCB->uxPriority;
 80079f2:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
		taskEXIT_CRITICAL();
 80079f4:	f7fe fdb0 	bl	8006558 <vPortExitCritical>
	}
 80079f8:	4620      	mov	r0, r4
 80079fa:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 80079fc:	4b03      	ldr	r3, [pc, #12]	@ (8007a0c <uxTaskPriorityGet+0x24>)
 80079fe:	681c      	ldr	r4, [r3, #0]
			uxReturn = pxTCB->uxPriority;
 8007a00:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
		taskEXIT_CRITICAL();
 8007a02:	f7fe fda9 	bl	8006558 <vPortExitCritical>
	}
 8007a06:	4620      	mov	r0, r4
 8007a08:	bd10      	pop	{r4, pc}
 8007a0a:	bf00      	nop
 8007a0c:	2000525c 	.word	0x2000525c

08007a10 <uxTaskPriorityGetFromISR>:
	{
 8007a10:	b510      	push	{r4, lr}
 8007a12:	4604      	mov	r4, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a14:	f7fe fe9c 	bl	8006750 <vPortValidateInterruptPriority>
	__asm volatile
 8007a18:	f3ef 8311 	mrs	r3, BASEPRI
 8007a1c:	f04f 0250 	mov.w	r2, #80	@ 0x50
 8007a20:	f382 8811 	msr	BASEPRI, r2
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
			pxTCB = prvGetTCBFromHandle( xTask );
 8007a2c:	b11c      	cbz	r4, 8007a36 <uxTaskPriorityGetFromISR+0x26>
			uxReturn = pxTCB->uxPriority;
 8007a2e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	__asm volatile
 8007a30:	f383 8811 	msr	BASEPRI, r3
	}
 8007a34:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 8007a36:	4a03      	ldr	r2, [pc, #12]	@ (8007a44 <uxTaskPriorityGetFromISR+0x34>)
 8007a38:	6814      	ldr	r4, [r2, #0]
			uxReturn = pxTCB->uxPriority;
 8007a3a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8007a3c:	f383 8811 	msr	BASEPRI, r3
	}
 8007a40:	bd10      	pop	{r4, pc}
 8007a42:	bf00      	nop
 8007a44:	2000525c 	.word	0x2000525c

08007a48 <vTaskStartScheduler>:
{
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	b084      	sub	sp, #16
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a4c:	aa02      	add	r2, sp, #8
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a4e:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a50:	a901      	add	r1, sp, #4
 8007a52:	4668      	mov	r0, sp
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a54:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a58:	f7f9 ff54 	bl	8001904 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a5c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8007a60:	9d00      	ldr	r5, [sp, #0]
		configASSERT( puxStackBuffer != NULL );
 8007a62:	b1bb      	cbz	r3, 8007a94 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 8007a64:	b16d      	cbz	r5, 8007a82 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a66:	21a0      	movs	r1, #160	@ 0xa0
 8007a68:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a6a:	9903      	ldr	r1, [sp, #12]
 8007a6c:	29a0      	cmp	r1, #160	@ 0xa0
 8007a6e:	d01a      	beq.n	8007aa6 <vTaskStartScheduler+0x5e>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	e7fe      	b.n	8007a80 <vTaskStartScheduler+0x38>
 8007a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007a92:	e7fe      	b.n	8007a92 <vTaskStartScheduler+0x4a>
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007aa4:	e7fe      	b.n	8007aa4 <vTaskStartScheduler+0x5c>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007aa6:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8007aaa:	3a01      	subs	r2, #1
 8007aac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ab0:	2102      	movs	r1, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ab2:	632b      	str	r3, [r5, #48]	@ 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8007b70 <vTaskStartScheduler+0x128>)
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ab6:	f885 109d 	strb.w	r1, [r5, #157]	@ 0x9d
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007aba:	1d28      	adds	r0, r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007abc:	636b      	str	r3, [r5, #52]	@ 0x34
		pxNewTCB->uxMutexesHeld = 0;
 8007abe:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ac2:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ac6:	f885 4043 	strb.w	r4, [r5, #67]	@ 0x43
	pxNewTCB->uxPriority = uxPriority;
 8007aca:	62ec      	str	r4, [r5, #44]	@ 0x2c
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007acc:	f022 0607 	bic.w	r6, r2, #7
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ad0:	9b03      	ldr	r3, [sp, #12]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ad2:	f7fe fc77 	bl	80063c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ad6:	f105 0018 	add.w	r0, r5, #24
 8007ada:	f7fe fc73 	bl	80063c4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ade:	2307      	movs	r3, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ae0:	224c      	movs	r2, #76	@ 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8007ae2:	f8c5 4098 	str.w	r4, [r5, #152]	@ 0x98
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae6:	61ab      	str	r3, [r5, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ae8:	4621      	mov	r1, r4
 8007aea:	18a8      	adds	r0, r5, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007aec:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007aee:	626d      	str	r5, [r5, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007af0:	f885 409c 	strb.w	r4, [r5, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007af4:	f002 fcac 	bl	800a450 <memset>
 8007af8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b74 <vTaskStartScheduler+0x12c>)
 8007afa:	652b      	str	r3, [r5, #80]	@ 0x50
 8007afc:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b00:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b02:	491d      	ldr	r1, [pc, #116]	@ (8007b78 <vTaskStartScheduler+0x130>)
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007b04:	65ab      	str	r3, [r5, #88]	@ 0x58
 8007b06:	656a      	str	r2, [r5, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b08:	4630      	mov	r0, r6
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	f7fe fcd6 	bl	80064bc <pxPortInitialiseStack>
 8007b10:	6028      	str	r0, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b12:	4628      	mov	r0, r5
 8007b14:	f7ff fae4 	bl	80070e0 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 8007b18:	f000 fbda 	bl	80082d0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007b1c:	2801      	cmp	r0, #1
 8007b1e:	d00c      	beq.n	8007b3a <vTaskStartScheduler+0xf2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b20:	3001      	adds	r0, #1
 8007b22:	d001      	beq.n	8007b28 <vTaskStartScheduler+0xe0>
}
 8007b24:	b004      	add	sp, #16
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b38:	e7fe      	b.n	8007b38 <vTaskStartScheduler+0xf0>
 8007b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b7c <vTaskStartScheduler+0x134>)
 8007b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8007b80 <vTaskStartScheduler+0x138>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b50:	490c      	ldr	r1, [pc, #48]	@ (8007b84 <vTaskStartScheduler+0x13c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b52:	334c      	adds	r3, #76	@ 0x4c
 8007b54:	6013      	str	r3, [r2, #0]
		xSchedulerRunning = pdTRUE;
 8007b56:	4a0c      	ldr	r2, [pc, #48]	@ (8007b88 <vTaskStartScheduler+0x140>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b58:	4b0c      	ldr	r3, [pc, #48]	@ (8007b8c <vTaskStartScheduler+0x144>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b5a:	f04f 35ff 	mov.w	r5, #4294967295
 8007b5e:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8007b60:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b62:	601c      	str	r4, [r3, #0]
}
 8007b64:	b004      	add	sp, #16
 8007b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8007b6a:	f7fe bd51 	b.w	8006610 <xPortStartScheduler>
 8007b6e:	bf00      	nop
 8007b70:	454c4449 	.word	0x454c4449
 8007b74:	20005788 	.word	0x20005788
 8007b78:	0800727d 	.word	0x0800727d
 8007b7c:	2000525c 	.word	0x2000525c
 8007b80:	200005ec 	.word	0x200005ec
 8007b84:	2000513c 	.word	0x2000513c
 8007b88:	20005150 	.word	0x20005150
 8007b8c:	20005158 	.word	0x20005158

08007b90 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007b90:	4a02      	ldr	r2, [pc, #8]	@ (8007b9c <vTaskSuspendAll+0xc>)
 8007b92:	6813      	ldr	r3, [r2, #0]
 8007b94:	3301      	adds	r3, #1
 8007b96:	6013      	str	r3, [r2, #0]
}
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	20005138 	.word	0x20005138

08007ba0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8007ba0:	4b06      	ldr	r3, [pc, #24]	@ (8007bbc <xTaskResumeAll+0x1c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	b943      	cbnz	r3, 8007bb8 <xTaskResumeAll+0x18>
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	e7fe      	b.n	8007bb6 <xTaskResumeAll+0x16>
 8007bb8:	f7ff bc56 	b.w	8007468 <xTaskResumeAll.part.0>
 8007bbc:	20005138 	.word	0x20005138

08007bc0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007bc0:	4b01      	ldr	r3, [pc, #4]	@ (8007bc8 <xTaskGetTickCount+0x8>)
 8007bc2:	6818      	ldr	r0, [r3, #0]
}
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	20005158 	.word	0x20005158

08007bcc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bcc:	4b05      	ldr	r3, [pc, #20]	@ (8007be4 <xTaskIncrementTick+0x18>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	b90b      	cbnz	r3, 8007bd6 <xTaskIncrementTick+0xa>
 8007bd2:	f7ff bba3 	b.w	800731c <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8007bd6:	4a04      	ldr	r2, [pc, #16]	@ (8007be8 <xTaskIncrementTick+0x1c>)
 8007bd8:	6813      	ldr	r3, [r2, #0]
 8007bda:	3301      	adds	r3, #1
}
 8007bdc:	2000      	movs	r0, #0
		++xPendedTicks;
 8007bde:	6013      	str	r3, [r2, #0]
}
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	20005138 	.word	0x20005138
 8007be8:	2000514c 	.word	0x2000514c

08007bec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bec:	4b18      	ldr	r3, [pc, #96]	@ (8007c50 <vTaskSwitchContext+0x64>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	b11b      	cbz	r3, 8007bfa <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8007bf2:	4b18      	ldr	r3, [pc, #96]	@ (8007c54 <vTaskSwitchContext+0x68>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007bfa:	4916      	ldr	r1, [pc, #88]	@ (8007c54 <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bfc:	4a16      	ldr	r2, [pc, #88]	@ (8007c58 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 8007bfe:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c00:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c02:	fab3 f383 	clz	r3, r3
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f1c3 031f 	rsb	r3, r3, #31
 8007c0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c10:	4912      	ldr	r1, [pc, #72]	@ (8007c5c <vTaskSwitchContext+0x70>)
 8007c12:	009a      	lsls	r2, r3, #2
 8007c14:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007c18:	5888      	ldr	r0, [r1, r2]
 8007c1a:	b940      	cbnz	r0, 8007c2e <vTaskSwitchContext+0x42>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007c2c:	e7fe      	b.n	8007c2c <vTaskSwitchContext+0x40>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c2e:	6858      	ldr	r0, [r3, #4]
 8007c30:	3208      	adds	r2, #8
 8007c32:	6840      	ldr	r0, [r0, #4]
 8007c34:	6058      	str	r0, [r3, #4]
 8007c36:	440a      	add	r2, r1
 8007c38:	4290      	cmp	r0, r2
 8007c3a:	bf04      	itt	eq
 8007c3c:	6840      	ldreq	r0, [r0, #4]
 8007c3e:	6058      	streq	r0, [r3, #4]
 8007c40:	4b07      	ldr	r3, [pc, #28]	@ (8007c60 <vTaskSwitchContext+0x74>)
 8007c42:	68c2      	ldr	r2, [r0, #12]
 8007c44:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a06      	ldr	r2, [pc, #24]	@ (8007c64 <vTaskSwitchContext+0x78>)
 8007c4a:	334c      	adds	r3, #76	@ 0x4c
 8007c4c:	6013      	str	r3, [r2, #0]
}
 8007c4e:	4770      	bx	lr
 8007c50:	20005138 	.word	0x20005138
 8007c54:	20005148 	.word	0x20005148
 8007c58:	20005154 	.word	0x20005154
 8007c5c:	200051d0 	.word	0x200051d0
 8007c60:	2000525c 	.word	0x2000525c
 8007c64:	200005ec 	.word	0x200005ec

08007c68 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007c68:	b320      	cbz	r0, 8007cb4 <vTaskPlaceOnEventList+0x4c>
{
 8007c6a:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c6c:	4d1f      	ldr	r5, [pc, #124]	@ (8007cec <vTaskPlaceOnEventList+0x84>)
 8007c6e:	460c      	mov	r4, r1
 8007c70:	6829      	ldr	r1, [r5, #0]
 8007c72:	3118      	adds	r1, #24
 8007c74:	f7fe fbb8 	bl	80063e8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8007c78:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf0 <vTaskPlaceOnEventList+0x88>)
 8007c7a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c7c:	6828      	ldr	r0, [r5, #0]
 8007c7e:	3004      	adds	r0, #4
 8007c80:	f7fe fbca 	bl	8006418 <uxListRemove>
 8007c84:	b940      	cbnz	r0, 8007c98 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007c86:	682b      	ldr	r3, [r5, #0]
 8007c88:	491a      	ldr	r1, [pc, #104]	@ (8007cf4 <vTaskPlaceOnEventList+0x8c>)
 8007c8a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007c8c:	680b      	ldr	r3, [r1, #0]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	4082      	lsls	r2, r0
 8007c92:	ea23 0302 	bic.w	r3, r3, r2
 8007c96:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c98:	1c63      	adds	r3, r4, #1
 8007c9a:	d014      	beq.n	8007cc6 <vTaskPlaceOnEventList+0x5e>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	19a4      	adds	r4, r4, r6
 8007ca0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ca2:	d317      	bcc.n	8007cd4 <vTaskPlaceOnEventList+0x6c>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ca4:	4b14      	ldr	r3, [pc, #80]	@ (8007cf8 <vTaskPlaceOnEventList+0x90>)
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	6829      	ldr	r1, [r5, #0]
}
 8007caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cae:	3104      	adds	r1, #4
 8007cb0:	f7fe bb9a 	b.w	80063e8 <vListInsert>
 8007cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007cc4:	e7fe      	b.n	8007cc4 <vTaskPlaceOnEventList+0x5c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cc6:	6829      	ldr	r1, [r5, #0]
 8007cc8:	480c      	ldr	r0, [pc, #48]	@ (8007cfc <vTaskPlaceOnEventList+0x94>)
}
 8007cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cce:	3104      	adds	r1, #4
 8007cd0:	f7fe bb7c 	b.w	80063cc <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8007d00 <vTaskPlaceOnEventList+0x98>)
 8007cd6:	6818      	ldr	r0, [r3, #0]
 8007cd8:	6829      	ldr	r1, [r5, #0]
 8007cda:	3104      	adds	r1, #4
 8007cdc:	f7fe fb84 	bl	80063e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ce0:	4b08      	ldr	r3, [pc, #32]	@ (8007d04 <vTaskPlaceOnEventList+0x9c>)
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8007ce6:	bf38      	it	cc
 8007ce8:	601c      	strcc	r4, [r3, #0]
}
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	2000525c 	.word	0x2000525c
 8007cf0:	20005158 	.word	0x20005158
 8007cf4:	20005154 	.word	0x20005154
 8007cf8:	200051a0 	.word	0x200051a0
 8007cfc:	20005160 	.word	0x20005160
 8007d00:	200051a4 	.word	0x200051a4
 8007d04:	2000513c 	.word	0x2000513c

08007d08 <vTaskPlaceOnEventListRestricted>:
	{
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	d02d      	beq.n	8007d6a <vTaskPlaceOnEventListRestricted+0x62>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d0e:	4d26      	ldr	r5, [pc, #152]	@ (8007da8 <vTaskPlaceOnEventListRestricted+0xa0>)
 8007d10:	460c      	mov	r4, r1
 8007d12:	6829      	ldr	r1, [r5, #0]
 8007d14:	3118      	adds	r1, #24
 8007d16:	4616      	mov	r6, r2
 8007d18:	f7fe fb58 	bl	80063cc <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8007d1c:	4b23      	ldr	r3, [pc, #140]	@ (8007dac <vTaskPlaceOnEventListRestricted+0xa4>)
 8007d1e:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d20:	6828      	ldr	r0, [r5, #0]
 8007d22:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 8007d24:	b1e6      	cbz	r6, 8007d60 <vTaskPlaceOnEventListRestricted+0x58>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d26:	f7fe fb77 	bl	8006418 <uxListRemove>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d134      	bne.n	8007d98 <vTaskPlaceOnEventListRestricted+0x90>
			xTicksToWait = portMAX_DELAY;
 8007d2e:	f04f 34ff 	mov.w	r4, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d32:	682b      	ldr	r3, [r5, #0]
 8007d34:	491e      	ldr	r1, [pc, #120]	@ (8007db0 <vTaskPlaceOnEventListRestricted+0xa8>)
 8007d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d38:	2201      	movs	r2, #1
 8007d3a:	409a      	lsls	r2, r3
 8007d3c:	680b      	ldr	r3, [r1, #0]
 8007d3e:	ea23 0302 	bic.w	r3, r3, r2
 8007d42:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d44:	1c63      	adds	r3, r4, #1
 8007d46:	d025      	beq.n	8007d94 <vTaskPlaceOnEventListRestricted+0x8c>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	19e4      	adds	r4, r4, r7
 8007d4c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d4e:	d315      	bcc.n	8007d7c <vTaskPlaceOnEventListRestricted+0x74>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d50:	4b18      	ldr	r3, [pc, #96]	@ (8007db4 <vTaskPlaceOnEventListRestricted+0xac>)
 8007d52:	6818      	ldr	r0, [r3, #0]
 8007d54:	6829      	ldr	r1, [r5, #0]
	}
 8007d56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d5a:	3104      	adds	r1, #4
 8007d5c:	f7fe bb44 	b.w	80063e8 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d60:	f7fe fb5a 	bl	8006418 <uxListRemove>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d1ef      	bne.n	8007d48 <vTaskPlaceOnEventListRestricted+0x40>
 8007d68:	e7e3      	b.n	8007d32 <vTaskPlaceOnEventListRestricted+0x2a>
 8007d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8007d7a:	e7fe      	b.n	8007d7a <vTaskPlaceOnEventListRestricted+0x72>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8007db8 <vTaskPlaceOnEventListRestricted+0xb0>)
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	6829      	ldr	r1, [r5, #0]
 8007d82:	3104      	adds	r1, #4
 8007d84:	f7fe fb30 	bl	80063e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d88:	4b0c      	ldr	r3, [pc, #48]	@ (8007dbc <vTaskPlaceOnEventListRestricted+0xb4>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8007d8e:	bf38      	it	cc
 8007d90:	601c      	strcc	r4, [r3, #0]
	}
 8007d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d94:	2e00      	cmp	r6, #0
 8007d96:	d0d7      	beq.n	8007d48 <vTaskPlaceOnEventListRestricted+0x40>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d98:	6829      	ldr	r1, [r5, #0]
 8007d9a:	4809      	ldr	r0, [pc, #36]	@ (8007dc0 <vTaskPlaceOnEventListRestricted+0xb8>)
	}
 8007d9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007da0:	3104      	adds	r1, #4
 8007da2:	f7fe bb13 	b.w	80063cc <vListInsertEnd>
 8007da6:	bf00      	nop
 8007da8:	2000525c 	.word	0x2000525c
 8007dac:	20005158 	.word	0x20005158
 8007db0:	20005154 	.word	0x20005154
 8007db4:	200051a0 	.word	0x200051a0
 8007db8:	200051a4 	.word	0x200051a4
 8007dbc:	2000513c 	.word	0x2000513c
 8007dc0:	20005160 	.word	0x20005160

08007dc4 <xTaskRemoveFromEventList>:
{
 8007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc6:	68c3      	ldr	r3, [r0, #12]
 8007dc8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007dca:	b354      	cbz	r4, 8007e22 <xTaskRemoveFromEventList+0x5e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007dcc:	f104 0518 	add.w	r5, r4, #24
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f7fe fb21 	bl	8006418 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dd6:	4b17      	ldr	r3, [pc, #92]	@ (8007e34 <xTaskRemoveFromEventList+0x70>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	b173      	cbz	r3, 8007dfa <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ddc:	4816      	ldr	r0, [pc, #88]	@ (8007e38 <xTaskRemoveFromEventList+0x74>)
 8007dde:	4629      	mov	r1, r5
 8007de0:	f7fe faf4 	bl	80063cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007de4:	4b15      	ldr	r3, [pc, #84]	@ (8007e3c <xTaskRemoveFromEventList+0x78>)
 8007de6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dec:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8007dee:	bf83      	ittte	hi
 8007df0:	4b13      	ldrhi	r3, [pc, #76]	@ (8007e40 <xTaskRemoveFromEventList+0x7c>)
 8007df2:	2001      	movhi	r0, #1
 8007df4:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8007df6:	2000      	movls	r0, #0
}
 8007df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dfa:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dfc:	4d11      	ldr	r5, [pc, #68]	@ (8007e44 <xTaskRemoveFromEventList+0x80>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f7fe fb0a 	bl	8006418 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e06:	682f      	ldr	r7, [r5, #0]
 8007e08:	480f      	ldr	r0, [pc, #60]	@ (8007e48 <xTaskRemoveFromEventList+0x84>)
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	409a      	lsls	r2, r3
 8007e0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007e12:	433a      	orrs	r2, r7
 8007e14:	4631      	mov	r1, r6
 8007e16:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007e1a:	602a      	str	r2, [r5, #0]
 8007e1c:	f7fe fad6 	bl	80063cc <vListInsertEnd>
 8007e20:	e7e0      	b.n	8007de4 <xTaskRemoveFromEventList+0x20>
 8007e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8007e32:	e7fe      	b.n	8007e32 <xTaskRemoveFromEventList+0x6e>
 8007e34:	20005138 	.word	0x20005138
 8007e38:	2000518c 	.word	0x2000518c
 8007e3c:	2000525c 	.word	0x2000525c
 8007e40:	20005148 	.word	0x20005148
 8007e44:	20005154 	.word	0x20005154
 8007e48:	200051d0 	.word	0x200051d0

08007e4c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e4c:	4a03      	ldr	r2, [pc, #12]	@ (8007e5c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e4e:	4b04      	ldr	r3, [pc, #16]	@ (8007e60 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e50:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	e9c0 2300 	strd	r2, r3, [r0]
}
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	20005144 	.word	0x20005144
 8007e60:	20005158 	.word	0x20005158

08007e64 <xTaskCheckForTimeOut>:
{
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8007e66:	b308      	cbz	r0, 8007eac <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 8007e68:	460d      	mov	r5, r1
 8007e6a:	b1b1      	cbz	r1, 8007e9a <xTaskCheckForTimeOut+0x36>
 8007e6c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007e6e:	f7fe fb51 	bl	8006514 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8007e72:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8007e74:	4a1a      	ldr	r2, [pc, #104]	@ (8007ee0 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 8007e76:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8007e78:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007e7a:	d02c      	beq.n	8007ed6 <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e7c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8007ee4 <xTaskCheckForTimeOut+0x80>
 8007e80:	e9d4 6000 	ldrd	r6, r0, [r4]
 8007e84:	f8dc 7000 	ldr.w	r7, [ip]
 8007e88:	42be      	cmp	r6, r7
 8007e8a:	d018      	beq.n	8007ebe <xTaskCheckForTimeOut+0x5a>
 8007e8c:	4288      	cmp	r0, r1
 8007e8e:	d816      	bhi.n	8007ebe <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8007e90:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8007e92:	f7fe fb61 	bl	8006558 <vPortExitCritical>
}
 8007e96:	4620      	mov	r0, r4
 8007e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8007eaa:	e7fe      	b.n	8007eaa <xTaskCheckForTimeOut+0x46>
 8007eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8007ebc:	e7fe      	b.n	8007ebc <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ebe:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ec2:	4573      	cmp	r3, lr
 8007ec4:	d909      	bls.n	8007eda <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 8007ec6:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ec8:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ecc:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8007ece:	4403      	add	r3, r0
 8007ed0:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ed2:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8007ed6:	2400      	movs	r4, #0
 8007ed8:	e7db      	b.n	8007e92 <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8007ede:	e7d7      	b.n	8007e90 <xTaskCheckForTimeOut+0x2c>
 8007ee0:	20005158 	.word	0x20005158
 8007ee4:	20005144 	.word	0x20005144

08007ee8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007ee8:	4b01      	ldr	r3, [pc, #4]	@ (8007ef0 <vTaskMissedYield+0x8>)
 8007eea:	2201      	movs	r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
}
 8007eee:	4770      	bx	lr
 8007ef0:	20005148 	.word	0x20005148

08007ef4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007ef4:	4b05      	ldr	r3, [pc, #20]	@ (8007f0c <xTaskGetSchedulerState+0x18>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	b133      	cbz	r3, 8007f08 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007efa:	4b05      	ldr	r3, [pc, #20]	@ (8007f10 <xTaskGetSchedulerState+0x1c>)
 8007efc:	6818      	ldr	r0, [r3, #0]
 8007efe:	fab0 f080 	clz	r0, r0
 8007f02:	0940      	lsrs	r0, r0, #5
 8007f04:	0040      	lsls	r0, r0, #1
 8007f06:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f08:	2001      	movs	r0, #1
	}
 8007f0a:	4770      	bx	lr
 8007f0c:	20005150 	.word	0x20005150
 8007f10:	20005138 	.word	0x20005138

08007f14 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007f14:	b310      	cbz	r0, 8007f5c <xTaskPriorityDisinherit+0x48>
	{
 8007f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8007f18:	4b27      	ldr	r3, [pc, #156]	@ (8007fb8 <xTaskPriorityDisinherit+0xa4>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4283      	cmp	r3, r0
 8007f1e:	4604      	mov	r4, r0
 8007f20:	d008      	beq.n	8007f34 <xTaskPriorityDisinherit+0x20>
 8007f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	e7fe      	b.n	8007f32 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f36:	b143      	cbz	r3, 8007f4a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f38:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007f3a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 8007f3c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f3e:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8007f40:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f42:	d000      	beq.n	8007f46 <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f44:	b163      	cbz	r3, 8007f60 <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 8007f46:	2000      	movs	r0, #0
	}
 8007f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8007f5a:	e7fe      	b.n	8007f5a <xTaskPriorityDisinherit+0x46>
	BaseType_t xReturn = pdFALSE;
 8007f5c:	2000      	movs	r0, #0
	}
 8007f5e:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f60:	1d06      	adds	r6, r0, #4
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7fe fa58 	bl	8006418 <uxListRemove>
 8007f68:	b1a8      	cbz	r0, 8007f96 <xTaskPriorityDisinherit+0x82>
 8007f6a:	4814      	ldr	r0, [pc, #80]	@ (8007fbc <xTaskPriorityDisinherit+0xa8>)
 8007f6c:	4a14      	ldr	r2, [pc, #80]	@ (8007fc0 <xTaskPriorityDisinherit+0xac>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f6e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007f70:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007f72:	4631      	mov	r1, r6
 8007f74:	2501      	movs	r5, #1
 8007f76:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f78:	f1c3 0707 	rsb	r7, r3, #7
 8007f7c:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f7e:	fa05 f403 	lsl.w	r4, r5, r3
 8007f82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f86:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007f8a:	4334      	orrs	r4, r6
 8007f8c:	6014      	str	r4, [r2, #0]
 8007f8e:	f7fe fa1d 	bl	80063cc <vListInsertEnd>
					xReturn = pdTRUE;
 8007f92:	4628      	mov	r0, r5
	}
 8007f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007f96:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007f98:	4808      	ldr	r0, [pc, #32]	@ (8007fbc <xTaskPriorityDisinherit+0xa8>)
 8007f9a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007f9e:	0092      	lsls	r2, r2, #2
 8007fa0:	5882      	ldr	r2, [r0, r2]
 8007fa2:	b10a      	cbz	r2, 8007fa8 <xTaskPriorityDisinherit+0x94>
 8007fa4:	4a06      	ldr	r2, [pc, #24]	@ (8007fc0 <xTaskPriorityDisinherit+0xac>)
 8007fa6:	e7e2      	b.n	8007f6e <xTaskPriorityDisinherit+0x5a>
 8007fa8:	4a05      	ldr	r2, [pc, #20]	@ (8007fc0 <xTaskPriorityDisinherit+0xac>)
 8007faa:	2501      	movs	r5, #1
 8007fac:	409d      	lsls	r5, r3
 8007fae:	6813      	ldr	r3, [r2, #0]
 8007fb0:	ea23 0305 	bic.w	r3, r3, r5
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	e7da      	b.n	8007f6e <xTaskPriorityDisinherit+0x5a>
 8007fb8:	2000525c 	.word	0x2000525c
 8007fbc:	200051d0 	.word	0x200051d0
 8007fc0:	20005154 	.word	0x20005154

08007fc4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc8:	4e21      	ldr	r6, [pc, #132]	@ (8008050 <prvSwitchTimerLists+0x8c>)
 8007fca:	b084      	sub	sp, #16

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fcc:	e00d      	b.n	8007fea <prvSwitchTimerLists+0x26>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fce:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fd2:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fd4:	1d25      	adds	r5, r4, #4
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f7fe fa1e 	bl	8006418 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fdc:	6a23      	ldr	r3, [r4, #32]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fe2:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8007fe6:	075b      	lsls	r3, r3, #29
 8007fe8:	d40a      	bmi.n	8008000 <prvSwitchTimerLists+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fea:	6833      	ldr	r3, [r6, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	2a00      	cmp	r2, #0
 8007ff0:	d1ed      	bne.n	8007fce <prvSwitchTimerLists+0xa>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8007ff2:	4a18      	ldr	r2, [pc, #96]	@ (8008054 <prvSwitchTimerLists+0x90>)
 8007ff4:	6811      	ldr	r1, [r2, #0]
 8007ff6:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8007ff8:	6013      	str	r3, [r2, #0]
}
 8007ffa:	b004      	add	sp, #16
 8007ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008000:	69a3      	ldr	r3, [r4, #24]
	if( xTimerQueue != NULL )
 8008002:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8008058 <prvSwitchTimerLists+0x94>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008006:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8008008:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800800a:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 800800c:	d205      	bcs.n	800801a <prvSwitchTimerLists+0x56>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800800e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008010:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008012:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008014:	f7fe f9e8 	bl	80063e8 <vListInsert>
 8008018:	e7e7      	b.n	8007fea <prvSwitchTimerLists+0x26>
	if( xTimerQueue != NULL )
 800801a:	f8d8 3000 	ldr.w	r3, [r8]
		xMessage.xMessageID = xCommandID;
 800801e:	2500      	movs	r5, #0
	if( xTimerQueue != NULL )
 8008020:	b16b      	cbz	r3, 800803e <prvSwitchTimerLists+0x7a>
		xMessage.xMessageID = xCommandID;
 8008022:	e9cd 5701 	strd	r5, r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008026:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008028:	f7ff ff64 	bl	8007ef4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800802c:	f8d8 0000 	ldr.w	r0, [r8]
 8008030:	462b      	mov	r3, r5
 8008032:	462a      	mov	r2, r5
 8008034:	a901      	add	r1, sp, #4
 8008036:	f7fe fc5f 	bl	80068f8 <xQueueGenericSend>
				configASSERT( xResult );
 800803a:	2800      	cmp	r0, #0
 800803c:	d1d5      	bne.n	8007fea <prvSwitchTimerLists+0x26>
 800803e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	e7fe      	b.n	800804e <prvSwitchTimerLists+0x8a>
 8008050:	20005330 	.word	0x20005330
 8008054:	2000532c 	.word	0x2000532c
 8008058:	20005328 	.word	0x20005328

0800805c <prvTimerTask>:
{
 800805c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	4e97      	ldr	r6, [pc, #604]	@ (80082c0 <prvTimerTask+0x264>)
 8008062:	4d98      	ldr	r5, [pc, #608]	@ (80082c4 <prvTimerTask+0x268>)
 8008064:	4c98      	ldr	r4, [pc, #608]	@ (80082c8 <prvTimerTask+0x26c>)
 8008066:	b089      	sub	sp, #36	@ 0x24
					portYIELD_WITHIN_API();
 8008068:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 800806c:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008070:	6832      	ldr	r2, [r6, #0]
 8008072:	6817      	ldr	r7, [r2, #0]
 8008074:	2f00      	cmp	r7, #0
 8008076:	f000 80a1 	beq.w	80081bc <prvTimerTask+0x160>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800807a:	68d3      	ldr	r3, [r2, #12]
 800807c:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800807e:	f7ff fd87 	bl	8007b90 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008082:	f7ff fd9d 	bl	8007bc0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008086:	682a      	ldr	r2, [r5, #0]
 8008088:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 800808a:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800808c:	f200 80a7 	bhi.w	80081de <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008090:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8008092:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008094:	f240 80ad 	bls.w	80081f2 <prvTimerTask+0x196>
 8008098:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800809a:	6820      	ldr	r0, [r4, #0]
 800809c:	eba7 010a 	sub.w	r1, r7, sl
 80080a0:	f7fe ffba 	bl	8007018 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80080a4:	f7ff fd7c 	bl	8007ba0 <xTaskResumeAll>
 80080a8:	b928      	cbnz	r0, 80080b6 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 80080aa:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	2200      	movs	r2, #0
 80080ba:	a902      	add	r1, sp, #8
 80080bc:	f7fe fdfe 	bl	8006cbc <xQueueReceive>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d0d5      	beq.n	8008070 <prvTimerTask+0x14>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080c4:	9b02      	ldr	r3, [sp, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	dbf5      	blt.n	80080b6 <prvTimerTask+0x5a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080ca:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	b113      	cbz	r3, 80080d6 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080d0:	1d38      	adds	r0, r7, #4
 80080d2:	f7fe f9a1 	bl	8006418 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80080d6:	f7ff fd73 	bl	8007bc0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80080da:	682b      	ldr	r3, [r5, #0]
 80080dc:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 80080de:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80080e0:	f0c0 8084 	bcc.w	80081ec <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 80080e4:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80080e6:	f8c5 b000 	str.w	fp, [r5]
			switch( xMessage.xMessageID )
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	d8e3      	bhi.n	80080b6 <prvTimerTask+0x5a>
 80080ee:	e8df f003 	tbb	[pc, r3]
 80080f2:	0505      	.short	0x0505
 80080f4:	5c3e5505 	.word	0x5c3e5505
 80080f8:	3e550505 	.word	0x3e550505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080fc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008100:	9b03      	ldr	r3, [sp, #12]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008102:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008104:	f042 0201 	orr.w	r2, r2, #1
 8008108:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	1899      	adds	r1, r3, r2
 8008110:	bf2c      	ite	cs
 8008112:	2001      	movcs	r0, #1
 8008114:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8008116:	4559      	cmp	r1, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008118:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800811a:	f200 8085 	bhi.w	8008228 <prvTimerTask+0x1cc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800811e:	ebab 0303 	sub.w	r3, fp, r3
 8008122:	429a      	cmp	r2, r3
 8008124:	f200 809b 	bhi.w	800825e <prvTimerTask+0x202>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	4638      	mov	r0, r7
 800812c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800812e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008132:	0759      	lsls	r1, r3, #29
 8008134:	d5bf      	bpl.n	80080b6 <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8008136:	6821      	ldr	r1, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	69ba      	ldr	r2, [r7, #24]
	if( xTimerQueue != NULL )
 800813c:	b171      	cbz	r1, 800815c <prvTimerTask+0x100>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800813e:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008140:	e9cd 3706 	strd	r3, r7, [sp, #24]
		xMessage.xMessageID = xCommandID;
 8008144:	2700      	movs	r7, #0
 8008146:	9705      	str	r7, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008148:	f7ff fed4 	bl	8007ef4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800814c:	6820      	ldr	r0, [r4, #0]
 800814e:	463b      	mov	r3, r7
 8008150:	463a      	mov	r2, r7
 8008152:	a905      	add	r1, sp, #20
 8008154:	f7fe fbd0 	bl	80068f8 <xQueueGenericSend>
							configASSERT( xResult );
 8008158:	2800      	cmp	r0, #0
 800815a:	d1ac      	bne.n	80080b6 <prvTimerTask+0x5a>
 800815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	e7fe      	b.n	800816c <prvTimerTask+0x110>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800816e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008176:	f042 0201 	orr.w	r2, r2, #1
 800817a:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 8095 	beq.w	80082ae <prvTimerTask+0x252>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008184:	445b      	add	r3, fp
	if( xNextExpiryTime <= xTimeNow )
 8008186:	455b      	cmp	r3, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008188:	607b      	str	r3, [r7, #4]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800818a:	bf96      	itet	ls
 800818c:	4b4f      	ldrls	r3, [pc, #316]	@ (80082cc <prvTimerTask+0x270>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800818e:	6830      	ldrhi	r0, [r6, #0]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008190:	6818      	ldrls	r0, [r3, #0]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008192:	613f      	str	r7, [r7, #16]
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008194:	1d39      	adds	r1, r7, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008196:	f7fe f927 	bl	80063e8 <vListInsert>
 800819a:	e78c      	b.n	80080b6 <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800819c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
					break;
 80081a8:	e785      	b.n	80080b6 <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80081aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80081ae:	079a      	lsls	r2, r3, #30
 80081b0:	d544      	bpl.n	800823c <prvTimerTask+0x1e0>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80081ba:	e77c      	b.n	80080b6 <prvTimerTask+0x5a>
	vTaskSuspendAll();
 80081bc:	f7ff fce8 	bl	8007b90 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80081c0:	f7ff fcfe 	bl	8007bc0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80081c4:	682a      	ldr	r2, [r5, #0]
 80081c6:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 80081c8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80081ca:	d308      	bcc.n	80081de <prvTimerTask+0x182>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081cc:	4b3f      	ldr	r3, [pc, #252]	@ (80082cc <prvTimerTask+0x270>)
	xLastTime = xTimeNow;
 80081ce:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	fab2 f282 	clz	r2, r2
 80081da:	0952      	lsrs	r2, r2, #5
 80081dc:	e75d      	b.n	800809a <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 80081de:	f7ff fef1 	bl	8007fc4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80081e2:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80081e6:	f7ff fcdb 	bl	8007ba0 <xTaskResumeAll>
 80081ea:	e764      	b.n	80080b6 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 80081ec:	f7ff feea 	bl	8007fc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081f0:	e778      	b.n	80080e4 <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 80081f2:	f7ff fcd5 	bl	8007ba0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f6:	6832      	ldr	r2, [r6, #0]
 80081f8:	68d2      	ldr	r2, [r2, #12]
 80081fa:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081fe:	f10b 0104 	add.w	r1, fp, #4
 8008202:	4608      	mov	r0, r1
 8008204:	9101      	str	r1, [sp, #4]
 8008206:	f7fe f907 	bl	8006418 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800820a:	f89b 2024 	ldrb.w	r2, [fp, #36]	@ 0x24
 800820e:	9901      	ldr	r1, [sp, #4]
 8008210:	f012 0f04 	tst.w	r2, #4
 8008214:	d116      	bne.n	8008244 <prvTimerTask+0x1e8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008216:	f022 0201 	bic.w	r2, r2, #1
 800821a:	f88b 2024 	strb.w	r2, [fp, #36]	@ 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800821e:	f8db 3020 	ldr.w	r3, [fp, #32]
 8008222:	4658      	mov	r0, fp
 8008224:	4798      	blx	r3
}
 8008226:	e746      	b.n	80080b6 <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008228:	455b      	cmp	r3, fp
 800822a:	d902      	bls.n	8008232 <prvTimerTask+0x1d6>
 800822c:	2800      	cmp	r0, #0
 800822e:	f43f af7b 	beq.w	8008128 <prvTimerTask+0xcc>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008232:	6830      	ldr	r0, [r6, #0]
 8008234:	1d39      	adds	r1, r7, #4
 8008236:	f7fe f8d7 	bl	80063e8 <vListInsert>
	return xProcessTimerNow;
 800823a:	e73c      	b.n	80080b6 <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 800823c:	4638      	mov	r0, r7
 800823e:	f7fe f851 	bl	80062e4 <vPortFree>
 8008242:	e738      	b.n	80080b6 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008244:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008248:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800824c:	183a      	adds	r2, r7, r0
	if( xNextExpiryTime <= xTimeNow )
 800824e:	4552      	cmp	r2, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008250:	f8cb 2004 	str.w	r2, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008254:	d909      	bls.n	800826a <prvTimerTask+0x20e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008256:	6830      	ldr	r0, [r6, #0]
 8008258:	f7fe f8c6 	bl	80063e8 <vListInsert>
	return xProcessTimerNow;
 800825c:	e7df      	b.n	800821e <prvTimerTask+0x1c2>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800825e:	4b1b      	ldr	r3, [pc, #108]	@ (80082cc <prvTimerTask+0x270>)
 8008260:	1d39      	adds	r1, r7, #4
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	f7fe f8c0 	bl	80063e8 <vListInsert>
	return xProcessTimerNow;
 8008268:	e725      	b.n	80080b6 <prvTimerTask+0x5a>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800826a:	ebaa 0a07 	sub.w	sl, sl, r7
 800826e:	4550      	cmp	r0, sl
 8008270:	d818      	bhi.n	80082a4 <prvTimerTask+0x248>
	if( xTimerQueue != NULL )
 8008272:	6822      	ldr	r2, [r4, #0]
 8008274:	b16a      	cbz	r2, 8008292 <prvTimerTask+0x236>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008276:	e9cd 7b06 	strd	r7, fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
 800827a:	2700      	movs	r7, #0
 800827c:	9705      	str	r7, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800827e:	f7ff fe39 	bl	8007ef4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008282:	6820      	ldr	r0, [r4, #0]
 8008284:	463b      	mov	r3, r7
 8008286:	463a      	mov	r2, r7
 8008288:	a905      	add	r1, sp, #20
 800828a:	f7fe fb35 	bl	80068f8 <xQueueGenericSend>
			configASSERT( xResult );
 800828e:	2800      	cmp	r0, #0
 8008290:	d1c5      	bne.n	800821e <prvTimerTask+0x1c2>
 8008292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	e7fe      	b.n	80082a2 <prvTimerTask+0x246>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082a4:	4b09      	ldr	r3, [pc, #36]	@ (80082cc <prvTimerTask+0x270>)
 80082a6:	6818      	ldr	r0, [r3, #0]
 80082a8:	f7fe f89e 	bl	80063e8 <vListInsert>
	return xProcessTimerNow;
 80082ac:	e7b7      	b.n	800821e <prvTimerTask+0x1c2>
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082be:	e7fe      	b.n	80082be <prvTimerTask+0x262>
 80082c0:	20005330 	.word	0x20005330
 80082c4:	20005320 	.word	0x20005320
 80082c8:	20005328 	.word	0x20005328
 80082cc:	2000532c 	.word	0x2000532c

080082d0 <xTimerCreateTimerTask>:
{
 80082d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80082d2:	4c23      	ldr	r4, [pc, #140]	@ (8008360 <xTimerCreateTimerTask+0x90>)
{
 80082d4:	b089      	sub	sp, #36	@ 0x24
	taskENTER_CRITICAL();
 80082d6:	f7fe f91d 	bl	8006514 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80082da:	6825      	ldr	r5, [r4, #0]
 80082dc:	b335      	cbz	r5, 800832c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082de:	f7fe f93b 	bl	8006558 <vPortExitCritical>
	if( xTimerQueue != NULL )
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	b1cb      	cbz	r3, 800831a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082e6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082e8:	aa07      	add	r2, sp, #28
 80082ea:	a906      	add	r1, sp, #24
 80082ec:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082ee:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082f2:	f7f9 fb15 	bl	8001920 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082f6:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80082fa:	2302      	movs	r3, #2
 80082fc:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	9a07      	ldr	r2, [sp, #28]
 8008304:	4917      	ldr	r1, [pc, #92]	@ (8008364 <xTimerCreateTimerTask+0x94>)
 8008306:	4818      	ldr	r0, [pc, #96]	@ (8008368 <xTimerCreateTimerTask+0x98>)
 8008308:	4623      	mov	r3, r4
 800830a:	f7ff f955 	bl	80075b8 <xTaskCreateStatic>
 800830e:	4b17      	ldr	r3, [pc, #92]	@ (800836c <xTimerCreateTimerTask+0x9c>)
 8008310:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008312:	b110      	cbz	r0, 800831a <xTimerCreateTimerTask+0x4a>
}
 8008314:	2001      	movs	r0, #1
 8008316:	b009      	add	sp, #36	@ 0x24
 8008318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800831a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800832a:	e7fe      	b.n	800832a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 800832c:	4f10      	ldr	r7, [pc, #64]	@ (8008370 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 800832e:	4e11      	ldr	r6, [pc, #68]	@ (8008374 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8008330:	4638      	mov	r0, r7
 8008332:	f7fe f83b 	bl	80063ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008336:	4630      	mov	r0, r6
 8008338:	f7fe f838 	bl	80063ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800833c:	4a0e      	ldr	r2, [pc, #56]	@ (8008378 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800833e:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8008340:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008342:	4a0e      	ldr	r2, [pc, #56]	@ (800837c <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008344:	4b0e      	ldr	r3, [pc, #56]	@ (8008380 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8008346:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008348:	210c      	movs	r1, #12
 800834a:	4a0e      	ldr	r2, [pc, #56]	@ (8008384 <xTimerCreateTimerTask+0xb4>)
 800834c:	200a      	movs	r0, #10
 800834e:	f7fe fa67 	bl	8006820 <xQueueGenericCreateStatic>
 8008352:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8008354:	2800      	cmp	r0, #0
 8008356:	d0c2      	beq.n	80082de <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008358:	490b      	ldr	r1, [pc, #44]	@ (8008388 <xTimerCreateTimerTask+0xb8>)
 800835a:	f7fe fe35 	bl	8006fc8 <vQueueAddToRegistry>
 800835e:	e7be      	b.n	80082de <xTimerCreateTimerTask+0xe>
 8008360:	20005328 	.word	0x20005328
 8008364:	0800adc4 	.word	0x0800adc4
 8008368:	0800805d 	.word	0x0800805d
 800836c:	20005324 	.word	0x20005324
 8008370:	20005348 	.word	0x20005348
 8008374:	20005334 	.word	0x20005334
 8008378:	20005330 	.word	0x20005330
 800837c:	2000532c 	.word	0x2000532c
 8008380:	20005260 	.word	0x20005260
 8008384:	200052a8 	.word	0x200052a8
 8008388:	0800adbc 	.word	0x0800adbc

0800838c <xTimerCreate>:
	{
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	4607      	mov	r7, r0
 8008392:	b085      	sub	sp, #20
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008394:	2028      	movs	r0, #40	@ 0x28
	{
 8008396:	4688      	mov	r8, r1
 8008398:	4616      	mov	r6, r2
 800839a:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800839c:	f7fd feea 	bl	8006174 <pvPortMalloc>
		if( pxNewTimer != NULL )
 80083a0:	4604      	mov	r4, r0
 80083a2:	b1e8      	cbz	r0, 80083e0 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 80083a4:	2300      	movs	r3, #0
 80083a6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80083aa:	f1b8 0f00 	cmp.w	r8, #0
 80083ae:	d01b      	beq.n	80083e8 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
 80083b0:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 8008450 <xTimerCreate+0xc4>
	taskENTER_CRITICAL();
 80083b4:	f7fe f8ae 	bl	8006514 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80083b8:	f8d9 3000 	ldr.w	r3, [r9]
 80083bc:	b1eb      	cbz	r3, 80083fa <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
 80083be:	f7fe f8cb 	bl	8006558 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80083c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
		pxNewTimer->pcTimerName = pcTimerName;
 80083c4:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 80083c6:	e9c4 8506 	strd	r8, r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80083ca:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80083cc:	1d20      	adds	r0, r4, #4
 80083ce:	f7fd fff9 	bl	80063c4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80083d2:	b12e      	cbz	r6, 80083e0 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80083d4:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80083d8:	f043 0304 	orr.w	r3, r3, #4
 80083dc:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
	}
 80083e0:	4620      	mov	r0, r4
 80083e2:	b005      	add	sp, #20
 80083e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80083f8:	e7fe      	b.n	80083f8 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
 80083fa:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8008454 <xTimerCreate+0xc8>
			vListInitialise( &xActiveTimerList2 );
 80083fe:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008458 <xTimerCreate+0xcc>
 8008402:	9303      	str	r3, [sp, #12]
			vListInitialise( &xActiveTimerList1 );
 8008404:	4658      	mov	r0, fp
 8008406:	f7fd ffd1 	bl	80063ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800840a:	4650      	mov	r0, sl
 800840c:	f7fd ffce 	bl	80063ac <vListInitialise>
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008410:	9b03      	ldr	r3, [sp, #12]
 8008412:	9300      	str	r3, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8008414:	4b09      	ldr	r3, [pc, #36]	@ (800843c <xTimerCreate+0xb0>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008416:	4a0a      	ldr	r2, [pc, #40]	@ (8008440 <xTimerCreate+0xb4>)
			pxCurrentTimerList = &xActiveTimerList1;
 8008418:	f8c3 b000 	str.w	fp, [r3]
			pxOverflowTimerList = &xActiveTimerList2;
 800841c:	4b09      	ldr	r3, [pc, #36]	@ (8008444 <xTimerCreate+0xb8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800841e:	210c      	movs	r1, #12
			pxOverflowTimerList = &xActiveTimerList2;
 8008420:	f8c3 a000 	str.w	sl, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008424:	200a      	movs	r0, #10
 8008426:	4b08      	ldr	r3, [pc, #32]	@ (8008448 <xTimerCreate+0xbc>)
 8008428:	f7fe f9fa 	bl	8006820 <xQueueGenericCreateStatic>
 800842c:	f8c9 0000 	str.w	r0, [r9]
				if( xTimerQueue != NULL )
 8008430:	2800      	cmp	r0, #0
 8008432:	d0c4      	beq.n	80083be <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008434:	4905      	ldr	r1, [pc, #20]	@ (800844c <xTimerCreate+0xc0>)
 8008436:	f7fe fdc7 	bl	8006fc8 <vQueueAddToRegistry>
 800843a:	e7c0      	b.n	80083be <xTimerCreate+0x32>
 800843c:	20005330 	.word	0x20005330
 8008440:	200052a8 	.word	0x200052a8
 8008444:	2000532c 	.word	0x2000532c
 8008448:	20005260 	.word	0x20005260
 800844c:	0800adbc 	.word	0x0800adbc
 8008450:	20005328 	.word	0x20005328
 8008454:	20005348 	.word	0x20005348
 8008458:	20005334 	.word	0x20005334

0800845c <xTimerCreateStatic>:
	{
 800845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008460:	b085      	sub	sp, #20
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008462:	2428      	movs	r4, #40	@ 0x28
 8008464:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008466:	9c03      	ldr	r4, [sp, #12]
 8008468:	2c28      	cmp	r4, #40	@ 0x28
 800846a:	d008      	beq.n	800847e <xTimerCreateStatic+0x22>
 800846c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	e7fe      	b.n	800847c <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800847e:	461d      	mov	r5, r3
 8008480:	9b03      	ldr	r3, [sp, #12]
		configASSERT( pxTimerBuffer );
 8008482:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008484:	b343      	cbz	r3, 80084d8 <xTimerCreateStatic+0x7c>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008486:	4616      	mov	r6, r2
 8008488:	461a      	mov	r2, r3
 800848a:	2302      	movs	r3, #2
 800848c:	460f      	mov	r7, r1
 800848e:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008492:	b351      	cbz	r1, 80084ea <xTimerCreateStatic+0x8e>
		if( xTimerQueue == NULL )
 8008494:	4c29      	ldr	r4, [pc, #164]	@ (800853c <xTimerCreateStatic+0xe0>)
 8008496:	4680      	mov	r8, r0
	taskENTER_CRITICAL();
 8008498:	f7fe f83c 	bl	8006514 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800849c:	f8d4 b000 	ldr.w	fp, [r4]
 80084a0:	f1bb 0f00 	cmp.w	fp, #0
 80084a4:	d02a      	beq.n	80084fc <xTimerCreateStatic+0xa0>
	taskEXIT_CRITICAL();
 80084a6:	f7fe f857 	bl	8006558 <vPortExitCritical>
		pxNewTimer->pcTimerName = pcTimerName;
 80084aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80084ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
		pxNewTimer->pcTimerName = pcTimerName;
 80084ae:	f8c3 8000 	str.w	r8, [r3]
		pxNewTimer->pvTimerID = pvTimerID;
 80084b2:	e9c3 7506 	strd	r7, r5, [r3, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80084b6:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80084b8:	1d18      	adds	r0, r3, #4
 80084ba:	f7fd ff83 	bl	80063c4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80084be:	b13e      	cbz	r6, 80084d0 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80084c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80084c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80084c8:	f043 0304 	orr.w	r3, r3, #4
 80084cc:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
	}
 80084d0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80084d2:	b005      	add	sp, #20
 80084d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 80084e8:	e7fe      	b.n	80084e8 <xTimerCreateStatic+0x8c>
 80084ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80084fa:	e7fe      	b.n	80084fa <xTimerCreateStatic+0x9e>
			vListInitialise( &xActiveTimerList1 );
 80084fc:	f8df a054 	ldr.w	sl, [pc, #84]	@ 8008554 <xTimerCreateStatic+0xf8>
			vListInitialise( &xActiveTimerList2 );
 8008500:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 8008558 <xTimerCreateStatic+0xfc>
			vListInitialise( &xActiveTimerList1 );
 8008504:	4650      	mov	r0, sl
 8008506:	f7fd ff51 	bl	80063ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800850a:	4648      	mov	r0, r9
 800850c:	f7fd ff4e 	bl	80063ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008510:	4a0b      	ldr	r2, [pc, #44]	@ (8008540 <xTimerCreateStatic+0xe4>)
			pxOverflowTimerList = &xActiveTimerList2;
 8008512:	4b0c      	ldr	r3, [pc, #48]	@ (8008544 <xTimerCreateStatic+0xe8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008514:	f8cd b000 	str.w	fp, [sp]
 8008518:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 800851a:	f8c2 a000 	str.w	sl, [r2]
			pxOverflowTimerList = &xActiveTimerList2;
 800851e:	f8c3 9000 	str.w	r9, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008522:	4a09      	ldr	r2, [pc, #36]	@ (8008548 <xTimerCreateStatic+0xec>)
 8008524:	4b09      	ldr	r3, [pc, #36]	@ (800854c <xTimerCreateStatic+0xf0>)
 8008526:	200a      	movs	r0, #10
 8008528:	f7fe f97a 	bl	8006820 <xQueueGenericCreateStatic>
 800852c:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800852e:	2800      	cmp	r0, #0
 8008530:	d0b9      	beq.n	80084a6 <xTimerCreateStatic+0x4a>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008532:	4907      	ldr	r1, [pc, #28]	@ (8008550 <xTimerCreateStatic+0xf4>)
 8008534:	f7fe fd48 	bl	8006fc8 <vQueueAddToRegistry>
 8008538:	e7b5      	b.n	80084a6 <xTimerCreateStatic+0x4a>
 800853a:	bf00      	nop
 800853c:	20005328 	.word	0x20005328
 8008540:	20005330 	.word	0x20005330
 8008544:	2000532c 	.word	0x2000532c
 8008548:	200052a8 	.word	0x200052a8
 800854c:	20005260 	.word	0x20005260
 8008550:	0800adbc 	.word	0x0800adbc
 8008554:	20005348 	.word	0x20005348
 8008558:	20005334 	.word	0x20005334

0800855c <xTimerGenericCommand>:
	configASSERT( xTimer );
 800855c:	b1c0      	cbz	r0, 8008590 <xTimerGenericCommand+0x34>
{
 800855e:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8008560:	4d18      	ldr	r5, [pc, #96]	@ (80085c4 <xTimerGenericCommand+0x68>)
 8008562:	682c      	ldr	r4, [r5, #0]
{
 8008564:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8008566:	b184      	cbz	r4, 800858a <xTimerGenericCommand+0x2e>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008568:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 800856a:	e9cd 1201 	strd	r1, r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800856e:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008570:	dc17      	bgt.n	80085a2 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008572:	f7ff fcbf 	bl	8007ef4 <xTaskGetSchedulerState>
 8008576:	2802      	cmp	r0, #2
 8008578:	d01c      	beq.n	80085b4 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800857a:	2300      	movs	r3, #0
 800857c:	6828      	ldr	r0, [r5, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	a901      	add	r1, sp, #4
 8008582:	f7fe f9b9 	bl	80068f8 <xQueueGenericSend>
}
 8008586:	b005      	add	sp, #20
 8008588:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800858a:	4620      	mov	r0, r4
}
 800858c:	b005      	add	sp, #20
 800858e:	bd30      	pop	{r4, r5, pc}
 8008590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80085a0:	e7fe      	b.n	80085a0 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085a2:	469c      	mov	ip, r3
 80085a4:	4662      	mov	r2, ip
 80085a6:	2300      	movs	r3, #0
 80085a8:	a901      	add	r1, sp, #4
 80085aa:	4620      	mov	r0, r4
 80085ac:	f7fe fb24 	bl	8006bf8 <xQueueGenericSendFromISR>
}
 80085b0:	b005      	add	sp, #20
 80085b2:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085b4:	6828      	ldr	r0, [r5, #0]
 80085b6:	9a08      	ldr	r2, [sp, #32]
 80085b8:	2300      	movs	r3, #0
 80085ba:	a901      	add	r1, sp, #4
 80085bc:	f7fe f99c 	bl	80068f8 <xQueueGenericSend>
 80085c0:	e7e4      	b.n	800858c <xTimerGenericCommand+0x30>
 80085c2:	bf00      	nop
 80085c4:	20005328 	.word	0x20005328

080085c8 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 80085c8:	b538      	push	{r3, r4, r5, lr}
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80085ca:	88c5      	ldrh	r5, [r0, #6]
{
 80085cc:	4604      	mov	r4, r0
  setBatteryVoltage(temp);
 80085ce:	4628      	mov	r0, r5
 80085d0:	f7f8 fd20 	bl	8001014 <setBatteryVoltage>
  temp *= pHandle->ConversionFactor;
 80085d4:	8864      	ldrh	r4, [r4, #2]
 80085d6:	fb05 f404 	mul.w	r4, r5, r4
  temp /= 65536u;
 80085da:	0c24      	lsrs	r4, r4, #16

  setDCVoltage(temp);
 80085dc:	4620      	mov	r0, r4
 80085de:	f7f8 fd13 	bl	8001008 <setDCVoltage>

  return ( ( uint16_t )temp );
}
 80085e2:	4620      	mov	r0, r4
 80085e4:	bd38      	pop	{r3, r4, r5, pc}
 80085e6:	bf00      	nop

080085e8 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80085e8:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80085ea:	8802      	ldrh	r2, [r0, #0]
 80085ec:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 80085ee:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80085f2:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80085f6:	fb02 f202 	mul.w	r2, r2, r2
 80085fa:	4594      	cmp	ip, r2
{
 80085fc:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80085fe:	d919      	bls.n	8008634 <Circle_Limitation+0x4c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8008600:	f890 20b2 	ldrb.w	r2, [r0, #178]	@ 0xb2
 8008604:	ebc2 621c 	rsb	r2, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8008608:	b2d2      	uxtb	r2, r2
 800860a:	eb00 0042 	add.w	r0, r0, r2, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 800860e:	8882      	ldrh	r2, [r0, #4]
 8008610:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8008614:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8008616:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800861a:	bfbc      	itt	lt
 800861c:	f501 41ff 	addlt.w	r1, r1, #32640	@ 0x7f80
 8008620:	317f      	addlt	r1, #127	@ 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8008622:	2b00      	cmp	r3, #0
 8008624:	bfbc      	itt	lt
 8008626:	f503 43ff 	addlt.w	r3, r3, #32640	@ 0x7f80
 800862a:	337f      	addlt	r3, #127	@ 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800862c:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8008630:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8008634:	b289      	uxth	r1, r1
 8008636:	2000      	movs	r0, #0
 8008638:	f361 000f 	bfi	r0, r1, #0, #16
 800863c:	b29b      	uxth	r3, r3
 800863e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8008642:	b004      	add	sp, #16
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop

08008648 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 800864c:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 800864e:	f8c0 3096 	str.w	r3, [r0, #150]	@ 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8008652:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8008656:	f8a0 311b 	strh.w	r3, [r0, #283]	@ 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 800865a:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
}
 800865e:	4770      	bx	lr

08008660 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8008660:	b120      	cbz	r0, 800866c <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8008662:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8008666:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8008668:	9b00      	ldr	r3, [sp, #0]
 800866a:	60c3      	str	r3, [r0, #12]
  }
}
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop

08008670 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8008670:	b178      	cbz	r0, 8008692 <FCP_CalcCRC+0x22>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8008672:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8008674:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 8008676:	440b      	add	r3, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8008678:	b139      	cbz	r1, 800868a <FCP_CalcCRC+0x1a>
 800867a:	3001      	adds	r0, #1
 800867c:	4401      	add	r1, r0
    {
      nSum += pFrame->Buffer[idx];
 800867e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008682:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8008684:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8008686:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8008688:	d1f9      	bne.n	800867e <FCP_CalcCRC+0xe>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800868a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 800868e:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  }

  return nCRC ;
}
 8008692:	4770      	bx	lr

08008694 <HALL_Init>:
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
                                     pHandle->_Super.bElToMecRatio;
 8008694:	7843      	ldrb	r3, [r0, #1]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8008696:	f8b0 c016 	ldrh.w	ip, [r0, #22]

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 800869a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 800869c:	b570      	push	{r4, r5, r6, lr}
  hMaxReliableElSpeedUnit *= 2u;
 800869e:	f8b0 e014 	ldrh.w	lr, [r0, #20]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80086a2:	fb1c fc03 	smulbb	ip, ip, r3
  hMaxReliableElSpeedUnit *= 2u;
 80086a6:	fb1e fe03 	smulbb	lr, lr, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80086aa:	fa1f fc8c 	uxth.w	ip, ip
  hMaxReliableElSpeedUnit *= 2u;
 80086ae:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80086b2:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 80086b4:	f1bc 0f03 	cmp.w	ip, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80086b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80086ba:	f8a0 10c2 	strh.w	r1, [r0, #194]	@ 0xc2
  hMaxReliableElSpeedUnit *= 2u;
 80086be:	fa1f fe8e 	uxth.w	lr, lr
  if ( hMinReliableElSpeedUnit == 0u )
 80086c2:	d969      	bls.n	8008798 <HALL_Init+0x104>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 80086c4:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 80086c8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80086cc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80086d0:	f242 7410 	movw	r4, #10000	@ 0x2710
 80086d4:	fbb4 f4fc 	udiv	r4, r4, ip
 80086d8:	b2a5      	uxth	r5, r4
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80086da:	fb04 f101 	mul.w	r1, r4, r1
 80086de:	4c30      	ldr	r4, [pc, #192]	@ (80087a0 <HALL_Init+0x10c>)
 80086e0:	f8a0 50c0 	strh.w	r5, [r0, #192]	@ 0xc0
 80086e4:	fba4 4101 	umull	r4, r1, r4, r1
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80086e8:	4c2e      	ldr	r4, [pc, #184]	@ (80087a4 <HALL_Init+0x110>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80086ea:	8b45      	ldrh	r5, [r0, #26]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 80086ec:	f8a0 e0b0 	strh.w	lr, [r0, #176]	@ 0xb0
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80086f0:	fba4 4202 	umull	r4, r2, r4, r2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80086f4:	69c4      	ldr	r4, [r0, #28]
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 80086f6:	0892      	lsrs	r2, r2, #2
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80086f8:	0989      	lsrs	r1, r1, #6

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 80086fa:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 80086fe:	fbb2 f2f5 	udiv	r2, r2, r5
 8008702:	fb04 f202 	mul.w	r2, r4, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8008706:	f8c0 20b4 	str.w	r2, [r0, #180]	@ 0xb4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800870a:	040e      	lsls	r6, r1, #16
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 800870c:	ea4f 024c 	mov.w	r2, ip, lsl #1
                       / hMaxReliableElSpeedUnit);
 8008710:	fbb2 f2fe 	udiv	r2, r2, lr
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8008714:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8008718:	f890 20c6 	ldrb.w	r2, [r0, #198]	@ 0xc6
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800871c:	f8c0 60b8 	str.w	r6, [r0, #184]	@ 0xb8
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8008720:	8c84      	ldrh	r4, [r0, #36]	@ 0x24
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8008722:	f8a0 10ae 	strh.w	r1, [r0, #174]	@ 0xae
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8008726:	fb05 f202 	mul.w	r2, r5, r2
 800872a:	fbb2 f2f4 	udiv	r2, r2, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800872e:	699c      	ldr	r4, [r3, #24]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8008730:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8008732:	f8a0 20c4 	strh.w	r2, [r0, #196]	@ 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8008736:	f890 2048 	ldrb.w	r2, [r0, #72]	@ 0x48
 800873a:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 800873e:	b289      	uxth	r1, r1
  pHandle->SensorIsReliable = true;
 8008740:	2401      	movs	r4, #1
 8008742:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 8008746:	f880 4049 	strb.w	r4, [r0, #73]	@ 0x49
 800874a:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 800874c:	6299      	str	r1, [r3, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800874e:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8008750:	2100      	movs	r1, #0
 8008752:	4322      	orrs	r2, r4
 8008754:	615a      	str	r2, [r3, #20]
 8008756:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	f042 0204 	orr.w	r2, r2, #4
 800875e:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	f042 0202 	orr.w	r2, r2, #2
 8008766:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008768:	68da      	ldr	r2, [r3, #12]
 800876a:	4322      	orrs	r2, r4
 800876c:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 800876e:	6259      	str	r1, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CCER, Channels);
 8008770:	6a1a      	ldr	r2, [r3, #32]
 8008772:	4322      	orrs	r2, r4
 8008774:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	4322      	orrs	r2, r4
 800877a:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 800877c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8008780:	b14a      	cbz	r2, 8008796 <HALL_Init+0x102>
 8008782:	f100 034c 	add.w	r3, r0, #76	@ 0x4c
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8008786:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 800878a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800878e:	f843 1f04 	str.w	r1, [r3, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8008792:	4293      	cmp	r3, r2
 8008794:	d1fb      	bne.n	800878e <HALL_Init+0xfa>
  }
}
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	2496      	movs	r4, #150	@ 0x96
    pHandle->HallTimeout = 150u;
 800879a:	4625      	mov	r5, r4
 800879c:	e79d      	b.n	80086da <HALL_Init+0x46>
 800879e:	bf00      	nop
 80087a0:	10624dd3 	.word	0x10624dd3
 80087a4:	aaaaaaab 	.word	0xaaaaaaab

080087a8 <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80087a8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80087aa:	68d1      	ldr	r1, [r2, #12]
{
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	f021 0102 	bic.w	r1, r1, #2
 80087b2:	4604      	mov	r4, r0

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 80087b4:	2300      	movs	r3, #0

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 80087b6:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	@ 0xae
 80087ba:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 80087bc:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 80087be:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
  pHandle->Direction = POSITIVE;
 80087c2:	f884 10a2 	strb.w	r1, [r4, #162]	@ 0xa2
  pHandle->RatioInc = false;
 80087c6:	f884 304b 	strb.w	r3, [r4, #75]	@ 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 80087ca:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
  pHandle->FirstCapt = 0u;
 80087ce:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 80087d2:	7023      	strb	r3, [r4, #0]
  pHandle->BufferFilled = 0u;
 80087d4:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
  pHandle->SensorIsReliable = true;
 80087d8:	f884 1049 	strb.w	r1, [r4, #73]	@ 0x49
  pHandle->OVFCounter = 0u;
 80087dc:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
  pHandle->_Super.hMecAccelUnitP = 0;
 80087e0:	8263      	strh	r3, [r4, #18]
  pHandle->CompSpeed = 0;
 80087e2:	f8a4 30ac 	strh.w	r3, [r4, #172]	@ 0xac
  WRITE_REG(TIMx->PSC, Prescaler);
 80087e6:	6290      	str	r0, [r2, #40]	@ 0x28
  WRITE_REG(TIMx->CNT, Counter);
 80087e8:	6253      	str	r3, [r2, #36]	@ 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80087ea:	6813      	ldr	r3, [r2, #0]
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80087ec:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80087ee:	430b      	orrs	r3, r1
 80087f0:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80087f2:	68d3      	ldr	r3, [r2, #12]
 80087f4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80087f6:	f043 0302 	orr.w	r3, r3, #2
 80087fa:	60d3      	str	r3, [r2, #12]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80087fc:	f894 7020 	ldrb.w	r7, [r4, #32]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8008800:	e9d4 5310 	ldrd	r5, r3, [r4, #64]	@ 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008804:	e9d4 020c 	ldrd	r0, r2, [r4, #48]	@ 0x30
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8008808:	bb1f      	cbnz	r7, 8008852 <HALL_Clear+0xaa>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800880a:	692d      	ldr	r5, [r5, #16]
 800880c:	43ab      	bics	r3, r5
 800880e:	6935      	ldr	r5, [r6, #16]
 8008810:	6903      	ldr	r3, [r0, #16]
 8008812:	bf0c      	ite	eq
 8008814:	2601      	moveq	r6, #1
 8008816:	2600      	movne	r6, #0
 8008818:	ea31 0505 	bics.w	r5, r1, r5
 800881c:	bf0c      	ite	eq
 800881e:	2001      	moveq	r0, #1
 8008820:	2000      	movne	r0, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8008822:	0040      	lsls	r0, r0, #1
 8008824:	ea32 0303 	bics.w	r3, r2, r3
 8008828:	ea40 0086 	orr.w	r0, r0, r6, lsl #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800882c:	bf08      	it	eq
 800882e:	f040 0001 	orreq.w	r0, r0, #1
{
}

void HALL_SetState(uint8_t hallState)
{
	HallSensorState = hallState;
 8008832:	4b35      	ldr	r3, [pc, #212]	@ (8008908 <HALL_Clear+0x160>)
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8008834:	f884 00a6 	strb.w	r0, [r4, #166]	@ 0xa6
	HallSensorState = hallState;
 8008838:	7018      	strb	r0, [r3, #0]
	setHallState(HallSensorState);
 800883a:	f7f8 fc37 	bl	80010ac <setHallState>
  switch ( pHandle->HallState )
 800883e:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8008842:	3b01      	subs	r3, #1
 8008844:	2b05      	cmp	r3, #5
 8008846:	d858      	bhi.n	80088fa <HALL_Clear+0x152>
 8008848:	e8df f003 	tbb	[pc, r3]
 800884c:	453c332a 	.word	0x453c332a
 8008850:	214e      	.short	0x214e
 8008852:	6936      	ldr	r6, [r6, #16]
 8008854:	692d      	ldr	r5, [r5, #16]
 8008856:	43ab      	bics	r3, r5
 8008858:	6903      	ldr	r3, [r0, #16]
 800885a:	bf0c      	ite	eq
 800885c:	2501      	moveq	r5, #1
 800885e:	2500      	movne	r5, #0
 8008860:	ea32 0303 	bics.w	r3, r2, r3
 8008864:	bf0c      	ite	eq
 8008866:	2001      	moveq	r0, #1
 8008868:	2000      	movne	r0, #0
 800886a:	ea31 0606 	bics.w	r6, r1, r6
 800886e:	bf0c      	ite	eq
 8008870:	2301      	moveq	r3, #1
 8008872:	2300      	movne	r3, #0
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8008874:	009b      	lsls	r3, r3, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008876:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800887a:	f083 0304 	eor.w	r3, r3, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800887e:	4318      	orrs	r0, r3
	HallSensorState = hallState;
 8008880:	4b21      	ldr	r3, [pc, #132]	@ (8008908 <HALL_Clear+0x160>)
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8008882:	f884 00a6 	strb.w	r0, [r4, #166]	@ 0xa6
	HallSensorState = hallState;
 8008886:	7018      	strb	r0, [r3, #0]
	setHallState(HallSensorState);
 8008888:	f7f8 fc10 	bl	80010ac <setHallState>
}
 800888c:	e7d7      	b.n	800883e <HALL_Clear+0x96>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 800888e:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008890:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8008894:	3b3f      	subs	r3, #63	@ 0x3f
 8008896:	b21b      	sxth	r3, r3
 8008898:	80a3      	strh	r3, [r4, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800889a:	f8a4 30aa 	strh.w	r3, [r4, #170]	@ 0xaa
}
 800889e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80088a0:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80088a2:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80088a6:	333f      	adds	r3, #63	@ 0x3f
 80088a8:	b21b      	sxth	r3, r3
 80088aa:	80a3      	strh	r3, [r4, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80088ac:	f8a4 30aa 	strh.w	r3, [r4, #170]	@ 0xaa
}
 80088b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80088b2:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80088b4:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 80088b8:	3b2a      	subs	r3, #42	@ 0x2a
 80088ba:	b21b      	sxth	r3, r3
 80088bc:	80a3      	strh	r3, [r4, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80088be:	f8a4 30aa 	strh.w	r3, [r4, #170]	@ 0xaa
}
 80088c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80088c4:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80088c6:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 80088ca:	332a      	adds	r3, #42	@ 0x2a
 80088cc:	b21b      	sxth	r3, r3
 80088ce:	80a3      	strh	r3, [r4, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80088d0:	f8a4 30aa 	strh.w	r3, [r4, #170]	@ 0xaa
}
 80088d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80088d6:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80088d8:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 80088dc:	3b15      	subs	r3, #21
 80088de:	b21b      	sxth	r3, r3
 80088e0:	80a3      	strh	r3, [r4, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80088e2:	f8a4 30aa 	strh.w	r3, [r4, #170]	@ 0xaa
}
 80088e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80088e8:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80088ea:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 80088ee:	3315      	adds	r3, #21
 80088f0:	b21b      	sxth	r3, r3
 80088f2:	80a3      	strh	r3, [r4, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80088f4:	f8a4 30aa 	strh.w	r3, [r4, #170]	@ 0xaa
}
 80088f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pHandle->SensorIsReliable = false;
 80088fa:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80088fc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
      pHandle->SensorIsReliable = false;
 8008900:	f884 2049 	strb.w	r2, [r4, #73]	@ 0x49
      break;
 8008904:	e7c9      	b.n	800889a <HALL_Clear+0xf2>
 8008906:	bf00      	nop
 8008908:	2000535c 	.word	0x2000535c

0800890c <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 800890c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8008910:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8008914:	428a      	cmp	r2, r1
{
 8008916:	4603      	mov	r3, r0
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8008918:	8880      	ldrh	r0, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 800891a:	d00e      	beq.n	800893a <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800891c:	f8b3 c0aa 	ldrh.w	ip, [r3, #170]	@ 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8008920:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8008924:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8008926:	4408      	add	r0, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8008928:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800892a:	f8b3 c0ac 	ldrh.w	ip, [r3, #172]	@ 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800892e:	f8a3 10aa 	strh.w	r1, [r3, #170]	@ 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8008932:	4460      	add	r0, ip
 8008934:	b200      	sxth	r0, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8008936:	8098      	strh	r0, [r3, #4]
}
 8008938:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 800893a:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 800893e:	4410      	add	r0, r2
 8008940:	b200      	sxth	r0, r0
 8008942:	8098      	strh	r0, [r3, #4]
}
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop

08008948 <HALL_CalcAvrgMecSpeedUnit>:
{
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 800894c:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8008950:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
{
 8008952:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 8008954:	b180      	cbz	r0, 8008978 <HALL_CalcAvrgMecSpeedUnit+0x30>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8008956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8008958:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	@ 0xae
 800895c:	429a      	cmp	r2, r3
 800895e:	d812      	bhi.n	8008986 <HALL_CalcAvrgMecSpeedUnit+0x3e>
      pHandle->_Super.hElSpeedDpp = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	81e3      	strh	r3, [r4, #14]
            pHandle->CompSpeed = 0;
 8008964:	2300      	movs	r3, #0
      *hMecSpeedUnit = 0;
 8008966:	802b      	strh	r3, [r5, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8008968:	4629      	mov	r1, r5
 800896a:	4620      	mov	r0, r4
 800896c:	f001 f840 	bl	80099f0 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008970:	f9b5 3000 	ldrsh.w	r3, [r5]
 8008974:	81a3      	strh	r3, [r4, #12]
}
 8008976:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008978:	78e3      	ldrb	r3, [r4, #3]
 800897a:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 800897c:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 800897e:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 8008980:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008982:	81a3      	strh	r3, [r4, #12]
}
 8008984:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8008986:	f9b4 20a4 	ldrsh.w	r2, [r4, #164]	@ 0xa4
 800898a:	81e2      	strh	r2, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 800898c:	2a00      	cmp	r2, #0
 800898e:	d0e9      	beq.n	8008964 <HALL_CalcAvrgMecSpeedUnit+0x1c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8008990:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8008994:	429a      	cmp	r2, r3
 8008996:	d01f      	beq.n	80089d8 <HALL_CalcAvrgMecSpeedUnit+0x90>
          if (pHandle->HallMtpa == true)
 8008998:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
 800899c:	b9d3      	cbnz	r3, 80089d4 <HALL_CalcAvrgMecSpeedUnit+0x8c>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 800899e:	88a3      	ldrh	r3, [r4, #4]
 80089a0:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	@ 0xaa
 80089a4:	1ac9      	subs	r1, r1, r3
 80089a6:	b209      	sxth	r1, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 80089a8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	@ 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80089ac:	f8a4 10a8 	strh.w	r1, [r4, #168]	@ 0xa8
            pHandle->CompSpeed = ( int16_t )
 80089b0:	fb91 f1f3 	sdiv	r1, r1, r3
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80089b4:	8b63      	ldrh	r3, [r4, #26]
 80089b6:	f8a4 10ac 	strh.w	r1, [r4, #172]	@ 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80089ba:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80089be:	69e1      	ldr	r1, [r4, #28]
 80089c0:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80089c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80089c6:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80089c8:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80089cc:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80089d0:	b21b      	sxth	r3, r3
 80089d2:	e7c8      	b.n	8008966 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 80089d4:	2100      	movs	r1, #0
 80089d6:	e7ed      	b.n	80089b4 <HALL_CalcAvrgMecSpeedUnit+0x6c>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 80089d8:	f9b4 30b0 	ldrsh.w	r3, [r4, #176]	@ 0xb0
 80089dc:	e7c3      	b.n	8008966 <HALL_CalcAvrgMecSpeedUnit+0x1e>
 80089de:	bf00      	nop

080089e0 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 80089e0:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d05e      	beq.n	8008aa6 <HALL_TIMx_CC_IRQHandler+0xc6>
{
 80089e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ec:	4604      	mov	r4, r0
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80089ee:	f890 e020 	ldrb.w	lr, [r0, #32]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80089f2:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
    bPrevHallState = pHandle->HallState;
 80089f4:	f890 60a6 	ldrb.w	r6, [r0, #166]	@ 0xa6
    PrevDirection = pHandle->Direction;
 80089f8:	f990 70a2 	ldrsb.w	r7, [r0, #162]	@ 0xa2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 80089fc:	f8d0 c038 	ldr.w	ip, [r0, #56]	@ 0x38
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8008a00:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008a02:	e9d0 200f 	ldrd	r2, r0, [r0, #60]	@ 0x3c
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8008a06:	e9d4 810c 	ldrd	r8, r1, [r4, #48]	@ 0x30
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8008a0a:	f1be 0f00 	cmp.w	lr, #0
 8008a0e:	d02b      	beq.n	8008a68 <HALL_TIMx_CC_IRQHandler+0x88>
 8008a10:	f8dc c010 	ldr.w	ip, [ip, #16]
 8008a14:	6900      	ldr	r0, [r0, #16]
 8008a16:	4383      	bics	r3, r0
 8008a18:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008a1c:	bf0c      	ite	eq
 8008a1e:	f04f 0e01 	moveq.w	lr, #1
 8008a22:	f04f 0e00 	movne.w	lr, #0
 8008a26:	ea31 0303 	bics.w	r3, r1, r3
 8008a2a:	bf0c      	ite	eq
 8008a2c:	2001      	moveq	r0, #1
 8008a2e:	2000      	movne	r0, #0
 8008a30:	ea32 0c0c 	bics.w	ip, r2, ip
 8008a34:	bf0c      	ite	eq
 8008a36:	2301      	moveq	r3, #1
 8008a38:	2300      	movne	r3, #0
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	f083 0304 	eor.w	r3, r3, #4
 8008a40:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
 8008a44:	4318      	orrs	r0, r3
	HallSensorState = hallState;
 8008a46:	4bb5      	ldr	r3, [pc, #724]	@ (8008d1c <HALL_TIMx_CC_IRQHandler+0x33c>)
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8008a48:	f884 00a6 	strb.w	r0, [r4, #166]	@ 0xa6
	HallSensorState = hallState;
 8008a4c:	7018      	strb	r0, [r3, #0]
	setHallState(HallSensorState);
 8008a4e:	f7f8 fb2d 	bl	80010ac <setHallState>
    switch ( pHandle->HallState )
 8008a52:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8008a56:	3b01      	subs	r3, #1
 8008a58:	2b05      	cmp	r3, #5
 8008a5a:	f200 8158 	bhi.w	8008d0e <HALL_TIMx_CC_IRQHandler+0x32e>
 8008a5e:	e8df f003 	tbb	[pc, r3]
 8008a62:	5566      	.short	0x5566
 8008a64:	24313e48 	.word	0x24313e48
 8008a68:	6900      	ldr	r0, [r0, #16]
 8008a6a:	4383      	bics	r3, r0
 8008a6c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8008a70:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008a74:	bf0c      	ite	eq
 8008a76:	f04f 0c01 	moveq.w	ip, #1
 8008a7a:	f04f 0c00 	movne.w	ip, #0
 8008a7e:	ea32 0000 	bics.w	r0, r2, r0
 8008a82:	bf0c      	ite	eq
 8008a84:	2001      	moveq	r0, #1
 8008a86:	2000      	movne	r0, #0
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8008a88:	0040      	lsls	r0, r0, #1
 8008a8a:	ea31 0303 	bics.w	r3, r1, r3
 8008a8e:	ea40 008c 	orr.w	r0, r0, ip, lsl #2
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8008a92:	bf08      	it	eq
 8008a94:	f040 0001 	orreq.w	r0, r0, #1
	HallSensorState = hallState;
 8008a98:	4ba0      	ldr	r3, [pc, #640]	@ (8008d1c <HALL_TIMx_CC_IRQHandler+0x33c>)
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8008a9a:	f884 00a6 	strb.w	r0, [r4, #166]	@ 0xa6
	HallSensorState = hallState;
 8008a9e:	7018      	strb	r0, [r3, #0]
	setHallState(HallSensorState);
 8008aa0:	f7f8 fb04 	bl	80010ac <setHallState>
}
 8008aa4:	e7d5      	b.n	8008a52 <HALL_TIMx_CC_IRQHandler+0x72>
}
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 8008aaa:	2e02      	cmp	r6, #2
 8008aac:	d07b      	beq.n	8008ba6 <HALL_TIMx_CC_IRQHandler+0x1c6>
        else if ( bPrevHallState == STATE_4 )
 8008aae:	2e04      	cmp	r6, #4
 8008ab0:	d142      	bne.n	8008b38 <HALL_TIMx_CC_IRQHandler+0x158>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008ab2:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008ab4:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 8008ab8:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008aba:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8008abc:	f884 20a2 	strb.w	r2, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008ac0:	b21b      	sxth	r3, r3
 8008ac2:	e02f      	b.n	8008b24 <HALL_TIMx_CC_IRQHandler+0x144>
        if ( bPrevHallState == STATE_4 )
 8008ac4:	2e04      	cmp	r6, #4
 8008ac6:	d054      	beq.n	8008b72 <HALL_TIMx_CC_IRQHandler+0x192>
        else if ( bPrevHallState == STATE_1 )
 8008ac8:	2e01      	cmp	r6, #1
 8008aca:	d135      	bne.n	8008b38 <HALL_TIMx_CC_IRQHandler+0x158>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8008acc:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008ace:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 8008ad2:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8008ad4:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8008ad6:	f884 20a2 	strb.w	r2, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8008ada:	b21b      	sxth	r3, r3
 8008adc:	e022      	b.n	8008b24 <HALL_TIMx_CC_IRQHandler+0x144>
        if ( bPrevHallState == STATE_6 )
 8008ade:	2e06      	cmp	r6, #6
 8008ae0:	d058      	beq.n	8008b94 <HALL_TIMx_CC_IRQHandler+0x1b4>
        else if ( bPrevHallState == STATE_5 )
 8008ae2:	2e05      	cmp	r6, #5
 8008ae4:	d128      	bne.n	8008b38 <HALL_TIMx_CC_IRQHandler+0x158>
          pHandle->Direction = NEGATIVE;
 8008ae6:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8008ae8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
          pHandle->Direction = NEGATIVE;
 8008aec:	f884 20a2 	strb.w	r2, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8008af0:	e018      	b.n	8008b24 <HALL_TIMx_CC_IRQHandler+0x144>
        if ( bPrevHallState == STATE_1 )
 8008af2:	2e01      	cmp	r6, #1
 8008af4:	d046      	beq.n	8008b84 <HALL_TIMx_CC_IRQHandler+0x1a4>
        else if ( bPrevHallState == STATE_2 )
 8008af6:	2e02      	cmp	r6, #2
 8008af8:	d11e      	bne.n	8008b38 <HALL_TIMx_CC_IRQHandler+0x158>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8008afa:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008afc:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = NEGATIVE;
 8008b00:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8008b02:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = NEGATIVE;
 8008b04:	f884 20a2 	strb.w	r2, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8008b08:	b21b      	sxth	r3, r3
 8008b0a:	e00b      	b.n	8008b24 <HALL_TIMx_CC_IRQHandler+0x144>
        if ( bPrevHallState == STATE_3 )
 8008b0c:	2e03      	cmp	r6, #3
 8008b0e:	d053      	beq.n	8008bb8 <HALL_TIMx_CC_IRQHandler+0x1d8>
        else if ( bPrevHallState == STATE_6 )
 8008b10:	2e06      	cmp	r6, #6
 8008b12:	d111      	bne.n	8008b38 <HALL_TIMx_CC_IRQHandler+0x158>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8008b14:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008b16:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 8008b1a:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8008b1c:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 8008b1e:	f884 20a2 	strb.w	r2, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8008b22:	b21b      	sxth	r3, r3
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8008b24:	f8a4 30aa 	strh.w	r3, [r4, #170]	@ 0xaa
 8008b28:	f04f 31ff 	mov.w	r1, #4294967295
 8008b2c:	e006      	b.n	8008b3c <HALL_TIMx_CC_IRQHandler+0x15c>
        if ( bPrevHallState == STATE_5 )
 8008b2e:	2e05      	cmp	r6, #5
 8008b30:	d04b      	beq.n	8008bca <HALL_TIMx_CC_IRQHandler+0x1ea>
        else if ( bPrevHallState == STATE_3 )
 8008b32:	2e03      	cmp	r6, #3
 8008b34:	f000 80e2 	beq.w	8008cfc <HALL_TIMx_CC_IRQHandler+0x31c>
    if (pHandle->Direction != PrevDirection)
 8008b38:	f994 10a2 	ldrsb.w	r1, [r4, #162]	@ 0xa2
 8008b3c:	428f      	cmp	r7, r1
 8008b3e:	d004      	beq.n	8008b4a <HALL_TIMx_CC_IRQHandler+0x16a>
      pHandle->BufferFilled = 0 ;
 8008b40:	2300      	movs	r3, #0
 8008b42:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8008b46:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    if (pHandle->HallMtpa == true)
 8008b4a:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
 8008b4e:	b113      	cbz	r3, 8008b56 <HALL_TIMx_CC_IRQHandler+0x176>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8008b50:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8008b54:	80a3      	strh	r3, [r4, #4]
    if ( pHandle->FirstCapt == 0u )
 8008b56:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d13e      	bne.n	8008bdc <HALL_TIMx_CC_IRQHandler+0x1fc>
      pHandle->FirstCapt++;
 8008b5e:	f894 304c 	ldrb.w	r3, [r4, #76]	@ 0x4c
 8008b62:	3301      	adds	r3, #1
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8008b6a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
}
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pHandle->Direction = POSITIVE;
 8008b72:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8008b74:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 8008b78:	f884 20a2 	strb.w	r2, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008b7c:	f8a4 30aa 	strh.w	r3, [r4, #170]	@ 0xaa
 8008b80:	2101      	movs	r1, #1
 8008b82:	e7db      	b.n	8008b3c <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8008b84:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 8008b86:	f884 60a2 	strb.w	r6, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8008b8a:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
 8008b8e:	3355      	adds	r3, #85	@ 0x55
 8008b90:	b21b      	sxth	r3, r3
 8008b92:	e7f3      	b.n	8008b7c <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008b94:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008b96:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 8008b9a:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008b9c:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 8008b9e:	f884 20a2 	strb.w	r2, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8008ba2:	b21b      	sxth	r3, r3
 8008ba4:	e7ea      	b.n	8008b7c <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8008ba6:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008ba8:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = POSITIVE;
 8008bac:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8008bae:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = POSITIVE;
 8008bb0:	f884 20a2 	strb.w	r2, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8008bb4:	b21b      	sxth	r3, r3
 8008bb6:	e7e1      	b.n	8008b7c <HALL_TIMx_CC_IRQHandler+0x19c>
                                                  + S16_60_PHASE_SHIFT );
 8008bb8:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008bba:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = POSITIVE;
 8008bbe:	2201      	movs	r2, #1
                                                  + S16_60_PHASE_SHIFT );
 8008bc0:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = POSITIVE;
 8008bc2:	f884 20a2 	strb.w	r2, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8008bc6:	b21b      	sxth	r3, r3
 8008bc8:	e7d8      	b.n	8008b7c <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8008bca:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008bcc:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 8008bd0:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8008bd2:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 8008bd4:	f884 20a2 	strb.w	r2, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8008bd8:	b21b      	sxth	r3, r3
 8008bda:	e7cf      	b.n	8008b7c <HALL_TIMx_CC_IRQHandler+0x19c>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8008bdc:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
 8008be0:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
 8008be4:	4283      	cmp	r3, r0
 8008be6:	d205      	bcs.n	8008bf4 <HALL_TIMx_CC_IRQHandler+0x214>
        pHandle->BufferFilled++;
 8008be8:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
 8008bec:	3301      	adds	r3, #1
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
 8008bf4:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8008bf6:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8008bf8:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
      if ( pHandle->OVFCounter != 0u )
 8008bfc:	f894 204e 	ldrb.w	r2, [r4, #78]	@ 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8008c00:	041b      	lsls	r3, r3, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8008c02:	b2bf      	uxth	r7, r7
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8008c04:	fa13 f386 	uxtah	r3, r3, r6
      if ( pHandle->OVFCounter != 0u )
 8008c08:	f002 0cff 	and.w	ip, r2, #255	@ 0xff
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	d045      	beq.n	8008c9c <HALL_TIMx_CC_IRQHandler+0x2bc>
        if ( pHandle->RatioInc )
 8008c10:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	d04b      	beq.n	8008cb0 <HALL_TIMx_CC_IRQHandler+0x2d0>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f884 204b 	strb.w	r2, [r4, #75]	@ 0x4b
        hAux = hPrscBuf + 1u;
 8008c1e:	1c7a      	adds	r2, r7, #1
        wCaptBuf *= hAux;
 8008c20:	b292      	uxth	r2, r2
 8008c22:	fb02 f303 	mul.w	r3, r2, r3
        if ( wCaptBuf < pHandle->MinPeriod )
 8008c26:	f8d4 20bc 	ldr.w	r2, [r4, #188]	@ 0xbc
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d830      	bhi.n	8008c90 <HALL_TIMx_CC_IRQHandler+0x2b0>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8008c2e:	f894 2098 	ldrb.w	r2, [r4, #152]	@ 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8008c32:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8008c36:	f8d4 509c 	ldr.w	r5, [r4, #156]	@ 0x9c
 8008c3a:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8008c3e:	429e      	cmp	r6, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8008c40:	f8dc 7050 	ldr.w	r7, [ip, #80]	@ 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8008c44:	bf88      	it	hi
 8008c46:	fb01 f603 	mulhi.w	r6, r1, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8008c4a:	eba5 0507 	sub.w	r5, r5, r7
          pHandle->SpeedFIFOIdx++;
 8008c4e:	f102 0201 	add.w	r2, r2, #1
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8008c52:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 8008c56:	bf94      	ite	ls
 8008c58:	434e      	mulls	r6, r1
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8008c5a:	19ad      	addhi	r5, r5, r6
          pHandle->SpeedFIFOIdx++;
 8008c5c:	b2d2      	uxtb	r2, r2
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8008c5e:	bf88      	it	hi
 8008c60:	f8c4 509c 	strhi.w	r5, [r4, #156]	@ 0x9c
 8008c64:	f8cc 6050 	str.w	r6, [ip, #80]	@ 0x50
            pHandle->SpeedFIFOIdx = 0u;
 8008c68:	4290      	cmp	r0, r2
 8008c6a:	bf08      	it	eq
 8008c6c:	2200      	moveq	r2, #0
 8008c6e:	f884 2098 	strb.w	r2, [r4, #152]	@ 0x98
          if ( pHandle->SensorIsReliable) 
 8008c72:	f894 2049 	ldrb.w	r2, [r4, #73]	@ 0x49
 8008c76:	b3aa      	cbz	r2, 8008ce4 <HALL_TIMx_CC_IRQHandler+0x304>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8008c78:	f894 504d 	ldrb.w	r5, [r4, #77]	@ 0x4d
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8008c7c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8008c80:	42a8      	cmp	r0, r5
 8008c82:	d932      	bls.n	8008cea <HALL_TIMx_CC_IRQHandler+0x30a>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8008c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c88:	fb12 f201 	smulbb	r2, r2, r1
 8008c8c:	f8a4 20a4 	strh.w	r2, [r4, #164]	@ 0xa4
      pHandle->OVFCounter = 0u;
 8008c90:	2300      	movs	r3, #0
 8008c92:	f884 304e 	strb.w	r3, [r4, #78]	@ 0x4e
}
 8008c96:	2000      	movs	r0, #0
 8008c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 8008c9c:	f894 204a 	ldrb.w	r2, [r4, #74]	@ 0x4a
 8008ca0:	b192      	cbz	r2, 8008cc8 <HALL_TIMx_CC_IRQHandler+0x2e8>
          hAux = hPrscBuf + 2u;
 8008ca2:	1cba      	adds	r2, r7, #2
          wCaptBuf *= hAux;
 8008ca4:	b292      	uxth	r2, r2
          pHandle->RatioDec = false;
 8008ca6:	f884 c04a 	strb.w	ip, [r4, #74]	@ 0x4a
          wCaptBuf *= hAux;
 8008caa:	fb02 f303 	mul.w	r3, r2, r3
          pHandle->RatioDec = false;
 8008cae:	e7ba      	b.n	8008c26 <HALL_TIMx_CC_IRQHandler+0x246>
 8008cb0:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8008cb2:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8008cb6:	4296      	cmp	r6, r2
 8008cb8:	d9b1      	bls.n	8008c1e <HALL_TIMx_CC_IRQHandler+0x23e>
 8008cba:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8008cbc:	3201      	adds	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8008cbe:	62aa      	str	r2, [r5, #40]	@ 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f884 204b 	strb.w	r2, [r4, #75]	@ 0x4b
 8008cc6:	e7aa      	b.n	8008c1e <HALL_TIMx_CC_IRQHandler+0x23e>
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8008cc8:	b2b6      	uxth	r6, r6
 8008cca:	f5b6 4faa 	cmp.w	r6, #21760	@ 0x5500
 8008cce:	d2a6      	bcs.n	8008c1e <HALL_TIMx_CC_IRQHandler+0x23e>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8008cd0:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8008cd2:	2a00      	cmp	r2, #0
 8008cd4:	d0a3      	beq.n	8008c1e <HALL_TIMx_CC_IRQHandler+0x23e>
 8008cd6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8008cd8:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8008cda:	62aa      	str	r2, [r5, #40]	@ 0x28
              pHandle->RatioDec = true;
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f884 204a 	strb.w	r2, [r4, #74]	@ 0x4a
 8008ce2:	e79c      	b.n	8008c1e <HALL_TIMx_CC_IRQHandler+0x23e>
            pHandle->AvrElSpeedDpp = 0;
 8008ce4:	f8a4 20a4 	strh.w	r2, [r4, #164]	@ 0xa4
 8008ce8:	e7d2      	b.n	8008c90 <HALL_TIMx_CC_IRQHandler+0x2b0>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8008cea:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8008cee:	fb93 f3f0 	sdiv	r3, r3, r0
 8008cf2:	fb92 f2f3 	sdiv	r2, r2, r3
 8008cf6:	f8a4 20a4 	strh.w	r2, [r4, #164]	@ 0xa4
 8008cfa:	e7c9      	b.n	8008c90 <HALL_TIMx_CC_IRQHandler+0x2b0>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8008cfc:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008cfe:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 8008d02:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8008d04:	3355      	adds	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 8008d06:	f884 20a2 	strb.w	r2, [r4, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8008d0a:	b21b      	sxth	r3, r3
 8008d0c:	e70a      	b.n	8008b24 <HALL_TIMx_CC_IRQHandler+0x144>
        pHandle->SensorIsReliable = false;
 8008d0e:	2300      	movs	r3, #0
    if (pHandle->Direction != PrevDirection)
 8008d10:	f994 10a2 	ldrsb.w	r1, [r4, #162]	@ 0xa2
        pHandle->SensorIsReliable = false;
 8008d14:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
        break;
 8008d18:	e710      	b.n	8008b3c <HALL_TIMx_CC_IRQHandler+0x15c>
 8008d1a:	bf00      	nop
 8008d1c:	2000535c 	.word	0x2000535c

08008d20 <HALL_TIMx_UP_IRQHandler>:
{
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ( pHandle->SensorIsReliable )
 8008d22:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8008d26:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  if ( pHandle->SensorIsReliable )
 8008d28:	b1c3      	cbz	r3, 8008d5c <HALL_TIMx_UP_IRQHandler+0x3c>
    pHandle->OVFCounter++;
 8008d2a:	f890 204e 	ldrb.w	r2, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8008d2e:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	@ 0xc0
    pHandle->OVFCounter++;
 8008d32:	3201      	adds	r2, #1
 8008d34:	4604      	mov	r4, r0
 8008d36:	b2d2      	uxtb	r2, r2
 8008d38:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8008d3c:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	@ 0xc2
  return (uint32_t)(READ_REG(TIMx->PSC));
 8008d40:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8008d42:	f894 104e 	ldrb.w	r1, [r4, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8008d46:	fb02 f303 	mul.w	r3, r2, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 8008d4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008d4e:	fb00 2202 	mla	r2, r0, r2, r2
 8008d52:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	4299      	cmp	r1, r3
 8008d5a:	d201      	bcs.n	8008d60 <HALL_TIMx_UP_IRQHandler+0x40>
}
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8008d60:	f894 7020 	ldrb.w	r7, [r4, #32]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8008d64:	6c25      	ldr	r5, [r4, #64]	@ 0x40
      pHandle->_Super.hElSpeedDpp = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	81e3      	strh	r3, [r4, #14]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8008d6a:	e9d4 620e 	ldrd	r6, r2, [r4, #56]	@ 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008d6e:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	@ 0x30
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8008d72:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8008d74:	bb1f      	cbnz	r7, 8008dbe <HALL_TIMx_UP_IRQHandler+0x9e>
 8008d76:	692d      	ldr	r5, [r5, #16]
 8008d78:	43ab      	bics	r3, r5
 8008d7a:	6935      	ldr	r5, [r6, #16]
 8008d7c:	6903      	ldr	r3, [r0, #16]
 8008d7e:	bf0c      	ite	eq
 8008d80:	2601      	moveq	r6, #1
 8008d82:	2600      	movne	r6, #0
 8008d84:	ea32 0505 	bics.w	r5, r2, r5
 8008d88:	bf0c      	ite	eq
 8008d8a:	2001      	moveq	r0, #1
 8008d8c:	2000      	movne	r0, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8008d8e:	0040      	lsls	r0, r0, #1
 8008d90:	ea31 0303 	bics.w	r3, r1, r3
 8008d94:	ea40 0086 	orr.w	r0, r0, r6, lsl #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008d98:	bf08      	it	eq
 8008d9a:	f040 0001 	orreq.w	r0, r0, #1
	HallSensorState = hallState;
 8008d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8008e9c <HALL_TIMx_UP_IRQHandler+0x17c>)
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8008da0:	f884 00a6 	strb.w	r0, [r4, #166]	@ 0xa6
	HallSensorState = hallState;
 8008da4:	7018      	strb	r0, [r3, #0]
	setHallState(HallSensorState);
 8008da6:	f7f8 f981 	bl	80010ac <setHallState>
  switch ( pHandle->HallState )
 8008daa:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8008dae:	3b01      	subs	r3, #1
 8008db0:	2b05      	cmp	r3, #5
 8008db2:	d86c      	bhi.n	8008e8e <HALL_TIMx_UP_IRQHandler+0x16e>
 8008db4:	e8df f003 	tbb	[pc, r3]
 8008db8:	4f565d64 	.word	0x4f565d64
 8008dbc:	2148      	.short	0x2148
 8008dbe:	6936      	ldr	r6, [r6, #16]
 8008dc0:	692d      	ldr	r5, [r5, #16]
 8008dc2:	43ab      	bics	r3, r5
 8008dc4:	6903      	ldr	r3, [r0, #16]
 8008dc6:	bf0c      	ite	eq
 8008dc8:	2501      	moveq	r5, #1
 8008dca:	2500      	movne	r5, #0
 8008dcc:	ea31 0303 	bics.w	r3, r1, r3
 8008dd0:	bf0c      	ite	eq
 8008dd2:	2001      	moveq	r0, #1
 8008dd4:	2000      	movne	r0, #0
 8008dd6:	ea32 0606 	bics.w	r6, r2, r6
 8008dda:	bf0c      	ite	eq
 8008ddc:	2301      	moveq	r3, #1
 8008dde:	2300      	movne	r3, #0
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8008de0:	009b      	lsls	r3, r3, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008de2:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8008de6:	f083 0304 	eor.w	r3, r3, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008dea:	4318      	orrs	r0, r3
	HallSensorState = hallState;
 8008dec:	4b2b      	ldr	r3, [pc, #172]	@ (8008e9c <HALL_TIMx_UP_IRQHandler+0x17c>)
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8008dee:	f884 00a6 	strb.w	r0, [r4, #166]	@ 0xa6
	HallSensorState = hallState;
 8008df2:	7018      	strb	r0, [r3, #0]
	setHallState(HallSensorState);
 8008df4:	f7f8 f95a 	bl	80010ac <setHallState>
}
 8008df8:	e7d7      	b.n	8008daa <HALL_TIMx_UP_IRQHandler+0x8a>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8008dfa:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008dfc:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8008e00:	3b3f      	subs	r3, #63	@ 0x3f
 8008e02:	b21b      	sxth	r3, r3
 8008e04:	80a3      	strh	r3, [r4, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8008e06:	f894 0026 	ldrb.w	r0, [r4, #38]	@ 0x26
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8008e0a:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8008e0e:	f8a4 30aa 	strh.w	r3, [r4, #170]	@ 0xaa
      pHandle->OVFCounter = 0u;
 8008e12:	2100      	movs	r1, #0
 8008e14:	f884 104e 	strb.w	r1, [r4, #78]	@ 0x4e
      pHandle->FirstCapt = 0u;
 8008e18:	f884 104c 	strb.w	r1, [r4, #76]	@ 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8008e1c:	b148      	cbz	r0, 8008e32 <HALL_TIMx_UP_IRQHandler+0x112>
 8008e1e:	f104 034c 	add.w	r3, r4, #76	@ 0x4c
 8008e22:	eb03 0180 	add.w	r1, r3, r0, lsl #2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8008e26:	f843 2f04 	str.w	r2, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8008e2a:	4299      	cmp	r1, r3
 8008e2c:	d1fb      	bne.n	8008e26 <HALL_TIMx_UP_IRQHandler+0x106>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8008e2e:	fb02 f000 	mul.w	r0, r2, r0
      pHandle->BufferFilled = 0 ;
 8008e32:	2300      	movs	r3, #0
 8008e34:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8008e38:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8008e3c:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8008e40:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
}
 8008e44:	2000      	movs	r0, #0
 8008e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8008e48:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008e4a:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8008e4e:	3315      	adds	r3, #21
 8008e50:	b21b      	sxth	r3, r3
 8008e52:	80a3      	strh	r3, [r4, #4]
      break;
 8008e54:	e7d7      	b.n	8008e06 <HALL_TIMx_UP_IRQHandler+0xe6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8008e56:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008e58:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 8008e5c:	3b15      	subs	r3, #21
 8008e5e:	b21b      	sxth	r3, r3
 8008e60:	80a3      	strh	r3, [r4, #4]
      break;
 8008e62:	e7d0      	b.n	8008e06 <HALL_TIMx_UP_IRQHandler+0xe6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8008e64:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008e66:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 8008e6a:	332a      	adds	r3, #42	@ 0x2a
 8008e6c:	b21b      	sxth	r3, r3
 8008e6e:	80a3      	strh	r3, [r4, #4]
      break;
 8008e70:	e7c9      	b.n	8008e06 <HALL_TIMx_UP_IRQHandler+0xe6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8008e72:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008e74:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 8008e78:	3b2a      	subs	r3, #42	@ 0x2a
 8008e7a:	b21b      	sxth	r3, r3
 8008e7c:	80a3      	strh	r3, [r4, #4]
      break;
 8008e7e:	e7c2      	b.n	8008e06 <HALL_TIMx_UP_IRQHandler+0xe6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8008e80:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8008e82:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8008e86:	333f      	adds	r3, #63	@ 0x3f
 8008e88:	b21b      	sxth	r3, r3
 8008e8a:	80a3      	strh	r3, [r4, #4]
      break;
 8008e8c:	e7bb      	b.n	8008e06 <HALL_TIMx_UP_IRQHandler+0xe6>
      pHandle->SensorIsReliable = false;
 8008e8e:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8008e90:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
      pHandle->SensorIsReliable = false;
 8008e94:	f884 2049 	strb.w	r2, [r4, #73]	@ 0x49
      break;
 8008e98:	e7b5      	b.n	8008e06 <HALL_TIMx_UP_IRQHandler+0xe6>
 8008e9a:	bf00      	nop
 8008e9c:	2000535c 	.word	0x2000535c

08008ea0 <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008ea0:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8008ea2:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008ea4:	6a13      	ldr	r3, [r2, #32]
{
 8008ea6:	b510      	push	{r4, lr}
 8008ea8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8008eac:	4c1d      	ldr	r4, [pc, #116]	@ (8008f24 <ICS_GetPhaseCurrents+0x84>)
 8008eae:	6213      	str	r3, [r2, #32]
 8008eb0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8008eb2:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 8008eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8008f28 <ICS_GetPhaseCurrents+0x88>)
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8008eb6:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	1b1b      	subs	r3, r3, r4
  if ( aux < -INT16_MAX )
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	db06      	blt.n	8008ece <ICS_GetPhaseCurrents+0x2e>
  {
    pStator_Currents->a = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 8008ec0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ec4:	db2a      	blt.n	8008f1c <ICS_GetPhaseCurrents+0x7c>
 8008ec6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8008eca:	469e      	mov	lr, r3
 8008ecc:	e002      	b.n	8008ed4 <ICS_GetPhaseCurrents+0x34>
 8008ece:	f248 0301 	movw	r3, #32769	@ 0x8001
 8008ed2:	4696      	mov	lr, r2
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8008ed4:	4a15      	ldr	r2, [pc, #84]	@ (8008f2c <ICS_GetPhaseCurrents+0x8c>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8008ed6:	6e04      	ldr	r4, [r0, #96]	@ 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8008ed8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
    pStator_Currents->a = -INT16_MAX;
 8008eda:	f8a1 e000 	strh.w	lr, [r1]
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8008ede:	0052      	lsls	r2, r2, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8008ee0:	b292      	uxth	r2, r2
 8008ee2:	1b12      	subs	r2, r2, r4

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 8008ee4:	4c10      	ldr	r4, [pc, #64]	@ (8008f28 <ICS_GetPhaseCurrents+0x88>)
 8008ee6:	42a2      	cmp	r2, r4
 8008ee8:	db06      	blt.n	8008ef8 <ICS_GetPhaseCurrents+0x58>
  {
    pStator_Currents->b = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 8008eea:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8008eee:	db11      	blt.n	8008f14 <ICS_GetPhaseCurrents+0x74>
 8008ef0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008ef4:	4694      	mov	ip, r2
 8008ef6:	e002      	b.n	8008efe <ICS_GetPhaseCurrents+0x5e>
 8008ef8:	46a4      	mov	ip, r4
 8008efa:	f248 0201 	movw	r2, #32769	@ 0x8001
    pStator_Currents->b = ( int16_t )aux;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8008efe:	4413      	add	r3, r2
 8008f00:	425b      	negs	r3, r3
    pStator_Currents->b = -INT16_MAX;
 8008f02:	f8a1 c002 	strh.w	ip, [r1, #2]
  pHandle->_Super.Ia = pStator_Currents->a;
 8008f06:	f8a0 e048 	strh.w	lr, [r0, #72]	@ 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 8008f0a:	f8a0 c04a 	strh.w	ip, [r0, #74]	@ 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8008f0e:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c

}
 8008f12:	bd10      	pop	{r4, pc}
    pStator_Currents->b = ( int16_t )aux;
 8008f14:	fa0f fc82 	sxth.w	ip, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8008f18:	b292      	uxth	r2, r2
 8008f1a:	e7f0      	b.n	8008efe <ICS_GetPhaseCurrents+0x5e>
    pStator_Currents->a = ( int16_t )aux;
 8008f1c:	fa0f fe83 	sxth.w	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	e7d7      	b.n	8008ed4 <ICS_GetPhaseCurrents+0x34>
 8008f24:	40012000 	.word	0x40012000
 8008f28:	ffff8001 	.word	0xffff8001
 8008f2c:	40012100 	.word	0x40012100

08008f30 <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008f30:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	6a13      	ldr	r3, [r2, #32]
 8008f36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f3a:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8008f3c:	f890 3066 	ldrb.w	r3, [r0, #102]	@ 0x66
 8008f40:	2b0f      	cmp	r3, #15
 8008f42:	d815      	bhi.n	8008f70 <ICS_HFCurrentsCalibration+0x40>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 8008f44:	4a0c      	ldr	r2, [pc, #48]	@ (8008f78 <ICS_HFCurrentsCalibration+0x48>)
 8008f46:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
{
 8008f48:	b410      	push	{r4}
    pHandle->PhaseAOffset += ADC1->JDR1;
 8008f4a:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
 8008f4c:	4423      	add	r3, r4
 8008f4e:	65c3      	str	r3, [r0, #92]	@ 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 8008f50:	f8d2 413c 	ldr.w	r4, [r2, #316]	@ 0x13c
    pHandle->PolarizationCounter++;
 8008f54:	f890 3066 	ldrb.w	r3, [r0, #102]	@ 0x66
    pHandle->PhaseBOffset += ADC2->JDR1;
 8008f58:	6e02      	ldr	r2, [r0, #96]	@ 0x60
    pHandle->PolarizationCounter++;
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 8008f5e:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8008f60:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8008f64:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 8008f66:	6602      	str	r2, [r0, #96]	@ 0x60
  pStator_Currents->b = 0;
}
 8008f68:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8008f6c:	600b      	str	r3, [r1, #0]
}
 8008f6e:	4770      	bx	lr
  pStator_Currents->a = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	600b      	str	r3, [r1, #0]
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	40012000 	.word	0x40012000

08008f7c <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008f7c:	6f01      	ldr	r1, [r0, #112]	@ 0x70
 8008f7e:	68cb      	ldr	r3, [r1, #12]
{
 8008f80:	b410      	push	{r4}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	f022 0201 	bic.w	r2, r2, #1
 8008f88:	601a      	str	r2, [r3, #0]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 8008f8a:	f891 202c 	ldrb.w	r2, [r1, #44]	@ 0x2c
 8008f8e:	b132      	cbz	r2, 8008f9e <ICS_Init+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8008f90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f94:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008f9c:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008f9e:	695a      	ldr	r2, [r3, #20]
 8008fa0:	f042 0201 	orr.w	r2, r2, #1
 8008fa4:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 8008fa6:	790a      	ldrb	r2, [r1, #4]
 8008fa8:	2a02      	cmp	r2, #2
 8008faa:	d030      	beq.n	800900e <ICS_Init+0x92>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 8008fac:	780a      	ldrb	r2, [r1, #0]
 8008fae:	2a01      	cmp	r2, #1
 8008fb0:	d030      	beq.n	8009014 <ICS_Init+0x98>
  SET_BIT(TIMx->CCER, Channels);
 8008fb2:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 8008fb4:	4922      	ldr	r1, [pc, #136]	@ (8009040 <ICS_Init+0xc4>)
 8008fb6:	f442 62aa 	orr.w	r2, r2, #1360	@ 0x550
 8008fba:	f042 0205 	orr.w	r2, r2, #5
 8008fbe:	428b      	cmp	r3, r1
 8008fc0:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008fc2:	4a20      	ldr	r2, [pc, #128]	@ (8009044 <ICS_Init+0xc8>)
 8008fc4:	d02b      	beq.n	800901e <ICS_Init+0xa2>
 8008fc6:	68d3      	ldr	r3, [r2, #12]
 8008fc8:	f043 0302 	orr.w	r3, r3, #2
 8008fcc:	f44f 11f0 	mov.w	r1, #1966080	@ 0x1e0000
 8008fd0:	60d3      	str	r3, [r2, #12]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8008fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8009048 <ICS_Init+0xcc>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8008fd4:	6681      	str	r1, [r0, #104]	@ 0x68
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	491c      	ldr	r1, [pc, #112]	@ (800904c <ICS_Init+0xd0>)
 8008fda:	f042 0201 	orr.w	r2, r2, #1
 8008fde:	609a      	str	r2, [r3, #8]
 8008fe0:	688a      	ldr	r2, [r1, #8]
 8008fe2:	f042 0201 	orr.w	r2, r2, #1
 8008fe6:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8008fea:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008fee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8008ff4:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8008ff6:	685a      	ldr	r2, [r3, #4]
}
 8008ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->OverCurrentFlag = false;
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009002:	605a      	str	r2, [r3, #4]
 8009004:	f880 106c 	strb.w	r1, [r0, #108]	@ 0x6c
    pHandle->_Super.DTTest = 0u;
 8009008:	f8a0 104e 	strh.w	r1, [r0, #78]	@ 0x4e
}
 800900c:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800900e:	794a      	ldrb	r2, [r1, #5]
 8009010:	2a01      	cmp	r2, #1
 8009012:	d00b      	beq.n	800902c <ICS_Init+0xb0>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8009014:	f8b0 2064 	ldrh.w	r2, [r0, #100]	@ 0x64
 8009018:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 800901a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800901c:	e7c9      	b.n	8008fb2 <ICS_Init+0x36>
 800901e:	68d3      	ldr	r3, [r2, #12]
 8009020:	f043 0301 	orr.w	r3, r3, #1
 8009024:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8009028:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 800902a:	e7d2      	b.n	8008fd2 <ICS_Init+0x56>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800902c:	7a09      	ldrb	r1, [r1, #8]
 800902e:	2903      	cmp	r1, #3
 8009030:	d1f0      	bne.n	8009014 <ICS_Init+0x98>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009032:	631a      	str	r2, [r3, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009034:	695a      	ldr	r2, [r3, #20]
 8009036:	f042 0201 	orr.w	r2, r2, #1
 800903a:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800903c:	6319      	str	r1, [r3, #48]	@ 0x30
}
 800903e:	e7e9      	b.n	8009014 <ICS_Init+0x98>
 8009040:	40010000 	.word	0x40010000
 8009044:	e0042000 	.word	0xe0042000
 8009048:	40012000 	.word	0x40012000
 800904c:	40012100 	.word	0x40012100

08009050 <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009050:	6f01      	ldr	r1, [r0, #112]	@ 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 8009052:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009056:	68ca      	ldr	r2, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8009058:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800905c:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800905e:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009062:	6353      	str	r3, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009064:	6393      	str	r3, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009066:	63d3      	str	r3, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009068:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800906a:	6913      	ldr	r3, [r2, #16]
 800906c:	07db      	lsls	r3, r3, #31
 800906e:	d5fc      	bpl.n	800906a <ICS_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009070:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8009072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009076:	6453      	str	r3, [r2, #68]	@ 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009078:	7c0b      	ldrb	r3, [r1, #16]
 800907a:	2b02      	cmp	r3, #2
 800907c:	d000      	beq.n	8009080 <ICS_TurnOnLowSides+0x30>
 800907e:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009080:	694a      	ldr	r2, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009082:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009084:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
{
 8009086:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009088:	698c      	ldr	r4, [r1, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800908a:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800908c:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800908e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8009090:	6184      	str	r4, [r0, #24]
  }
}
 8009092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009096:	619a      	str	r2, [r3, #24]
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop

0800909c <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800909c:	6f01      	ldr	r1, [r0, #112]	@ 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800909e:	f8b0 2064 	ldrh.w	r2, [r0, #100]	@ 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80090a2:	68cb      	ldr	r3, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80090a4:	f04f 0c00 	mov.w	ip, #0
{
 80090a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80090aa:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80090ae:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80090b0:	6358      	str	r0, [r3, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80090b2:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 80090b4:	6398      	str	r0, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80090b6:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80090b8:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80090bc:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80090be:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80090c0:	691a      	ldr	r2, [r3, #16]
 80090c2:	07d2      	lsls	r2, r2, #31
 80090c4:	d5fc      	bpl.n	80090c0 <ICS_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80090c6:	f06f 0201 	mvn.w	r2, #1
 80090ca:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80090cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090d2:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80090d4:	7c0a      	ldrb	r2, [r1, #16]
 80090d6:	2a02      	cmp	r2, #2
 80090d8:	d007      	beq.n	80090ea <ICS_SwitchOnPWM+0x4e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80090da:	f06f 0201 	mvn.w	r2, #1
 80090de:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80090e0:	68da      	ldr	r2, [r3, #12]
 80090e2:	f042 0201 	orr.w	r2, r2, #1
 80090e6:	60da      	str	r2, [r3, #12]
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 80090e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80090ea:	6a1d      	ldr	r5, [r3, #32]
 80090ec:	f240 5c55 	movw	ip, #1365	@ 0x555
 80090f0:	ea3c 0c05 	bics.w	ip, ip, r5
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80090f4:	e9d1 e405 	ldrd	lr, r4, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80090f8:	e9d1 7007 	ldrd	r7, r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80090fc:	e9d1 6209 	ldrd	r6, r2, [r1, #36]	@ 0x24
 8009100:	d007      	beq.n	8009112 <ICS_SwitchOnPWM+0x76>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009102:	0424      	lsls	r4, r4, #16
 8009104:	0400      	lsls	r0, r0, #16
 8009106:	0412      	lsls	r2, r2, #16
 8009108:	f8ce 4018 	str.w	r4, [lr, #24]
 800910c:	61b8      	str	r0, [r7, #24]
 800910e:	61b2      	str	r2, [r6, #24]
}
 8009110:	e7e3      	b.n	80090da <ICS_SwitchOnPWM+0x3e>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009112:	f8ce 4018 	str.w	r4, [lr, #24]
 8009116:	61b8      	str	r0, [r7, #24]
 8009118:	61b2      	str	r2, [r6, #24]
}
 800911a:	e7de      	b.n	80090da <ICS_SwitchOnPWM+0x3e>

0800911c <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800911c:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800911e:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009120:	68d1      	ldr	r1, [r2, #12]
 8009122:	f021 0101 	bic.w	r1, r1, #1
 8009126:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009128:	6c51      	ldr	r1, [r2, #68]	@ 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 800912a:	f04f 0c00 	mov.w	ip, #0
 800912e:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8009132:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
 8009136:	6451      	str	r1, [r2, #68]	@ 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8009138:	7c19      	ldrb	r1, [r3, #16]
 800913a:	2902      	cmp	r1, #2
 800913c:	d009      	beq.n	8009152 <ICS_SwitchOffPWM+0x36>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800913e:	f06f 0301 	mvn.w	r3, #1
 8009142:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009144:	6913      	ldr	r3, [r2, #16]
 8009146:	07db      	lsls	r3, r3, #31
 8009148:	d5fc      	bpl.n	8009144 <ICS_SwitchOffPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800914a:	f06f 0301 	mvn.w	r3, #1
 800914e:	6113      	str	r3, [r2, #16]
 8009150:	4770      	bx	lr
{
 8009152:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8009154:	699c      	ldr	r4, [r3, #24]
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8009156:	695d      	ldr	r5, [r3, #20]
 8009158:	6a18      	ldr	r0, [r3, #32]
 800915a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800915c:	0424      	lsls	r4, r4, #16
 800915e:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8009160:	69dd      	ldr	r5, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8009162:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009164:	0400      	lsls	r0, r0, #16
 8009166:	0409      	lsls	r1, r1, #16
 8009168:	f06f 0301 	mvn.w	r3, #1
 800916c:	61a8      	str	r0, [r5, #24]
 800916e:	61a1      	str	r1, [r4, #24]
 8009170:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009172:	6913      	ldr	r3, [r2, #16]
 8009174:	07d9      	lsls	r1, r3, #31
 8009176:	d5fc      	bpl.n	8009172 <ICS_SwitchOffPWM+0x56>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009178:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 800917c:	bc30      	pop	{r4, r5}
 800917e:	6113      	str	r3, [r2, #16]
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop

08009184 <ICS_CurrentReadingCalibration>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009184:	6f02      	ldr	r2, [r0, #112]	@ 0x70
{
 8009186:	b538      	push	{r3, r4, r5, lr}
  pHandle->PhaseAOffset = 0u;
 8009188:	2300      	movs	r3, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800918a:	68d4      	ldr	r4, [r2, #12]
  pHandle->PolarizationCounter = 0u;
 800918c:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
  pHandle->PhaseAOffset = 0u;
 8009190:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 8009194:	6a23      	ldr	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 8009196:	4a21      	ldr	r2, [pc, #132]	@ (800921c <ICS_CurrentReadingCalibration+0x98>)
 8009198:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
{
 800919c:	4605      	mov	r5, r0
 800919e:	f023 0305 	bic.w	r3, r3, #5
 80091a2:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 80091a4:	6042      	str	r2, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 80091a6:	f7ff ff79 	bl	800909c <ICS_SwitchOnPWM>
  						  pHandle->pParams_str->RepetitionCounter,
 80091aa:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
  waitForPolarizationEnd( TIMx,
 80091ac:	f105 0366 	add.w	r3, r5, #102	@ 0x66
 80091b0:	7a12      	ldrb	r2, [r2, #8]
 80091b2:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 fa06 	bl	80095c8 <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 80091bc:	4628      	mov	r0, r5
 80091be:	f7ff ffad 	bl	800911c <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80091c2:	e9d5 2317 	ldrd	r2, r3, [r5, #92]	@ 0x5c
  pHandle->PhaseAOffset >>= 3;
 80091c6:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseBOffset >>= 3;
 80091c8:	08db      	lsrs	r3, r3, #3
 80091ca:	e9c5 2317 	strd	r2, r3, [r5, #92]	@ 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80091ce:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 80091d0:	f8b5 3064 	ldrh.w	r3, [r5, #100]	@ 0x64
 80091d4:	f022 0208 	bic.w	r2, r2, #8
 80091d8:	61a2      	str	r2, [r4, #24]
 80091da:	69a2      	ldr	r2, [r4, #24]
 80091dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091e0:	61a2      	str	r2, [r4, #24]
 80091e2:	69e2      	ldr	r2, [r4, #28]
 80091e4:	f022 0208 	bic.w	r2, r2, #8
 80091e8:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80091ea:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80091ec:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80091ee:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80091f0:	69a3      	ldr	r3, [r4, #24]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 80091f2:	4a0b      	ldr	r2, [pc, #44]	@ (8009220 <ICS_CurrentReadingCalibration+0x9c>)
 80091f4:	f043 0308 	orr.w	r3, r3, #8
 80091f8:	61a3      	str	r3, [r4, #24]
 80091fa:	69a3      	ldr	r3, [r4, #24]
 80091fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009200:	61a3      	str	r3, [r4, #24]
 8009202:	69e3      	ldr	r3, [r4, #28]
 8009204:	f043 0308 	orr.w	r3, r3, #8
 8009208:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 800920a:	6a23      	ldr	r3, [r4, #32]
 800920c:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8009210:	f043 0305 	orr.w	r3, r3, #5
 8009214:	6223      	str	r3, [r4, #32]
 8009216:	606a      	str	r2, [r5, #4]
}
 8009218:	bd38      	pop	{r3, r4, r5, pc}
 800921a:	bf00      	nop
 800921c:	08008f31 	.word	0x08008f31
 8009220:	08008ea1 	.word	0x08008ea1

08009224 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009224:	6f03      	ldr	r3, [r0, #112]	@ 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8009226:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009228:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 800922a:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
{
 800922c:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 800922e:	8e44      	ldrh	r4, [r0, #50]	@ 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009230:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009232:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009234:	63da      	str	r2, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8009236:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8009238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800923c:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop

08009244 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8009244:	4922      	ldr	r1, [pc, #136]	@ (80092d0 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8009246:	680b      	ldr	r3, [r1, #0]
{
 8009248:	b470      	push	{r4, r5, r6}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 800924a:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800924e:	6f04      	ldr	r4, [r0, #112]	@ 0x70

  if ( adcinjflags == CONV_STARTED )
 8009250:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8009252:	68e2      	ldr	r2, [r4, #12]
  if ( adcinjflags == CONV_STARTED )
 8009254:	d026      	beq.n	80092a4 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 8009256:	b94b      	cbnz	r3, 800926c <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 8009258:	8861      	ldrh	r1, [r4, #2]
 800925a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800925c:	428b      	cmp	r3, r1
 800925e:	d3fc      	bcc.n	800925a <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8009260:	491b      	ldr	r1, [pc, #108]	@ (80092d0 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8009262:	680b      	ldr	r3, [r1, #0]
 8009264:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 8009268:	2b08      	cmp	r3, #8
 800926a:	d026      	beq.n	80092ba <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 800926c:	4e18      	ldr	r6, [pc, #96]	@ (80092d0 <ICS_TIMx_UP_IRQHandler+0x8c>)
 800926e:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8009270:	68b3      	ldr	r3, [r6, #8]
 8009272:	4d18      	ldr	r5, [pc, #96]	@ (80092d4 <ICS_TIMx_UP_IRQHandler+0x90>)
 8009274:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
 8009278:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800927c:	430b      	orrs	r3, r1
 800927e:	60b3      	str	r3, [r6, #8]
 8009280:	68ab      	ldr	r3, [r5, #8]
 8009282:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8009286:	430b      	orrs	r3, r1
 8009288:	60ab      	str	r3, [r5, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 800928a:	79a3      	ldrb	r3, [r4, #6]
 800928c:	03db      	lsls	r3, r3, #15
 800928e:	63b3      	str	r3, [r6, #56]	@ 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 8009290:	79e3      	ldrb	r3, [r4, #7]
 8009292:	03db      	lsls	r3, r3, #15
 8009294:	63ab      	str	r3, [r5, #56]	@ 0x38
  SET_BIT(TIMx->CCER, Channels);
 8009296:	6a13      	ldr	r3, [r2, #32]
 8009298:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 800929c:	3046      	adds	r0, #70	@ 0x46
 800929e:	bc70      	pop	{r4, r5, r6}
 80092a0:	6213      	str	r3, [r2, #32]
 80092a2:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80092a4:	680b      	ldr	r3, [r1, #0]
 80092a6:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80092aa:	2b0c      	cmp	r3, #12
 80092ac:	d0de      	beq.n	800926c <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80092ae:	680b      	ldr	r3, [r1, #0]
 80092b0:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80092b4:	2b0c      	cmp	r3, #12
 80092b6:	d1f5      	bne.n	80092a4 <ICS_TIMx_UP_IRQHandler+0x60>
 80092b8:	e7d8      	b.n	800926c <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80092ba:	680b      	ldr	r3, [r1, #0]
 80092bc:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80092c0:	2b0c      	cmp	r3, #12
 80092c2:	d0d3      	beq.n	800926c <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80092c4:	680b      	ldr	r3, [r1, #0]
 80092c6:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 80092ca:	2b0c      	cmp	r3, #12
 80092cc:	d1f5      	bne.n	80092ba <ICS_TIMx_UP_IRQHandler+0x76>
 80092ce:	e7cd      	b.n	800926c <ICS_TIMx_UP_IRQHandler+0x28>
 80092d0:	40012000 	.word	0x40012000
 80092d4:	40012100 	.word	0x40012100

080092d8 <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80092d8:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80092da:	7c1a      	ldrb	r2, [r3, #16]
 80092dc:	2a02      	cmp	r2, #2
 80092de:	d004      	beq.n	80092ea <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 80092e0:	2301      	movs	r3, #1
 80092e2:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c

  return &( pHandle->_Super.Motor );
}
 80092e6:	3046      	adds	r0, #70	@ 0x46
 80092e8:	4770      	bx	lr
{
 80092ea:	b430      	push	{r4, r5}
 80092ec:	699c      	ldr	r4, [r3, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80092ee:	695d      	ldr	r5, [r3, #20]
 80092f0:	6a19      	ldr	r1, [r3, #32]
 80092f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092f4:	0424      	lsls	r4, r4, #16
 80092f6:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80092f8:	69dd      	ldr	r5, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80092fa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80092fc:	0409      	lsls	r1, r1, #16
 80092fe:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8009300:	2301      	movs	r3, #1
 8009302:	61a9      	str	r1, [r5, #24]
}
 8009304:	3046      	adds	r0, #70	@ 0x46
 8009306:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 8009308:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
}
 800930c:	bc30      	pop	{r4, r5}
 800930e:	4770      	bx	lr

08009310 <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8009310:	f890 306c 	ldrb.w	r3, [r0, #108]	@ 0x6c
 8009314:	b90b      	cbnz	r3, 800931a <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 8009316:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 8009318:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 800931a:	2300      	movs	r3, #0
 800931c:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
    retval = MC_BREAK_IN;
 8009320:	2040      	movs	r0, #64	@ 0x40
 8009322:	4770      	bx	lr

08009324 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8009324:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8009326:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800932a:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 800932c:	2100      	movs	r1, #0
 800932e:	f001 f88f 	bl	800a450 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8009332:	2300      	movs	r3, #0
 8009334:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8009338:	bd10      	pop	{r4, pc}
 800933a:	bf00      	nop

0800933c <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4604      	mov	r4, r0
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8009340:	f8b0 0100 	ldrh.w	r0, [r0, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8009344:	1c42      	adds	r2, r0, #1
 8009346:	b292      	uxth	r2, r2
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8009348:	2a80      	cmp	r2, #128	@ 0x80
 800934a:	bf28      	it	cs
 800934c:	2200      	movcs	r2, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800934e:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
{
 8009352:	460d      	mov	r5, r1
 8009354:	f8a4 2100 	strh.w	r2, [r4, #256]	@ 0x100
 8009358:	1ea3      	subs	r3, r4, #2
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 800935a:	f8a4 0102 	strh.w	r0, [r4, #258]	@ 0x102
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800935e:	f104 0efe 	add.w	lr, r4, #254	@ 0xfe
  int32_t wAux = 0;
 8009362:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8009364:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8009368:	459e      	cmp	lr, r3
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800936a:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800936c:	d1fa      	bne.n	8009364 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800936e:	2a00      	cmp	r2, #0
 8009370:	bfb8      	it	lt
 8009372:	327f      	addlt	r2, #127	@ 0x7f
 8009374:	11d0      	asrs	r0, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8009376:	f8a4 0104 	strh.w	r0, [r4, #260]	@ 0x104
  /*User Interface with motor_param*/
  setMOTORPower(wAux);
 800937a:	f7f7 fe6f 	bl	800105c <setMOTORPower>
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 800937e:	4628      	mov	r0, r5
 8009380:	bd38      	pop	{r3, r4, r5, pc}
 8009382:	bf00      	nop

08009384 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8009384:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	@ 0x104
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop

0800938c <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 800938c:	8a03      	ldrh	r3, [r0, #16]
 800938e:	8b42      	ldrh	r2, [r0, #26]
 8009390:	429a      	cmp	r2, r3
 8009392:	d306      	bcc.n	80093a2 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8009394:	8b82      	ldrh	r2, [r0, #28]
 8009396:	429a      	cmp	r2, r3
 8009398:	d901      	bls.n	800939e <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 800939a:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 800939c:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 800939e:	8ac0      	ldrh	r0, [r0, #22]
 80093a0:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 80093a2:	2008      	movs	r0, #8
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop

080093a8 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80093a8:	2300      	movs	r3, #0
 80093aa:	8203      	strh	r3, [r0, #16]
}
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop

080093b0 <NTC_Init>:
{
 80093b0:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 80093b2:	7803      	ldrb	r3, [r0, #0]
{
 80093b4:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80093b6:	b123      	cbz	r3, 80093c2 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80093b8:	8a43      	ldrh	r3, [r0, #18]
 80093ba:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 80093bc:	2200      	movs	r2, #0
 80093be:	82c2      	strh	r2, [r0, #22]
}
 80093c0:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80093c2:	3004      	adds	r0, #4
 80093c4:	f7f9 ff2a 	bl	800321c <RCM_RegisterRegConv>
 80093c8:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
    NTC_Clear( pHandle );
 80093cc:	4620      	mov	r0, r4
 80093ce:	f7ff ffeb 	bl	80093a8 <NTC_Clear>
}
 80093d2:	bd10      	pop	{r4, pc}

080093d4 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 80093d4:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80093d6:	7803      	ldrb	r3, [r0, #0]
{
 80093d8:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80093da:	b113      	cbz	r3, 80093e2 <NTC_CalcAvTemp+0xe>
 80093dc:	2000      	movs	r0, #0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 80093de:	82e0      	strh	r0, [r4, #22]
  {
    pHandle->hFaultState = MC_NO_ERROR;
  }

  return ( pHandle->hFaultState );
}
 80093e0:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80093e2:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80093e6:	f7f9 fff3 	bl	80033d0 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80093ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093ee:	4298      	cmp	r0, r3
 80093f0:	d007      	beq.n	8009402 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80093f2:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80093f4:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80093f6:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 80093f8:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 80093fc:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8009400:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8009402:	4620      	mov	r0, r4
 8009404:	f7ff ffc2 	bl	800938c <NTC_SetFaultState>
 8009408:	82e0      	strh	r0, [r4, #22]
}
 800940a:	bd10      	pop	{r4, pc}

0800940c <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800940c:	7803      	ldrb	r3, [r0, #0]
 800940e:	b983      	cbnz	r3, 8009432 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8009410:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8009412:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8009414:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8009418:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 800941a:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 800941c:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8009420:	2b00      	cmp	r3, #0
 8009422:	bfbc      	itt	lt
 8009424:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8009428:	33ff      	addlt	r3, #255	@ 0xff
 800942a:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 800942e:	b200      	sxth	r0, r0
 8009430:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8009432:	8a80      	ldrh	r0, [r0, #20]
}
 8009434:	b200      	sxth	r0, r0
 8009436:	4770      	bx	lr

08009438 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8009438:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800943a:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800943c:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800943e:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8009440:	8442      	strh	r2, [r0, #34]	@ 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8009442:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8009444:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8009446:	4770      	bx	lr

08009448 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8009448:	8081      	strh	r1, [r0, #4]
}
 800944a:	4770      	bx	lr

0800944c <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 800944c:	80c1      	strh	r1, [r0, #6]
}
 800944e:	4770      	bx	lr

08009450 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8009450:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop

08009458 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8009458:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop

08009460 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8009460:	6081      	str	r1, [r0, #8]

  return;
}
 8009462:	4770      	bx	lr

08009464 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8009464:	8b00      	ldrh	r0, [r0, #24]
 8009466:	4770      	bx	lr

08009468 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8009468:	8b40      	ldrh	r0, [r0, #26]
 800946a:	4770      	bx	lr

0800946c <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 800946c:	8441      	strh	r1, [r0, #34]	@ 0x22
}
 800946e:	4770      	bx	lr

08009470 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8009470:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop

08009478 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009478:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 800947c:	4603      	mov	r3, r0
 800947e:	b530      	push	{r4, r5, lr}

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8009480:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8009484:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8009488:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800948c:	fb01 f202 	mul.w	r2, r1, r2
  if ( pHandle->hKiGain == 0 )
 8009490:	b17c      	cbz	r4, 80094b2 <PI_Controller+0x3a>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8009492:	fb04 f101 	mul.w	r1, r4, r1
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8009496:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
    if ( wIntegral_sum_temp < 0 )
 800949a:	eb15 0e01 	adds.w	lr, r5, r1
 800949e:	d41d      	bmi.n	80094dc <PI_Controller+0x64>
          wIntegral_sum_temp = -INT32_MAX;
 80094a0:	420d      	tst	r5, r1
 80094a2:	4914      	ldr	r1, [pc, #80]	@ (80094f4 <PI_Controller+0x7c>)
 80094a4:	bf48      	it	mi
 80094a6:	468e      	movmi	lr, r1
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80094a8:	45a6      	cmp	lr, r4
 80094aa:	dc02      	bgt.n	80094b2 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80094ac:	691c      	ldr	r4, [r3, #16]
 80094ae:	4574      	cmp	r4, lr
 80094b0:	dd1d      	ble.n	80094ee <PI_Controller+0x76>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80094b2:	8b99      	ldrh	r1, [r3, #28]
 80094b4:	410a      	asrs	r2, r1
 80094b6:	8bd9      	ldrh	r1, [r3, #30]
 80094b8:	fa44 f101 	asr.w	r1, r4, r1
 80094bc:	440a      	add	r2, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80094be:	4290      	cmp	r0, r2
 80094c0:	da03      	bge.n	80094ca <PI_Controller+0x52>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 80094c2:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 80094c4:	4414      	add	r4, r2
 80094c6:	609c      	str	r4, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 80094c8:	bd30      	pop	{r4, r5, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 80094ca:	4594      	cmp	ip, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
 80094cc:	bfc5      	ittet	gt
 80094ce:	ebac 0202 	subgt.w	r2, ip, r2
  pHandle->wIntegralTerm += wDischarge;
 80094d2:	18a4      	addgt	r4, r4, r2
  return ( ( int16_t )( wOutput_32 ) );
 80094d4:	b210      	sxthle	r0, r2
    wOutput_32 = hLowerOutputLimit;
 80094d6:	4660      	movgt	r0, ip
  pHandle->wIntegralTerm += wDischarge;
 80094d8:	609c      	str	r4, [r3, #8]
}
 80094da:	bd30      	pop	{r4, r5, pc}
      if ( pHandle->wIntegralTerm > 0 )
 80094dc:	2d00      	cmp	r5, #0
 80094de:	dde3      	ble.n	80094a8 <PI_Controller+0x30>
        if ( wIntegral_Term > 0 )
 80094e0:	2900      	cmp	r1, #0
 80094e2:	dde1      	ble.n	80094a8 <PI_Controller+0x30>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80094e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80094e8:	428c      	cmp	r4, r1
 80094ea:	d1e2      	bne.n	80094b2 <PI_Controller+0x3a>
 80094ec:	46a6      	mov	lr, r4
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 80094ee:	4674      	mov	r4, lr
 80094f0:	e7df      	b.n	80094b2 <PI_Controller+0x3a>
 80094f2:	bf00      	nop
 80094f4:	80000001 	.word	0x80000001

080094f8 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 80094f8:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
{
 80094fc:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80094fe:	89d1      	ldrh	r1, [r2, #14]
 8009500:	8b14      	ldrh	r4, [r2, #24]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8009502:	8993      	ldrh	r3, [r2, #12]
{
 8009504:	4605      	mov	r5, r0
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8009506:	8ad0      	ldrh	r0, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8009508:	f8d5 6108 	ldr.w	r6, [r5, #264]	@ 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800950c:	fb11 f204 	smulbb	r2, r1, r4
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8009510:	fb13 2400 	smlabb	r4, r3, r0, r2
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8009514:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
 8009518:	f7ff f856 	bl	80085c8 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 800951c:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800951e:	490f      	ldr	r1, [pc, #60]	@ (800955c <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8009520:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8009524:	bfb8      	it	lt
 8009526:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800952a:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 800952e:	bfb8      	it	lt
 8009530:	33ff      	addlt	r3, #255	@ 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8009532:	fb81 1000 	smull	r1, r0, r1, r0
 8009536:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
  wAux /= 65536;
 800953a:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 800953c:	fb02 f303 	mul.w	r3, r2, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8009540:	4907      	ldr	r1, [pc, #28]	@ (8009560 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8009542:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009546:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8009548:	fb81 2103 	smull	r2, r1, r1, r3
 800954c:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800954e:	4628      	mov	r0, r5
 8009550:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8009554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8009558:	f7ff bef0 	b.w	800933c <MPM_CalcElMotorPower>
 800955c:	1b4e81b5 	.word	0x1b4e81b5
 8009560:	66666667 	.word	0x66666667

08009564 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8009564:	4b17      	ldr	r3, [pc, #92]	@ (80095c4 <startTimers+0x60>)
 8009566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8009568:	07d2      	lsls	r2, r2, #31
 800956a:	d415      	bmi.n	8009598 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 800956c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800956e:	f042 0201 	orr.w	r2, r2, #1
 8009572:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8009574:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8009576:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009578:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800957c:	f002 0201 	and.w	r2, r2, #1
 8009580:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8009582:	9a01      	ldr	r2, [sp, #4]
 8009584:	694a      	ldr	r2, [r1, #20]
 8009586:	f042 0201 	orr.w	r2, r2, #1
 800958a:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800958c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800958e:	f022 0201 	bic.w	r2, r2, #1
 8009592:	641a      	str	r2, [r3, #64]	@ 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8009594:	b002      	add	sp, #8
 8009596:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8009598:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800959c:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800959e:	6859      	ldr	r1, [r3, #4]
 80095a0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80095a4:	f041 0120 	orr.w	r1, r1, #32
 80095a8:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80095aa:	6959      	ldr	r1, [r3, #20]
 80095ac:	f041 0101 	orr.w	r1, r1, #1
 80095b0:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80095b2:	6859      	ldr	r1, [r3, #4]
 80095b4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80095b8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80095bc:	430a      	orrs	r2, r1
 80095be:	605a      	str	r2, [r3, #4]
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	40023800 	.word	0x40023800

080095c8 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 80095c8:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 80095ca:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 80095cc:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 80095d0:	f102 0201 	add.w	r2, r2, #1
 80095d4:	d11b      	bne.n	800960e <waitForPolarizationEnd+0x46>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80095d6:	6804      	ldr	r4, [r0, #0]
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 80095d8:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80095da:	f06f 0602 	mvn.w	r6, #2
 80095de:	0155      	lsls	r5, r2, #5
 80095e0:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 80095e2:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 80095e4:	f893 c000 	ldrb.w	ip, [r3]
 80095e8:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 80095ec:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 80095f0:	d80c      	bhi.n	800960c <waitForPolarizationEnd+0x44>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80095f2:	6904      	ldr	r4, [r0, #16]
 80095f4:	07a4      	lsls	r4, r4, #30
 80095f6:	d5f5      	bpl.n	80095e4 <waitForPolarizationEnd+0x1c>
      hCalibrationPeriodCounter++;
 80095f8:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80095fc:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80095fe:	6106      	str	r6, [r0, #16]
 8009600:	d8f0      	bhi.n	80095e4 <waitForPolarizationEnd+0x1c>
      {
        if (*cnt < NB_CONVERSIONS)
 8009602:	781c      	ldrb	r4, [r3, #0]
 8009604:	2c0f      	cmp	r4, #15
 8009606:	d8ed      	bhi.n	80095e4 <waitForPolarizationEnd+0x1c>
        {
          *SWerror = 1u;
 8009608:	2301      	movs	r3, #1
 800960a:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 800960c:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800960e:	2c60      	cmp	r4, #96	@ 0x60
 8009610:	d0e3      	beq.n	80095da <waitForPolarizationEnd+0x12>
 8009612:	e7e1      	b.n	80095d8 <waitForPolarizationEnd+0x10>

08009614 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8009614:	6843      	ldr	r3, [r0, #4]
 8009616:	4718      	bx	r3

08009618 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8009618:	b530      	push	{r4, r5, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800961a:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800961e:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8009620:	ea4f 4c21 	mov.w	ip, r1, asr #16
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8009624:	b20b      	sxth	r3, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8009626:	fb04 fc0c 	mul.w	ip, r4, ip
 800962a:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800962e:	fb02 f303 	mul.w	r3, r2, r3

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8009632:	eb03 024c 	add.w	r2, r3, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8009636:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800963a:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 800963e:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8009642:	1c55      	adds	r5, r2, #1
{
 8009644:	b083      	sub	sp, #12
  {
    if ( wZ < 0 )
    {
      pHandle->Sector = SECTOR_5;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8009646:	ea4f 0494 	mov.w	r4, r4, lsr #2
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800964a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800964e:	ea4f 0161 	mov.w	r1, r1, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8009652:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  if ( wY < 0 )
 8009656:	db7a      	blt.n	800974e <PWMC_SetPhaseVoltage+0x136>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8009658:	1c5d      	adds	r5, r3, #1
 800965a:	db57      	blt.n	800970c <PWMC_SetPhaseVoltage+0xf4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800965c:	ebb1 010e 	subs.w	r1, r1, lr
 8009660:	bf44      	itt	mi
 8009662:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8009666:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800966a:	2b00      	cmp	r3, #0
 800966c:	bfbc      	itt	lt
 800966e:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8009672:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8009676:	2a00      	cmp	r2, #0
 8009678:	bfb8      	it	lt
 800967a:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800967e:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8009682:	bfb8      	it	lt
 8009684:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8009688:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800968c:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhB;
 8009690:	fa1f fe83 	uxth.w	lr, r3
      pHandle->midDuty = wTimePhA;
 8009694:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhC;
 8009698:	b294      	uxth	r4, r2
 800969a:	2501      	movs	r5, #1
        pHandle->highDuty = wTimePhA;
 800969c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 80096a0:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
        pHandle->Sector = SECTOR_4;
 80096a4:	f880 503a 	strb.w	r5, [r0, #58]	@ 0x3a
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 80096a8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 80096ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 80096b0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80096b4:	b289      	uxth	r1, r1
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	b292      	uxth	r2, r2
  if ( pHandle->DTTest == 1u )
 80096ba:	2c01      	cmp	r4, #1
        pHandle->lowDuty = wTimePhC;
 80096bc:	f8a0 e03c 	strh.w	lr, [r0, #60]	@ 0x3c
        pHandle->midDuty = wTimePhB;
 80096c0:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 80096c4:	8641      	strh	r1, [r0, #50]	@ 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 80096c6:	8683      	strh	r3, [r0, #52]	@ 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 80096c8:	86c2      	strh	r2, [r0, #54]	@ 0x36
  if ( pHandle->DTTest == 1u )
 80096ca:	d11a      	bne.n	8009702 <PWMC_SetPhaseVoltage+0xea>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 80096cc:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	@ 0x48
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 80096d0:	f8b0 4054 	ldrh.w	r4, [r0, #84]	@ 0x54
    if ( pHandle->Ia > 0 )
 80096d4:	2d00      	cmp	r5, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 80096d6:	bfcc      	ite	gt
 80096d8:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 80096da:	1b09      	suble	r1, r1, r4
 80096dc:	b289      	uxth	r1, r1
 80096de:	8641      	strh	r1, [r0, #50]	@ 0x32
    }

    if ( pHandle->Ib > 0 )
 80096e0:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	@ 0x4a
 80096e4:	2900      	cmp	r1, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 80096e6:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	@ 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 80096ea:	bfcc      	ite	gt
 80096ec:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80096ee:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 80096f0:	2900      	cmp	r1, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80096f2:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 80096f4:	bfcc      	ite	gt
 80096f6:	18a4      	addgt	r4, r4, r2
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80096f8:	1b12      	suble	r2, r2, r4
 80096fa:	8683      	strh	r3, [r0, #52]	@ 0x34
      pHandle->CntPhC += pHandle->DTCompCnt;
 80096fc:	bfcc      	ite	gt
 80096fe:	86c4      	strhgt	r4, [r0, #54]	@ 0x36
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8009700:	86c2      	strhle	r2, [r0, #54]	@ 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8009702:	6983      	ldr	r3, [r0, #24]
}
 8009704:	b003      	add	sp, #12
 8009706:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800970a:	4718      	bx	r3
      if ( wX <= 0 )
 800970c:	f1bc 0f00 	cmp.w	ip, #0
 8009710:	dd3d      	ble.n	800978e <PWMC_SetPhaseVoltage+0x176>
        wTimePhB = wTimePhA + wZ / 131072;
 8009712:	2b00      	cmp	r3, #0
 8009714:	bfb8      	it	lt
 8009716:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800971a:	ebac 0e0e 	sub.w	lr, ip, lr
        wTimePhB = wTimePhA + wZ / 131072;
 800971e:	bfb8      	it	lt
 8009720:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8009724:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8009728:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 800972c:	bfb8      	it	lt
 800972e:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8009732:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8009736:	bfb8      	it	lt
 8009738:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 800973c:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhA;
 8009740:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhB;
 8009744:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhC;
 8009748:	b294      	uxth	r4, r2
 800974a:	2500      	movs	r5, #0
 800974c:	e7a6      	b.n	800969c <PWMC_SetPhaseVoltage+0x84>
    if ( wZ < 0 )
 800974e:	1c5d      	adds	r5, r3, #1
 8009750:	db5d      	blt.n	800980e <PWMC_SetPhaseVoltage+0x1f6>
      if ( wX <= 0 )
 8009752:	f1bc 0f00 	cmp.w	ip, #0
 8009756:	dd38      	ble.n	80097ca <PWMC_SetPhaseVoltage+0x1b2>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8009758:	ebb1 010c 	subs.w	r1, r1, ip
 800975c:	bf44      	itt	mi
 800975e:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8009762:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8009766:	2a00      	cmp	r2, #0
 8009768:	bfb8      	it	lt
 800976a:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800976e:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8009772:	bfb8      	it	lt
 8009774:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
 8009778:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 800977c:	eb02 436c 	add.w	r3, r2, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8009780:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = wTimePhC;
 8009784:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhA;
 8009788:	b28c      	uxth	r4, r1
 800978a:	2502      	movs	r5, #2
 800978c:	e786      	b.n	800969c <PWMC_SetPhaseVoltage+0x84>
        wTimePhC = wTimePhA - wY / 131072;
 800978e:	2a00      	cmp	r2, #0
 8009790:	bfb8      	it	lt
 8009792:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8009796:	eba1 010c 	sub.w	r1, r1, ip
        wTimePhC = wTimePhA - wY / 131072;
 800979a:	bfb8      	it	lt
 800979c:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhC + wX / 131072;
 80097a0:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80097a4:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80097a8:	bfb8      	it	lt
 80097aa:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 80097ae:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80097b2:	bfb8      	it	lt
 80097b4:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 80097b8:	eb02 4363 	add.w	r3, r2, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 80097bc:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhC;
 80097c0:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhB;
 80097c4:	b29c      	uxth	r4, r3
 80097c6:	2505      	movs	r5, #5
 80097c8:	e768      	b.n	800969c <PWMC_SetPhaseVoltage+0x84>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80097ca:	ebbc 0e0e 	subs.w	lr, ip, lr
 80097ce:	bf44      	itt	mi
 80097d0:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 80097d4:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80097d8:	2b00      	cmp	r3, #0
 80097da:	bfbc      	itt	lt
 80097dc:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80097e0:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 80097e4:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80097e8:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80097ec:	bfb8      	it	lt
 80097ee:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80097f2:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80097f6:	bfb8      	it	lt
 80097f8:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 80097fc:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhC;
 8009800:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = wTimePhB;
 8009804:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhA;
 8009808:	b28c      	uxth	r4, r1
 800980a:	2503      	movs	r5, #3
 800980c:	e746      	b.n	800969c <PWMC_SetPhaseVoltage+0x84>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800980e:	ebb1 010e 	subs.w	r1, r1, lr
 8009812:	bf44      	itt	mi
 8009814:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8009818:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800981c:	2b00      	cmp	r3, #0
 800981e:	bfbc      	itt	lt
 8009820:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8009824:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8009828:	2a00      	cmp	r2, #0
 800982a:	bfb8      	it	lt
 800982c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8009830:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8009834:	bfb8      	it	lt
 8009836:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800983a:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800983e:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhC;
 8009842:	fa1f fe82 	uxth.w	lr, r2
      pHandle->midDuty = wTimePhA;
 8009846:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhB;
 800984a:	b29c      	uxth	r4, r3
 800984c:	2504      	movs	r5, #4
 800984e:	e725      	b.n	800969c <PWMC_SetPhaseVoltage+0x84>

08009850 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8009850:	6883      	ldr	r3, [r0, #8]
 8009852:	4718      	bx	r3

08009854 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8009854:	b510      	push	{r4, lr}
 8009856:	4604      	mov	r4, r0
  bool retVal = false;
  if ( action == CRC_START )
 8009858:	b179      	cbz	r1, 800987a <PWMC_CurrentReadingCalibr+0x26>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 800985a:	2901      	cmp	r1, #1
 800985c:	d001      	beq.n	8009862 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 800985e:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8009860:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8009862:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8009866:	b19b      	cbz	r3, 8009890 <PWMC_CurrentReadingCalibr+0x3c>
      pHandle->OffCalibrWaitTimeCounter--;
 8009868:	3b01      	subs	r3, #1
 800986a:	b29b      	uxth	r3, r3
 800986c:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1f4      	bne.n	800985e <PWMC_CurrentReadingCalibr+0xa>
        pHandle->pFctCurrReadingCalib( pHandle );
 8009874:	6903      	ldr	r3, [r0, #16]
 8009876:	4798      	blx	r3
        retVal = true;
 8009878:	e00a      	b.n	8009890 <PWMC_CurrentReadingCalibr+0x3c>
    PWMC_SwitchOffPWM( pHandle );
 800987a:	f7ff ffe9 	bl	8009850 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800987e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8009882:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e9      	bne.n	800985e <PWMC_CurrentReadingCalibr+0xa>
      pHandle->pFctCurrReadingCalib( pHandle );
 800988a:	6923      	ldr	r3, [r4, #16]
 800988c:	4620      	mov	r0, r4
 800988e:	4798      	blx	r3
      retVal = true;
 8009890:	2001      	movs	r0, #1
}
 8009892:	bd10      	pop	{r4, pc}

08009894 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8009894:	69c3      	ldr	r3, [r0, #28]
 8009896:	4718      	bx	r3

08009898 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8009898:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 800989c:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800989e:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80098a0:	4494      	add	ip, r2
 80098a2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 80098a6:	b430      	push	{r4, r5}
 80098a8:	2500      	movs	r5, #0
 80098aa:	f36c 050f 	bfi	r5, ip, #0, #16
 80098ae:	f36c 451f 	bfi	r5, ip, #16, #16
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80098b2:	b14b      	cbz	r3, 80098c8 <RVBS_Clear+0x30>
  {
    pHandle->aBuffer[index] = aux;
 80098b4:	6a04      	ldr	r4, [r0, #32]
 80098b6:	2300      	movs	r3, #0
 80098b8:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80098ba:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 80098bc:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80098c0:	8b01      	ldrh	r1, [r0, #24]
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	4291      	cmp	r1, r2
 80098c6:	d8f7      	bhi.n	80098b8 <RVBS_Clear+0x20>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 80098c8:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 80098ca:	6045      	str	r5, [r0, #4]
  pHandle->index = 0;
 80098cc:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
}
 80098d0:	bc30      	pop	{r4, r5}
 80098d2:	4770      	bx	lr

080098d4 <RVBS_Init>:
{
 80098d4:	b510      	push	{r4, lr}
 80098d6:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80098d8:	300c      	adds	r0, #12
 80098da:	f7f9 fc9f 	bl	800321c <RCM_RegisterRegConv>
 80098de:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
  RVBS_Clear( pHandle );
 80098e2:	4620      	mov	r0, r4
 80098e4:	f7ff ffd8 	bl	8009898 <RVBS_Clear>
}
 80098e8:	bd10      	pop	{r4, pc}
 80098ea:	bf00      	nop

080098ec <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 80098ec:	88c3      	ldrh	r3, [r0, #6]
 80098ee:	8b42      	ldrh	r2, [r0, #26]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d306      	bcc.n	8009902 <RVBS_CheckFaultState+0x16>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 80098f4:	8b80      	ldrh	r0, [r0, #28]
 80098f6:	4298      	cmp	r0, r3
 80098f8:	bf94      	ite	ls
 80098fa:	2000      	movls	r0, #0
 80098fc:	2001      	movhi	r0, #1
 80098fe:	0080      	lsls	r0, r0, #2
 8009900:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8009902:	2002      	movs	r0, #2
  else
  {
    fault = MC_NO_ERROR;
  }
  return fault;
}
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop

08009908 <RVBS_CalcAvVbus>:
{
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800990c:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8009910:	f7f9 fd5e 	bl	80033d0 <RCM_ExecRegularConv>
  rawVoltage = hAux;
 8009914:	4a15      	ldr	r2, [pc, #84]	@ (800996c <RVBS_CalcAvVbus+0x64>)
  if ( hAux != 0xFFFF )
 8009916:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800991a:	4298      	cmp	r0, r3
  rawVoltage = hAux;
 800991c:	8010      	strh	r0, [r2, #0]
  if ( hAux != 0xFFFF )
 800991e:	d01e      	beq.n	800995e <RVBS_CalcAvVbus+0x56>
    pHandle->aBuffer[pHandle->index] = hAux;
 8009920:	6a26      	ldr	r6, [r4, #32]
 8009922:	f894 c025 	ldrb.w	ip, [r4, #37]	@ 0x25
 8009926:	f826 001c 	strh.w	r0, [r6, ip, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800992a:	8b25      	ldrh	r5, [r4, #24]
 800992c:	b1e5      	cbz	r5, 8009968 <RVBS_CalcAvVbus+0x60>
 800992e:	2300      	movs	r3, #0
    wtemp = 0;
 8009930:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8009932:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8009936:	3301      	adds	r3, #1
 8009938:	b2db      	uxtb	r3, r3
 800993a:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 800993c:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800993e:	d3f8      	bcc.n	8009932 <RVBS_CalcAvVbus+0x2a>
    wtemp /= pHandle->LowPassFilterBW;
 8009940:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8009944:	1e6b      	subs	r3, r5, #1
 8009946:	459c      	cmp	ip, r3
      pHandle->index++;
 8009948:	bfb4      	ite	lt
 800994a:	f10c 0c01 	addlt.w	ip, ip, #1
      pHandle->index = 0;
 800994e:	2300      	movge	r3, #0
    pHandle->_Super.LatestConv = hAux;
 8009950:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8009952:	80e2      	strh	r2, [r4, #6]
      pHandle->index++;
 8009954:	bfb4      	ite	lt
 8009956:	f884 c025 	strblt.w	ip, [r4, #37]	@ 0x25
      pHandle->index = 0;
 800995a:	f884 3025 	strbge.w	r3, [r4, #37]	@ 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800995e:	4620      	mov	r0, r4
 8009960:	f7ff ffc4 	bl	80098ec <RVBS_CheckFaultState>
 8009964:	8120      	strh	r0, [r4, #8]
}
 8009966:	bd70      	pop	{r4, r5, r6, pc}
    wtemp /= pHandle->LowPassFilterBW;
 8009968:	deff      	udf	#255	@ 0xff
 800996a:	bf00      	nop
 800996c:	2000535e 	.word	0x2000535e

08009970 <REMNG_Init>:
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
  pHandle->TargetFinal = 0;
 8009970:	2300      	movs	r3, #0
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8009972:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8009974:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8009978:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 800997c:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800997e:	4770      	bx	lr

08009980 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8009980:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009984:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8009988:	8182      	strh	r2, [r0, #12]
}
 800998a:	4770      	bx	lr

0800998c <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800998c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009990:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8009994:	81c2      	strh	r2, [r0, #14]
}
 8009996:	4770      	bx	lr

08009998 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8009998:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800999c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80099a0:	8202      	strh	r2, [r0, #16]
}
 80099a2:	4770      	bx	lr

080099a4 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 80099a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80099a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80099ac:	8980      	ldrh	r0, [r0, #12]
 80099ae:	4770      	bx	lr

080099b0 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 80099b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80099b4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80099b8:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop

080099c0 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 80099c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80099c4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 80099c8:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop

080099d0 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 80099d0:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop

080099d8 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 80099d8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop

080099e0 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 80099e0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop

080099e8 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 80099e8:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop

080099f0 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 80099f0:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 80099f4:	4603      	mov	r3, r0
 80099f6:	b510      	push	{r4, lr}
  {
    hAux = -( *pMecSpeedUnit );
 80099f8:	fa1f f18c 	uxth.w	r1, ip
  if ( *pMecSpeedUnit < 0 )
 80099fc:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( *pMecSpeedUnit );
 8009a00:	bfb8      	it	lt
 8009a02:	4249      	neglt	r1, r1
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8009a04:	f8b3 e016 	ldrh.w	lr, [r3, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8009a08:	78c0      	ldrb	r0, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8009a0a:	781a      	ldrb	r2, [r3, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8009a0c:	8a9c      	ldrh	r4, [r3, #20]
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8009a0e:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
    hAux = -( *pMecSpeedUnit );
 8009a12:	bfb8      	it	lt
 8009a14:	b289      	uxthlt	r1, r1
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8009a16:	458e      	cmp	lr, r1
 8009a18:	d816      	bhi.n	8009a48 <SPD_IsMecSpeedReliable+0x58>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 8009a1a:	fa1f fe8c 	uxth.w	lr, ip
  if ( pHandle->hMecAccelUnitP < 0 )
 8009a1e:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8009a22:	bfb8      	it	lt
 8009a24:	f1ce 0e00 	rsblt	lr, lr, #0
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8009a28:	f8b3 c018 	ldrh.w	ip, [r3, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 8009a2c:	bfb8      	it	lt
 8009a2e:	fa1f fe8e 	uxthlt.w	lr, lr
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8009a32:	45f4      	cmp	ip, lr
 8009a34:	d308      	bcc.n	8009a48 <SPD_IsMecSpeedReliable+0x58>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8009a36:	428c      	cmp	r4, r1
 8009a38:	d306      	bcc.n	8009a48 <SPD_IsMecSpeedReliable+0x58>
      bSpeedErrorNumber++;
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8009a3a:	4290      	cmp	r0, r2
 8009a3c:	d809      	bhi.n	8009a52 <SPD_IsMecSpeedReliable+0x62>
    {
      bSpeedErrorNumber = 0u;
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8009a3e:	1a10      	subs	r0, r2, r0
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009a40:	701a      	strb	r2, [r3, #0]
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8009a42:	bf18      	it	ne
 8009a44:	2001      	movne	r0, #1

  return ( SpeedSensorReliability );
}
 8009a46:	bd10      	pop	{r4, pc}
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8009a48:	4290      	cmp	r0, r2
 8009a4a:	d9f8      	bls.n	8009a3e <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber++;
 8009a4c:	3201      	adds	r2, #1
 8009a4e:	b2d2      	uxtb	r2, r2
 8009a50:	e7f5      	b.n	8009a3e <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber = 0u;
 8009a52:	2200      	movs	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009a54:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8009a56:	2001      	movs	r0, #1
}
 8009a58:	bd10      	pop	{r4, pc}
 8009a5a:	bf00      	nop

08009a5c <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8009a5c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8009a60:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
  wAux *= INT16_MAX;
 8009a64:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8009a68:	fb93 f0f2 	sdiv	r0, r3, r2
  return ( int16_t )wAux;
}
 8009a6c:	b200      	sxth	r0, r0
 8009a6e:	4770      	bx	lr

08009a70 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8009a70:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
  pHandle->PISpeed = pPI;
 8009a74:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8009a76:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
  pHandle->SPD = SPD_Handle;
 8009a7a:	6142      	str	r2, [r0, #20]
{
 8009a7c:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8009a7e:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8009a82:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8009a84:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8009a86:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8009a8a:	0409      	lsls	r1, r1, #16
 8009a8c:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8009a90:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8009a92:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 8009a96:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8009a98:	6183      	str	r3, [r0, #24]
}
 8009a9a:	4770      	bx	lr

08009a9c <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8009a9c:	6940      	ldr	r0, [r0, #20]
 8009a9e:	4770      	bx	lr

08009aa0 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8009aa0:	7803      	ldrb	r3, [r0, #0]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d000      	beq.n	8009aa8 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8009aa6:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8009aa8:	6900      	ldr	r0, [r0, #16]
 8009aaa:	2100      	movs	r1, #0
 8009aac:	f7ff bcd8 	b.w	8009460 <PID_SetIntegralTerm>

08009ab0 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8009ab0:	6840      	ldr	r0, [r0, #4]
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	bfbc      	itt	lt
 8009ab6:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8009aba:	30ff      	addlt	r0, #255	@ 0xff
}
 8009abc:	1400      	asrs	r0, r0, #16
 8009abe:	4770      	bx	lr

08009ac0 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8009ac0:	6880      	ldr	r0, [r0, #8]
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	bfbc      	itt	lt
 8009ac6:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8009aca:	30ff      	addlt	r0, #255	@ 0xff
}
 8009acc:	1400      	asrs	r0, r0, #16
 8009ace:	4770      	bx	lr

08009ad0 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009ad0:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8009ad2:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009ad4:	60c3      	str	r3, [r0, #12]
}
 8009ad6:	4770      	bx	lr

08009ad8 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8009ad8:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8009ada:	7803      	ldrb	r3, [r0, #0]
{
 8009adc:	4604      	mov	r4, r0
 8009ade:	460d      	mov	r5, r1
 8009ae0:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8009ae2:	b31b      	cbz	r3, 8009b2c <STC_ExecRamp+0x54>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009ae4:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8009ae6:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	bfbc      	itt	lt
 8009aec:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8009af0:	30ff      	addlt	r0, #255	@ 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8009af2:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009af4:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8009af8:	dd01      	ble.n	8009afe <STC_ExecRamp+0x26>
 8009afa:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8009afc:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8009afe:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8009b02:	428b      	cmp	r3, r1
 8009b04:	dcf9      	bgt.n	8009afa <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8009b06:	8c23      	ldrh	r3, [r4, #32]
 8009b08:	4299      	cmp	r1, r3
 8009b0a:	da03      	bge.n	8009b14 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8009b0c:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 8009b10:	428b      	cmp	r3, r1
 8009b12:	dbf2      	blt.n	8009afa <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8009b14:	b9a6      	cbnz	r6, 8009b40 <STC_ExecRamp+0x68>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8009b16:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8009b18:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8009b1a:	2b01      	cmp	r3, #1
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8009b1c:	bf0c      	ite	eq
 8009b1e:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8009b20:	60a5      	strne	r5, [r4, #8]
      pHandle->IncDecAmount = 0;
 8009b22:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
 8009b24:	61a0      	str	r0, [r4, #24]
      pHandle->RampRemainingStep++;
 8009b26:	60e6      	str	r6, [r4, #12]
      pHandle->IncDecAmount = wAux1;
 8009b28:	2001      	movs	r0, #1
}
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8009b2c:	f7ff ffc8 	bl	8009ac0 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8009b30:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8009b32:	42ab      	cmp	r3, r5
 8009b34:	dbe1      	blt.n	8009afa <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8009b36:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8009b3a:	42ab      	cmp	r3, r5
 8009b3c:	dcdd      	bgt.n	8009afa <STC_ExecRamp+0x22>
 8009b3e:	e7e9      	b.n	8009b14 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8009b40:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8009b42:	4a06      	ldr	r2, [pc, #24]	@ (8009b5c <STC_ExecRamp+0x84>)
      pHandle->TargetFinal = hTargetFinal;
 8009b44:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8009b46:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8009b4a:	fba2 2303 	umull	r2, r3, r2, r3
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8009b4e:	1a28      	subs	r0, r5, r0
      wAux /= 1000u;
 8009b50:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8009b52:	1c5e      	adds	r6, r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8009b54:	0400      	lsls	r0, r0, #16
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8009b56:	fb90 f0f6 	sdiv	r0, r0, r6
      pHandle->IncDecAmount = wAux1;
 8009b5a:	e7e3      	b.n	8009b24 <STC_ExecRamp+0x4c>
 8009b5c:	10624dd3 	.word	0x10624dd3

08009b60 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8009b60:	2300      	movs	r3, #0
 8009b62:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8009b64:	6183      	str	r3, [r0, #24]
}
 8009b66:	4770      	bx	lr

08009b68 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8009b68:	b570      	push	{r4, r5, r6, lr}
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 8009b6a:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8009b6c:	68c3      	ldr	r3, [r0, #12]
{
 8009b6e:	4604      	mov	r4, r0
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8009b70:	b96a      	cbnz	r2, 8009b8e <STC_CalcTorqueReference+0x26>
  if ( pHandle->RampRemainingStep > 1u )
 8009b72:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->TorqueRef;
 8009b74:	6886      	ldr	r6, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 8009b76:	d923      	bls.n	8009bc0 <STC_CalcTorqueReference+0x58>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8009b78:	6982      	ldr	r2, [r0, #24]
 8009b7a:	4416      	add	r6, r2

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8009b7c:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8009b7e:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8009b80:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8009b82:	4630      	mov	r0, r6
 8009b84:	db20      	blt.n	8009bc8 <STC_CalcTorqueReference+0x60>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8009b86:	1405      	asrs	r5, r0, #16
 8009b88:	b228      	sxth	r0, r5
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8009b8a:	60a6      	str	r6, [r4, #8]
  }

  return hTorqueReference;
}
 8009b8c:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->RampRemainingStep > 1u )
 8009b8e:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->SpeedRefUnitExt;
 8009b90:	6846      	ldr	r6, [r0, #4]
  if ( pHandle->RampRemainingStep > 1u )
 8009b92:	d91d      	bls.n	8009bd0 <STC_CalcTorqueReference+0x68>
    wCurrentReference += pHandle->IncDecAmount;
 8009b94:	6981      	ldr	r1, [r0, #24]
 8009b96:	440e      	add	r6, r1
    pHandle->RampRemainingStep--;
 8009b98:	3b01      	subs	r3, #1
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8009b9a:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8009b9c:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	db1a      	blt.n	8009bd8 <STC_CalcTorqueReference+0x70>
 8009ba2:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8009ba4:	2a01      	cmp	r2, #1
 8009ba6:	d1ef      	bne.n	8009b88 <STC_CalcTorqueReference+0x20>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8009ba8:	6960      	ldr	r0, [r4, #20]
 8009baa:	f7ff ff19 	bl	80099e0 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8009bae:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8009bb0:	b209      	sxth	r1, r1
 8009bb2:	6920      	ldr	r0, [r4, #16]
 8009bb4:	f7ff fc60 	bl	8009478 <PI_Controller>
    pHandle->SpeedRefUnitExt = wCurrentReference;
 8009bb8:	6066      	str	r6, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8009bba:	0406      	lsls	r6, r0, #16
 8009bbc:	60a6      	str	r6, [r4, #8]
}
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8009bc0:	d014      	beq.n	8009bec <STC_CalcTorqueReference+0x84>
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8009bc2:	2e00      	cmp	r6, #0
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	dade      	bge.n	8009b86 <STC_CalcTorqueReference+0x1e>
 8009bc8:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8009bcc:	30ff      	adds	r0, #255	@ 0xff
 8009bce:	e7da      	b.n	8009b86 <STC_CalcTorqueReference+0x1e>
  else if ( pHandle->RampRemainingStep == 1u )
 8009bd0:	d006      	beq.n	8009be0 <STC_CalcTorqueReference+0x78>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8009bd2:	2e00      	cmp	r6, #0
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	dae4      	bge.n	8009ba2 <STC_CalcTorqueReference+0x3a>
 8009bd8:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8009bdc:	30ff      	adds	r0, #255	@ 0xff
 8009bde:	e7e0      	b.n	8009ba2 <STC_CalcTorqueReference+0x3a>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8009be0:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8009be4:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8009be6:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8009be8:	60c3      	str	r3, [r0, #12]
 8009bea:	e7db      	b.n	8009ba4 <STC_CalcTorqueReference+0x3c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8009bec:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8009bf0:	60c2      	str	r2, [r0, #12]
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8009bf2:	042e      	lsls	r6, r5, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8009bf4:	e7c8      	b.n	8009b88 <STC_CalcTorqueReference+0x20>
 8009bf6:	bf00      	nop

08009bf8 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8009bf8:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop

08009c00 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8009c00:	8bc0      	ldrh	r0, [r0, #30]
 8009c02:	4770      	bx	lr

08009c04 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8009c04:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	@ 0x24
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop

08009c0c <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8009c0c:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8009c10:	2200      	movs	r2, #0
 8009c12:	b299      	uxth	r1, r3
 8009c14:	f361 020f 	bfi	r2, r1, #0, #16
 8009c18:	0c1b      	lsrs	r3, r3, #16
 8009c1a:	f363 421f 	bfi	r2, r3, #16, #16
{
 8009c1e:	b082      	sub	sp, #8
}
 8009c20:	4610      	mov	r0, r2
 8009c22:	b002      	add	sp, #8
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop

08009c28 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8009c2c:	6940      	ldr	r0, [r0, #20]
 8009c2e:	f7ff fed7 	bl	80099e0 <SPD_GetAvrgMecSpeedUnit>
 8009c32:	0400      	lsls	r0, r0, #16
 8009c34:	6060      	str	r0, [r4, #4]
}
 8009c36:	bd10      	pop	{r4, pc}

08009c38 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8009c3c:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop

08009c44 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8009c44:	b500      	push	{lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009c46:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8009c48:	f8b0 e004 	ldrh.w	lr, [r0, #4]
{
 8009c4c:	4684      	mov	ip, r0
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009c4e:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 8009c50:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009c52:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8009c56:	ea41 010e 	orr.w	r1, r1, lr
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009c5a:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8009c5c:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8009c5e:	f8ac 2002 	strh.w	r2, [ip, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8009c62:	f8ac 1004 	strh.w	r1, [ip, #4]
  if ( LocalState == FAULT_NOW )
 8009c66:	d008      	beq.n	8009c7a <STM_FaultProcessing+0x36>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8009c68:	b90a      	cbnz	r2, 8009c6e <STM_FaultProcessing+0x2a>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8009c6a:	f85d fb04 	ldr.w	pc, [sp], #4
      pHandle->bState = FAULT_NOW;
 8009c6e:	230a      	movs	r3, #10
 8009c70:	f88c 3000 	strb.w	r3, [ip]
      LocalState = FAULT_NOW;
 8009c74:	200a      	movs	r0, #10
}
 8009c76:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	d1fa      	bne.n	8009c74 <STM_FaultProcessing+0x30>
      pHandle->bState = FAULT_OVER;
 8009c7e:	200b      	movs	r0, #11
 8009c80:	f88c 0000 	strb.w	r0, [ip]
}
 8009c84:	f85d fb04 	ldr.w	pc, [sp], #4

08009c88 <STM_NextState>:
{
 8009c88:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8009c8a:	7803      	ldrb	r3, [r0, #0]
 8009c8c:	2b14      	cmp	r3, #20
 8009c8e:	d820      	bhi.n	8009cd2 <STM_NextState+0x4a>
 8009c90:	e8df f003 	tbb	[pc, r3]
 8009c94:	530d2930 	.word	0x530d2930
 8009c98:	260d6547 	.word	0x260d6547
 8009c9c:	1f1f421d 	.word	0x1f1f421d
 8009ca0:	3a3d0b19 	.word	0x3a3d0b19
 8009ca4:	61506937 	.word	0x61506937
 8009ca8:	5e          	.byte	0x5e
 8009ca9:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8009caa:	290e      	cmp	r1, #14
 8009cac:	d00c      	beq.n	8009cc8 <STM_NextState+0x40>
      if ( bState == ANY_STOP )
 8009cae:	2907      	cmp	r1, #7
 8009cb0:	d00a      	beq.n	8009cc8 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009cb2:	f001 01fd 	and.w	r1, r1, #253	@ 0xfd
 8009cb6:	2901      	cmp	r1, #1
 8009cb8:	d003      	beq.n	8009cc2 <STM_NextState+0x3a>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8009cba:	2200      	movs	r2, #0
 8009cbc:	2180      	movs	r1, #128	@ 0x80
 8009cbe:	f7ff ffc1 	bl	8009c44 <STM_FaultProcessing>
 8009cc2:	2000      	movs	r0, #0
}
 8009cc4:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 8009cc6:	b921      	cbnz	r1, 8009cd2 <STM_NextState+0x4a>
    pHandle->bState = bNewState;
 8009cc8:	7001      	strb	r1, [r0, #0]
 8009cca:	2001      	movs	r0, #1
}
 8009ccc:	bd08      	pop	{r3, pc}
      if ( bState == STOP_IDLE )
 8009cce:	2909      	cmp	r1, #9
 8009cd0:	d0fa      	beq.n	8009cc8 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009cd2:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d0f3      	beq.n	8009cc2 <STM_NextState+0x3a>
 8009cda:	2907      	cmp	r1, #7
 8009cdc:	d0f1      	beq.n	8009cc2 <STM_NextState+0x3a>
 8009cde:	e7ec      	b.n	8009cba <STM_NextState+0x32>
      if ( bState == STOP )
 8009ce0:	2908      	cmp	r1, #8
 8009ce2:	d1f6      	bne.n	8009cd2 <STM_NextState+0x4a>
 8009ce4:	e7f0      	b.n	8009cc8 <STM_NextState+0x40>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8009ce6:	2907      	cmp	r1, #7
 8009ce8:	d0ee      	beq.n	8009cc8 <STM_NextState+0x40>
 8009cea:	f1a1 030d 	sub.w	r3, r1, #13
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d8df      	bhi.n	8009cb2 <STM_NextState+0x2a>
 8009cf2:	e7e9      	b.n	8009cc8 <STM_NextState+0x40>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009cf4:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d0e5      	beq.n	8009cc8 <STM_NextState+0x40>
           || ( bState == ICLWAIT ) )
 8009cfc:	290c      	cmp	r1, #12
 8009cfe:	d1ec      	bne.n	8009cda <STM_NextState+0x52>
 8009d00:	e7e2      	b.n	8009cc8 <STM_NextState+0x40>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8009d02:	2911      	cmp	r1, #17
 8009d04:	d1d3      	bne.n	8009cae <STM_NextState+0x26>
 8009d06:	e7df      	b.n	8009cc8 <STM_NextState+0x40>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8009d08:	2902      	cmp	r1, #2
 8009d0a:	d1d0      	bne.n	8009cae <STM_NextState+0x26>
 8009d0c:	e7dc      	b.n	8009cc8 <STM_NextState+0x40>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8009d0e:	f001 03f7 	and.w	r3, r1, #247	@ 0xf7
 8009d12:	2b07      	cmp	r3, #7
 8009d14:	d1cd      	bne.n	8009cb2 <STM_NextState+0x2a>
 8009d16:	e7d7      	b.n	8009cc8 <STM_NextState+0x40>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	d0d5      	beq.n	8009cc8 <STM_NextState+0x40>
 8009d1c:	290c      	cmp	r1, #12
 8009d1e:	d1d8      	bne.n	8009cd2 <STM_NextState+0x4a>
 8009d20:	e7d2      	b.n	8009cc8 <STM_NextState+0x40>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8009d22:	2913      	cmp	r1, #19
 8009d24:	d0d0      	beq.n	8009cc8 <STM_NextState+0x40>
 8009d26:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 8009d2a:	2b05      	cmp	r3, #5
 8009d2c:	d0cc      	beq.n	8009cc8 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d1c3      	bne.n	8009cba <STM_NextState+0x32>
 8009d32:	e7c6      	b.n	8009cc2 <STM_NextState+0x3a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8009d34:	2904      	cmp	r1, #4
 8009d36:	d1ba      	bne.n	8009cae <STM_NextState+0x26>
 8009d38:	e7c6      	b.n	8009cc8 <STM_NextState+0x40>
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 8009d3a:	2907      	cmp	r1, #7
 8009d3c:	d0c4      	beq.n	8009cc8 <STM_NextState+0x40>
 8009d3e:	2911      	cmp	r1, #17
 8009d40:	d8bb      	bhi.n	8009cba <STM_NextState+0x32>
 8009d42:	4b0c      	ldr	r3, [pc, #48]	@ (8009d74 <STM_NextState+0xec>)
 8009d44:	40cb      	lsrs	r3, r1
 8009d46:	07da      	lsls	r2, r3, #31
 8009d48:	d4be      	bmi.n	8009cc8 <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009d4a:	2903      	cmp	r1, #3
 8009d4c:	d0b9      	beq.n	8009cc2 <STM_NextState+0x3a>
 8009d4e:	e7b4      	b.n	8009cba <STM_NextState+0x32>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8009d50:	2912      	cmp	r1, #18
 8009d52:	d1ac      	bne.n	8009cae <STM_NextState+0x26>
 8009d54:	e7b8      	b.n	8009cc8 <STM_NextState+0x40>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8009d56:	1f0b      	subs	r3, r1, #4
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d8a8      	bhi.n	8009cae <STM_NextState+0x26>
 8009d5c:	e7b4      	b.n	8009cc8 <STM_NextState+0x40>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8009d5e:	1f8b      	subs	r3, r1, #6
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d8a6      	bhi.n	8009cb2 <STM_NextState+0x2a>
 8009d64:	e7b0      	b.n	8009cc8 <STM_NextState+0x40>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8009d66:	2914      	cmp	r1, #20
 8009d68:	d8a3      	bhi.n	8009cb2 <STM_NextState+0x2a>
 8009d6a:	4b03      	ldr	r3, [pc, #12]	@ (8009d78 <STM_NextState+0xf0>)
 8009d6c:	410b      	asrs	r3, r1
 8009d6e:	07db      	lsls	r3, r3, #31
 8009d70:	d5aa      	bpl.n	8009cc8 <STM_NextState+0x40>
 8009d72:	e79e      	b.n	8009cb2 <STM_NextState+0x2a>
 8009d74:	00030012 	.word	0x00030012
 8009d78:	ffebff7f 	.word	0xffebff7f

08009d7c <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8009d7c:	7800      	ldrb	r0, [r0, #0]
 8009d7e:	4770      	bx	lr

08009d80 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8009d80:	7803      	ldrb	r3, [r0, #0]
 8009d82:	2b0b      	cmp	r3, #11
 8009d84:	d001      	beq.n	8009d8a <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8009d86:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8009d88:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8009d8a:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8009d8c:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8009d8e:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8009d90:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8009d92:	2001      	movs	r0, #1
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop

08009d98 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8009d98:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8009d9a:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8009d9c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop

08009da4 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8009da4:	f7fe bc50 	b.w	8008648 <FCP_Init>

08009da8 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8009da8:	f890 3097 	ldrb.w	r3, [r0, #151]	@ 0x97
 8009dac:	b17b      	cbz	r3, 8009dce <UFCP_TX_IRQ_Handler+0x26>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8009dae:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8009db2:	f8d0 1120 	ldr.w	r1, [r0, #288]	@ 0x120
 8009db6:	4602      	mov	r2, r0
    switch ( pBaseHandle->TxFrameLevel )
 8009db8:	b183      	cbz	r3, 8009ddc <UFCP_TX_IRQ_Handler+0x34>
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d008      	beq.n	8009dd0 <UFCP_TX_IRQ_Handler+0x28>
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8009dbe:	7d40      	ldrb	r0, [r0, #21]
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	4283      	cmp	r3, r0
 8009dc4:	dc10      	bgt.n	8009de8 <UFCP_TX_IRQ_Handler+0x40>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8009dc6:	18d0      	adds	r0, r2, r3
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8009dc8:	7d00      	ldrb	r0, [r0, #20]
 8009dca:	6048      	str	r0, [r1, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8009dcc:	e002      	b.n	8009dd4 <UFCP_TX_IRQ_Handler+0x2c>
 8009dce:	4770      	bx	lr
 8009dd0:	7d40      	ldrb	r0, [r0, #21]
 8009dd2:	6048      	str	r0, [r1, #4]
    {
      pBaseHandle->TxFrameLevel++;
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 8009dda:	4770      	bx	lr
 8009ddc:	7d00      	ldrb	r0, [r0, #20]
 8009dde:	6048      	str	r0, [r1, #4]
 8009de0:	3301      	adds	r3, #1
 8009de2:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 8009de6:	4770      	bx	lr
{
 8009de8:	b410      	push	{r4}
 8009dea:	f892 3096 	ldrb.w	r3, [r2, #150]	@ 0x96
 8009dee:	604b      	str	r3, [r1, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8009df0:	310c      	adds	r1, #12
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	e851 3f00 	ldrex	r3, [r1]
 8009df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	e841 3400 	strex	r4, r3, [r1]
 8009dfe:	2c00      	cmp	r4, #0
 8009e00:	d1f7      	bne.n	8009df2 <UFCP_TX_IRQ_Handler+0x4a>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8009e02:	f882 4097 	strb.w	r4, [r2, #151]	@ 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8009e06:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8009e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8009e0e:	4718      	bx	r3

08009e10 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8009e10:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 8009e14:	b97b      	cbnz	r3, 8009e36 <UFCP_Receive+0x26>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8009e16:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f8a0 311c 	strh.w	r3, [r0, #284]	@ 0x11c
 8009e20:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e22:	e852 3f00 	ldrex	r3, [r2]
 8009e26:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	e842 3100 	strex	r1, r3, [r2]
 8009e2e:	2900      	cmp	r1, #0
 8009e30:	d1f7      	bne.n	8009e22 <UFCP_Receive+0x12>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8009e32:	2002      	movs	r0, #2
 8009e34:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8009e36:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop

08009e3c <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8009e40:	f890 0097 	ldrb.w	r0, [r0, #151]	@ 0x97
 8009e44:	bb88      	cbnz	r0, 8009eaa <UFCP_Send+0x6e>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8009e46:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8009e48:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8009e4a:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8009e4c:	b2c0      	uxtb	r0, r0
 8009e4e:	b19b      	cbz	r3, 8009e78 <UFCP_Send+0x3c>
 8009e50:	2805      	cmp	r0, #5
 8009e52:	d94e      	bls.n	8009ef2 <UFCP_Send+0xb6>
 8009e54:	f104 0616 	add.w	r6, r4, #22
 8009e58:	1c51      	adds	r1, r2, #1
 8009e5a:	1a75      	subs	r5, r6, r1
 8009e5c:	2d02      	cmp	r5, #2
 8009e5e:	d826      	bhi.n	8009eae <UFCP_Send+0x72>
 8009e60:	3001      	adds	r0, #1
 8009e62:	f104 0315 	add.w	r3, r4, #21
 8009e66:	4402      	add	r2, r0
 8009e68:	e000      	b.n	8009e6c <UFCP_Send+0x30>
 8009e6a:	3101      	adds	r1, #1
 8009e6c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8009e70:	f803 0f01 	strb.w	r0, [r3, #1]!
 8009e74:	428a      	cmp	r2, r1
 8009e76:	d1f8      	bne.n	8009e6a <UFCP_Send+0x2e>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8009e78:	f104 0014 	add.w	r0, r4, #20
 8009e7c:	f7fe fbf8 	bl	8008670 <FCP_CalcCRC>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8009e80:	f8d4 2120 	ldr.w	r2, [r4, #288]	@ 0x120
 8009e84:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96

    pHandle->TxFrameLevel = 0;
 8009e88:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8009e8a:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8009e8c:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8009e90:	f884 3097 	strb.w	r3, [r4, #151]	@ 0x97
 8009e94:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e96:	e852 3f00 	ldrex	r3, [r2]
 8009e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	e842 3100 	strex	r1, r3, [r2]
 8009ea2:	2900      	cmp	r1, #0
 8009ea4:	d1f7      	bne.n	8009e96 <UFCP_Send+0x5a>
 8009ea6:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8009ea8:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8009eaa:	2001      	movs	r0, #1
}
 8009eac:	bd70      	pop	{r4, r5, r6, pc}
 8009eae:	089d      	lsrs	r5, r3, #2
 8009eb0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	46b4      	mov	ip, r6
    while ( size-- ) *dest++ = *buffer++;
 8009eb8:	f851 eb04 	ldr.w	lr, [r1], #4
 8009ebc:	f84c eb04 	str.w	lr, [ip], #4
 8009ec0:	42a9      	cmp	r1, r5
 8009ec2:	d1f9      	bne.n	8009eb8 <UFCP_Send+0x7c>
 8009ec4:	f003 01fc 	and.w	r1, r3, #252	@ 0xfc
 8009ec8:	1a40      	subs	r0, r0, r1
 8009eca:	079b      	lsls	r3, r3, #30
 8009ecc:	b2c0      	uxtb	r0, r0
 8009ece:	eb02 0c01 	add.w	ip, r2, r1
 8009ed2:	eb06 0501 	add.w	r5, r6, r1
 8009ed6:	d0cf      	beq.n	8009e78 <UFCP_Send+0x3c>
 8009ed8:	5c53      	ldrb	r3, [r2, r1]
 8009eda:	5473      	strb	r3, [r6, r1]
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d0cb      	beq.n	8009e78 <UFCP_Send+0x3c>
 8009ee0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8009ee4:	706b      	strb	r3, [r5, #1]
 8009ee6:	2801      	cmp	r0, #1
 8009ee8:	d0c6      	beq.n	8009e78 <UFCP_Send+0x3c>
 8009eea:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8009eee:	70ab      	strb	r3, [r5, #2]
 8009ef0:	e7c2      	b.n	8009e78 <UFCP_Send+0x3c>
 8009ef2:	1c51      	adds	r1, r2, #1
 8009ef4:	e7b4      	b.n	8009e60 <UFCP_Send+0x24>
 8009ef6:	bf00      	nop

08009ef8 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8009ef8:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 8009efc:	b90b      	cbnz	r3, 8009f02 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009efe:	482e      	ldr	r0, [pc, #184]	@ (8009fb8 <UFCP_RX_IRQ_Handler+0xc0>)
}
 8009f00:	4770      	bx	lr
{
 8009f02:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8009f04:	f890 311d 	ldrb.w	r3, [r0, #285]	@ 0x11d
{
 8009f08:	b083      	sub	sp, #12
 8009f0a:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8009f0c:	fa5f fc81 	uxtb.w	ip, r1
    switch ( pBaseHandle->RxFrameLevel )
 8009f10:	b39b      	cbz	r3, 8009f7a <UFCP_RX_IRQ_Handler+0x82>
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d03b      	beq.n	8009f8e <UFCP_RX_IRQ_Handler+0x96>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8009f16:	f890 209a 	ldrb.w	r2, [r0, #154]	@ 0x9a
 8009f1a:	3201      	adds	r2, #1
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	dc08      	bgt.n	8009f32 <UFCP_RX_IRQ_Handler+0x3a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8009f20:	18c2      	adds	r2, r0, r3
          pBaseHandle->RxFrameLevel++;
 8009f22:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8009f24:	f882 c099 	strb.w	ip, [r2, #153]	@ 0x99
          pBaseHandle->RxFrameLevel++;
 8009f28:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009f2c:	4822      	ldr	r0, [pc, #136]	@ (8009fb8 <UFCP_RX_IRQ_Handler+0xc0>)
}
 8009f2e:	b003      	add	sp, #12
 8009f30:	bd30      	pop	{r4, r5, pc}
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8009f32:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8009f36:	f880 c11b 	strb.w	ip, [r0, #283]	@ 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	8243      	strh	r3, [r0, #18]
 8009f3e:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	e852 3f00 	ldrex	r3, [r2]
 8009f44:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f48:	e842 3100 	strex	r1, r3, [r2]
 8009f4c:	2900      	cmp	r1, #0
 8009f4e:	d1f7      	bne.n	8009f40 <UFCP_RX_IRQ_Handler+0x48>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009f50:	f884 111c 	strb.w	r1, [r4, #284]	@ 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8009f54:	f104 0099 	add.w	r0, r4, #153	@ 0x99
 8009f58:	f7fe fb8a 	bl	8008670 <FCP_CalcCRC>
 8009f5c:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 8009f60:	4283      	cmp	r3, r0
 8009f62:	d11d      	bne.n	8009fa0 <UFCP_RX_IRQ_Handler+0xa8>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8009f64:	68a5      	ldr	r5, [r4, #8]
 8009f66:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 8009f6a:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 8009f6e:	6820      	ldr	r0, [r4, #0]
 8009f70:	f104 029b 	add.w	r2, r4, #155	@ 0x9b
 8009f74:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8009f76:	4811      	ldr	r0, [pc, #68]	@ (8009fbc <UFCP_RX_IRQ_Handler+0xc4>)
  return ret_val;
 8009f78:	e7d9      	b.n	8009f2e <UFCP_RX_IRQ_Handler+0x36>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8009f7a:	8a02      	ldrh	r2, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8009f7c:	4810      	ldr	r0, [pc, #64]	@ (8009fc0 <UFCP_RX_IRQ_Handler+0xc8>)
        pBaseHandle->RxFrame.Code = rx_byte;
 8009f7e:	f884 c099 	strb.w	ip, [r4, #153]	@ 0x99
        pBaseHandle->RxFrameLevel++;
 8009f82:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8009f84:	8262      	strh	r2, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8009f86:	f884 311d 	strb.w	r3, [r4, #285]	@ 0x11d
}
 8009f8a:	b003      	add	sp, #12
 8009f8c:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8009f8e:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 8009f90:	bf54      	ite	pl
 8009f92:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8009f94:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 8009f96:	f880 c09a 	strb.w	ip, [r0, #154]	@ 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 8009f9a:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
 8009f9e:	e7c5      	b.n	8009f2c <UFCP_RX_IRQ_Handler+0x34>
            error_code = FCP_MSG_RX_BAD_CRC;
 8009fa0:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	f10d 0207 	add.w	r2, sp, #7
 8009fa8:	21ff      	movs	r1, #255	@ 0xff
 8009faa:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 8009fac:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009fb0:	f7ff ff44 	bl	8009e3c <UFCP_Send>
 8009fb4:	e7df      	b.n	8009f76 <UFCP_RX_IRQ_Handler+0x7e>
 8009fb6:	bf00      	nop
 8009fb8:	0800add0 	.word	0x0800add0
 8009fbc:	0800adcc 	.word	0x0800adcc
 8009fc0:	0800adce 	.word	0x0800adce

08009fc4 <UFCP_OVR_IRQ_Handler>:
{
 8009fc4:	b500      	push	{lr}
 8009fc6:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8009fc8:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009fcc:	2301      	movs	r3, #1
 8009fce:	f10d 0207 	add.w	r2, sp, #7
 8009fd2:	21ff      	movs	r1, #255	@ 0xff
  error_code = UFCP_MSG_OVERRUN;
 8009fd4:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009fd8:	f7ff ff30 	bl	8009e3c <UFCP_Send>
}
 8009fdc:	b003      	add	sp, #12
 8009fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fe2:	bf00      	nop

08009fe4 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f880 311c 	strb.w	r3, [r0, #284]	@ 0x11c
}
 8009fea:	4770      	bx	lr

08009fec <GPIO_Init>:
#include "main.h"
#include "UDHAL_GPIO.h"

GPIO_InitTypeDef GPIO_InitStruct = {0};
void GPIO_Init(void)
{
 8009fec:	b570      	push	{r4, r5, r6, lr}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fee:	2400      	movs	r4, #0
{
 8009ff0:	b08a      	sub	sp, #40	@ 0x28
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8009ff6:	e9cd 4406 	strd	r4, r4, [sp, #24]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009ffa:	4b28      	ldr	r3, [pc, #160]	@ (800a09c <GPIO_Init+0xb0>)
 8009ffc:	9400      	str	r4, [sp, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ffe:	9408      	str	r4, [sp, #32]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a000:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
	  __HAL_RCC_GPIOC_CLK_ENABLE();
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DASHBOARD_GPIO_Port, DASHBOARD_Pin, GPIO_PIN_RESET);
 800a002:	4d27      	ldr	r5, [pc, #156]	@ (800a0a0 <GPIO_Init+0xb4>)

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin, GPIO_PIN_RESET);
 800a004:	4e27      	ldr	r6, [pc, #156]	@ (800a0a4 <GPIO_Init+0xb8>)
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a006:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a00a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a00c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a00e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800a012:	9200      	str	r2, [sp, #0]
 800a014:	9a00      	ldr	r2, [sp, #0]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a016:	9401      	str	r4, [sp, #4]
 800a018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a01a:	f042 0204 	orr.w	r2, r2, #4
 800a01e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a022:	f002 0204 	and.w	r2, r2, #4
 800a026:	9201      	str	r2, [sp, #4]
 800a028:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a02a:	9402      	str	r4, [sp, #8]
 800a02c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a02e:	f042 0201 	orr.w	r2, r2, #1
 800a032:	631a      	str	r2, [r3, #48]	@ 0x30
 800a034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a036:	f002 0201 	and.w	r2, r2, #1
 800a03a:	9202      	str	r2, [sp, #8]
 800a03c:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a03e:	9403      	str	r4, [sp, #12]
 800a040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a042:	f042 0202 	orr.w	r2, r2, #2
 800a046:	631a      	str	r2, [r3, #48]	@ 0x30
 800a048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a04a:	f003 0302 	and.w	r3, r3, #2
 800a04e:	9303      	str	r3, [sp, #12]
	  HAL_GPIO_WritePin(DASHBOARD_GPIO_Port, DASHBOARD_Pin, GPIO_PIN_RESET);
 800a050:	4622      	mov	r2, r4
 800a052:	4628      	mov	r0, r5
 800a054:	2120      	movs	r1, #32
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a056:	9b03      	ldr	r3, [sp, #12]
	  HAL_GPIO_WritePin(DASHBOARD_GPIO_Port, DASHBOARD_Pin, GPIO_PIN_RESET);
 800a058:	f7fa fd94 	bl	8004b84 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin, GPIO_PIN_RESET);
 800a05c:	4622      	mov	r2, r4
 800a05e:	4630      	mov	r0, r6
 800a060:	f240 4106 	movw	r1, #1030	@ 0x406
 800a064:	f7fa fd8e 	bl	8004b84 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : DASHBOARD_Pin */
	  GPIO_InitStruct.Pin = DASHBOARD_Pin;
 800a068:	2400      	movs	r4, #0
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(DASHBOARD_GPIO_Port, &GPIO_InitStruct);
 800a06a:	4628      	mov	r0, r5
	  GPIO_InitStruct.Pin = DASHBOARD_Pin;
 800a06c:	2220      	movs	r2, #32
 800a06e:	2301      	movs	r3, #1
 800a070:	2500      	movs	r5, #0
	  HAL_GPIO_Init(DASHBOARD_GPIO_Port, &GPIO_InitStruct);
 800a072:	a904      	add	r1, sp, #16
	  GPIO_InitStruct.Pin = DASHBOARD_Pin;
 800a074:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a078:	e9cd 4506 	strd	r4, r5, [sp, #24]
	  HAL_GPIO_Init(DASHBOARD_GPIO_Port, &GPIO_InitStruct);
 800a07c:	f7fa fbc4 	bl	8004808 <HAL_GPIO_Init>

	  /*Configure GPIO pins : FAULT_Pin TAIL_LIGHT_Pin TAIL_LIGHT_2_Pin */
	  GPIO_InitStruct.Pin = FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin;
 800a080:	f240 4206 	movw	r2, #1030	@ 0x406
 800a084:	2301      	movs	r3, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a086:	a904      	add	r1, sp, #16
 800a088:	4630      	mov	r0, r6
	  GPIO_InitStruct.Pin = FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin;
 800a08a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800a08e:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a092:	f7fa fbb9 	bl	8004808 <HAL_GPIO_Init>

}
 800a096:	b00a      	add	sp, #40	@ 0x28
 800a098:	bd70      	pop	{r4, r5, r6, pc}
 800a09a:	bf00      	nop
 800a09c:	40023800 	.word	0x40023800
 800a0a0:	40020000 	.word	0x40020000
 800a0a4:	40020400 	.word	0x40020400

0800a0a8 <WakeUpPinInit>:

void WakeUpPinInit(void)
{
 800a0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /*External Interrupt triggers ETU WakeUp*/
  /*Use UART1 Rx Pin PB7 as External Interrupt Pin PORTB Pin 7 --> i.e. EXTI9_5*/
  GPIO_InitStruct.Pin  = GPIO_PIN_7; /*UART2 Rx Pin PA3*/
 800a0ac:	4c13      	ldr	r4, [pc, #76]	@ (800a0fc <WakeUpPinInit+0x54>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; /*Falling Edge Triggered Interrupt by UART from CC2640 Dash-board*/
  GPIO_InitStruct.Pull = GPIO_PULLUP; /*Activate Internal Pull Up Resistor!*/
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0ae:	4d14      	ldr	r5, [pc, #80]	@ (800a100 <WakeUpPinInit+0x58>)
  GPIO_InitStruct.Pin  = GPIO_PIN_7; /*UART2 Rx Pin PA3*/
 800a0b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  GPIO_InitStruct.Pull = GPIO_PULLUP; /*Activate Internal Pull Up Resistor!*/
 800a0b4:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin  = GPIO_PIN_7; /*UART2 Rx Pin PA3*/
 800a0bc:	2280      	movs	r2, #128	@ 0x80
 800a0be:	e9c4 2300 	strd	r2, r3, [r4]
  GPIO_InitStruct.Pull = GPIO_PULLUP; /*Activate Internal Pull Up Resistor!*/
 800a0c2:	f8c4 8008 	str.w	r8, [r4, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0c6:	f7fa fb9f 	bl	8004808 <HAL_GPIO_Init>
  /*Activate Falling Edge Triggered Interrupt --> External Line Interrupt 3*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn,3,0);
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2103      	movs	r1, #3
 800a0ce:	2017      	movs	r0, #23
 800a0d0:	f7fa fb12 	bl	80046f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a0d4:	2017      	movs	r0, #23
 800a0d6:	f7fa fb4b 	bl	8004770 <HAL_NVIC_EnableIRQ>

  GPIO_InitStruct.Pin  = GPIO_PIN_6; /*UART1 Tx Pin PB6*/
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0da:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin  = GPIO_PIN_6; /*UART1 Tx Pin PB6*/
 800a0dc:	2740      	movs	r7, #64	@ 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0de:	4621      	mov	r1, r4
 800a0e0:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0e2:	e9c4 7800 	strd	r7, r8, [r4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0e6:	e9c4 6602 	strd	r6, r6, [r4, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0ea:	f7fa fb8d 	bl	8004808 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	4628      	mov	r0, r5
}
 800a0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 800a0f8:	f7fa bd44 	b.w	8004b84 <HAL_GPIO_WritePin>
 800a0fc:	20005360 	.word	0x20005360
 800a100:	40020400 	.word	0x40020400

0800a104 <WakeUpPinDeInit>:

void WakeUpPinDeInit(void)
{
 800a104:	b510      	push	{r4, lr}
	HAL_GPIO_DeInit(GPIOB,GPIO_PIN_7);
 800a106:	4c05      	ldr	r4, [pc, #20]	@ (800a11c <WakeUpPinDeInit+0x18>)
 800a108:	2180      	movs	r1, #128	@ 0x80
 800a10a:	4620      	mov	r0, r4
 800a10c:	f7fa fc8c 	bl	8004a28 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB,GPIO_PIN_6);
 800a110:	4620      	mov	r0, r4
 800a112:	2140      	movs	r1, #64	@ 0x40
}
 800a114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_DeInit(GPIOB,GPIO_PIN_6);
 800a118:	f7fa bc86 	b.w	8004a28 <HAL_GPIO_DeInit>
 800a11c:	40020400 	.word	0x40020400

0800a120 <dashboard_indicator_on>:

void dashboard_indicator_on()
{
	HAL_GPIO_WritePin(DASHBOARD_GPIO_Port,DASHBOARD_Pin,GPIO_PIN_SET);
 800a120:	4802      	ldr	r0, [pc, #8]	@ (800a12c <dashboard_indicator_on+0xc>)
 800a122:	2201      	movs	r2, #1
 800a124:	2120      	movs	r1, #32
 800a126:	f7fa bd2d 	b.w	8004b84 <HAL_GPIO_WritePin>
 800a12a:	bf00      	nop
 800a12c:	40020000 	.word	0x40020000

0800a130 <fault_warning_on>:
}

void fault_warning_on()
{
	HAL_GPIO_WritePin(GPIOB,FAULT_Pin,GPIO_PIN_SET);
 800a130:	4802      	ldr	r0, [pc, #8]	@ (800a13c <fault_warning_on+0xc>)
 800a132:	2201      	movs	r2, #1
 800a134:	2102      	movs	r1, #2
 800a136:	f7fa bd25 	b.w	8004b84 <HAL_GPIO_WritePin>
 800a13a:	bf00      	nop
 800a13c:	40020400 	.word	0x40020400

0800a140 <dashboard_indicator_off>:
}

void dashboard_indicator_off()
{
	HAL_GPIO_WritePin(DASHBOARD_GPIO_Port,DASHBOARD_Pin,GPIO_PIN_RESET);
 800a140:	4802      	ldr	r0, [pc, #8]	@ (800a14c <dashboard_indicator_off+0xc>)
 800a142:	2200      	movs	r2, #0
 800a144:	2120      	movs	r1, #32
 800a146:	f7fa bd1d 	b.w	8004b84 <HAL_GPIO_WritePin>
 800a14a:	bf00      	nop
 800a14c:	40020000 	.word	0x40020000

0800a150 <fault_warning_off>:
}

void fault_warning_off()
{
	HAL_GPIO_WritePin(GPIOB,FAULT_Pin,GPIO_PIN_RESET);
 800a150:	4802      	ldr	r0, [pc, #8]	@ (800a15c <fault_warning_off+0xc>)
 800a152:	2200      	movs	r2, #0
 800a154:	2102      	movs	r1, #2
 800a156:	f7fa bd15 	b.w	8004b84 <HAL_GPIO_WritePin>
 800a15a:	bf00      	nop
 800a15c:	40020400 	.word	0x40020400

0800a160 <tail_light_turnon>:
	HAL_Delay(200);
}

void tail_light_turnon()
{
	HAL_GPIO_WritePin(GPIOB,TAIL_LIGHT_Pin,GPIO_PIN_SET);
 800a160:	4802      	ldr	r0, [pc, #8]	@ (800a16c <tail_light_turnon+0xc>)
 800a162:	2201      	movs	r2, #1
 800a164:	2104      	movs	r1, #4
 800a166:	f7fa bd0d 	b.w	8004b84 <HAL_GPIO_WritePin>
 800a16a:	bf00      	nop
 800a16c:	40020400 	.word	0x40020400

0800a170 <tail_light_turnoff>:
}

void tail_light_turnoff()
{
	HAL_GPIO_WritePin(GPIOB,TAIL_LIGHT_Pin,GPIO_PIN_RESET);
 800a170:	4802      	ldr	r0, [pc, #8]	@ (800a17c <tail_light_turnoff+0xc>)
 800a172:	2200      	movs	r2, #0
 800a174:	2104      	movs	r1, #4
 800a176:	f7fa bd05 	b.w	8004b84 <HAL_GPIO_WritePin>
 800a17a:	bf00      	nop
 800a17c:	40020400 	.word	0x40020400

0800a180 <accelerateIQMotor>:
static uint8_t CURRENT_SAMPLES_INDEX = 0;
float RMS_CURRENT_SAMPLES[CURRENT_SAMPLES];
float RMS_CURRENT_SUM = 0;

void accelerateIQMotor(int16_t torque, uint16_t ramp)
{
 800a180:	b508      	push	{r3, lr}
	MC_ProgramTorqueRampMotor1(torque,ramp);
 800a182:	f7f7 fddb 	bl	8001d3c <MC_ProgramTorqueRampMotor1>
	MC_StartMotor1();
}
 800a186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MC_StartMotor1();
 800a18a:	f7f7 bdcb 	b.w	8001d24 <MC_StartMotor1>
 800a18e:	bf00      	nop

0800a190 <motorStop>:
	MC_StartMotor1();
}

void motorStop()
{
	MC_StopMotor1();
 800a190:	f7f7 bdce 	b.w	8001d30 <MC_StopMotor1>

0800a194 <getSpeed>:
{
	MC_AcknowledgeFaultMotor1();
}

int16_t getSpeed()
{
 800a194:	b508      	push	{r3, lr}
	/*Returns the speed in RPM*/
	int16_t MOTOR_SPEED = (MC_GetMecSpeedAverageMotor1() * _RPM) / SPEED_UNIT;
 800a196:	f7f7 fddd 	bl	8001d54 <MC_GetMecSpeedAverageMotor1>
 800a19a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a19e:	0040      	lsls	r0, r0, #1
	return MOTOR_SPEED;
}
 800a1a0:	b200      	sxth	r0, r0
 800a1a2:	bd08      	pop	{r3, pc}
 800a1a4:	0000      	movs	r0, r0
	...

0800a1a8 <getRMSCurrent>:
	float MOTOR_CURRENT = (MC_GetPhaseCurrentAmplitudeMotor1() * VDD_SUPPLY)/(ADC_RANGE*CURRENT_SENSOR_GAIN);
	return MOTOR_CURRENT;
}

float getRMSCurrent()
{
 800a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float MOTOR_CURRENT = (MC_GetPhaseCurrentAmplitudeMotor1() * VDD_SUPPLY)/(ADC_RANGE*CURRENT_SENSOR_GAIN);
 800a1aa:	f7f7 fdd9 	bl	8001d60 <MC_GetPhaseCurrentAmplitudeMotor1>
 800a1ae:	f7f6 f981 	bl	80004b4 <__aeabi_i2d>
 800a1b2:	4b17      	ldr	r3, [pc, #92]	@ (800a210 <getRMSCurrent+0x68>)
	float RMS_DC_SAMPLE = (getCurrent()/RMS_FACTOR);
	RMS_CURRENT_SAMPLES[CURRENT_SAMPLES_INDEX] = RMS_DC_SAMPLE;
 800a1b4:	4e17      	ldr	r6, [pc, #92]	@ (800a214 <getRMSCurrent+0x6c>)
 800a1b6:	4c18      	ldr	r4, [pc, #96]	@ (800a218 <getRMSCurrent+0x70>)
 800a1b8:	7835      	ldrb	r5, [r6, #0]
	float MOTOR_CURRENT = (MC_GetPhaseCurrentAmplitudeMotor1() * VDD_SUPPLY)/(ADC_RANGE*CURRENT_SENSOR_GAIN);
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f7f6 f9e4 	bl	8000588 <__aeabi_dmul>
 800a1c0:	f7f6 fcba 	bl	8000b38 <__aeabi_d2f>
	float RMS_DC_SAMPLE = (getCurrent()/RMS_FACTOR);
 800a1c4:	f7f6 f988 	bl	80004d8 <__aeabi_f2d>
 800a1c8:	a30f      	add	r3, pc, #60	@ (adr r3, 800a208 <getRMSCurrent+0x60>)
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	f7f6 f9db 	bl	8000588 <__aeabi_dmul>
 800a1d2:	f7f6 fcb1 	bl	8000b38 <__aeabi_d2f>
	RMS_CURRENT_SAMPLES[CURRENT_SAMPLES_INDEX] = RMS_DC_SAMPLE;
 800a1d6:	eb04 0785 	add.w	r7, r4, r5, lsl #2

	uint8_t jj = 0;
	float rmsDCsum = 0;
 800a1da:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800a21c <getRMSCurrent+0x74>
	float RMS_DC_SAMPLE = (getCurrent()/RMS_FACTOR);
 800a1de:	6038      	str	r0, [r7, #0]

	for(jj = 0; jj<CURRENT_SAMPLES; jj++)
 800a1e0:	4623      	mov	r3, r4
 800a1e2:	f504 7270 	add.w	r2, r4, #960	@ 0x3c0
	{
		rmsDCsum += RMS_CURRENT_SAMPLES[jj];
 800a1e6:	ecb3 7a01 	vldmia	r3!, {s14}
	for(jj = 0; jj<CURRENT_SAMPLES; jj++)
 800a1ea:	4293      	cmp	r3, r2
		rmsDCsum += RMS_CURRENT_SAMPLES[jj];
 800a1ec:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(jj = 0; jj<CURRENT_SAMPLES; jj++)
 800a1f0:	d1f9      	bne.n	800a1e6 <getRMSCurrent+0x3e>
	}

	float rmsDCAvg = rmsDCsum/CURRENT_SAMPLES;

	CURRENT_SAMPLES_INDEX++;
 800a1f2:	1c6b      	adds	r3, r5, #1
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2bf0      	cmp	r3, #240	@ 0xf0
 800a1f8:	bf28      	it	cs
 800a1fa:	2300      	movcs	r3, #0
	float rmsDCAvg = rmsDCsum/CURRENT_SAMPLES;
 800a1fc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a220 <getRMSCurrent+0x78>
	CURRENT_SAMPLES_INDEX++;
 800a200:	7033      	strb	r3, [r6, #0]
	if(CURRENT_SAMPLES_INDEX >= CURRENT_SAMPLES)
	{
		CURRENT_SAMPLES_INDEX = 0;
	}
	return rmsDCAvg;
}
 800a202:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a208:	667f723f 	.word	0x667f723f
 800a20c:	3fe6a09e 	.word	0x3fe6a09e
 800a210:	3f54a000 	.word	0x3f54a000
 800a214:	20005734 	.word	0x20005734
 800a218:	20005374 	.word	0x20005374
 800a21c:	00000000 	.word	0x00000000
 800a220:	3b888889 	.word	0x3b888889

0800a224 <GET_RESET_SOURCE>:
#include "../UDHAL/UDHAL_SYSCLK.h"

uint8_t GET_RESET_SOURCE()
{
	uint8_t rst_source = 0xFF;
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800a224:	4b10      	ldr	r3, [pc, #64]	@ (800a268 <GET_RESET_SOURCE+0x44>)
 800a226:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800a228:	2a00      	cmp	r2, #0
 800a22a:	db0f      	blt.n	800a24c <GET_RESET_SOURCE+0x28>
	{
		rst_source = 0x7F;
	}
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800a22c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800a22e:	00d1      	lsls	r1, r2, #3
 800a230:	d501      	bpl.n	800a236 <GET_RESET_SOURCE+0x12>
	{
		rst_source = 0x7C;
 800a232:	207c      	movs	r0, #124	@ 0x7c
 800a234:	4770      	bx	lr
	}
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800a236:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800a238:	0112      	lsls	r2, r2, #4
 800a23a:	d409      	bmi.n	800a250 <GET_RESET_SOURCE+0x2c>
	{
		rst_source = 0x7B;
	}
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800a23c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800a23e:	0191      	lsls	r1, r2, #6
 800a240:	d408      	bmi.n	800a254 <GET_RESET_SOURCE+0x30>
	{
		rst_source = 0x79;
	}
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800a242:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800a244:	0052      	lsls	r2, r2, #1
 800a246:	d507      	bpl.n	800a258 <GET_RESET_SOURCE+0x34>
	{
		rst_source = 0x7E;
 800a248:	207e      	movs	r0, #126	@ 0x7e
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
	{
		rst_source = 0x7D;
	}
	return rst_source;
}
 800a24a:	4770      	bx	lr
		rst_source = 0x7F;
 800a24c:	207f      	movs	r0, #127	@ 0x7f
 800a24e:	4770      	bx	lr
		rst_source = 0x7B;
 800a250:	207b      	movs	r0, #123	@ 0x7b
 800a252:	4770      	bx	lr
		rst_source = 0x79;
 800a254:	2079      	movs	r0, #121	@ 0x79
 800a256:	4770      	bx	lr
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800a258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
	uint8_t rst_source = 0xFF;
 800a25a:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800a25e:	bf14      	ite	ne
 800a260:	207d      	movne	r0, #125	@ 0x7d
 800a262:	20ff      	moveq	r0, #255	@ 0xff
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	40023800 	.word	0x40023800

0800a26c <ShutDownTask>:

void ShutDownTask()
{
 800a26c:	b510      	push	{r4, lr}
    if(UART_DeInit() == 0x01)
 800a26e:	f000 f8cb 	bl	800a408 <UART_DeInit>
 800a272:	2801      	cmp	r0, #1
 800a274:	d003      	beq.n	800a27e <ShutDownTask+0x12>
    {
        /*Fuck Off*/
    	/*System Shutdown Fails*/
    	/*What Happens if UART cannot de-init ??*/
    }
}
 800a276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if(UART_DeInit() == 0xFF)
 800a27a:	f000 b8c5 	b.w	800a408 <UART_DeInit>
 800a27e:	4604      	mov	r4, r0
    	WakeUpPinInit();
 800a280:	f7ff ff12 	bl	800a0a8 <WakeUpPinInit>
    	HAL_SuspendTick();
 800a284:	f7f9 fae6 	bl	8003854 <HAL_SuspendTick>
    	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFI);
 800a288:	4621      	mov	r1, r4
 800a28a:	4620      	mov	r0, r4
}
 800a28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFI);
 800a290:	f7fa bc7c 	b.w	8004b8c <HAL_PWR_EnterSTOPMode>

0800a294 <bootStart>:

void bootStart()
{
 800a294:	b508      	push	{r3, lr}
	/* Reset all the system peripherals ! Reset the program counter! You could de-active EXTI First
	 * Resume RTOS tasks !
	 * */
	//GET_RESET_SOURCE();
	WakeUpPinDeInit();
 800a296:	f7ff ff35 	bl	800a104 <WakeUpPinDeInit>
	SystemClock();
 800a29a:	f000 f809 	bl	800a2b0 <SystemClock>
	HAL_ResumeTick();
 800a29e:	f7f9 fae3 	bl	8003868 <HAL_ResumeTick>
	HAL_NVIC_SystemReset();
}
 800a2a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_SystemReset();
 800a2a6:	f7fa ba83 	b.w	80047b0 <HAL_NVIC_SystemReset>
 800a2aa:	bf00      	nop
 800a2ac:	0000      	movs	r0, r0
	...

0800a2b0 <SystemClock>:
#include "UDHAL_SYSCLK.h"
#include "stm32f4xx_hal.h"
#include "main.h"

void SystemClock()
{
 800a2b0:	b510      	push	{r4, lr}
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a2b2:	2300      	movs	r3, #0
{
 800a2b4:	b096      	sub	sp, #88	@ 0x58
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a2b6:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 800a2ba:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
	 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a2be:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800a2c2:	e9cd 3305 	strd	r3, r3, [sp, #20]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 800a2c6:	492c      	ldr	r1, [pc, #176]	@ (800a378 <SystemClock+0xc8>)
 800a2c8:	9301      	str	r3, [sp, #4]
	 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a2ca:	9307      	str	r3, [sp, #28]
	  __HAL_RCC_PWR_CLK_ENABLE();
 800a2cc:	6c08      	ldr	r0, [r1, #64]	@ 0x40
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a2ce:	4a2b      	ldr	r2, [pc, #172]	@ (800a37c <SystemClock+0xcc>)
	  __HAL_RCC_PWR_CLK_ENABLE();
 800a2d0:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 800a2d4:	6408      	str	r0, [r1, #64]	@ 0x40
 800a2d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a2d8:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 800a2dc:	9101      	str	r1, [sp, #4]
 800a2de:	9901      	ldr	r1, [sp, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a2e0:	9302      	str	r3, [sp, #8]
 800a2e2:	6813      	ldr	r3, [r2, #0]
 800a2e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a2e8:	6013      	str	r3, [r2, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a2ea:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800a368 <SystemClock+0xb8>
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a2ee:	6813      	ldr	r3, [r2, #0]
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a2f0:	ed8d 7b08 	vstr	d7, [sp, #32]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a2f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	  RCC_OscInitStruct.PLL.PLLM = 8;
	  RCC_OscInitStruct.PLL.PLLN = 180;
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a2f8:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 800a370 <SystemClock+0xc0>
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a2fc:	9302      	str	r3, [sp, #8]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a2fe:	2102      	movs	r1, #2
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a300:	9802      	ldr	r0, [sp, #8]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a302:	910e      	str	r1, [sp, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a304:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
	  RCC_OscInitStruct.PLL.PLLM = 8;
 800a308:	2208      	movs	r2, #8
	  RCC_OscInitStruct.PLL.PLLN = 180;
 800a30a:	23b4      	movs	r3, #180	@ 0xb4
	  RCC_OscInitStruct.PLL.PLLQ = 2;
	  RCC_OscInitStruct.PLL.PLLR = 2;
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a30c:	a808      	add	r0, sp, #32
	  RCC_OscInitStruct.PLL.PLLM = 8;
 800a30e:	e9cd 420f 	strd	r4, r2, [sp, #60]	@ 0x3c
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a312:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 800a316:	9114      	str	r1, [sp, #80]	@ 0x50
	  RCC_OscInitStruct.PLL.PLLN = 180;
 800a318:	9311      	str	r3, [sp, #68]	@ 0x44
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a31a:	f7fa fdb9 	bl	8004e90 <HAL_RCC_OscConfig>
 800a31e:	b9a8      	cbnz	r0, 800a34c <SystemClock+0x9c>
	    Error_Handler();
	  }

	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a320:	f7fa fc54 	bl	8004bcc <HAL_PWREx_EnableOverDrive>
 800a324:	b9c0      	cbnz	r0, 800a358 <SystemClock+0xa8>
	    Error_Handler();
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a326:	210f      	movs	r1, #15
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a328:	2302      	movs	r3, #2
 800a32a:	e9cd 1303 	strd	r1, r3, [sp, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a32e:	2400      	movs	r4, #0
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a330:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a338:	a803      	add	r0, sp, #12
 800a33a:	2105      	movs	r1, #5
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a33c:	e9cd 4205 	strd	r4, r2, [sp, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a340:	9307      	str	r3, [sp, #28]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a342:	f7fa fc7f 	bl	8004c44 <HAL_RCC_ClockConfig>
 800a346:	b950      	cbnz	r0, 800a35e <SystemClock+0xae>
	  {
	    Error_Handler();
	  }
}
 800a348:	b016      	add	sp, #88	@ 0x58
 800a34a:	bd10      	pop	{r4, pc}
	    Error_Handler();
 800a34c:	f7f7 fce8 	bl	8001d20 <Error_Handler>
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800a350:	f7fa fc3c 	bl	8004bcc <HAL_PWREx_EnableOverDrive>
 800a354:	2800      	cmp	r0, #0
 800a356:	d0e6      	beq.n	800a326 <SystemClock+0x76>
	    Error_Handler();
 800a358:	f7f7 fce2 	bl	8001d20 <Error_Handler>
 800a35c:	e7e3      	b.n	800a326 <SystemClock+0x76>
	    Error_Handler();
 800a35e:	f7f7 fcdf 	bl	8001d20 <Error_Handler>
}
 800a362:	b016      	add	sp, #88	@ 0x58
 800a364:	bd10      	pop	{r4, pc}
 800a366:	bf00      	nop
 800a368:	00000001 	.word	0x00000001
 800a36c:	00010000 	.word	0x00010000
 800a370:	00000002 	.word	0x00000002
 800a374:	00000002 	.word	0x00000002
 800a378:	40023800 	.word	0x40023800
 800a37c:	40007000 	.word	0x40007000

0800a380 <UDHAL_TIMEOUT_Stop>:
	osTimerStart(protocolTimeoutHandle,RECEIVE_TIMEOUT_PERIOD);
}

static void UDHAL_TIMEOUT_Stop()
{
	osTimerStop(protocolTimeoutHandle);
 800a380:	4b01      	ldr	r3, [pc, #4]	@ (800a388 <UDHAL_TIMEOUT_Stop+0x8>)
 800a382:	6818      	ldr	r0, [r3, #0]
 800a384:	f7fb becc 	b.w	8006120 <osTimerStop>
 800a388:	20005738 	.word	0x20005738

0800a38c <UDHAL_TIMEOUT_Start>:
	osTimerStart(protocolTimeoutHandle,RECEIVE_TIMEOUT_PERIOD);
 800a38c:	4b02      	ldr	r3, [pc, #8]	@ (800a398 <UDHAL_TIMEOUT_Start+0xc>)
 800a38e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	f7fb be96 	b.w	80060c4 <osTimerStart>
 800a398:	20005738 	.word	0x20005738

0800a39c <UDHAL_TIMEOUT_OVClockFxn>:
}

void UDHAL_TIMEOUT_OVClockFxn(void const *argument)
{
	timeOutHandler();
 800a39c:	f7f7 b83a 	b.w	8001414 <timeOutHandler>

0800a3a0 <UDHAL_TIMEOUT_init>:
{
 800a3a0:	b500      	push	{lr}
	STM32MCP_registerTimer(&timeoutHandle);
 800a3a2:	4808      	ldr	r0, [pc, #32]	@ (800a3c4 <UDHAL_TIMEOUT_init+0x24>)
{
 800a3a4:	b083      	sub	sp, #12
	STM32MCP_registerTimer(&timeoutHandle);
 800a3a6:	f7f7 f823 	bl	80013f0 <STM32MCP_registerTimer>
	osTimerDef(timeout,UDHAL_TIMEOUT_OVClockFxn);
 800a3aa:	4b07      	ldr	r3, [pc, #28]	@ (800a3c8 <UDHAL_TIMEOUT_init+0x28>)
 800a3ac:	2200      	movs	r2, #0
	protocolTimeoutHandle = osTimerCreate(osTimer(timeout),osTimerPeriodic,NULL);
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	4668      	mov	r0, sp
	osTimerDef(timeout,UDHAL_TIMEOUT_OVClockFxn);
 800a3b2:	e9cd 3200 	strd	r3, r2, [sp]
	protocolTimeoutHandle = osTimerCreate(osTimer(timeout),osTimerPeriodic,NULL);
 800a3b6:	f7fb fe69 	bl	800608c <osTimerCreate>
 800a3ba:	4b04      	ldr	r3, [pc, #16]	@ (800a3cc <UDHAL_TIMEOUT_init+0x2c>)
 800a3bc:	6018      	str	r0, [r3, #0]
}
 800a3be:	b003      	add	sp, #12
 800a3c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3c4:	200005e4 	.word	0x200005e4
 800a3c8:	0800a39d 	.word	0x0800a39d
 800a3cc:	20005738 	.word	0x20005738

0800a3d0 <UART_Init>:

UART_HandleTypeDef huart1;
uint8_t UART_OFF = 0x00;

void UART_Init()
{
 800a3d0:	b510      	push	{r4, lr}
	  huart1.Instance = USART1;
 800a3d2:	480b      	ldr	r0, [pc, #44]	@ (800a400 <UART_Init+0x30>)
 800a3d4:	4c0b      	ldr	r4, [pc, #44]	@ (800a404 <UART_Init+0x34>)
	  huart1.Init.BaudRate = 115200;
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a3d6:	2300      	movs	r3, #0
	  huart1.Init.BaudRate = 115200;
 800a3d8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
	  huart1.Init.StopBits = UART_STOPBITS_1;
	  huart1.Init.Parity = UART_PARITY_NONE;
	  huart1.Init.Mode = UART_MODE_TX_RX;
 800a3dc:	220c      	movs	r2, #12
	  huart1.Init.BaudRate = 115200;
 800a3de:	e9c0 4100 	strd	r4, r1, [r0]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800a3e2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 800a3e6:	e9c0 3204 	strd	r3, r2, [r0, #16]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3ea:	e9c0 3306 	strd	r3, r3, [r0, #24]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a3ee:	f7fb fd51 	bl	8005e94 <HAL_UART_Init>
 800a3f2:	b900      	cbnz	r0, 800a3f6 <UART_Init+0x26>
	  {
	    Error_Handler();
	  }
}
 800a3f4:	bd10      	pop	{r4, pc}
 800a3f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    Error_Handler();
 800a3fa:	f7f7 bc91 	b.w	8001d20 <Error_Handler>
 800a3fe:	bf00      	nop
 800a400:	20005740 	.word	0x20005740
 800a404:	40011000 	.word	0x40011000

0800a408 <UART_DeInit>:

uint8_t UART_DeInit()
{
 800a408:	b508      	push	{r3, lr}
    if(HAL_UART_DeInit(&huart1) == HAL_OK)
 800a40a:	4809      	ldr	r0, [pc, #36]	@ (800a430 <UART_DeInit+0x28>)
 800a40c:	f7fb fdd4 	bl	8005fb8 <HAL_UART_DeInit>
 800a410:	b918      	cbnz	r0, 800a41a <UART_DeInit+0x12>
    {
    	UART_OFF = 0x01;
 800a412:	4b08      	ldr	r3, [pc, #32]	@ (800a434 <UART_DeInit+0x2c>)
 800a414:	2001      	movs	r0, #1
 800a416:	7018      	strb	r0, [r3, #0]
    else if(HAL_UART_DeInit(&huart1) != HAL_OK)
    {
    	UART_OFF = 0xFF;
    }
    return UART_OFF;
}
 800a418:	bd08      	pop	{r3, pc}
    else if(HAL_UART_DeInit(&huart1) != HAL_OK)
 800a41a:	4805      	ldr	r0, [pc, #20]	@ (800a430 <UART_DeInit+0x28>)
 800a41c:	f7fb fdcc 	bl	8005fb8 <HAL_UART_DeInit>
    	UART_OFF = 0xFF;
 800a420:	4b04      	ldr	r3, [pc, #16]	@ (800a434 <UART_DeInit+0x2c>)
    else if(HAL_UART_DeInit(&huart1) != HAL_OK)
 800a422:	b110      	cbz	r0, 800a42a <UART_DeInit+0x22>
    	UART_OFF = 0xFF;
 800a424:	20ff      	movs	r0, #255	@ 0xff
 800a426:	7018      	strb	r0, [r3, #0]
}
 800a428:	bd08      	pop	{r3, pc}
    return UART_OFF;
 800a42a:	7818      	ldrb	r0, [r3, #0]
}
 800a42c:	bd08      	pop	{r3, pc}
 800a42e:	bf00      	nop
 800a430:	20005740 	.word	0x20005740
 800a434:	2000573c 	.word	0x2000573c

0800a438 <__malloc_lock>:
 800a438:	4801      	ldr	r0, [pc, #4]	@ (800a440 <__malloc_lock+0x8>)
 800a43a:	f000 b891 	b.w	800a560 <__retarget_lock_acquire_recursive>
 800a43e:	bf00      	nop
 800a440:	200058c0 	.word	0x200058c0

0800a444 <__malloc_unlock>:
 800a444:	4801      	ldr	r0, [pc, #4]	@ (800a44c <__malloc_unlock+0x8>)
 800a446:	f000 b88c 	b.w	800a562 <__retarget_lock_release_recursive>
 800a44a:	bf00      	nop
 800a44c:	200058c0 	.word	0x200058c0

0800a450 <memset>:
 800a450:	4402      	add	r2, r0
 800a452:	4603      	mov	r3, r0
 800a454:	4293      	cmp	r3, r2
 800a456:	d100      	bne.n	800a45a <memset+0xa>
 800a458:	4770      	bx	lr
 800a45a:	f803 1b01 	strb.w	r1, [r3], #1
 800a45e:	e7f9      	b.n	800a454 <memset+0x4>

0800a460 <_reclaim_reent>:
 800a460:	4b29      	ldr	r3, [pc, #164]	@ (800a508 <_reclaim_reent+0xa8>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4283      	cmp	r3, r0
 800a466:	b570      	push	{r4, r5, r6, lr}
 800a468:	4604      	mov	r4, r0
 800a46a:	d04b      	beq.n	800a504 <_reclaim_reent+0xa4>
 800a46c:	69c3      	ldr	r3, [r0, #28]
 800a46e:	b1ab      	cbz	r3, 800a49c <_reclaim_reent+0x3c>
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	b16b      	cbz	r3, 800a490 <_reclaim_reent+0x30>
 800a474:	2500      	movs	r5, #0
 800a476:	69e3      	ldr	r3, [r4, #28]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	5959      	ldr	r1, [r3, r5]
 800a47c:	2900      	cmp	r1, #0
 800a47e:	d13b      	bne.n	800a4f8 <_reclaim_reent+0x98>
 800a480:	3504      	adds	r5, #4
 800a482:	2d80      	cmp	r5, #128	@ 0x80
 800a484:	d1f7      	bne.n	800a476 <_reclaim_reent+0x16>
 800a486:	69e3      	ldr	r3, [r4, #28]
 800a488:	4620      	mov	r0, r4
 800a48a:	68d9      	ldr	r1, [r3, #12]
 800a48c:	f000 f878 	bl	800a580 <_free_r>
 800a490:	69e3      	ldr	r3, [r4, #28]
 800a492:	6819      	ldr	r1, [r3, #0]
 800a494:	b111      	cbz	r1, 800a49c <_reclaim_reent+0x3c>
 800a496:	4620      	mov	r0, r4
 800a498:	f000 f872 	bl	800a580 <_free_r>
 800a49c:	6961      	ldr	r1, [r4, #20]
 800a49e:	b111      	cbz	r1, 800a4a6 <_reclaim_reent+0x46>
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 f86d 	bl	800a580 <_free_r>
 800a4a6:	69e1      	ldr	r1, [r4, #28]
 800a4a8:	b111      	cbz	r1, 800a4b0 <_reclaim_reent+0x50>
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 f868 	bl	800a580 <_free_r>
 800a4b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a4b2:	b111      	cbz	r1, 800a4ba <_reclaim_reent+0x5a>
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f000 f863 	bl	800a580 <_free_r>
 800a4ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4bc:	b111      	cbz	r1, 800a4c4 <_reclaim_reent+0x64>
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f000 f85e 	bl	800a580 <_free_r>
 800a4c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a4c6:	b111      	cbz	r1, 800a4ce <_reclaim_reent+0x6e>
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 f859 	bl	800a580 <_free_r>
 800a4ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a4d0:	b111      	cbz	r1, 800a4d8 <_reclaim_reent+0x78>
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f000 f854 	bl	800a580 <_free_r>
 800a4d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a4da:	b111      	cbz	r1, 800a4e2 <_reclaim_reent+0x82>
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f000 f84f 	bl	800a580 <_free_r>
 800a4e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a4e4:	b111      	cbz	r1, 800a4ec <_reclaim_reent+0x8c>
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f000 f84a 	bl	800a580 <_free_r>
 800a4ec:	6a23      	ldr	r3, [r4, #32]
 800a4ee:	b14b      	cbz	r3, 800a504 <_reclaim_reent+0xa4>
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4f6:	4718      	bx	r3
 800a4f8:	680e      	ldr	r6, [r1, #0]
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f000 f840 	bl	800a580 <_free_r>
 800a500:	4631      	mov	r1, r6
 800a502:	e7bb      	b.n	800a47c <_reclaim_reent+0x1c>
 800a504:	bd70      	pop	{r4, r5, r6, pc}
 800a506:	bf00      	nop
 800a508:	200005ec 	.word	0x200005ec

0800a50c <__errno>:
 800a50c:	4b01      	ldr	r3, [pc, #4]	@ (800a514 <__errno+0x8>)
 800a50e:	6818      	ldr	r0, [r3, #0]
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	200005ec 	.word	0x200005ec

0800a518 <__libc_init_array>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	4d0d      	ldr	r5, [pc, #52]	@ (800a550 <__libc_init_array+0x38>)
 800a51c:	4c0d      	ldr	r4, [pc, #52]	@ (800a554 <__libc_init_array+0x3c>)
 800a51e:	1b64      	subs	r4, r4, r5
 800a520:	10a4      	asrs	r4, r4, #2
 800a522:	2600      	movs	r6, #0
 800a524:	42a6      	cmp	r6, r4
 800a526:	d109      	bne.n	800a53c <__libc_init_array+0x24>
 800a528:	4d0b      	ldr	r5, [pc, #44]	@ (800a558 <__libc_init_array+0x40>)
 800a52a:	4c0c      	ldr	r4, [pc, #48]	@ (800a55c <__libc_init_array+0x44>)
 800a52c:	f000 faba 	bl	800aaa4 <_init>
 800a530:	1b64      	subs	r4, r4, r5
 800a532:	10a4      	asrs	r4, r4, #2
 800a534:	2600      	movs	r6, #0
 800a536:	42a6      	cmp	r6, r4
 800a538:	d105      	bne.n	800a546 <__libc_init_array+0x2e>
 800a53a:	bd70      	pop	{r4, r5, r6, pc}
 800a53c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a540:	4798      	blx	r3
 800a542:	3601      	adds	r6, #1
 800a544:	e7ee      	b.n	800a524 <__libc_init_array+0xc>
 800a546:	f855 3b04 	ldr.w	r3, [r5], #4
 800a54a:	4798      	blx	r3
 800a54c:	3601      	adds	r6, #1
 800a54e:	e7f2      	b.n	800a536 <__libc_init_array+0x1e>
 800a550:	0800addc 	.word	0x0800addc
 800a554:	0800addc 	.word	0x0800addc
 800a558:	0800addc 	.word	0x0800addc
 800a55c:	0800ade0 	.word	0x0800ade0

0800a560 <__retarget_lock_acquire_recursive>:
 800a560:	4770      	bx	lr

0800a562 <__retarget_lock_release_recursive>:
 800a562:	4770      	bx	lr

0800a564 <memcpy>:
 800a564:	440a      	add	r2, r1
 800a566:	4291      	cmp	r1, r2
 800a568:	f100 33ff 	add.w	r3, r0, #4294967295
 800a56c:	d100      	bne.n	800a570 <memcpy+0xc>
 800a56e:	4770      	bx	lr
 800a570:	b510      	push	{r4, lr}
 800a572:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a57a:	4291      	cmp	r1, r2
 800a57c:	d1f9      	bne.n	800a572 <memcpy+0xe>
 800a57e:	bd10      	pop	{r4, pc}

0800a580 <_free_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4605      	mov	r5, r0
 800a584:	2900      	cmp	r1, #0
 800a586:	d041      	beq.n	800a60c <_free_r+0x8c>
 800a588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a58c:	1f0c      	subs	r4, r1, #4
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bfb8      	it	lt
 800a592:	18e4      	addlt	r4, r4, r3
 800a594:	f7ff ff50 	bl	800a438 <__malloc_lock>
 800a598:	4a1d      	ldr	r2, [pc, #116]	@ (800a610 <_free_r+0x90>)
 800a59a:	6813      	ldr	r3, [r2, #0]
 800a59c:	b933      	cbnz	r3, 800a5ac <_free_r+0x2c>
 800a59e:	6063      	str	r3, [r4, #4]
 800a5a0:	6014      	str	r4, [r2, #0]
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a8:	f7ff bf4c 	b.w	800a444 <__malloc_unlock>
 800a5ac:	42a3      	cmp	r3, r4
 800a5ae:	d908      	bls.n	800a5c2 <_free_r+0x42>
 800a5b0:	6820      	ldr	r0, [r4, #0]
 800a5b2:	1821      	adds	r1, r4, r0
 800a5b4:	428b      	cmp	r3, r1
 800a5b6:	bf01      	itttt	eq
 800a5b8:	6819      	ldreq	r1, [r3, #0]
 800a5ba:	685b      	ldreq	r3, [r3, #4]
 800a5bc:	1809      	addeq	r1, r1, r0
 800a5be:	6021      	streq	r1, [r4, #0]
 800a5c0:	e7ed      	b.n	800a59e <_free_r+0x1e>
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	b10b      	cbz	r3, 800a5cc <_free_r+0x4c>
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	d9fa      	bls.n	800a5c2 <_free_r+0x42>
 800a5cc:	6811      	ldr	r1, [r2, #0]
 800a5ce:	1850      	adds	r0, r2, r1
 800a5d0:	42a0      	cmp	r0, r4
 800a5d2:	d10b      	bne.n	800a5ec <_free_r+0x6c>
 800a5d4:	6820      	ldr	r0, [r4, #0]
 800a5d6:	4401      	add	r1, r0
 800a5d8:	1850      	adds	r0, r2, r1
 800a5da:	4283      	cmp	r3, r0
 800a5dc:	6011      	str	r1, [r2, #0]
 800a5de:	d1e0      	bne.n	800a5a2 <_free_r+0x22>
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	6053      	str	r3, [r2, #4]
 800a5e6:	4408      	add	r0, r1
 800a5e8:	6010      	str	r0, [r2, #0]
 800a5ea:	e7da      	b.n	800a5a2 <_free_r+0x22>
 800a5ec:	d902      	bls.n	800a5f4 <_free_r+0x74>
 800a5ee:	230c      	movs	r3, #12
 800a5f0:	602b      	str	r3, [r5, #0]
 800a5f2:	e7d6      	b.n	800a5a2 <_free_r+0x22>
 800a5f4:	6820      	ldr	r0, [r4, #0]
 800a5f6:	1821      	adds	r1, r4, r0
 800a5f8:	428b      	cmp	r3, r1
 800a5fa:	bf04      	itt	eq
 800a5fc:	6819      	ldreq	r1, [r3, #0]
 800a5fe:	685b      	ldreq	r3, [r3, #4]
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	bf04      	itt	eq
 800a604:	1809      	addeq	r1, r1, r0
 800a606:	6021      	streq	r1, [r4, #0]
 800a608:	6054      	str	r4, [r2, #4]
 800a60a:	e7ca      	b.n	800a5a2 <_free_r+0x22>
 800a60c:	bd38      	pop	{r3, r4, r5, pc}
 800a60e:	bf00      	nop
 800a610:	20005784 	.word	0x20005784
 800a614:	00000000 	.word	0x00000000

0800a618 <log>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	ed2d 8b02 	vpush	{d8}
 800a61e:	ec55 4b10 	vmov	r4, r5, d0
 800a622:	f000 f889 	bl	800a738 <__ieee754_log>
 800a626:	4622      	mov	r2, r4
 800a628:	462b      	mov	r3, r5
 800a62a:	4620      	mov	r0, r4
 800a62c:	4629      	mov	r1, r5
 800a62e:	eeb0 8a40 	vmov.f32	s16, s0
 800a632:	eef0 8a60 	vmov.f32	s17, s1
 800a636:	f7f6 fa41 	bl	8000abc <__aeabi_dcmpun>
 800a63a:	b998      	cbnz	r0, 800a664 <log+0x4c>
 800a63c:	2200      	movs	r2, #0
 800a63e:	2300      	movs	r3, #0
 800a640:	4620      	mov	r0, r4
 800a642:	4629      	mov	r1, r5
 800a644:	f7f6 fa30 	bl	8000aa8 <__aeabi_dcmpgt>
 800a648:	b960      	cbnz	r0, 800a664 <log+0x4c>
 800a64a:	2200      	movs	r2, #0
 800a64c:	2300      	movs	r3, #0
 800a64e:	4620      	mov	r0, r4
 800a650:	4629      	mov	r1, r5
 800a652:	f7f6 fa01 	bl	8000a58 <__aeabi_dcmpeq>
 800a656:	b160      	cbz	r0, 800a672 <log+0x5a>
 800a658:	f7ff ff58 	bl	800a50c <__errno>
 800a65c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800a688 <log+0x70>
 800a660:	2322      	movs	r3, #34	@ 0x22
 800a662:	6003      	str	r3, [r0, #0]
 800a664:	eeb0 0a48 	vmov.f32	s0, s16
 800a668:	eef0 0a68 	vmov.f32	s1, s17
 800a66c:	ecbd 8b02 	vpop	{d8}
 800a670:	bd38      	pop	{r3, r4, r5, pc}
 800a672:	f7ff ff4b 	bl	800a50c <__errno>
 800a676:	ecbd 8b02 	vpop	{d8}
 800a67a:	2321      	movs	r3, #33	@ 0x21
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a682:	4803      	ldr	r0, [pc, #12]	@ (800a690 <log+0x78>)
 800a684:	f000 b808 	b.w	800a698 <nan>
 800a688:	00000000 	.word	0x00000000
 800a68c:	fff00000 	.word	0xfff00000
 800a690:	0800add2 	.word	0x0800add2
 800a694:	00000000 	.word	0x00000000

0800a698 <nan>:
 800a698:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a6a0 <nan+0x8>
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	00000000 	.word	0x00000000
 800a6a4:	7ff80000 	.word	0x7ff80000

0800a6a8 <round>:
 800a6a8:	ec51 0b10 	vmov	r0, r1, d0
 800a6ac:	b570      	push	{r4, r5, r6, lr}
 800a6ae:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a6b2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800a6b6:	2a13      	cmp	r2, #19
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	4605      	mov	r5, r0
 800a6bc:	dc1b      	bgt.n	800a6f6 <round+0x4e>
 800a6be:	2a00      	cmp	r2, #0
 800a6c0:	da0b      	bge.n	800a6da <round+0x32>
 800a6c2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a6c6:	3201      	adds	r2, #1
 800a6c8:	bf04      	itt	eq
 800a6ca:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a6ce:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	e015      	b.n	800a706 <round+0x5e>
 800a6da:	4c15      	ldr	r4, [pc, #84]	@ (800a730 <round+0x88>)
 800a6dc:	4114      	asrs	r4, r2
 800a6de:	ea04 0601 	and.w	r6, r4, r1
 800a6e2:	4306      	orrs	r6, r0
 800a6e4:	d00f      	beq.n	800a706 <round+0x5e>
 800a6e6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a6ea:	fa41 f202 	asr.w	r2, r1, r2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	ea23 0304 	bic.w	r3, r3, r4
 800a6f4:	e7ed      	b.n	800a6d2 <round+0x2a>
 800a6f6:	2a33      	cmp	r2, #51	@ 0x33
 800a6f8:	dd08      	ble.n	800a70c <round+0x64>
 800a6fa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a6fe:	d102      	bne.n	800a706 <round+0x5e>
 800a700:	4602      	mov	r2, r0
 800a702:	f7f5 fd8b 	bl	800021c <__adddf3>
 800a706:	ec41 0b10 	vmov	d0, r0, r1
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800a710:	f04f 34ff 	mov.w	r4, #4294967295
 800a714:	40f4      	lsrs	r4, r6
 800a716:	4204      	tst	r4, r0
 800a718:	d0f5      	beq.n	800a706 <round+0x5e>
 800a71a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a71e:	2201      	movs	r2, #1
 800a720:	408a      	lsls	r2, r1
 800a722:	1952      	adds	r2, r2, r5
 800a724:	bf28      	it	cs
 800a726:	3301      	addcs	r3, #1
 800a728:	ea22 0204 	bic.w	r2, r2, r4
 800a72c:	e7d2      	b.n	800a6d4 <round+0x2c>
 800a72e:	bf00      	nop
 800a730:	000fffff 	.word	0x000fffff
 800a734:	00000000 	.word	0x00000000

0800a738 <__ieee754_log>:
 800a738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73c:	ec51 0b10 	vmov	r0, r1, d0
 800a740:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800a744:	b087      	sub	sp, #28
 800a746:	460d      	mov	r5, r1
 800a748:	da26      	bge.n	800a798 <__ieee754_log+0x60>
 800a74a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a74e:	4303      	orrs	r3, r0
 800a750:	4602      	mov	r2, r0
 800a752:	d10a      	bne.n	800a76a <__ieee754_log+0x32>
 800a754:	49ce      	ldr	r1, [pc, #824]	@ (800aa90 <__ieee754_log+0x358>)
 800a756:	2200      	movs	r2, #0
 800a758:	2300      	movs	r3, #0
 800a75a:	2000      	movs	r0, #0
 800a75c:	f7f6 f83e 	bl	80007dc <__aeabi_ddiv>
 800a760:	ec41 0b10 	vmov	d0, r0, r1
 800a764:	b007      	add	sp, #28
 800a766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76a:	2900      	cmp	r1, #0
 800a76c:	da05      	bge.n	800a77a <__ieee754_log+0x42>
 800a76e:	460b      	mov	r3, r1
 800a770:	f7f5 fd52 	bl	8000218 <__aeabi_dsub>
 800a774:	2200      	movs	r2, #0
 800a776:	2300      	movs	r3, #0
 800a778:	e7f0      	b.n	800a75c <__ieee754_log+0x24>
 800a77a:	4bc6      	ldr	r3, [pc, #792]	@ (800aa94 <__ieee754_log+0x35c>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	f7f5 ff03 	bl	8000588 <__aeabi_dmul>
 800a782:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800a786:	460d      	mov	r5, r1
 800a788:	4ac3      	ldr	r2, [pc, #780]	@ (800aa98 <__ieee754_log+0x360>)
 800a78a:	4295      	cmp	r5, r2
 800a78c:	dd06      	ble.n	800a79c <__ieee754_log+0x64>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	f7f5 fd43 	bl	800021c <__adddf3>
 800a796:	e7e3      	b.n	800a760 <__ieee754_log+0x28>
 800a798:	2300      	movs	r3, #0
 800a79a:	e7f5      	b.n	800a788 <__ieee754_log+0x50>
 800a79c:	152c      	asrs	r4, r5, #20
 800a79e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800a7a2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a7a6:	441c      	add	r4, r3
 800a7a8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800a7ac:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800a7b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7b4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800a7b8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800a7bc:	ea42 0105 	orr.w	r1, r2, r5
 800a7c0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4bb5      	ldr	r3, [pc, #724]	@ (800aa9c <__ieee754_log+0x364>)
 800a7c8:	f7f5 fd26 	bl	8000218 <__aeabi_dsub>
 800a7cc:	1cab      	adds	r3, r5, #2
 800a7ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	4682      	mov	sl, r0
 800a7d6:	468b      	mov	fp, r1
 800a7d8:	f04f 0200 	mov.w	r2, #0
 800a7dc:	dc53      	bgt.n	800a886 <__ieee754_log+0x14e>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f7f6 f93a 	bl	8000a58 <__aeabi_dcmpeq>
 800a7e4:	b1d0      	cbz	r0, 800a81c <__ieee754_log+0xe4>
 800a7e6:	2c00      	cmp	r4, #0
 800a7e8:	f000 8120 	beq.w	800aa2c <__ieee754_log+0x2f4>
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f7f5 fe61 	bl	80004b4 <__aeabi_i2d>
 800a7f2:	a391      	add	r3, pc, #580	@ (adr r3, 800aa38 <__ieee754_log+0x300>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	f7f5 fec4 	bl	8000588 <__aeabi_dmul>
 800a800:	a38f      	add	r3, pc, #572	@ (adr r3, 800aa40 <__ieee754_log+0x308>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	4604      	mov	r4, r0
 800a808:	460d      	mov	r5, r1
 800a80a:	4630      	mov	r0, r6
 800a80c:	4639      	mov	r1, r7
 800a80e:	f7f5 febb 	bl	8000588 <__aeabi_dmul>
 800a812:	4602      	mov	r2, r0
 800a814:	460b      	mov	r3, r1
 800a816:	4620      	mov	r0, r4
 800a818:	4629      	mov	r1, r5
 800a81a:	e7ba      	b.n	800a792 <__ieee754_log+0x5a>
 800a81c:	a38a      	add	r3, pc, #552	@ (adr r3, 800aa48 <__ieee754_log+0x310>)
 800a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a822:	4650      	mov	r0, sl
 800a824:	4659      	mov	r1, fp
 800a826:	f7f5 feaf 	bl	8000588 <__aeabi_dmul>
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	2000      	movs	r0, #0
 800a830:	499b      	ldr	r1, [pc, #620]	@ (800aaa0 <__ieee754_log+0x368>)
 800a832:	f7f5 fcf1 	bl	8000218 <__aeabi_dsub>
 800a836:	4652      	mov	r2, sl
 800a838:	4606      	mov	r6, r0
 800a83a:	460f      	mov	r7, r1
 800a83c:	465b      	mov	r3, fp
 800a83e:	4650      	mov	r0, sl
 800a840:	4659      	mov	r1, fp
 800a842:	f7f5 fea1 	bl	8000588 <__aeabi_dmul>
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	f7f5 fe9b 	bl	8000588 <__aeabi_dmul>
 800a852:	4606      	mov	r6, r0
 800a854:	460f      	mov	r7, r1
 800a856:	b914      	cbnz	r4, 800a85e <__ieee754_log+0x126>
 800a858:	4632      	mov	r2, r6
 800a85a:	463b      	mov	r3, r7
 800a85c:	e0a0      	b.n	800a9a0 <__ieee754_log+0x268>
 800a85e:	4620      	mov	r0, r4
 800a860:	f7f5 fe28 	bl	80004b4 <__aeabi_i2d>
 800a864:	a374      	add	r3, pc, #464	@ (adr r3, 800aa38 <__ieee754_log+0x300>)
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	4680      	mov	r8, r0
 800a86c:	4689      	mov	r9, r1
 800a86e:	f7f5 fe8b 	bl	8000588 <__aeabi_dmul>
 800a872:	a373      	add	r3, pc, #460	@ (adr r3, 800aa40 <__ieee754_log+0x308>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	4604      	mov	r4, r0
 800a87a:	460d      	mov	r5, r1
 800a87c:	4640      	mov	r0, r8
 800a87e:	4649      	mov	r1, r9
 800a880:	f7f5 fe82 	bl	8000588 <__aeabi_dmul>
 800a884:	e0a5      	b.n	800a9d2 <__ieee754_log+0x29a>
 800a886:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a88a:	f7f5 fcc7 	bl	800021c <__adddf3>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4650      	mov	r0, sl
 800a894:	4659      	mov	r1, fp
 800a896:	f7f5 ffa1 	bl	80007dc <__aeabi_ddiv>
 800a89a:	e9cd 0100 	strd	r0, r1, [sp]
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7f5 fe08 	bl	80004b4 <__aeabi_i2d>
 800a8a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	f7f5 fe6a 	bl	8000588 <__aeabi_dmul>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a8bc:	f7f5 fe64 	bl	8000588 <__aeabi_dmul>
 800a8c0:	a363      	add	r3, pc, #396	@ (adr r3, 800aa50 <__ieee754_log+0x318>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	4680      	mov	r8, r0
 800a8c8:	4689      	mov	r9, r1
 800a8ca:	f7f5 fe5d 	bl	8000588 <__aeabi_dmul>
 800a8ce:	a362      	add	r3, pc, #392	@ (adr r3, 800aa58 <__ieee754_log+0x320>)
 800a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d4:	f7f5 fca2 	bl	800021c <__adddf3>
 800a8d8:	4642      	mov	r2, r8
 800a8da:	464b      	mov	r3, r9
 800a8dc:	f7f5 fe54 	bl	8000588 <__aeabi_dmul>
 800a8e0:	a35f      	add	r3, pc, #380	@ (adr r3, 800aa60 <__ieee754_log+0x328>)
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	f7f5 fc99 	bl	800021c <__adddf3>
 800a8ea:	4642      	mov	r2, r8
 800a8ec:	464b      	mov	r3, r9
 800a8ee:	f7f5 fe4b 	bl	8000588 <__aeabi_dmul>
 800a8f2:	a35d      	add	r3, pc, #372	@ (adr r3, 800aa68 <__ieee754_log+0x330>)
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	f7f5 fc90 	bl	800021c <__adddf3>
 800a8fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a900:	f7f5 fe42 	bl	8000588 <__aeabi_dmul>
 800a904:	a35a      	add	r3, pc, #360	@ (adr r3, 800aa70 <__ieee754_log+0x338>)
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a90e:	4640      	mov	r0, r8
 800a910:	4649      	mov	r1, r9
 800a912:	f7f5 fe39 	bl	8000588 <__aeabi_dmul>
 800a916:	a358      	add	r3, pc, #352	@ (adr r3, 800aa78 <__ieee754_log+0x340>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	f7f5 fc7e 	bl	800021c <__adddf3>
 800a920:	4642      	mov	r2, r8
 800a922:	464b      	mov	r3, r9
 800a924:	f7f5 fe30 	bl	8000588 <__aeabi_dmul>
 800a928:	a355      	add	r3, pc, #340	@ (adr r3, 800aa80 <__ieee754_log+0x348>)
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	f7f5 fc75 	bl	800021c <__adddf3>
 800a932:	4642      	mov	r2, r8
 800a934:	464b      	mov	r3, r9
 800a936:	f7f5 fe27 	bl	8000588 <__aeabi_dmul>
 800a93a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800a946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a94a:	f7f5 fc67 	bl	800021c <__adddf3>
 800a94e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800a952:	3551      	adds	r5, #81	@ 0x51
 800a954:	4335      	orrs	r5, r6
 800a956:	2d00      	cmp	r5, #0
 800a958:	4680      	mov	r8, r0
 800a95a:	4689      	mov	r9, r1
 800a95c:	dd48      	ble.n	800a9f0 <__ieee754_log+0x2b8>
 800a95e:	4b50      	ldr	r3, [pc, #320]	@ (800aaa0 <__ieee754_log+0x368>)
 800a960:	2200      	movs	r2, #0
 800a962:	4650      	mov	r0, sl
 800a964:	4659      	mov	r1, fp
 800a966:	f7f5 fe0f 	bl	8000588 <__aeabi_dmul>
 800a96a:	4652      	mov	r2, sl
 800a96c:	465b      	mov	r3, fp
 800a96e:	f7f5 fe0b 	bl	8000588 <__aeabi_dmul>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4606      	mov	r6, r0
 800a978:	460f      	mov	r7, r1
 800a97a:	4640      	mov	r0, r8
 800a97c:	4649      	mov	r1, r9
 800a97e:	f7f5 fc4d 	bl	800021c <__adddf3>
 800a982:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a986:	f7f5 fdff 	bl	8000588 <__aeabi_dmul>
 800a98a:	4680      	mov	r8, r0
 800a98c:	4689      	mov	r9, r1
 800a98e:	b964      	cbnz	r4, 800a9aa <__ieee754_log+0x272>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4630      	mov	r0, r6
 800a996:	4639      	mov	r1, r7
 800a998:	f7f5 fc3e 	bl	8000218 <__aeabi_dsub>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	4659      	mov	r1, fp
 800a9a4:	f7f5 fc38 	bl	8000218 <__aeabi_dsub>
 800a9a8:	e6da      	b.n	800a760 <__ieee754_log+0x28>
 800a9aa:	a323      	add	r3, pc, #140	@ (adr r3, 800aa38 <__ieee754_log+0x300>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9b4:	f7f5 fde8 	bl	8000588 <__aeabi_dmul>
 800a9b8:	a321      	add	r3, pc, #132	@ (adr r3, 800aa40 <__ieee754_log+0x308>)
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	4604      	mov	r4, r0
 800a9c0:	460d      	mov	r5, r1
 800a9c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9c6:	f7f5 fddf 	bl	8000588 <__aeabi_dmul>
 800a9ca:	4642      	mov	r2, r8
 800a9cc:	464b      	mov	r3, r9
 800a9ce:	f7f5 fc25 	bl	800021c <__adddf3>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	4639      	mov	r1, r7
 800a9da:	f7f5 fc1d 	bl	8000218 <__aeabi_dsub>
 800a9de:	4652      	mov	r2, sl
 800a9e0:	465b      	mov	r3, fp
 800a9e2:	f7f5 fc19 	bl	8000218 <__aeabi_dsub>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	e7d9      	b.n	800a9a4 <__ieee754_log+0x26c>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	4650      	mov	r0, sl
 800a9f6:	4659      	mov	r1, fp
 800a9f8:	f7f5 fc0e 	bl	8000218 <__aeabi_dsub>
 800a9fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa00:	f7f5 fdc2 	bl	8000588 <__aeabi_dmul>
 800aa04:	4606      	mov	r6, r0
 800aa06:	460f      	mov	r7, r1
 800aa08:	2c00      	cmp	r4, #0
 800aa0a:	f43f af25 	beq.w	800a858 <__ieee754_log+0x120>
 800aa0e:	a30a      	add	r3, pc, #40	@ (adr r3, 800aa38 <__ieee754_log+0x300>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa18:	f7f5 fdb6 	bl	8000588 <__aeabi_dmul>
 800aa1c:	a308      	add	r3, pc, #32	@ (adr r3, 800aa40 <__ieee754_log+0x308>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	4604      	mov	r4, r0
 800aa24:	460d      	mov	r5, r1
 800aa26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa2a:	e729      	b.n	800a880 <__ieee754_log+0x148>
 800aa2c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800aa88 <__ieee754_log+0x350>
 800aa30:	e698      	b.n	800a764 <__ieee754_log+0x2c>
 800aa32:	bf00      	nop
 800aa34:	f3af 8000 	nop.w
 800aa38:	fee00000 	.word	0xfee00000
 800aa3c:	3fe62e42 	.word	0x3fe62e42
 800aa40:	35793c76 	.word	0x35793c76
 800aa44:	3dea39ef 	.word	0x3dea39ef
 800aa48:	55555555 	.word	0x55555555
 800aa4c:	3fd55555 	.word	0x3fd55555
 800aa50:	df3e5244 	.word	0xdf3e5244
 800aa54:	3fc2f112 	.word	0x3fc2f112
 800aa58:	96cb03de 	.word	0x96cb03de
 800aa5c:	3fc74664 	.word	0x3fc74664
 800aa60:	94229359 	.word	0x94229359
 800aa64:	3fd24924 	.word	0x3fd24924
 800aa68:	55555593 	.word	0x55555593
 800aa6c:	3fe55555 	.word	0x3fe55555
 800aa70:	d078c69f 	.word	0xd078c69f
 800aa74:	3fc39a09 	.word	0x3fc39a09
 800aa78:	1d8e78af 	.word	0x1d8e78af
 800aa7c:	3fcc71c5 	.word	0x3fcc71c5
 800aa80:	9997fa04 	.word	0x9997fa04
 800aa84:	3fd99999 	.word	0x3fd99999
	...
 800aa90:	c3500000 	.word	0xc3500000
 800aa94:	43500000 	.word	0x43500000
 800aa98:	7fefffff 	.word	0x7fefffff
 800aa9c:	3ff00000 	.word	0x3ff00000
 800aaa0:	3fe00000 	.word	0x3fe00000

0800aaa4 <_init>:
 800aaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa6:	bf00      	nop
 800aaa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaaa:	bc08      	pop	{r3}
 800aaac:	469e      	mov	lr, r3
 800aaae:	4770      	bx	lr

0800aab0 <_fini>:
 800aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab2:	bf00      	nop
 800aab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab6:	bc08      	pop	{r3}
 800aab8:	469e      	mov	lr, r3
 800aaba:	4770      	bx	lr
