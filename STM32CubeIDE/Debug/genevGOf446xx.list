
genevGOf446xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009778  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08009948  08009948  0000a948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c3c  08009c3c  0000b5d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009c3c  08009c3c  0000ac3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c44  08009c44  0000b5d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c44  08009c44  0000ac44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c48  08009c48  0000ac48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005d4  20000000  08009c4c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b44  200005d8  0800a220  0000b5d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000511c  0800a220  0000c11c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b5d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004fd38  00000000  00000000  0000b604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a514  00000000  00000000  0005b33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002350  00000000  00000000  00065850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002ffe  00000000  00000000  00067ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff04  00000000  00000000  0006ab9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004c024  00000000  00000000  0009aaa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb2c2  00000000  00000000  000e6ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e1d88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb0  00000000  00000000  001e1dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0001783f  00000000  00000000  001e7d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  001ff5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200005d8 	.word	0x200005d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009930 	.word	0x08009930

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200005dc 	.word	0x200005dc
 800020c:	08009930 	.word	0x08009930

08000210 <__aeabi_dmul>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000216:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800021a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800021e:	bf1d      	ittte	ne
 8000220:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000224:	ea94 0f0c 	teqne	r4, ip
 8000228:	ea95 0f0c 	teqne	r5, ip
 800022c:	f000 f8de 	bleq	80003ec <__aeabi_dmul+0x1dc>
 8000230:	442c      	add	r4, r5
 8000232:	ea81 0603 	eor.w	r6, r1, r3
 8000236:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800023a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800023e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000242:	bf18      	it	ne
 8000244:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000248:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800024c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000250:	d038      	beq.n	80002c4 <__aeabi_dmul+0xb4>
 8000252:	fba0 ce02 	umull	ip, lr, r0, r2
 8000256:	f04f 0500 	mov.w	r5, #0
 800025a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800025e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000262:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000266:	f04f 0600 	mov.w	r6, #0
 800026a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800026e:	f09c 0f00 	teq	ip, #0
 8000272:	bf18      	it	ne
 8000274:	f04e 0e01 	orrne.w	lr, lr, #1
 8000278:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800027c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000280:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000284:	d204      	bcs.n	8000290 <__aeabi_dmul+0x80>
 8000286:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800028a:	416d      	adcs	r5, r5
 800028c:	eb46 0606 	adc.w	r6, r6, r6
 8000290:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000294:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000298:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800029c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002a4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a8:	bf88      	it	hi
 80002aa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ae:	d81e      	bhi.n	80002ee <__aeabi_dmul+0xde>
 80002b0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002b4:	bf08      	it	eq
 80002b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ba:	f150 0000 	adcs.w	r0, r0, #0
 80002be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c8:	ea46 0101 	orr.w	r1, r6, r1
 80002cc:	ea40 0002 	orr.w	r0, r0, r2
 80002d0:	ea81 0103 	eor.w	r1, r1, r3
 80002d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d8:	bfc2      	ittt	gt
 80002da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	popgt	{r4, r5, r6, pc}
 80002e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e8:	f04f 0e00 	mov.w	lr, #0
 80002ec:	3c01      	subs	r4, #1
 80002ee:	f300 80ab 	bgt.w	8000448 <__aeabi_dmul+0x238>
 80002f2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002f6:	bfde      	ittt	le
 80002f8:	2000      	movle	r0, #0
 80002fa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002fe:	bd70      	pople	{r4, r5, r6, pc}
 8000300:	f1c4 0400 	rsb	r4, r4, #0
 8000304:	3c20      	subs	r4, #32
 8000306:	da35      	bge.n	8000374 <__aeabi_dmul+0x164>
 8000308:	340c      	adds	r4, #12
 800030a:	dc1b      	bgt.n	8000344 <__aeabi_dmul+0x134>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f305 	lsl.w	r3, r0, r5
 8000318:	fa20 f004 	lsr.w	r0, r0, r4
 800031c:	fa01 f205 	lsl.w	r2, r1, r5
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000328:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800032c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000330:	fa21 f604 	lsr.w	r6, r1, r4
 8000334:	eb42 0106 	adc.w	r1, r2, r6
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 040c 	rsb	r4, r4, #12
 8000348:	f1c4 0520 	rsb	r5, r4, #32
 800034c:	fa00 f304 	lsl.w	r3, r0, r4
 8000350:	fa20 f005 	lsr.w	r0, r0, r5
 8000354:	fa01 f204 	lsl.w	r2, r1, r4
 8000358:	ea40 0002 	orr.w	r0, r0, r2
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f1c4 0520 	rsb	r5, r4, #32
 8000378:	fa00 f205 	lsl.w	r2, r0, r5
 800037c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000380:	fa20 f304 	lsr.w	r3, r0, r4
 8000384:	fa01 f205 	lsl.w	r2, r1, r5
 8000388:	ea43 0302 	orr.w	r3, r3, r2
 800038c:	fa21 f004 	lsr.w	r0, r1, r4
 8000390:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	fa21 f204 	lsr.w	r2, r1, r4
 8000398:	ea20 0002 	bic.w	r0, r0, r2
 800039c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a4:	bf08      	it	eq
 80003a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f094 0f00 	teq	r4, #0
 80003b0:	d10f      	bne.n	80003d2 <__aeabi_dmul+0x1c2>
 80003b2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003b6:	0040      	lsls	r0, r0, #1
 80003b8:	eb41 0101 	adc.w	r1, r1, r1
 80003bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3c01      	subeq	r4, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1a6>
 80003c6:	ea41 0106 	orr.w	r1, r1, r6
 80003ca:	f095 0f00 	teq	r5, #0
 80003ce:	bf18      	it	ne
 80003d0:	4770      	bxne	lr
 80003d2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003d6:	0052      	lsls	r2, r2, #1
 80003d8:	eb43 0303 	adc.w	r3, r3, r3
 80003dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3d01      	subeq	r5, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1c6>
 80003e6:	ea43 0306 	orr.w	r3, r3, r6
 80003ea:	4770      	bx	lr
 80003ec:	ea94 0f0c 	teq	r4, ip
 80003f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003f4:	bf18      	it	ne
 80003f6:	ea95 0f0c 	teqne	r5, ip
 80003fa:	d00c      	beq.n	8000416 <__aeabi_dmul+0x206>
 80003fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000400:	bf18      	it	ne
 8000402:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000406:	d1d1      	bne.n	80003ac <__aeabi_dmul+0x19c>
 8000408:	ea81 0103 	eor.w	r1, r1, r3
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	f04f 0000 	mov.w	r0, #0
 8000414:	bd70      	pop	{r4, r5, r6, pc}
 8000416:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800041a:	bf06      	itte	eq
 800041c:	4610      	moveq	r0, r2
 800041e:	4619      	moveq	r1, r3
 8000420:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000424:	d019      	beq.n	800045a <__aeabi_dmul+0x24a>
 8000426:	ea94 0f0c 	teq	r4, ip
 800042a:	d102      	bne.n	8000432 <__aeabi_dmul+0x222>
 800042c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000430:	d113      	bne.n	800045a <__aeabi_dmul+0x24a>
 8000432:	ea95 0f0c 	teq	r5, ip
 8000436:	d105      	bne.n	8000444 <__aeabi_dmul+0x234>
 8000438:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800043c:	bf1c      	itt	ne
 800043e:	4610      	movne	r0, r2
 8000440:	4619      	movne	r1, r3
 8000442:	d10a      	bne.n	800045a <__aeabi_dmul+0x24a>
 8000444:	ea81 0103 	eor.w	r1, r1, r3
 8000448:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800044c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd70      	pop	{r4, r5, r6, pc}
 800045a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800045e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000462:	bd70      	pop	{r4, r5, r6, pc}

08000464 <__aeabi_drsub>:
 8000464:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e002      	b.n	8000470 <__adddf3>
 800046a:	bf00      	nop

0800046c <__aeabi_dsub>:
 800046c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000470 <__adddf3>:
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000476:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800047a:	ea94 0f05 	teq	r4, r5
 800047e:	bf08      	it	eq
 8000480:	ea90 0f02 	teqeq	r0, r2
 8000484:	bf1f      	itttt	ne
 8000486:	ea54 0c00 	orrsne.w	ip, r4, r0
 800048a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800048e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000492:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000496:	f000 80e2 	beq.w	800065e <__adddf3+0x1ee>
 800049a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800049e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004a2:	bfb8      	it	lt
 80004a4:	426d      	neglt	r5, r5
 80004a6:	dd0c      	ble.n	80004c2 <__adddf3+0x52>
 80004a8:	442c      	add	r4, r5
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	ea82 0000 	eor.w	r0, r2, r0
 80004b6:	ea83 0101 	eor.w	r1, r3, r1
 80004ba:	ea80 0202 	eor.w	r2, r0, r2
 80004be:	ea81 0303 	eor.w	r3, r1, r3
 80004c2:	2d36      	cmp	r5, #54	@ 0x36
 80004c4:	bf88      	it	hi
 80004c6:	bd30      	pophi	{r4, r5, pc}
 80004c8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d8:	d002      	beq.n	80004e0 <__adddf3+0x70>
 80004da:	4240      	negs	r0, r0
 80004dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ec:	d002      	beq.n	80004f4 <__adddf3+0x84>
 80004ee:	4252      	negs	r2, r2
 80004f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004f4:	ea94 0f05 	teq	r4, r5
 80004f8:	f000 80a7 	beq.w	800064a <__adddf3+0x1da>
 80004fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000500:	f1d5 0e20 	rsbs	lr, r5, #32
 8000504:	db0d      	blt.n	8000522 <__adddf3+0xb2>
 8000506:	fa02 fc0e 	lsl.w	ip, r2, lr
 800050a:	fa22 f205 	lsr.w	r2, r2, r5
 800050e:	1880      	adds	r0, r0, r2
 8000510:	f141 0100 	adc.w	r1, r1, #0
 8000514:	fa03 f20e 	lsl.w	r2, r3, lr
 8000518:	1880      	adds	r0, r0, r2
 800051a:	fa43 f305 	asr.w	r3, r3, r5
 800051e:	4159      	adcs	r1, r3
 8000520:	e00e      	b.n	8000540 <__adddf3+0xd0>
 8000522:	f1a5 0520 	sub.w	r5, r5, #32
 8000526:	f10e 0e20 	add.w	lr, lr, #32
 800052a:	2a01      	cmp	r2, #1
 800052c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000530:	bf28      	it	cs
 8000532:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000536:	fa43 f305 	asr.w	r3, r3, r5
 800053a:	18c0      	adds	r0, r0, r3
 800053c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	d507      	bpl.n	8000556 <__adddf3+0xe6>
 8000546:	f04f 0e00 	mov.w	lr, #0
 800054a:	f1dc 0c00 	rsbs	ip, ip, #0
 800054e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000552:	eb6e 0101 	sbc.w	r1, lr, r1
 8000556:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800055a:	d31b      	bcc.n	8000594 <__adddf3+0x124>
 800055c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000560:	d30c      	bcc.n	800057c <__adddf3+0x10c>
 8000562:	0849      	lsrs	r1, r1, #1
 8000564:	ea5f 0030 	movs.w	r0, r0, rrx
 8000568:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800056c:	f104 0401 	add.w	r4, r4, #1
 8000570:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000574:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000578:	f080 809a 	bcs.w	80006b0 <__adddf3+0x240>
 800057c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	ea41 0105 	orr.w	r1, r1, r5
 8000592:	bd30      	pop	{r4, r5, pc}
 8000594:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000598:	4140      	adcs	r0, r0
 800059a:	eb41 0101 	adc.w	r1, r1, r1
 800059e:	3c01      	subs	r4, #1
 80005a0:	bf28      	it	cs
 80005a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005a6:	d2e9      	bcs.n	800057c <__adddf3+0x10c>
 80005a8:	f091 0f00 	teq	r1, #0
 80005ac:	bf04      	itt	eq
 80005ae:	4601      	moveq	r1, r0
 80005b0:	2000      	moveq	r0, #0
 80005b2:	fab1 f381 	clz	r3, r1
 80005b6:	bf08      	it	eq
 80005b8:	3320      	addeq	r3, #32
 80005ba:	f1a3 030b 	sub.w	r3, r3, #11
 80005be:	f1b3 0220 	subs.w	r2, r3, #32
 80005c2:	da0c      	bge.n	80005de <__adddf3+0x16e>
 80005c4:	320c      	adds	r2, #12
 80005c6:	dd08      	ble.n	80005da <__adddf3+0x16a>
 80005c8:	f102 0c14 	add.w	ip, r2, #20
 80005cc:	f1c2 020c 	rsb	r2, r2, #12
 80005d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005d4:	fa21 f102 	lsr.w	r1, r1, r2
 80005d8:	e00c      	b.n	80005f4 <__adddf3+0x184>
 80005da:	f102 0214 	add.w	r2, r2, #20
 80005de:	bfd8      	it	le
 80005e0:	f1c2 0c20 	rsble	ip, r2, #32
 80005e4:	fa01 f102 	lsl.w	r1, r1, r2
 80005e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ec:	bfdc      	itt	le
 80005ee:	ea41 010c 	orrle.w	r1, r1, ip
 80005f2:	4090      	lslle	r0, r2
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	bfa2      	ittt	ge
 80005f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005fc:	4329      	orrge	r1, r5
 80005fe:	bd30      	popge	{r4, r5, pc}
 8000600:	ea6f 0404 	mvn.w	r4, r4
 8000604:	3c1f      	subs	r4, #31
 8000606:	da1c      	bge.n	8000642 <__adddf3+0x1d2>
 8000608:	340c      	adds	r4, #12
 800060a:	dc0e      	bgt.n	800062a <__adddf3+0x1ba>
 800060c:	f104 0414 	add.w	r4, r4, #20
 8000610:	f1c4 0220 	rsb	r2, r4, #32
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f302 	lsl.w	r3, r1, r2
 800061c:	ea40 0003 	orr.w	r0, r0, r3
 8000620:	fa21 f304 	lsr.w	r3, r1, r4
 8000624:	ea45 0103 	orr.w	r1, r5, r3
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f1c4 040c 	rsb	r4, r4, #12
 800062e:	f1c4 0220 	rsb	r2, r4, #32
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 f304 	lsl.w	r3, r1, r4
 800063a:	ea40 0003 	orr.w	r0, r0, r3
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	fa21 f004 	lsr.w	r0, r1, r4
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f094 0f00 	teq	r4, #0
 800064e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000652:	bf06      	itte	eq
 8000654:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000658:	3401      	addeq	r4, #1
 800065a:	3d01      	subne	r5, #1
 800065c:	e74e      	b.n	80004fc <__adddf3+0x8c>
 800065e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000662:	bf18      	it	ne
 8000664:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000668:	d029      	beq.n	80006be <__adddf3+0x24e>
 800066a:	ea94 0f05 	teq	r4, r5
 800066e:	bf08      	it	eq
 8000670:	ea90 0f02 	teqeq	r0, r2
 8000674:	d005      	beq.n	8000682 <__adddf3+0x212>
 8000676:	ea54 0c00 	orrs.w	ip, r4, r0
 800067a:	bf04      	itt	eq
 800067c:	4619      	moveq	r1, r3
 800067e:	4610      	moveq	r0, r2
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	ea91 0f03 	teq	r1, r3
 8000686:	bf1e      	ittt	ne
 8000688:	2100      	movne	r1, #0
 800068a:	2000      	movne	r0, #0
 800068c:	bd30      	popne	{r4, r5, pc}
 800068e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000692:	d105      	bne.n	80006a0 <__adddf3+0x230>
 8000694:	0040      	lsls	r0, r0, #1
 8000696:	4149      	adcs	r1, r1
 8000698:	bf28      	it	cs
 800069a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd30      	pop	{r4, r5, pc}
 80006a0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006a4:	bf3c      	itt	cc
 80006a6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006aa:	bd30      	popcc	{r4, r5, pc}
 80006ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b8:	f04f 0000 	mov.w	r0, #0
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf1a      	itte	ne
 80006c4:	4619      	movne	r1, r3
 80006c6:	4610      	movne	r0, r2
 80006c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006cc:	bf1c      	itt	ne
 80006ce:	460b      	movne	r3, r1
 80006d0:	4602      	movne	r2, r0
 80006d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006d6:	bf06      	itte	eq
 80006d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006dc:	ea91 0f03 	teqeq	r1, r3
 80006e0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	bf00      	nop

080006e8 <__aeabi_ui2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fc:	f04f 0500 	mov.w	r5, #0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e750      	b.n	80005a8 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_i2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000720:	bf48      	it	mi
 8000722:	4240      	negmi	r0, r0
 8000724:	f04f 0100 	mov.w	r1, #0
 8000728:	e73e      	b.n	80005a8 <__adddf3+0x138>
 800072a:	bf00      	nop

0800072c <__aeabi_f2d>:
 800072c:	0042      	lsls	r2, r0, #1
 800072e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000732:	ea4f 0131 	mov.w	r1, r1, rrx
 8000736:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800073a:	bf1f      	itttt	ne
 800073c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000740:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000744:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000748:	4770      	bxne	lr
 800074a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800074e:	bf08      	it	eq
 8000750:	4770      	bxeq	lr
 8000752:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000756:	bf04      	itt	eq
 8000758:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800075c:	4770      	bxeq	lr
 800075e:	b530      	push	{r4, r5, lr}
 8000760:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	e71c      	b.n	80005a8 <__adddf3+0x138>
 800076e:	bf00      	nop

08000770 <__aeabi_ul2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f04f 0500 	mov.w	r5, #0
 800077e:	e00a      	b.n	8000796 <__aeabi_l2d+0x16>

08000780 <__aeabi_l2d>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800078e:	d502      	bpl.n	8000796 <__aeabi_l2d+0x16>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800079a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007a2:	f43f aed8 	beq.w	8000556 <__adddf3+0xe6>
 80007a6:	f04f 0203 	mov.w	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007be:	f1c2 0320 	rsb	r3, r2, #32
 80007c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007c6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ce:	ea40 000e 	orr.w	r0, r0, lr
 80007d2:	fa21 f102 	lsr.w	r1, r1, r2
 80007d6:	4414      	add	r4, r2
 80007d8:	e6bd      	b.n	8000556 <__adddf3+0xe6>
 80007da:	bf00      	nop

080007dc <__aeabi_d2f>:
 80007dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007e4:	bf24      	itt	cs
 80007e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007ee:	d90d      	bls.n	800080c <__aeabi_d2f+0x30>
 80007f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000800:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000804:	bf08      	it	eq
 8000806:	f020 0001 	biceq.w	r0, r0, #1
 800080a:	4770      	bx	lr
 800080c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000810:	d121      	bne.n	8000856 <__aeabi_d2f+0x7a>
 8000812:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000816:	bfbc      	itt	lt
 8000818:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800081c:	4770      	bxlt	lr
 800081e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000822:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000826:	f1c2 0218 	rsb	r2, r2, #24
 800082a:	f1c2 0c20 	rsb	ip, r2, #32
 800082e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000832:	fa20 f002 	lsr.w	r0, r0, r2
 8000836:	bf18      	it	ne
 8000838:	f040 0001 	orrne.w	r0, r0, #1
 800083c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000840:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000844:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000848:	ea40 000c 	orr.w	r0, r0, ip
 800084c:	fa23 f302 	lsr.w	r3, r3, r2
 8000850:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000854:	e7cc      	b.n	80007f0 <__aeabi_d2f+0x14>
 8000856:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800085a:	d107      	bne.n	800086c <__aeabi_d2f+0x90>
 800085c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000860:	bf1e      	ittt	ne
 8000862:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000866:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800086a:	4770      	bxne	lr
 800086c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000870:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000874:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96a 	b.w	8000b68 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	460c      	mov	r4, r1
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d14e      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008b8:	4694      	mov	ip, r2
 80008ba:	458c      	cmp	ip, r1
 80008bc:	4686      	mov	lr, r0
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	d962      	bls.n	800098a <__udivmoddi4+0xde>
 80008c4:	b14a      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c6:	f1c2 0320 	rsb	r3, r2, #32
 80008ca:	4091      	lsls	r1, r2
 80008cc:	fa20 f303 	lsr.w	r3, r0, r3
 80008d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d4:	4319      	orrs	r1, r3
 80008d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008de:	fa1f f68c 	uxth.w	r6, ip
 80008e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008ea:	fb07 1114 	mls	r1, r7, r4, r1
 80008ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f2:	fb04 f106 	mul.w	r1, r4, r6
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000902:	f080 8112 	bcs.w	8000b2a <__udivmoddi4+0x27e>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 810f 	bls.w	8000b2a <__udivmoddi4+0x27e>
 800090c:	3c02      	subs	r4, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a59      	subs	r1, r3, r1
 8000912:	fa1f f38e 	uxth.w	r3, lr
 8000916:	fbb1 f0f7 	udiv	r0, r1, r7
 800091a:	fb07 1110 	mls	r1, r7, r0, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb00 f606 	mul.w	r6, r0, r6
 8000926:	429e      	cmp	r6, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x94>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000932:	f080 80fc 	bcs.w	8000b2e <__udivmoddi4+0x282>
 8000936:	429e      	cmp	r6, r3
 8000938:	f240 80f9 	bls.w	8000b2e <__udivmoddi4+0x282>
 800093c:	4463      	add	r3, ip
 800093e:	3802      	subs	r0, #2
 8000940:	1b9b      	subs	r3, r3, r6
 8000942:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000946:	2100      	movs	r1, #0
 8000948:	b11d      	cbz	r5, 8000952 <__udivmoddi4+0xa6>
 800094a:	40d3      	lsrs	r3, r2
 800094c:	2200      	movs	r2, #0
 800094e:	e9c5 3200 	strd	r3, r2, [r5]
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d905      	bls.n	8000966 <__udivmoddi4+0xba>
 800095a:	b10d      	cbz	r5, 8000960 <__udivmoddi4+0xb4>
 800095c:	e9c5 0100 	strd	r0, r1, [r5]
 8000960:	2100      	movs	r1, #0
 8000962:	4608      	mov	r0, r1
 8000964:	e7f5      	b.n	8000952 <__udivmoddi4+0xa6>
 8000966:	fab3 f183 	clz	r1, r3
 800096a:	2900      	cmp	r1, #0
 800096c:	d146      	bne.n	80009fc <__udivmoddi4+0x150>
 800096e:	42a3      	cmp	r3, r4
 8000970:	d302      	bcc.n	8000978 <__udivmoddi4+0xcc>
 8000972:	4290      	cmp	r0, r2
 8000974:	f0c0 80f0 	bcc.w	8000b58 <__udivmoddi4+0x2ac>
 8000978:	1a86      	subs	r6, r0, r2
 800097a:	eb64 0303 	sbc.w	r3, r4, r3
 800097e:	2001      	movs	r0, #1
 8000980:	2d00      	cmp	r5, #0
 8000982:	d0e6      	beq.n	8000952 <__udivmoddi4+0xa6>
 8000984:	e9c5 6300 	strd	r6, r3, [r5]
 8000988:	e7e3      	b.n	8000952 <__udivmoddi4+0xa6>
 800098a:	2a00      	cmp	r2, #0
 800098c:	f040 8090 	bne.w	8000ab0 <__udivmoddi4+0x204>
 8000990:	eba1 040c 	sub.w	r4, r1, ip
 8000994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000998:	fa1f f78c 	uxth.w	r7, ip
 800099c:	2101      	movs	r1, #1
 800099e:	fbb4 f6f8 	udiv	r6, r4, r8
 80009a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009a6:	fb08 4416 	mls	r4, r8, r6, r4
 80009aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ae:	fb07 f006 	mul.w	r0, r7, r6
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x11c>
 80009b6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x11a>
 80009c0:	4298      	cmp	r0, r3
 80009c2:	f200 80cd 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 80009c6:	4626      	mov	r6, r4
 80009c8:	1a1c      	subs	r4, r3, r0
 80009ca:	fa1f f38e 	uxth.w	r3, lr
 80009ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80009d2:	fb08 4410 	mls	r4, r8, r0, r4
 80009d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009da:	fb00 f707 	mul.w	r7, r0, r7
 80009de:	429f      	cmp	r7, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x148>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009ea:	d202      	bcs.n	80009f2 <__udivmoddi4+0x146>
 80009ec:	429f      	cmp	r7, r3
 80009ee:	f200 80b0 	bhi.w	8000b52 <__udivmoddi4+0x2a6>
 80009f2:	4620      	mov	r0, r4
 80009f4:	1bdb      	subs	r3, r3, r7
 80009f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fa:	e7a5      	b.n	8000948 <__udivmoddi4+0x9c>
 80009fc:	f1c1 0620 	rsb	r6, r1, #32
 8000a00:	408b      	lsls	r3, r1
 8000a02:	fa22 f706 	lsr.w	r7, r2, r6
 8000a06:	431f      	orrs	r7, r3
 8000a08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a10:	ea43 030c 	orr.w	r3, r3, ip
 8000a14:	40f4      	lsrs	r4, r6
 8000a16:	fa00 f801 	lsl.w	r8, r0, r1
 8000a1a:	0c38      	lsrs	r0, r7, #16
 8000a1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a20:	fbb4 fef0 	udiv	lr, r4, r0
 8000a24:	fa1f fc87 	uxth.w	ip, r7
 8000a28:	fb00 441e 	mls	r4, r0, lr, r4
 8000a2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a30:	fb0e f90c 	mul.w	r9, lr, ip
 8000a34:	45a1      	cmp	r9, r4
 8000a36:	fa02 f201 	lsl.w	r2, r2, r1
 8000a3a:	d90a      	bls.n	8000a52 <__udivmoddi4+0x1a6>
 8000a3c:	193c      	adds	r4, r7, r4
 8000a3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a42:	f080 8084 	bcs.w	8000b4e <__udivmoddi4+0x2a2>
 8000a46:	45a1      	cmp	r9, r4
 8000a48:	f240 8081 	bls.w	8000b4e <__udivmoddi4+0x2a2>
 8000a4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a50:	443c      	add	r4, r7
 8000a52:	eba4 0409 	sub.w	r4, r4, r9
 8000a56:	fa1f f983 	uxth.w	r9, r3
 8000a5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a6a:	45a4      	cmp	ip, r4
 8000a6c:	d907      	bls.n	8000a7e <__udivmoddi4+0x1d2>
 8000a6e:	193c      	adds	r4, r7, r4
 8000a70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a74:	d267      	bcs.n	8000b46 <__udivmoddi4+0x29a>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	d965      	bls.n	8000b46 <__udivmoddi4+0x29a>
 8000a7a:	3b02      	subs	r3, #2
 8000a7c:	443c      	add	r4, r7
 8000a7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a82:	fba0 9302 	umull	r9, r3, r0, r2
 8000a86:	eba4 040c 	sub.w	r4, r4, ip
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	46ce      	mov	lr, r9
 8000a8e:	469c      	mov	ip, r3
 8000a90:	d351      	bcc.n	8000b36 <__udivmoddi4+0x28a>
 8000a92:	d04e      	beq.n	8000b32 <__udivmoddi4+0x286>
 8000a94:	b155      	cbz	r5, 8000aac <__udivmoddi4+0x200>
 8000a96:	ebb8 030e 	subs.w	r3, r8, lr
 8000a9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000aa2:	40cb      	lsrs	r3, r1
 8000aa4:	431e      	orrs	r6, r3
 8000aa6:	40cc      	lsrs	r4, r1
 8000aa8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aac:	2100      	movs	r1, #0
 8000aae:	e750      	b.n	8000952 <__udivmoddi4+0xa6>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	430c      	orrs	r4, r1
 8000ac4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000acc:	fa1f f78c 	uxth.w	r7, ip
 8000ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f107 	mul.w	r1, r0, r7
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x24c>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aee:	d22c      	bcs.n	8000b4a <__udivmoddi4+0x29e>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d92a      	bls.n	8000b4a <__udivmoddi4+0x29e>
 8000af4:	3802      	subs	r0, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b00:	fb08 3311 	mls	r3, r8, r1, r3
 8000b04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b08:	fb01 f307 	mul.w	r3, r1, r7
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x276>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b18:	d213      	bcs.n	8000b42 <__udivmoddi4+0x296>
 8000b1a:	42a3      	cmp	r3, r4
 8000b1c:	d911      	bls.n	8000b42 <__udivmoddi4+0x296>
 8000b1e:	3902      	subs	r1, #2
 8000b20:	4464      	add	r4, ip
 8000b22:	1ae4      	subs	r4, r4, r3
 8000b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b28:	e739      	b.n	800099e <__udivmoddi4+0xf2>
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	e6f0      	b.n	8000910 <__udivmoddi4+0x64>
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e706      	b.n	8000940 <__udivmoddi4+0x94>
 8000b32:	45c8      	cmp	r8, r9
 8000b34:	d2ae      	bcs.n	8000a94 <__udivmoddi4+0x1e8>
 8000b36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b3e:	3801      	subs	r0, #1
 8000b40:	e7a8      	b.n	8000a94 <__udivmoddi4+0x1e8>
 8000b42:	4631      	mov	r1, r6
 8000b44:	e7ed      	b.n	8000b22 <__udivmoddi4+0x276>
 8000b46:	4603      	mov	r3, r0
 8000b48:	e799      	b.n	8000a7e <__udivmoddi4+0x1d2>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e7d4      	b.n	8000af8 <__udivmoddi4+0x24c>
 8000b4e:	46d6      	mov	lr, sl
 8000b50:	e77f      	b.n	8000a52 <__udivmoddi4+0x1a6>
 8000b52:	4463      	add	r3, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	e74d      	b.n	80009f4 <__udivmoddi4+0x148>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e70f      	b.n	8000980 <__udivmoddi4+0xd4>
 8000b60:	3e02      	subs	r6, #2
 8000b62:	4463      	add	r3, ip
 8000b64:	e730      	b.n	80009c8 <__udivmoddi4+0x11c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <powerModeInit>:

static bool POWER_ON = true;

void powerModeInit()
{
	go_powerOnRegister(&POWER_ON);
 8000b6c:	4801      	ldr	r0, [pc, #4]	@ (8000b74 <powerModeInit+0x8>)
 8000b6e:	f000 b957 	b.w	8000e20 <go_powerOnRegister>
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000

08000b78 <changePowerMode>:
}

void changePowerMode()
{
	if(POWER_ON == true)
 8000b78:	4b02      	ldr	r3, [pc, #8]	@ (8000b84 <changePowerMode+0xc>)
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	b10a      	cbz	r2, 8000b82 <changePowerMode+0xa>
	{
		POWER_ON = false;
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	4770      	bx	lr
 8000b84:	20000000 	.word	0x20000000

08000b88 <gotoSLEEP>:

void gotoSLEEP()
{
	ShutDownTask();
 8000b88:	f008 bcd2 	b.w	8009530 <ShutDownTask>

08000b8c <wakeUp>:
}

void wakeUp()
{
	bootStart();
 8000b8c:	f008 bcea 	b.w	8009564 <bootStart>

08000b90 <brake_and_throttle_init>:
brakeAndThrottle_t ptr_brakeAndThrottle;
int16_t torque = 0;

void brake_and_throttle_init()
{
	ptr_brakeAndThrottle.IQ_applied = 0;
 8000b90:	4b02      	ldr	r3, [pc, #8]	@ (8000b9c <brake_and_throttle_init+0xc>)
 8000b92:	2200      	movs	r2, #0
	ptr_brakeAndThrottle.throttlePercent = 0;
	ptr_brakeAndThrottle.throttleTriggered = false;
 8000b94:	e9c3 2200 	strd	r2, r2, [r3]
	ptr_brakeAndThrottle.brakeTriggered   = false;
	ptr_brakeAndThrottle.allowable_rpm = 0;
 8000b98:	609a      	str	r2, [r3, #8]
	ptr_brakeAndThrottle.speed_mode_IQmax = 0;
	ptr_brakeAndThrottle.ramp_rate  = 0;
}
 8000b9a:	4770      	bx	lr
 8000b9c:	200005f8 	.word	0x200005f8

08000ba0 <setIQ>:

void setIQ(int16_t IQ)
{
	ptr_brakeAndThrottle.IQ_applied = IQ;
 8000ba0:	4b01      	ldr	r3, [pc, #4]	@ (8000ba8 <setIQ+0x8>)
 8000ba2:	8018      	strh	r0, [r3, #0]
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200005f8 	.word	0x200005f8

08000bac <set_ThrottlePercent>:
	return ptr_brakeAndThrottle.IQ_applied;
}

void set_ThrottlePercent(uint16_t percentage)
{
	ptr_brakeAndThrottle.throttlePercent = percentage;
 8000bac:	4b01      	ldr	r3, [pc, #4]	@ (8000bb4 <set_ThrottlePercent+0x8>)
 8000bae:	8058      	strh	r0, [r3, #2]
}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200005f8 	.word	0x200005f8

08000bb8 <throttleSignalInput>:
	return ptr_brakeAndThrottle.throttlePercent;
}

void throttleSignalInput()
{
	accelerateIQMotor(ptr_brakeAndThrottle.IQ_applied,0);
 8000bb8:	4b02      	ldr	r3, [pc, #8]	@ (8000bc4 <throttleSignalInput+0xc>)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000bc0:	f008 bc94 	b.w	80094ec <accelerateIQMotor>
 8000bc4:	200005f8 	.word	0x200005f8

08000bc8 <refreshThrottleStatus>:
	return ptr_brakeAndThrottle.IQ_applied;
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <refreshThrottleStatus+0x14>)
 8000bca:	f9b3 2000 	ldrsh.w	r2, [r3]
#endif
}

void refreshThrottleStatus()
{
	if (getIQ() == 0)
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d001      	beq.n	8000bd6 <refreshThrottleStatus+0xe>
	{
		ptr_brakeAndThrottle.throttleTriggered = false;
	}
	else if(getIQ() > 0)
 8000bd2:	dd01      	ble.n	8000bd8 <refreshThrottleStatus+0x10>
	{
		ptr_brakeAndThrottle.throttleTriggered = true;
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	711a      	strb	r2, [r3, #4]
	}
}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	200005f8 	.word	0x200005f8

08000be0 <updateBrakeStatus>:
	return ptr_brakeAndThrottle.throttleTriggered;
}

void updateBrakeStatus(bool status)
{
	ptr_brakeAndThrottle.brakeTriggered = status;
 8000be0:	4b01      	ldr	r3, [pc, #4]	@ (8000be8 <updateBrakeStatus+0x8>)
 8000be2:	7158      	strb	r0, [r3, #5]
}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200005f8 	.word	0x200005f8

08000bec <getBrakeStatus>:

bool getBrakeStatus()
{
	return ptr_brakeAndThrottle.brakeTriggered;
 8000bec:	4b01      	ldr	r3, [pc, #4]	@ (8000bf4 <getBrakeStatus+0x8>)
}
 8000bee:	7958      	ldrb	r0, [r3, #5]
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200005f8 	.word	0x200005f8

08000bf8 <changeSpeedMode>:

void changeSpeedMode(int16_t speed_mode_IQmax, int16_t allowable_rpm, uint16_t ramp_rate)
{
	ptr_brakeAndThrottle.speed_mode_IQmax = speed_mode_IQmax;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	@ (8000c04 <changeSpeedMode+0xc>)
 8000bfa:	8118      	strh	r0, [r3, #8]
	ptr_brakeAndThrottle.allowable_rpm    = allowable_rpm;
 8000bfc:	80d9      	strh	r1, [r3, #6]
	ptr_brakeAndThrottle.ramp_rate        = ramp_rate;
 8000bfe:	815a      	strh	r2, [r3, #10]
}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200005f8 	.word	0x200005f8

08000c08 <get_ThrottleInformation>:
	return ptr_brakeAndThrottle.IQ_applied;
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <get_ThrottleInformation+0x10>)

int16_t Iq_applied = 0;
uint16_t Iq_Percentage = 0;
void get_ThrottleInformation()
{
    Iq_applied = getIQ();
 8000c0a:	4904      	ldr	r1, [pc, #16]	@ (8000c1c <get_ThrottleInformation+0x14>)
    Iq_Percentage = getThrottlePercent();
 8000c0c:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <get_ThrottleInformation+0x18>)
    Iq_applied = getIQ();
 8000c0e:	8818      	ldrh	r0, [r3, #0]
    Iq_Percentage = getThrottlePercent();
 8000c10:	885b      	ldrh	r3, [r3, #2]
    Iq_applied = getIQ();
 8000c12:	8008      	strh	r0, [r1, #0]
    Iq_Percentage = getThrottlePercent();
 8000c14:	8013      	strh	r3, [r2, #0]
}
 8000c16:	4770      	bx	lr
 8000c18:	200005f8 	.word	0x200005f8
 8000c1c:	200005f6 	.word	0x200005f6
 8000c20:	200005f4 	.word	0x200005f4

08000c24 <driveStop>:

void driveStop()
{
	motorStop();
 8000c24:	f008 bc6a 	b.w	80094fc <motorStop>

08000c28 <updateLightSensorStatus>:

uint8_t lightSensor = 0xFF;

void updateLightSensorStatus(uint8_t lightStatus)
{
    lightSensor = lightStatus;
 8000c28:	4b01      	ldr	r3, [pc, #4]	@ (8000c30 <updateLightSensorStatus+0x8>)
 8000c2a:	7018      	strb	r0, [r3, #0]
}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000001 	.word	0x20000001

08000c34 <getLightSensorStatus>:

uint8_t getLightSensorStatus()
{
	return lightSensor;
 8000c34:	4b01      	ldr	r3, [pc, #4]	@ (8000c3c <getLightSensorStatus+0x8>)
}
 8000c36:	7818      	ldrb	r0, [r3, #0]
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000001 	.word	0x20000001

08000c40 <motor_param_init>:

MOTOR ptrMotor;

void motor_param_init()
{
	ptrMotor.SPEED = 0;
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <motor_param_init+0x10>)
 8000c42:	2200      	movs	r2, #0
	ptrMotor.CURRENT = 0;
 8000c44:	2100      	movs	r1, #0
	ptrMotor.SPEED = 0;
 8000c46:	801a      	strh	r2, [r3, #0]
	ptrMotor.CURRENT = 0;
 8000c48:	6059      	str	r1, [r3, #4]
	ptrMotor.VOLTAGE = 0;
 8000c4a:	811a      	strh	r2, [r3, #8]
}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000604 	.word	0x20000604

08000c54 <motor_speed>:

void motor_speed()
{
 8000c54:	b508      	push	{r3, lr}
	ptrMotor.SPEED = getSpeed();
 8000c56:	f008 fc53 	bl	8009500 <getSpeed>
 8000c5a:	4b01      	ldr	r3, [pc, #4]	@ (8000c60 <motor_speed+0xc>)
 8000c5c:	8018      	strh	r0, [r3, #0]
}
 8000c5e:	bd08      	pop	{r3, pc}
 8000c60:	20000604 	.word	0x20000604

08000c64 <motor_current>:

void motor_current()
{
 8000c64:	b508      	push	{r3, lr}
	ptrMotor.CURRENT = getCurrent();
 8000c66:	f008 fc53 	bl	8009510 <getCurrent>
 8000c6a:	4b02      	ldr	r3, [pc, #8]	@ (8000c74 <motor_current+0x10>)
 8000c6c:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8000c70:	bd08      	pop	{r3, pc}
 8000c72:	bf00      	nop
 8000c74:	20000604 	.word	0x20000604

08000c78 <tail_light_off>:
}

void tail_light_off()
{
    /*The tail light is turned off when we release the brake*/
	tail_light_turnoff();
 8000c78:	f008 bc30 	b.w	80094dc <tail_light_turnoff>

08000c7c <led_indicator_on>:
}

void led_indicator_on()
{
	dashboard_indicator_on();
 8000c7c:	f008 bbf0 	b.w	8009460 <dashboard_indicator_on>

08000c80 <led_indicator_off>:
}

void led_indicator_off()
{
	dashboard_indicator_off();
 8000c80:	f008 bbfe 	b.w	8009480 <dashboard_indicator_off>

08000c84 <error_indicator_on>:
}

void error_indicator_on()
{
	fault_warning_on();
 8000c84:	f008 bbf4 	b.w	8009470 <fault_warning_on>

08000c88 <error_indicator_off>:
}

void error_indicator_off()
{
	fault_warning_off();
 8000c88:	f008 bc02 	b.w	8009490 <fault_warning_off>

08000c8c <brakeStateChange>:
}

void brakeStateChange()
{
 8000c8c:	b508      	push	{r3, lr}
	if(getBrakeStatus() == true)
 8000c8e:	f7ff ffad 	bl	8000bec <getBrakeStatus>
 8000c92:	b118      	cbz	r0, 8000c9c <brakeStateChange+0x10>
	}
	else if(getBrakeStatus() == false)
	{
		tail_light_off();
	}
}
 8000c94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tail_light_flash();
 8000c98:	f008 bc02 	b.w	80094a0 <tail_light_flash>
	else if(getBrakeStatus() == false)
 8000c9c:	f7ff ffa6 	bl	8000bec <getBrakeStatus>
 8000ca0:	b100      	cbz	r0, 8000ca4 <brakeStateChange+0x18>
}
 8000ca2:	bd08      	pop	{r3, pc}
 8000ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tail_light_turnoff();
 8000ca8:	f008 bc18 	b.w	80094dc <tail_light_turnoff>

08000cac <lightSensorStateChange>:

void lightSensorStateChange()
{
 8000cac:	b508      	push	{r3, lr}
   if(getLightSensorStatus() == 0x01)
 8000cae:	f7ff ffc1 	bl	8000c34 <getLightSensorStatus>
 8000cb2:	2801      	cmp	r0, #1
 8000cb4:	d007      	beq.n	8000cc6 <lightSensorStateChange+0x1a>
   {
	   tail_light_turnon();
   }
   else if(getLightSensorStatus() == 0x00)
 8000cb6:	f7ff ffbd 	bl	8000c34 <getLightSensorStatus>
 8000cba:	b100      	cbz	r0, 8000cbe <lightSensorStateChange+0x12>
   {
	   tail_light_off();
   }
}
 8000cbc:	bd08      	pop	{r3, pc}
 8000cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tail_light_turnoff();
 8000cc2:	f008 bc0b 	b.w	80094dc <tail_light_turnoff>
}
 8000cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	   tail_light_turnon();
 8000cca:	f008 bbff 	b.w	80094cc <tail_light_turnon>
 8000cce:	bf00      	nop

08000cd0 <STM32MCP_registerTimer>:
 *
 * @return  None
 */
void STM32MCP_registerTimer(STM32MCP_protocolHandle_t *STM32MCP_CBs)
{
	STM32MCP_protocolHandle = STM32MCP_CBs;
 8000cd0:	4b01      	ldr	r3, [pc, #4]	@ (8000cd8 <STM32MCP_registerTimer+0x8>)
 8000cd2:	6018      	str	r0, [r3, #0]
}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000614 	.word	0x20000614

08000cdc <timeOutStart>:
 *
 * @return  None
 */
void timeOutStart()
{
	STM32MCP_protocolHandle->timerStart();
 8000cdc:	4b01      	ldr	r3, [pc, #4]	@ (8000ce4 <timeOutStart+0x8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4718      	bx	r3
 8000ce4:	20000614 	.word	0x20000614

08000ce8 <timeOutHandler>:
 * @param   None
 *
 * @return  None
 */
void timeOutHandler()
{
 8000ce8:	b508      	push	{r3, lr}
	expiration++;
 8000cea:	4913      	ldr	r1, [pc, #76]	@ (8000d38 <timeOutHandler+0x50>)
 8000cec:	780a      	ldrb	r2, [r1, #0]
 8000cee:	3201      	adds	r2, #1
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 8000cf6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000cfa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
	if( (expiration%3) == 0)
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b55      	cmp	r3, #85	@ 0x55
	expiration++;
 8000d02:	700a      	strb	r2, [r1, #0]
	{
		payLoad = 0x00;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <timeOutHandler+0x54>)
	if( (expiration%3) == 0)
 8000d06:	d809      	bhi.n	8000d1c <timeOutHandler+0x34>
		payLoad = 0x00;
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
	}
	if(payLoad == 0x00)
	{
		packetLoss ++;
 8000d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d40 <timeOutHandler+0x58>)
 8000d0e:	7813      	ldrb	r3, [r2, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2db      	uxtb	r3, r3
		if(packetLoss > MAXIMUM_NUMBER_OF_LOST_PACKETS)
 8000d14:	2b0a      	cmp	r3, #10
		packetLoss ++;
 8000d16:	7013      	strb	r3, [r2, #0]
		if(packetLoss > MAXIMUM_NUMBER_OF_LOST_PACKETS)
 8000d18:	d807      	bhi.n	8000d2a <timeOutHandler+0x42>
	}
	else if(payLoad > 0)
	{
		packetLoss = 0;
	}
}
 8000d1a:	bd08      	pop	{r3, pc}
	if(payLoad == 0x00)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f4      	beq.n	8000d0c <timeOutHandler+0x24>
		packetLoss = 0;
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <timeOutHandler+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
}
 8000d28:	bd08      	pop	{r3, pc}
			SEND_SOFTWARE_ERROR_REPORT(TIMEOUT_EXPIRATION);
 8000d2a:	200a      	movs	r0, #10
 8000d2c:	f000 f8c4 	bl	8000eb8 <SEND_SOFTWARE_ERROR_REPORT>
    timeOutStop();
}

void updateConnectionStatus(bool received, uint8_t packageCount)
{
	inConnection = received;
 8000d30:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <timeOutHandler+0x5c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
}
 8000d36:	bd08      	pop	{r3, pc}
 8000d38:	20000612 	.word	0x20000612
 8000d3c:	20000611 	.word	0x20000611
 8000d40:	20000613 	.word	0x20000613
 8000d44:	20000610 	.word	0x20000610

08000d48 <updateConnectionStatus>:
	inConnection = received;
 8000d48:	4a02      	ldr	r2, [pc, #8]	@ (8000d54 <updateConnectionStatus+0xc>)
	payLoad = packageCount;
 8000d4a:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <updateConnectionStatus+0x10>)
	inConnection = received;
 8000d4c:	7010      	strb	r0, [r2, #0]
	payLoad = packageCount;
 8000d4e:	7019      	strb	r1, [r3, #0]
}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000610 	.word	0x20000610
 8000d58:	20000611 	.word	0x20000611

08000d5c <checkConnectionStatus>:

bool getConnectionStatus()
{
	return inConnection;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <checkConnectionStatus+0x10>)
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <checkConnectionStatus+0x14>)
}

uint8_t connectSkin = 0xFF;
void checkConnectionStatus()
{
	if (getConnectionStatus() == true)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	f083 0301 	eor.w	r3, r3, #1
 8000d66:	7013      	strb	r3, [r2, #0]
	}
	else if(getConnectionStatus() == false)
	{
		connectSkin = 0x01;
	}
}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000610 	.word	0x20000610
 8000d70:	20000002 	.word	0x20000002

08000d74 <GeneralTasks>:
}

/*MAIN TASKS*/
uint8_t needPowerOff = 0x00;
void GeneralTasks(void const * argument)
{
 8000d74:	b570      	push	{r4, r5, r6, lr}
	priority = osThreadGetPriority(NULL);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f004 fbf4 	bl	8005564 <osThreadGetPriority>
	if(*ptr_drive_POWER_ON == true)
 8000d7c:	4c23      	ldr	r4, [pc, #140]	@ (8000e0c <GeneralTasks+0x98>)
	priority = osThreadGetPriority(NULL);
 8000d7e:	4b24      	ldr	r3, [pc, #144]	@ (8000e10 <GeneralTasks+0x9c>)
	updateConnectionStatus(false,0);
 8000d80:	2100      	movs	r1, #0
	priority = osThreadGetPriority(NULL);
 8000d82:	4602      	mov	r2, r0
	updateConnectionStatus(false,0);
 8000d84:	4608      	mov	r0, r1
	priority = osThreadGetPriority(NULL);
 8000d86:	801a      	strh	r2, [r3, #0]
	updateConnectionStatus(false,0);
 8000d88:	f7ff ffde 	bl	8000d48 <updateConnectionStatus>
	timeOutStart();
 8000d8c:	f7ff ffa6 	bl	8000cdc <timeOutStart>
	if(*ptr_drive_POWER_ON == true)
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b1fb      	cbz	r3, 8000dd6 <GeneralTasks+0x62>
 8000d96:	4d1f      	ldr	r5, [pc, #124]	@ (8000e14 <GeneralTasks+0xa0>)

			motor_speed();

			motor_current();

			if( ((*software_error_report == 0x00) || (*ptr_error_report == 0x00)) )
 8000d98:	4e1f      	ldr	r6, [pc, #124]	@ (8000e18 <GeneralTasks+0xa4>)
			led_indicator_on();
 8000d9a:	f7ff ff6f 	bl	8000c7c <led_indicator_on>
			CHECK_MOTOR_STATUS();
 8000d9e:	f000 f883 	bl	8000ea8 <CHECK_MOTOR_STATUS>
			refreshThrottleStatus();
 8000da2:	f7ff ff11 	bl	8000bc8 <refreshThrottleStatus>
			brakeStateChange();
 8000da6:	f7ff ff71 	bl	8000c8c <brakeStateChange>
			lightSensorStateChange();
 8000daa:	f7ff ff7f 	bl	8000cac <lightSensorStateChange>
			get_ThrottleInformation();
 8000dae:	f7ff ff2b 	bl	8000c08 <get_ThrottleInformation>
			checkConnectionStatus();
 8000db2:	f7ff ffd3 	bl	8000d5c <checkConnectionStatus>
			motor_speed();
 8000db6:	f7ff ff4d 	bl	8000c54 <motor_speed>
			motor_current();
 8000dba:	f7ff ff53 	bl	8000c64 <motor_current>
			if( ((*software_error_report == 0x00) || (*ptr_error_report == 0x00)) )
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b113      	cbz	r3, 8000dca <GeneralTasks+0x56>
 8000dc4:	6833      	ldr	r3, [r6, #0]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b993      	cbnz	r3, 8000df0 <GeneralTasks+0x7c>
			{
				throttleSignalInput();
 8000dca:	f7ff fef5 	bl	8000bb8 <throttleSignalInput>
	if(*ptr_drive_POWER_ON == true)
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1e1      	bne.n	8000d9a <GeneralTasks+0x26>
			//	driveStop();
			//}
		}
		else if(getPowerMode() == false)
		{
			needPowerOff = 0x01;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <GeneralTasks+0xa8>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
			led_indicator_off();
 8000ddc:	f7ff ff50 	bl	8000c80 <led_indicator_off>
			error_indicator_off();
 8000de0:	f7ff ff52 	bl	8000c88 <error_indicator_off>
			tail_light_off();
 8000de4:	f7ff ff48 	bl	8000c78 <tail_light_off>
			break;
		}
	}
	/*Shut Down Process Begins*/
	gotoSLEEP();
}
 8000de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gotoSLEEP();
 8000dec:	f7ff becc 	b.w	8000b88 <gotoSLEEP>
				setIQ(0);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fed5 	bl	8000ba0 <setIQ>
				set_ThrottlePercent(0);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff fed8 	bl	8000bac <set_ThrottlePercent>
				throttleSignalInput();
 8000dfc:	f7ff fedc 	bl	8000bb8 <throttleSignalInput>
				driveStop();
 8000e00:	f7ff ff10 	bl	8000c24 <driveStop>
				error_indicator_on();
 8000e04:	f7ff ff3e 	bl	8000c84 <error_indicator_on>
 8000e08:	e7e1      	b.n	8000dce <GeneralTasks+0x5a>
 8000e0a:	bf00      	nop
 8000e0c:	20000624 	.word	0x20000624
 8000e10:	20000628 	.word	0x20000628
 8000e14:	2000061c 	.word	0x2000061c
 8000e18:	20000620 	.word	0x20000620
 8000e1c:	20000618 	.word	0x20000618

08000e20 <go_powerOnRegister>:
	ptr_drive_POWER_ON = ptrpowerOn;
 8000e20:	4b01      	ldr	r3, [pc, #4]	@ (8000e28 <go_powerOnRegister+0x8>)
 8000e22:	6018      	str	r0, [r3, #0]
}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000624 	.word	0x20000624

08000e2c <go_errorReportRegister>:
	ptr_error_report = report;
 8000e2c:	4b01      	ldr	r3, [pc, #4]	@ (8000e34 <go_errorReportRegister+0x8>)
 8000e2e:	6018      	str	r0, [r3, #0]
}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000620 	.word	0x20000620

08000e38 <software_errorReportRegister>:
	software_error_report = fault;
 8000e38:	4b01      	ldr	r3, [pc, #4]	@ (8000e40 <software_errorReportRegister+0x8>)
 8000e3a:	6018      	str	r0, [r3, #0]
}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2000061c 	.word	0x2000061c

08000e44 <GoInit>:
{
 8000e44:	b510      	push	{r4, lr}
	osThreadDef(drive, GeneralTasks,osPriorityBelowNormal,0,128);
 8000e46:	4c10      	ldr	r4, [pc, #64]	@ (8000e88 <GoInit+0x44>)
{
 8000e48:	b088      	sub	sp, #32
	powerModeInit();
 8000e4a:	f7ff fe8f 	bl	8000b6c <powerModeInit>
	ERROR_REPORT_INIT();
 8000e4e:	f000 f81f 	bl	8000e90 <ERROR_REPORT_INIT>
	SOFTWARE_ERROR_REPORT_INIT();
 8000e52:	f000 f823 	bl	8000e9c <SOFTWARE_ERROR_REPORT_INIT>
	brake_and_throttle_init();
 8000e56:	f7ff fe9b 	bl	8000b90 <brake_and_throttle_init>
	motor_param_init();
 8000e5a:	f7ff fef1 	bl	8000c40 <motor_param_init>
	tail_light_off();
 8000e5e:	f7ff ff0b 	bl	8000c78 <tail_light_off>
	UDHAL_TIMEOUT_init();
 8000e62:	f008 fc31 	bl	80096c8 <UDHAL_TIMEOUT_init>
	osThreadDef(drive, GeneralTasks,osPriorityBelowNormal,0,128);
 8000e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e68:	f10d 0c04 	add.w	ip, sp, #4
 8000e6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e70:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000e74:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	driveHandle = osThreadCreate(osThread(drive), NULL);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	a801      	add	r0, sp, #4
 8000e7c:	f004 fb42 	bl	8005504 <osThreadCreate>
 8000e80:	4b02      	ldr	r3, [pc, #8]	@ (8000e8c <GoInit+0x48>)
 8000e82:	6018      	str	r0, [r3, #0]
}
 8000e84:	b008      	add	sp, #32
 8000e86:	bd10      	pop	{r4, pc}
 8000e88:	08009948 	.word	0x08009948
 8000e8c:	2000062c 	.word	0x2000062c

08000e90 <ERROR_REPORT_INIT>:
uint8_t ERROR_CODE = SYSTEM_NORMAL;
uint8_t SOFTWARE_ERROR = SOFTWARE_OK;

void ERROR_REPORT_INIT()
{
	go_errorReportRegister(&ERROR_OCCURRED);
 8000e90:	4801      	ldr	r0, [pc, #4]	@ (8000e98 <ERROR_REPORT_INIT+0x8>)
 8000e92:	f7ff bfcb 	b.w	8000e2c <go_errorReportRegister>
 8000e96:	bf00      	nop
 8000e98:	20000632 	.word	0x20000632

08000e9c <SOFTWARE_ERROR_REPORT_INIT>:
}

void SOFTWARE_ERROR_REPORT_INIT()
{
	software_errorReportRegister(&SOFTWARE_ERROR);
 8000e9c:	4801      	ldr	r0, [pc, #4]	@ (8000ea4 <SOFTWARE_ERROR_REPORT_INIT+0x8>)
 8000e9e:	f7ff bfcb 	b.w	8000e38 <software_errorReportRegister>
 8000ea2:	bf00      	nop
 8000ea4:	20000630 	.word	0x20000630

08000ea8 <CHECK_MOTOR_STATUS>:
 * @param   None
 *
 * @return  None
 */
void CHECK_MOTOR_STATUS()
{
 8000ea8:	b508      	push	{r3, lr}
     uint16_t status = MC_GetOccurredFaultsMotor1();
 8000eaa:	f000 fa57 	bl	800135c <MC_GetOccurredFaultsMotor1>
     SEND_MOTOR_ERROR_REPORT(status);
}

void SEND_MOTOR_ERROR_REPORT(uint16_t error_code)
{
    ERROR_OCCURRED = (uint8_t)error_code;
 8000eae:	4b01      	ldr	r3, [pc, #4]	@ (8000eb4 <CHECK_MOTOR_STATUS+0xc>)
 8000eb0:	7018      	strb	r0, [r3, #0]
}
 8000eb2:	bd08      	pop	{r3, pc}
 8000eb4:	20000632 	.word	0x20000632

08000eb8 <SEND_SOFTWARE_ERROR_REPORT>:
}

void SEND_SOFTWARE_ERROR_REPORT(uint8_t fault)
{
	SOFTWARE_ERROR = fault;
 8000eb8:	4b01      	ldr	r3, [pc, #4]	@ (8000ec0 <SEND_SOFTWARE_ERROR_REPORT+0x8>)
 8000eba:	7018      	strb	r0, [r3, #0]
}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000630 	.word	0x20000630

08000ec4 <GET_MOTOR_ERROR_REPORT>:

uint8_t GET_MOTOR_ERROR_REPORT()
{
	if(ERROR_OCCURRED == MC_NO_ERROR)
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <GET_MOTOR_ERROR_REPORT+0x2c>)
 8000ec6:	7818      	ldrb	r0, [r3, #0]
	{
		ERROR_CODE = SYSTEM_NORMAL;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <GET_MOTOR_ERROR_REPORT+0x30>)
	if(ERROR_OCCURRED == MC_NO_ERROR)
 8000eca:	b140      	cbz	r0, 8000ede <GET_MOTOR_ERROR_REPORT+0x1a>
	}
	else if(ERROR_OCCURRED == MC_SPEED_FDBK)
 8000ecc:	2820      	cmp	r0, #32
 8000ece:	d008      	beq.n	8000ee2 <GET_MOTOR_ERROR_REPORT+0x1e>
	{
		ERROR_CODE = HALL_SENSOR_ERROR_CODE;
	}
	else if(ERROR_OCCURRED == MC_UNDER_VOLT)
 8000ed0:	2804      	cmp	r0, #4
 8000ed2:	d009      	beq.n	8000ee8 <GET_MOTOR_ERROR_REPORT+0x24>
	{
		ERROR_CODE = ABNORMAL_CURRENT;
	}
	else if(ERROR_OCCURRED == MC_OVER_TEMP)
 8000ed4:	2808      	cmp	r0, #8
 8000ed6:	d001      	beq.n	8000edc <GET_MOTOR_ERROR_REPORT+0x18>
	{
		ERROR_CODE  = BATTERY_TEMP_ERROR_CODE;
	}
	return ERROR_CODE;
 8000ed8:	7818      	ldrb	r0, [r3, #0]
 8000eda:	4770      	bx	lr
		ERROR_CODE  = BATTERY_TEMP_ERROR_CODE;
 8000edc:	201a      	movs	r0, #26
 8000ede:	7018      	strb	r0, [r3, #0]
}
 8000ee0:	4770      	bx	lr
		ERROR_CODE = HALL_SENSOR_ERROR_CODE;
 8000ee2:	203a      	movs	r0, #58	@ 0x3a
 8000ee4:	7018      	strb	r0, [r3, #0]
 8000ee6:	4770      	bx	lr
		ERROR_CODE = ABNORMAL_CURRENT;
 8000ee8:	202a      	movs	r0, #42	@ 0x2a
 8000eea:	7018      	strb	r0, [r3, #0]
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000632 	.word	0x20000632
 8000ef4:	20000631 	.word	0x20000631

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000efc:	480d      	ldr	r0, [pc, #52]	@ (8000f34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000efe:	490e      	ldr	r1, [pc, #56]	@ (8000f38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f00:	4a0e      	ldr	r2, [pc, #56]	@ (8000f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0b      	ldr	r2, [pc, #44]	@ (8000f40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f14:	4c0b      	ldr	r4, [pc, #44]	@ (8000f44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f22:	f002 fbdf 	bl	80036e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f008 fc79 	bl	800981c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f000 f82d 	bl	8000f88 <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	200005d4 	.word	0x200005d4
  ldr r2, =_sidata
 8000f3c:	08009c4c 	.word	0x08009c4c
  ldr r2, =_sbss
 8000f40:	200005d8 	.word	0x200005d8
  ldr r4, =_ebss
 8000f44:	2000511c 	.word	0x2000511c

08000f48 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <BusFault_Handler>
	...

08000f4c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <vApplicationGetIdleTaskMemory+0x14>)
 8000f4e:	6003      	str	r3, [r0, #0]
{
 8000f50:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f52:	2380      	movs	r3, #128	@ 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f54:	4c03      	ldr	r4, [pc, #12]	@ (8000f64 <vApplicationGetIdleTaskMemory+0x18>)
 8000f56:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000f58:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f5c:	6013      	str	r3, [r2, #0]
}
 8000f5e:	4770      	bx	lr
 8000f60:	20000cd4 	.word	0x20000cd4
 8000f64:	20000ad4 	.word	0x20000ad4

08000f68 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <vApplicationGetTimerTaskMemory+0x18>)
 8000f6a:	6003      	str	r3, [r0, #0]
{
 8000f6c:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000f6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000f72:	4c04      	ldr	r4, [pc, #16]	@ (8000f84 <vApplicationGetTimerTaskMemory+0x1c>)
 8000f74:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8000f76:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000a34 	.word	0x20000a34
 8000f84:	20000634 	.word	0x20000634

08000f88 <main>:
extern void StartSafetyTask(void const * argument);

static void MX_NVIC_Init(void);

int main(void)
{
 8000f88:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000f8c:	2620      	movs	r6, #32
{
 8000f8e:	b097      	sub	sp, #92	@ 0x5c

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f90:	4ca4      	ldr	r4, [pc, #656]	@ (8001224 <main+0x29c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f92:	f8df 82a8 	ldr.w	r8, [pc, #680]	@ 800123c <main+0x2b4>
  HAL_Init();
 8000f96:	f002 fbaf 	bl	80036f8 <HAL_Init>
  SystemClock();
 8000f9a:	f008 fb1d 	bl	80095d8 <SystemClock>
  GPIO_Init();
 8000f9e:	f008 f9c7 	bl	8009330 <GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000fa2:	4632      	mov	r2, r6
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	a80e      	add	r0, sp, #56	@ 0x38
 8000fa8:	f008 fbda 	bl	8009760 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fac:	2300      	movs	r3, #0
 8000fae:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000fb2:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb6:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb8:	7623      	strb	r3, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fba:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc0:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
  hadc1.Instance = ADC1;
 8000fc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
  hadc1.Init.ScanConvMode = ENABLE;
 8000fc8:	2501      	movs	r5, #1
  hadc1.Instance = ADC1;
 8000fca:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fce:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000fd2:	f44f 6700 	mov.w	r7, #2048	@ 0x800
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd6:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ENABLE;
 8000fd8:	6125      	str	r5, [r4, #16]
  hadc1.Init.NbrOfConversion = 1;
 8000fda:	61e5      	str	r5, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fdc:	6165      	str	r5, [r4, #20]
  hadc1.Instance = ADC1;
 8000fde:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe0:	f8c4 8028 	str.w	r8, [r4, #40]	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	f8c4 9004 	str.w	r9, [r4, #4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000fe8:	60e7      	str	r7, [r4, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	f002 fbc3 	bl	8003774 <HAL_ADC_Init>
 8000fee:	b108      	cbz	r0, 8000ff4 <main+0x6c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <main+0x6a>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff4:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000ff6:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000ff8:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
  sConfigInjected.InjectedOffset = 0;
 8000ffc:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000ffe:	2307      	movs	r3, #7
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8001000:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001004:	a90e      	add	r1, sp, #56	@ 0x38
 8001006:	4620      	mov	r0, r4
  sConfigInjected.InjectedRank = 1;
 8001008:	950f      	str	r5, [sp, #60]	@ 0x3c
  sConfigInjected.InjectedNbrOfConversion = 1;
 800100a:	9512      	str	r5, [sp, #72]	@ 0x48
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800100c:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 800100e:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001012:	f002 fd11 	bl	8003a38 <HAL_ADCEx_InjectedConfigChannel>
 8001016:	b108      	cbz	r0, 800101c <main+0x94>
 8001018:	b672      	cpsid	i
  while (1)
 800101a:	e7fe      	b.n	800101a <main+0x92>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800101c:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfig.Channel = ADC_CHANNEL_3;
 800101e:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001020:	4620      	mov	r0, r4
 8001022:	a907      	add	r1, sp, #28
  sConfig.Rank = 1;
 8001024:	9508      	str	r5, [sp, #32]
  sConfig.Channel = ADC_CHANNEL_3;
 8001026:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001028:	f002 fc50 	bl	80038cc <HAL_ADC_ConfigChannel>
 800102c:	4683      	mov	fp, r0
 800102e:	b108      	cbz	r0, 8001034 <main+0xac>
 8001030:	b672      	cpsid	i
  while (1)
 8001032:	e7fe      	b.n	8001032 <main+0xaa>
  hadc2.Instance = ADC2;
 8001034:	4c7c      	ldr	r4, [pc, #496]	@ (8001228 <main+0x2a0>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001036:	4601      	mov	r1, r0
 8001038:	4632      	mov	r2, r6
 800103a:	a80e      	add	r0, sp, #56	@ 0x38
 800103c:	f008 fb90 	bl	8009760 <memset>
  hadc2.Instance = ADC2;
 8001040:	4b7a      	ldr	r3, [pc, #488]	@ (800122c <main+0x2a4>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001042:	f8c4 9004 	str.w	r9, [r4, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001046:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8001048:	e9cd bb07 	strd	fp, fp, [sp, #28]
 800104c:	e9cd bb09 	strd	fp, fp, [sp, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001050:	f8c4 8028 	str.w	r8, [r4, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001054:	60e7      	str	r7, [r4, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001056:	f8c4 b008 	str.w	fp, [r4, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800105a:	6125      	str	r5, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800105c:	f884 b018 	strb.w	fp, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001060:	f884 b020 	strb.w	fp, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001064:	f8c4 b02c 	str.w	fp, [r4, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001068:	f884 b030 	strb.w	fp, [r4, #48]	@ 0x30
  hadc2.Init.NbrOfConversion = 1;
 800106c:	61e5      	str	r5, [r4, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	6165      	str	r5, [r4, #20]
  hadc2.Instance = ADC2;
 8001070:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001072:	f002 fb7f 	bl	8003774 <HAL_ADC_Init>
 8001076:	b108      	cbz	r0, 800107c <main+0xf4>
 8001078:	b672      	cpsid	i
  while (1)
 800107a:	e7fe      	b.n	800107a <main+0xf2>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800107c:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800107e:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001080:	f8ad 004c 	strh.w	r0, [sp, #76]	@ 0x4c
  sConfigInjected.InjectedOffset = 0;
 8001084:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8001086:	270e      	movs	r7, #14
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001088:	a90e      	add	r1, sp, #56	@ 0x38
 800108a:	4620      	mov	r0, r4
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 800108c:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
  sConfigInjected.InjectedRank = 1;
 8001090:	950f      	str	r5, [sp, #60]	@ 0x3c
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001092:	9512      	str	r5, [sp, #72]	@ 0x48
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8001094:	970e      	str	r7, [sp, #56]	@ 0x38
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001096:	f002 fccf 	bl	8003a38 <HAL_ADCEx_InjectedConfigChannel>
 800109a:	b108      	cbz	r0, 80010a0 <main+0x118>
 800109c:	b672      	cpsid	i
  while (1)
 800109e:	e7fe      	b.n	800109e <main+0x116>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a0:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a2:	a907      	add	r1, sp, #28
 80010a4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_14;
 80010a6:	9707      	str	r7, [sp, #28]
  sConfig.Rank = 1;
 80010a8:	9508      	str	r5, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010aa:	f002 fc0f 	bl	80038cc <HAL_ADC_ConfigChannel>
 80010ae:	4604      	mov	r4, r0
 80010b0:	b108      	cbz	r0, 80010b6 <main+0x12e>
 80010b2:	b672      	cpsid	i
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <main+0x12c>
  htim1.Instance = TIM1;
 80010b6:	4f5e      	ldr	r7, [pc, #376]	@ (8001230 <main+0x2a8>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010b8:	9002      	str	r0, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ba:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80010be:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80010c2:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010c6:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80010ca:	e9cd 0005 	strd	r0, r0, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ce:	9000      	str	r0, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d0:	900d      	str	r0, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d2:	9001      	str	r0, [sp, #4]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010d4:	4601      	mov	r1, r0
 80010d6:	4632      	mov	r2, r6
 80010d8:	a80e      	add	r0, sp, #56	@ 0x38
 80010da:	f008 fb41 	bl	8009760 <memset>
  htim1.Instance = TIM1;
 80010de:	4b55      	ldr	r3, [pc, #340]	@ (8001234 <main+0x2ac>)
 80010e0:	603b      	str	r3, [r7, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80010e2:	f241 5ef9 	movw	lr, #5625	@ 0x15f9
 80010e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ea:	4638      	mov	r0, r7
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80010ec:	e9c7 4601 	strd	r4, r6, [r7, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80010f0:	e9c7 e303 	strd	lr, r3, [r7, #12]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80010f4:	617d      	str	r5, [r7, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010f8:	f003 fb54 	bl	80047a4 <HAL_TIM_Base_Init>
 80010fc:	b108      	cbz	r0, 8001102 <main+0x17a>
 80010fe:	b672      	cpsid	i
  while (1)
 8001100:	e7fe      	b.n	8001100 <main+0x178>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001102:	4638      	mov	r0, r7
 8001104:	f003 fc1a 	bl	800493c <HAL_TIM_PWM_Init>
 8001108:	b108      	cbz	r0, 800110e <main+0x186>
 800110a:	b672      	cpsid	i
  while (1)
 800110c:	e7fe      	b.n	800110c <main+0x184>
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800110e:	2506      	movs	r5, #6
 8001110:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001112:	a902      	add	r1, sp, #8
 8001114:	4638      	mov	r0, r7
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001116:	e9cd 5302 	strd	r5, r3, [sp, #8]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800111a:	f003 fe4d 	bl	8004db8 <HAL_TIM_SlaveConfigSynchro>
 800111e:	b108      	cbz	r0, 8001124 <main+0x19c>
 8001120:	b672      	cpsid	i
  while (1)
 8001122:	e7fe      	b.n	8001122 <main+0x19a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	e9cd 6000 	strd	r6, r0, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001128:	4669      	mov	r1, sp
 800112a:	4638      	mov	r0, r7
 800112c:	f004 f8ca 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001130:	b108      	cbz	r0, 8001136 <main+0x1ae>
 8001132:	b672      	cpsid	i
  while (1)
 8001134:	e7fe      	b.n	8001134 <main+0x1ac>
  sConfigOC.Pulse = 0;
 8001136:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001138:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113a:	483d      	ldr	r0, [pc, #244]	@ (8001230 <main+0x2a8>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800113c:	920d      	str	r2, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 8001140:	e9cd 3207 	strd	r3, r2, [sp, #28]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001144:	e9cd 2209 	strd	r2, r2, [sp, #36]	@ 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001148:	e9cd 220b 	strd	r2, r2, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	f003 fc86 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8001150:	b108      	cbz	r0, 8001156 <main+0x1ce>
 8001152:	b672      	cpsid	i
  while (1)
 8001154:	e7fe      	b.n	8001154 <main+0x1cc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001156:	4836      	ldr	r0, [pc, #216]	@ (8001230 <main+0x2a8>)
 8001158:	2204      	movs	r2, #4
 800115a:	a907      	add	r1, sp, #28
 800115c:	f003 fc7e 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8001160:	b108      	cbz	r0, 8001166 <main+0x1de>
 8001162:	b672      	cpsid	i
  while (1)
 8001164:	e7fe      	b.n	8001164 <main+0x1dc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001166:	4832      	ldr	r0, [pc, #200]	@ (8001230 <main+0x2a8>)
 8001168:	2208      	movs	r2, #8
 800116a:	a907      	add	r1, sp, #28
 800116c:	f003 fc76 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 8001170:	b108      	cbz	r0, 8001176 <main+0x1ee>
 8001172:	b672      	cpsid	i
  while (1)
 8001174:	e7fe      	b.n	8001174 <main+0x1ec>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001176:	2270      	movs	r2, #112	@ 0x70
 8001178:	f241 53f8 	movw	r3, #5624	@ 0x15f8
 800117c:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001180:	482b      	ldr	r0, [pc, #172]	@ (8001230 <main+0x2a8>)
 8001182:	220c      	movs	r2, #12
 8001184:	a907      	add	r1, sp, #28
 8001186:	f003 fc69 	bl	8004a5c <HAL_TIM_PWM_ConfigChannel>
 800118a:	b108      	cbz	r0, 8001190 <main+0x208>
 800118c:	b672      	cpsid	i
  while (1)
 800118e:	e7fe      	b.n	800118e <main+0x206>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001190:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001194:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001198:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 800119c:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80011a0:	f44f 7480 	mov.w	r4, #256	@ 0x100
 80011a4:	2248      	movs	r2, #72	@ 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a6:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011a8:	a90e      	add	r1, sp, #56	@ 0x38
 80011aa:	4821      	ldr	r0, [pc, #132]	@ (8001230 <main+0x2a8>)
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80011ac:	e9cd 4210 	strd	r4, r2, [sp, #64]	@ 0x40
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011b0:	f004 f8c8 	bl	8005344 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b4:	4604      	mov	r4, r0
 80011b6:	b108      	cbz	r0, 80011bc <main+0x234>
 80011b8:	b672      	cpsid	i
  while (1)
 80011ba:	e7fe      	b.n	80011ba <main+0x232>
  htim2.Instance = TIM2;
 80011bc:	4d1e      	ldr	r5, [pc, #120]	@ (8001238 <main+0x2b0>)
  HAL_TIM_MspPostInit(&htim1);
 80011be:	481c      	ldr	r0, [pc, #112]	@ (8001230 <main+0x2a8>)
 80011c0:	f001 fccc 	bl	8002b5c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80011c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011c8:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ca:	4628      	mov	r0, r5
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 80011cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d0:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80011d4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80011d8:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 80011dc:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	e9cd 4402 	strd	r4, r4, [sp, #8]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 80011ec:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ee:	f003 fad9 	bl	80047a4 <HAL_TIM_Base_Init>
 80011f2:	b108      	cbz	r0, 80011f8 <main+0x270>
 80011f4:	b672      	cpsid	i
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <main+0x26e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fc:	a907      	add	r1, sp, #28
 80011fe:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001202:	f003 fd2f 	bl	8004c64 <HAL_TIM_ConfigClockSource>
 8001206:	b108      	cbz	r0, 800120c <main+0x284>
 8001208:	b672      	cpsid	i
  while (1)
 800120a:	e7fe      	b.n	800120a <main+0x282>
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800120c:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  sConfig.Commutation_Delay = 0;
 8001210:	9011      	str	r0, [sp, #68]	@ 0x44
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8001212:	230f      	movs	r3, #15
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001214:	a90e      	add	r1, sp, #56	@ 0x38
 8001216:	4628      	mov	r0, r5
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8001218:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 800121a:	f003 ffef 	bl	80051fc <HAL_TIMEx_HallSensor_Init>
 800121e:	b178      	cbz	r0, 8001240 <main+0x2b8>
 8001220:	b672      	cpsid	i
  while (1)
 8001222:	e7fe      	b.n	8001222 <main+0x29a>
 8001224:	20000e54 	.word	0x20000e54
 8001228:	20000e0c 	.word	0x20000e0c
 800122c:	40012100 	.word	0x40012100
 8001230:	20000dc4 	.word	0x20000dc4
 8001234:	40010000 	.word	0x40010000
 8001238:	20000d7c 	.word	0x20000d7c
 800123c:	0f000001 	.word	0x0f000001
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001240:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001242:	2350      	movs	r3, #80	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001244:	4628      	mov	r0, r5
 8001246:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001248:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124a:	f004 f83b 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	4605      	mov	r5, r0
 8001250:	b108      	cbz	r0, 8001256 <main+0x2ce>
 8001252:	b672      	cpsid	i
  while (1)
 8001254:	e7fe      	b.n	8001254 <main+0x2cc>
  UART_Init();
 8001256:	f008 fa4f 	bl	80096f8 <UART_Init>
  MX_MotorControl_Init();
 800125a:	f001 fa2b 	bl	80026b4 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800125e:	462a      	mov	r2, r5
 8001260:	2102      	movs	r1, #2
 8001262:	2012      	movs	r0, #18
 8001264:	f002 fcce 	bl	8003c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001268:	2012      	movs	r0, #18
 800126a:	f002 fd07 	bl	8003c7c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800126e:	462a      	mov	r2, r5
 8001270:	4629      	mov	r1, r5
 8001272:	2019      	movs	r0, #25
 8001274:	f002 fcc6 	bl	8003c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001278:	2019      	movs	r0, #25
 800127a:	f002 fcff 	bl	8003c7c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 0);
 800127e:	462a      	mov	r2, r5
 8001280:	2104      	movs	r1, #4
 8001282:	2018      	movs	r0, #24
 8001284:	f002 fcbe 	bl	8003c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001288:	2018      	movs	r0, #24
 800128a:	f002 fcf7 	bl	8003c7c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800128e:	462a      	mov	r2, r5
 8001290:	2103      	movs	r1, #3
 8001292:	201c      	movs	r0, #28
 8001294:	f002 fcb6 	bl	8003c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001298:	201c      	movs	r0, #28
 800129a:	f002 fcef 	bl	8003c7c <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 800129e:	4c14      	ldr	r4, [pc, #80]	@ (80012f0 <main+0x368>)
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80012a0:	462a      	mov	r2, r5
 80012a2:	2103      	movs	r1, #3
 80012a4:	2025      	movs	r0, #37	@ 0x25
 80012a6:	f002 fcad 	bl	8003c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012aa:	2025      	movs	r0, #37	@ 0x25
 80012ac:	f002 fce6 	bl	8003c7c <HAL_NVIC_EnableIRQ>
  GoInit();
 80012b0:	f7ff fdc8 	bl	8000e44 <GoInit>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 80012b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b6:	ae07      	add	r6, sp, #28
 80012b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012be:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 80012c2:	4629      	mov	r1, r5
 80012c4:	a807      	add	r0, sp, #28
 80012c6:	f004 f91d 	bl	8005504 <osThreadCreate>
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <main+0x36c>)
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 80012cc:	340c      	adds	r4, #12
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 80012ce:	6018      	str	r0, [r3, #0]
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 80012d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d2:	ae0e      	add	r6, sp, #56	@ 0x38
 80012d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012d6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012da:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  safetyHandle = osThreadCreate(osThread(safety), NULL);
 80012de:	4629      	mov	r1, r5
 80012e0:	a80e      	add	r0, sp, #56	@ 0x38
 80012e2:	f004 f90f 	bl	8005504 <osThreadCreate>
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <main+0x370>)
 80012e8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80012ea:	f004 f905 	bl	80054f8 <osKernelStart>
  while (1)
 80012ee:	e7fe      	b.n	80012ee <main+0x366>
 80012f0:	08009964 	.word	0x08009964
 80012f4:	20000d78 	.word	0x20000d78
 80012f8:	20000d74 	.word	0x20000d74

080012fc <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <HAL_TIM_PeriodElapsedCallback+0x10>)
 80012fe:	6802      	ldr	r2, [r0, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d000      	beq.n	8001306 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001304:	4770      	bx	lr
    HAL_IncTick();
 8001306:	f002 ba11 	b.w	800372c <HAL_IncTick>
 800130a:	bf00      	nop
 800130c:	40001000 	.word	0x40001000

08001310 <Error_Handler>:
 8001310:	b672      	cpsid	i
  while (1)
 8001312:	e7fe      	b.n	8001312 <Error_Handler+0x2>

08001314 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001314:	4b01      	ldr	r3, [pc, #4]	@ (800131c <MC_StartMotor1+0x8>)
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	f000 b852 	b.w	80013c0 <MCI_StartMotor>
 800131c:	20000fa8 	.word	0x20000fa8

08001320 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001320:	4b01      	ldr	r3, [pc, #4]	@ (8001328 <MC_StopMotor1+0x8>)
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	f000 b856 	b.w	80013d4 <MCI_StopMotor>
 8001328:	20000fa8 	.word	0x20000fa8

0800132c <MC_ProgramTorqueRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1( int16_t hFinalTorque, uint16_t hDurationms )
{
 800132c:	b410      	push	{r4}
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 800132e:	4c04      	ldr	r4, [pc, #16]	@ (8001340 <MC_ProgramTorqueRampMotor1+0x14>)
{
 8001330:	4603      	mov	r3, r0
 8001332:	460a      	mov	r2, r1
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 8001334:	6820      	ldr	r0, [r4, #0]
}
 8001336:	f85d 4b04 	ldr.w	r4, [sp], #4
	MCI_ExecTorqueRamp( pMCI[M1], hFinalTorque, hDurationms );
 800133a:	4619      	mov	r1, r3
 800133c:	f000 b82c 	b.w	8001398 <MCI_ExecTorqueRamp>
 8001340:	20000fa8 	.word	0x20000fa8

08001344 <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 8001344:	4b01      	ldr	r3, [pc, #4]	@ (800134c <MC_GetMecSpeedAverageMotor1+0x8>)
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	f000 b8a4 	b.w	8001494 <MCI_GetAvrgMecSpeedUnit>
 800134c:	20000fa8 	.word	0x20000fa8

08001350 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8001350:	4b01      	ldr	r3, [pc, #4]	@ (8001358 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	f000 b902 	b.w	800155c <MCI_GetPhaseCurrentAmplitude>
 8001358:	20000fa8 	.word	0x20000fa8

0800135c <MC_GetOccurredFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
	return MCI_GetOccurredFaults( pMCI[M1] );
 800135c:	4b01      	ldr	r3, [pc, #4]	@ (8001364 <MC_GetOccurredFaultsMotor1+0x8>)
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	f000 b884 	b.w	800146c <MCI_GetOccurredFaults>
 8001364:	20000fa8 	.word	0x20000fa8

08001368 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001368:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 800136c:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8001370:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001372:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8001376:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 800137a:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 800137e:	f880 c018 	strb.w	ip, [r0, #24]
}
 8001382:	4770      	bx	lr

08001384 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001384:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001388:	f240 1301 	movw	r3, #257	@ 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800138c:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8001390:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8001392:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001394:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8001396:	4770      	bx	lr

08001398 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001398:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800139c:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800139e:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 80013a2:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 80013a4:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013a6:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop

080013ac <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 80013ac:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80013ae:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013b0:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80013b2:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 80013b4:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013b8:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 80013ba:	b002      	add	sp, #8
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80013c0:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80013c2:	2103      	movs	r1, #3
{
 80013c4:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80013c6:	6800      	ldr	r0, [r0, #0]
 80013c8:	f007 fe00 	bl	8008fcc <STM_NextState>

  if ( RetVal == true )
 80013cc:	b108      	cbz	r0, 80013d2 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013ce:	2301      	movs	r3, #1
 80013d0:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 80013d2:	bd10      	pop	{r4, pc}

080013d4 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80013d4:	6800      	ldr	r0, [r0, #0]
 80013d6:	2107      	movs	r1, #7
 80013d8:	f007 bdf8 	b.w	8008fcc <STM_NextState>

080013dc <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80013dc:	6800      	ldr	r0, [r0, #0]
 80013de:	f007 be71 	b.w	80090c4 <STM_FaultAcknowledged>
 80013e2:	bf00      	nop

080013e4 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80013e4:	6800      	ldr	r0, [r0, #0]
 80013e6:	2101      	movs	r1, #1
 80013e8:	f007 bdf0 	b.w	8008fcc <STM_NextState>

080013ec <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80013ec:	b178      	cbz	r0, 800140e <MCI_ExecBufferedCommands+0x22>
{
 80013ee:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80013f0:	7e03      	ldrb	r3, [r0, #24]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	4604      	mov	r4, r0
 80013f6:	d000      	beq.n	80013fa <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80013f8:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 80013fa:	7b01      	ldrb	r1, [r0, #12]
 80013fc:	2902      	cmp	r1, #2
 80013fe:	d020      	beq.n	8001442 <MCI_ExecBufferedCommands+0x56>
 8001400:	2903      	cmp	r1, #3
 8001402:	d005      	beq.n	8001410 <MCI_ExecBufferedCommands+0x24>
 8001404:	2901      	cmp	r1, #1
 8001406:	d00c      	beq.n	8001422 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001408:	2303      	movs	r3, #3
 800140a:	7623      	strb	r3, [r4, #24]
}
 800140c:	bd10      	pop	{r4, pc}
 800140e:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001410:	6882      	ldr	r2, [r0, #8]
 8001412:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001416:	f8d0 3012 	ldr.w	r3, [r0, #18]
 800141a:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 800141c:	2302      	movs	r3, #2
 800141e:	7623      	strb	r3, [r4, #24]
}
 8001420:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001422:	6883      	ldr	r3, [r0, #8]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 800142a:	6840      	ldr	r0, [r0, #4]
 800142c:	f007 fcf2 	bl	8008e14 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001430:	8ae2      	ldrh	r2, [r4, #22]
 8001432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001436:	6860      	ldr	r0, [r4, #4]
 8001438:	f007 fcf0 	bl	8008e1c <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800143c:	2800      	cmp	r0, #0
 800143e:	d0e3      	beq.n	8001408 <MCI_ExecBufferedCommands+0x1c>
 8001440:	e7ec      	b.n	800141c <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001442:	6883      	ldr	r3, [r0, #8]
 8001444:	2100      	movs	r1, #0
 8001446:	f883 1024 	strb.w	r1, [r3, #36]	@ 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800144a:	6840      	ldr	r0, [r0, #4]
 800144c:	f007 fce2 	bl	8008e14 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001450:	8ae2      	ldrh	r2, [r4, #22]
 8001452:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001456:	6860      	ldr	r0, [r4, #4]
 8001458:	f007 fce0 	bl	8008e1c <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800145c:	2800      	cmp	r0, #0
 800145e:	d0d3      	beq.n	8001408 <MCI_ExecBufferedCommands+0x1c>
 8001460:	e7dc      	b.n	800141c <MCI_ExecBufferedCommands+0x30>
 8001462:	bf00      	nop

08001464 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8001464:	6800      	ldr	r0, [r0, #0]
 8001466:	f007 be2b 	b.w	80090c0 <STM_GetState>
 800146a:	bf00      	nop

0800146c <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 800146c:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 800146e:	6800      	ldr	r0, [r0, #0]
 8001470:	f007 fe34 	bl	80090dc <STM_GetFaultState>
}
 8001474:	b280      	uxth	r0, r0
 8001476:	bd08      	pop	{r3, pc}

08001478 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8001478:	7e40      	ldrb	r0, [r0, #25]
 800147a:	4770      	bx	lr

0800147c <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 800147c:	7b03      	ldrb	r3, [r0, #12]
 800147e:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8001480:	bf0c      	ite	eq
 8001482:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8001486:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 800148c:	6840      	ldr	r0, [r0, #4]
 800148e:	f007 bd09 	b.w	8008ea4 <STC_StopRamp>
 8001492:	bf00      	nop

08001494 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8001494:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8001496:	6840      	ldr	r0, [r0, #4]
 8001498:	f007 fca2 	bl	8008de0 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 800149c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80014a0:	f007 bc40 	b.w	8008d24 <SPD_GetAvrgMecSpeedUnit>

080014a4 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80014a4:	6840      	ldr	r0, [r0, #4]
 80014a6:	f007 bca5 	b.w	8008df4 <STC_GetMecSpeedRefUnit>
 80014aa:	bf00      	nop

080014ac <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 80014ac:	6882      	ldr	r2, [r0, #8]
 80014ae:	6810      	ldr	r0, [r2, #0]
 80014b0:	2300      	movs	r3, #0
 80014b2:	b282      	uxth	r2, r0
 80014b4:	f362 030f 	bfi	r3, r2, #0, #16
 80014b8:	0c00      	lsrs	r0, r0, #16
 80014ba:	f360 431f 	bfi	r3, r0, #16, #16
{
 80014be:	b082      	sub	sp, #8
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	b002      	add	sp, #8
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 80014c8:	6882      	ldr	r2, [r0, #8]
 80014ca:	6850      	ldr	r0, [r2, #4]
 80014cc:	2300      	movs	r3, #0
 80014ce:	b282      	uxth	r2, r0
 80014d0:	f362 030f 	bfi	r3, r2, #0, #16
 80014d4:	0c00      	lsrs	r0, r0, #16
 80014d6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80014da:	b082      	sub	sp, #8
}
 80014dc:	4618      	mov	r0, r3
 80014de:	b002      	add	sp, #8
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop

080014e4 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 80014e4:	6882      	ldr	r2, [r0, #8]
 80014e6:	68d0      	ldr	r0, [r2, #12]
 80014e8:	2300      	movs	r3, #0
 80014ea:	b282      	uxth	r2, r0
 80014ec:	f362 030f 	bfi	r3, r2, #0, #16
 80014f0:	0c00      	lsrs	r0, r0, #16
 80014f2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80014f6:	b082      	sub	sp, #8
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	b002      	add	sp, #8
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8001500:	6882      	ldr	r2, [r0, #8]
 8001502:	6910      	ldr	r0, [r2, #16]
 8001504:	2300      	movs	r3, #0
 8001506:	b282      	uxth	r2, r0
 8001508:	f362 030f 	bfi	r3, r2, #0, #16
 800150c:	0c00      	lsrs	r0, r0, #16
 800150e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001512:	b082      	sub	sp, #8
}
 8001514:	4618      	mov	r0, r3
 8001516:	b002      	add	sp, #8
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 800151c:	6882      	ldr	r2, [r0, #8]
 800151e:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001522:	2300      	movs	r3, #0
 8001524:	b282      	uxth	r2, r0
 8001526:	f362 030f 	bfi	r3, r2, #0, #16
 800152a:	0c00      	lsrs	r0, r0, #16
 800152c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001530:	b082      	sub	sp, #8
}
 8001532:	4618      	mov	r0, r3
 8001534:	b002      	add	sp, #8
 8001536:	4770      	bx	lr

08001538 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8001538:	6882      	ldr	r2, [r0, #8]
 800153a:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800153e:	2300      	movs	r3, #0
 8001540:	b282      	uxth	r2, r0
 8001542:	f362 030f 	bfi	r3, r2, #0, #16
 8001546:	0c00      	lsrs	r0, r0, #16
 8001548:	f360 431f 	bfi	r3, r0, #16, #16
{
 800154c:	b082      	sub	sp, #8
}
 800154e:	4618      	mov	r0, r3
 8001550:	b002      	add	sp, #8
 8001552:	4770      	bx	lr

08001554 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8001554:	6883      	ldr	r3, [r0, #8]
}
 8001556:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800155a:	4770      	bx	lr

0800155c <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 800155c:	6882      	ldr	r2, [r0, #8]
{
 800155e:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8001560:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8001564:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 8001568:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 800156c:	fb00 3000 	mla	r0, r0, r0, r3
 8001570:	f000 f8f2 	bl	8001758 <MCM_Sqrt>

  if ( wAux1 > INT16_MAX )
 8001574:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001578:	4298      	cmp	r0, r3
 800157a:	bfa8      	it	ge
 800157c:	4618      	movge	r0, r3
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
}
 800157e:	b200      	sxth	r0, r0
 8001580:	bd08      	pop	{r3, pc}
 8001582:	bf00      	nop

08001584 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8001584:	2300      	movs	r3, #0
 8001586:	6882      	ldr	r2, [r0, #8]
 8001588:	f361 030f 	bfi	r3, r1, #0, #16
 800158c:	f361 431f 	bfi	r3, r1, #16, #16
 8001590:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop

08001598 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001598:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 800159a:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 800159e:	f007 fcd7 	bl	8008f50 <STC_GetDefaultIqdref>
 80015a2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80015a6:	8220      	strh	r0, [r4, #16]
 80015a8:	8263      	strh	r3, [r4, #18]
}
 80015aa:	bd10      	pop	{r4, pc}

080015ac <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 80015ac:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 80015b0:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 80015b4:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 80015b8:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 80015bc:	fb10 f202 	smulbb	r2, r0, r2
 80015c0:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 80015c4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 80015c8:	b084      	sub	sp, #16
 80015ca:	b203      	sxth	r3, r0
  if ( wbeta_tmp > INT16_MAX )
 80015cc:	da05      	bge.n	80015da <MCM_Clarke+0x2e>
 80015ce:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 80015d0:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 80015d4:	da0c      	bge.n	80015f0 <MCM_Clarke+0x44>
 80015d6:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <MCM_Clarke+0x50>)
 80015d8:	e001      	b.n	80015de <MCM_Clarke+0x32>
 80015da:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 80015de:	b29b      	uxth	r3, r3
 80015e0:	2000      	movs	r0, #0
 80015e2:	f363 000f 	bfi	r0, r3, #0, #16
 80015e6:	b293      	uxth	r3, r2
 80015e8:	f363 401f 	bfi	r0, r3, #16, #16
}
 80015ec:	b004      	add	sp, #16
 80015ee:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 80015f0:	4802      	ldr	r0, [pc, #8]	@ (80015fc <MCM_Clarke+0x50>)
 80015f2:	b20a      	sxth	r2, r1
 80015f4:	4282      	cmp	r2, r0
 80015f6:	bfb8      	it	lt
 80015f8:	4602      	movlt	r2, r0
 80015fa:	e7f0      	b.n	80015de <MCM_Clarke+0x32>
 80015fc:	ffff8001 	.word	0xffff8001

08001600 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8001600:	f500 4000 	add.w	r0, r0, #32768	@ 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8001604:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001608:	f400 7140 	and.w	r1, r0, #768	@ 0x300
 800160c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
{
 8001610:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001612:	d028      	beq.n	8001666 <MCM_Trig_Functions+0x66>
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	461a      	mov	r2, r3
 800161a:	d816      	bhi.n	800164a <MCM_Trig_Functions+0x4a>
 800161c:	b361      	cbz	r1, 8001678 <MCM_Trig_Functions+0x78>
 800161e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001622:	d109      	bne.n	8001638 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001624:	b2c0      	uxtb	r0, r0
 8001626:	43c2      	mvns	r2, r0
 8001628:	491a      	ldr	r1, [pc, #104]	@ (8001694 <MCM_Trig_Functions+0x94>)
 800162a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 800162c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001630:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001634:	4252      	negs	r2, r2
 8001636:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8001638:	b29b      	uxth	r3, r3
 800163a:	2000      	movs	r0, #0
 800163c:	f363 000f 	bfi	r0, r3, #0, #16
 8001640:	b292      	uxth	r2, r2
 8001642:	f362 401f 	bfi	r0, r2, #16, #16
}
 8001646:	b002      	add	sp, #8
 8001648:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800164a:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 800164e:	d1f3      	bne.n	8001638 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001650:	4910      	ldr	r1, [pc, #64]	@ (8001694 <MCM_Trig_Functions+0x94>)
 8001652:	b2c0      	uxtb	r0, r0
 8001654:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001656:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800165a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800165c:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800165e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001662:	b21b      	sxth	r3, r3
      break;
 8001664:	e7e8      	b.n	8001638 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001666:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001668:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800166a:	490a      	ldr	r1, [pc, #40]	@ (8001694 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800166c:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800166e:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001672:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8001676:	e7df      	b.n	8001638 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001678:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800167a:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800167c:	4905      	ldr	r1, [pc, #20]	@ (8001694 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800167e:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001680:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001684:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001688:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800168a:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800168c:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800168e:	b21b      	sxth	r3, r3
      break;
 8001690:	e7d2      	b.n	8001638 <MCM_Trig_Functions+0x38>
 8001692:	bf00      	nop
 8001694:	080099bc 	.word	0x080099bc

08001698 <MCM_Park>:
{
 8001698:	b530      	push	{r4, r5, lr}
 800169a:	4605      	mov	r5, r0
 800169c:	4604      	mov	r4, r0
 800169e:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80016a0:	4608      	mov	r0, r1
 80016a2:	f7ff ffad 	bl	8001600 <MCM_Trig_Functions>
 80016a6:	b22d      	sxth	r5, r5
 80016a8:	b201      	sxth	r1, r0
 80016aa:	1424      	asrs	r4, r4, #16
 80016ac:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 80016ae:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 80016b2:	fb04 3310 	mls	r3, r4, r0, r3
  if ( wqd_tmp > INT16_MAX )
 80016b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016ba:	da05      	bge.n	80016c8 <MCM_Park+0x30>
 80016bc:	13da      	asrs	r2, r3, #15
  else if ( wqd_tmp < ( -32768 ) )
 80016be:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 80016c2:	da22      	bge.n	800170a <MCM_Park+0x72>
 80016c4:	4a14      	ldr	r2, [pc, #80]	@ (8001718 <MCM_Park+0x80>)
 80016c6:	e001      	b.n	80016cc <MCM_Park+0x34>
 80016c8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 80016cc:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80016d0:	fb05 4400 	mla	r4, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 80016d4:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80016d8:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 80016dc:	da04      	bge.n	80016e8 <MCM_Park+0x50>
  else if ( wqd_tmp < ( -32768 ) )
 80016de:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80016e2:	da0c      	bge.n	80016fe <MCM_Park+0x66>
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <MCM_Park+0x80>)
 80016e6:	e001      	b.n	80016ec <MCM_Park+0x54>
 80016e8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return ( Output );
 80016ec:	b292      	uxth	r2, r2
 80016ee:	2000      	movs	r0, #0
 80016f0:	f362 000f 	bfi	r0, r2, #0, #16
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f363 401f 	bfi	r0, r3, #16, #16
}
 80016fa:	b005      	add	sp, #20
 80016fc:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 80016fe:	4906      	ldr	r1, [pc, #24]	@ (8001718 <MCM_Park+0x80>)
 8001700:	b21b      	sxth	r3, r3
 8001702:	428b      	cmp	r3, r1
 8001704:	bfb8      	it	lt
 8001706:	460b      	movlt	r3, r1
 8001708:	e7f0      	b.n	80016ec <MCM_Park+0x54>
    hqd_tmp = ( int16_t )( wqd_tmp );
 800170a:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <MCM_Park+0x80>)
 800170c:	b212      	sxth	r2, r2
 800170e:	429a      	cmp	r2, r3
 8001710:	bfb8      	it	lt
 8001712:	461a      	movlt	r2, r3
 8001714:	e7da      	b.n	80016cc <MCM_Park+0x34>
 8001716:	bf00      	nop
 8001718:	ffff8001 	.word	0xffff8001

0800171c <MCM_Rev_Park>:
{
 800171c:	b530      	push	{r4, r5, lr}
 800171e:	4605      	mov	r5, r0
 8001720:	b085      	sub	sp, #20
 8001722:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001724:	4608      	mov	r0, r1
 8001726:	f7ff ff6b 	bl	8001600 <MCM_Trig_Functions>
 800172a:	1424      	asrs	r4, r4, #16
 800172c:	1402      	asrs	r2, r0, #16
 800172e:	b22d      	sxth	r5, r5
 8001730:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001732:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001736:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 800173a:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 800173e:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8001742:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001746:	2000      	movs	r0, #0
 8001748:	f363 000f 	bfi	r0, r3, #0, #16
 800174c:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001750:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001754:	b005      	add	sp, #20
 8001756:	bd30      	pop	{r4, r5, pc}

08001758 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 8001758:	1e03      	subs	r3, r0, #0
 800175a:	dd32      	ble.n	80017c2 <MCM_Sqrt+0x6a>
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 800175c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001760:	bfd4      	ite	le
 8001762:	2180      	movle	r1, #128	@ 0x80
 8001764:	f44f 5100 	movgt.w	r1, #8192	@ 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001768:	fb93 f2f1 	sdiv	r2, r3, r1
 800176c:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 800176e:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001772:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001776:	d025      	beq.n	80017c4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001778:	fb93 f2f0 	sdiv	r2, r3, r0
 800177c:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800177e:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001782:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001786:	d01d      	beq.n	80017c4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001788:	fb93 f2f1 	sdiv	r2, r3, r1
 800178c:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 800178e:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001792:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001796:	d015      	beq.n	80017c4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001798:	fb93 f2f0 	sdiv	r2, r3, r0
 800179c:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800179e:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80017a2:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80017a6:	d00d      	beq.n	80017c4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80017a8:	fb93 f2f1 	sdiv	r2, r3, r1
 80017ac:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 80017ae:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80017b2:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80017b6:	d005      	beq.n	80017c4 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80017b8:	fb93 f3f0 	sdiv	r3, r3, r0
 80017bc:	4418      	add	r0, r3
 80017be:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 80017c0:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 80017c2:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop

080017c8 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	2326      	movs	r3, #38	@ 0x26
 80017cc:	4916      	ldr	r1, [pc, #88]	@ (8001828 <FOC_Clear+0x60>)
 80017ce:	fb00 f303 	mul.w	r3, r0, r3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 80017d2:	2400      	movs	r4, #0
 80017d4:	50cc      	str	r4, [r1, r3]
{
 80017d6:	4605      	mov	r5, r0
 80017d8:	f103 0208 	add.w	r2, r3, #8
 80017dc:	1858      	adds	r0, r3, r1
 80017de:	3310      	adds	r3, #16
 80017e0:	440a      	add	r2, r1
 80017e2:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80017e4:	4911      	ldr	r1, [pc, #68]	@ (800182c <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 80017e6:	6044      	str	r4, [r0, #4]
  FOCVars[bMotor].Iqd = NULL_qd;
 80017e8:	6054      	str	r4, [r2, #4]
 80017ea:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80017ec:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 80017f0:	f8c3 400a 	str.w	r4, [r3, #10]
 80017f4:	f8c3 4006 	str.w	r4, [r3, #6]
 80017f8:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80017fc:	4621      	mov	r1, r4
 80017fe:	f006 ffd5 	bl	80087ac <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001802:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <FOC_Clear+0x68>)
 8001804:	4621      	mov	r1, r4
 8001806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800180a:	f006 ffcf 	bl	80087ac <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <FOC_Clear+0x6c>)
 8001810:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001814:	f007 fae6 	bl	8008de4 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001818:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <FOC_Clear+0x70>)
 800181a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800181e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001822:	f007 b9bb 	b.w	8008b9c <PWMC_SwitchOffPWM>
 8001826:	bf00      	nop
 8001828:	20000f74 	.word	0x20000f74
 800182c:	20000eec 	.word	0x20000eec
 8001830:	20000ee8 	.word	0x20000ee8
 8001834:	20000ef4 	.word	0x20000ef4
 8001838:	20000edc 	.word	0x20000edc

0800183c <MCboot>:
{
 800183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8001840:	f8df a1ac 	ldr.w	sl, [pc, #428]	@ 80019f0 <MCboot+0x1b4>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001844:	4e56      	ldr	r6, [pc, #344]	@ (80019a0 <MCboot+0x164>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001846:	4d57      	ldr	r5, [pc, #348]	@ (80019a4 <MCboot+0x168>)
  HALL_Init (&HALL_M1);
 8001848:	f8df b1a8 	ldr.w	fp, [pc, #424]	@ 80019f4 <MCboot+0x1b8>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800184c:	4f56      	ldr	r7, [pc, #344]	@ (80019a8 <MCboot+0x16c>)
  PID_HandleInit(&PIDIqHandle_M1);
 800184e:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 80019f8 <MCboot+0x1bc>
  PID_HandleInit(&PIDIdHandle_M1);
 8001852:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80019fc <MCboot+0x1c0>
{
 8001856:	b087      	sub	sp, #28
 8001858:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 800185a:	4650      	mov	r0, sl
{
 800185c:	e9cd 3102 	strd	r3, r1, [sp, #8]
  STM_Init(&STM[M1]);
 8001860:	f007 fb8c 	bl	8008f7c <STM_Init>
  bMCBootCompleted = 0;
 8001864:	4a51      	ldr	r2, [pc, #324]	@ (80019ac <MCboot+0x170>)
  pCLM[M1] = &CircleLimitationM1;
 8001866:	4b52      	ldr	r3, [pc, #328]	@ (80019b0 <MCboot+0x174>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001868:	4852      	ldr	r0, [pc, #328]	@ (80019b4 <MCboot+0x178>)
 800186a:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 800186c:	2400      	movs	r4, #0
 800186e:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 8001870:	4a51      	ldr	r2, [pc, #324]	@ (80019b8 <MCboot+0x17c>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001872:	4d52      	ldr	r5, [pc, #328]	@ (80019bc <MCboot+0x180>)
  pCLM[M1] = &CircleLimitationM1;
 8001874:	601a      	str	r2, [r3, #0]
  ICS_Init(&PWM_Handle_M1);
 8001876:	f006 fd29 	bl	80082cc <ICS_Init>
  startTimers();
 800187a:	f007 f819 	bl	80088b0 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 800187e:	4630      	mov	r0, r6
 8001880:	f006 ff80 	bl	8008784 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001884:	4b4e      	ldr	r3, [pc, #312]	@ (80019c0 <MCboot+0x184>)
 8001886:	602b      	str	r3, [r5, #0]
  HALL_Init (&HALL_M1);
 8001888:	4658      	mov	r0, fp
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800188a:	603e      	str	r6, [r7, #0]
  HALL_Init (&HALL_M1);
 800188c:	f006 f8d4 	bl	8007a38 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8001890:	465a      	mov	r2, fp
 8001892:	6839      	ldr	r1, [r7, #0]
 8001894:	6828      	ldr	r0, [r5, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001896:	4e4b      	ldr	r6, [pc, #300]	@ (80019c4 <MCboot+0x188>)
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8001898:	f007 fa8c 	bl	8008db4 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 800189c:	4648      	mov	r0, r9
 800189e:	f006 ff71 	bl	8008784 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80018a2:	4640      	mov	r0, r8
 80018a4:	f006 ff6e 	bl	8008784 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 80018a8:	4947      	ldr	r1, [pc, #284]	@ (80019c8 <MCboot+0x18c>)
  pPIDId[M1] = &PIDIdHandle_M1;
 80018aa:	4b48      	ldr	r3, [pc, #288]	@ (80019cc <MCboot+0x190>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80018ac:	4848      	ldr	r0, [pc, #288]	@ (80019d0 <MCboot+0x194>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 80018ae:	f8c1 9000 	str.w	r9, [r1]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80018b2:	6030      	str	r0, [r6, #0]
  NTC_Init(&TempSensorParamsM1);
 80018b4:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8001a00 <MCboot+0x1c4>
  pPIDId[M1] = &PIDIdHandle_M1;
 80018b8:	f8c3 8000 	str.w	r8, [r3]
  RVBS_Init(pBusSensorM1);
 80018bc:	f007 f9b0 	bl	8008c20 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80018c0:	4a44      	ldr	r2, [pc, #272]	@ (80019d4 <MCboot+0x198>)
 80018c2:	4b45      	ldr	r3, [pc, #276]	@ (80019d8 <MCboot+0x19c>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80018c4:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8001a04 <MCboot+0x1c8>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80018c8:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 80018ca:	4648      	mov	r0, r9
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 80018cc:	6832      	ldr	r2, [r6, #0]
 80018ce:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80018d2:	f8c3 810c 	str.w	r8, [r3, #268]	@ 0x10c
  NTC_Init(&TempSensorParamsM1);
 80018d6:	f006 ff11 	bl	80086fc <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80018da:	4940      	ldr	r1, [pc, #256]	@ (80019dc <MCboot+0x1a0>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80018dc:	4b40      	ldr	r3, [pc, #256]	@ (80019e0 <MCboot+0x1a4>)
 80018de:	4841      	ldr	r0, [pc, #260]	@ (80019e4 <MCboot+0x1a8>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80018e0:	f8c1 9000 	str.w	r9, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80018e4:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 80018e6:	f007 f9e5 	bl	8008cb4 <REMNG_Init>
  FOC_Clear(M1);
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff ff6c 	bl	80017c8 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80018f0:	f04f 0901 	mov.w	r9, #1
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80018f4:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 80018f6:	f888 9024 	strb.w	r9, [r8, #36]	@ 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80018fa:	f007 fb29 	bl	8008f50 <STC_GetDefaultIqdref>
 80018fe:	f8c8 0010 	str.w	r0, [r8, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001902:	6828      	ldr	r0, [r5, #0]
 8001904:	f007 fb24 	bl	8008f50 <STC_GetDefaultIqdref>
 8001908:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800190c:	4643      	mov	r3, r8
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800190e:	f8a8 0014 	strh.w	r0, [r8, #20]
  oMCInterface[M1] = & Mci[M1];
 8001912:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 8001a08 <MCboot+0x1cc>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001916:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8001918:	4833      	ldr	r0, [pc, #204]	@ (80019e8 <MCboot+0x1ac>)
 800191a:	f8c8 0000 	str.w	r0, [r8]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800191e:	4651      	mov	r1, sl
 8001920:	f7ff fd22 	bl	8001368 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001924:	f8d8 0000 	ldr.w	r0, [r8]
 8001928:	9001      	str	r0, [sp, #4]
 800192a:	6828      	ldr	r0, [r5, #0]
 800192c:	f007 fb06 	bl	8008f3c <STC_GetMecSpeedRefUnitDefault>
 8001930:	4622      	mov	r2, r4
 8001932:	4601      	mov	r1, r0
 8001934:	9801      	ldr	r0, [sp, #4]
 8001936:	f7ff fd25 	bl	8001384 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 800193a:	9802      	ldr	r0, [sp, #8]
 800193c:	f8d8 3000 	ldr.w	r3, [r8]
 8001940:	6003      	str	r3, [r0, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001942:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <MCboot+0x168>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001944:	4820      	ldr	r0, [pc, #128]	@ (80019c8 <MCboot+0x18c>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001946:	6819      	ldr	r1, [r3, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001948:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800194a:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <MCboot+0x198>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800194c:	4d23      	ldr	r5, [pc, #140]	@ (80019dc <MCboot+0x1a0>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800194e:	f8d7 c000 	ldr.w	ip, [r7]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001952:	6807      	ldr	r7, [r0, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8001954:	481d      	ldr	r0, [pc, #116]	@ (80019cc <MCboot+0x190>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001956:	f8d3 e000 	ldr.w	lr, [r3]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800195a:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800195c:	4b23      	ldr	r3, [pc, #140]	@ (80019ec <MCboot+0x1b0>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800195e:	6836      	ldr	r6, [r6, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8001960:	6800      	ldr	r0, [r0, #0]
 8001962:	6098      	str	r0, [r3, #8]
  MCT[M1].pStateMachine = &STM[M1];
 8001964:	e9c3 2a09 	strd	r2, sl, [r3, #36]	@ 0x24
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001968:	e9c3 c700 	strd	ip, r7, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800196c:	e9c3 560b 	strd	r5, r6, [r3, #44]	@ 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8001970:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001974:	e9c3 440d 	strd	r4, r4, [r3, #52]	@ 0x34
  MCT[M1].pFF = MC_NULL;
 8001978:	e9c3 4410 	strd	r4, r4, [r3, #64]	@ 0x40
  MCT[M1].pSCC = MC_NULL;
 800197c:	e9c3 4412 	strd	r4, r4, [r3, #72]	@ 0x48
  bMCBootCompleted = 1;
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <MCboot+0x170>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001982:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8001984:	f8c3 b018 	str.w	fp, [r3, #24]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001988:	f8c3 e03c 	str.w	lr, [r3, #60]	@ 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 800198c:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 800198e:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 8001990:	651c      	str	r4, [r3, #80]	@ 0x50
  pMCTList[M1] = &MCT[M1];
 8001992:	9903      	ldr	r1, [sp, #12]
  bMCBootCompleted = 1;
 8001994:	f882 9000 	strb.w	r9, [r2]
  pMCTList[M1] = &MCT[M1];
 8001998:	600b      	str	r3, [r1, #0]
}
 800199a:	b007      	add	sp, #28
 800199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a0:	20000424 	.word	0x20000424
 80019a4:	20000edc 	.word	0x20000edc
 80019a8:	20000ef0 	.word	0x20000ef0
 80019ac:	20000ec8 	.word	0x20000ec8
 80019b0:	20000ed4 	.word	0x20000ed4
 80019b4:	20000324 	.word	0x20000324
 80019b8:	20000140 	.word	0x20000140
 80019bc:	20000ef4 	.word	0x20000ef4
 80019c0:	20000398 	.word	0x20000398
 80019c4:	20000ee4 	.word	0x20000ee4
 80019c8:	20000eec 	.word	0x20000eec
 80019cc:	20000ee8 	.word	0x20000ee8
 80019d0:	2000020c 	.word	0x2000020c
 80019d4:	20000ed8 	.word	0x20000ed8
 80019d8:	20000450 	.word	0x20000450
 80019dc:	20000ee0 	.word	0x20000ee0
 80019e0:	20000ed0 	.word	0x20000ed0
 80019e4:	200001f4 	.word	0x200001f4
 80019e8:	20000f58 	.word	0x20000f58
 80019ec:	20000f00 	.word	0x20000f00
 80019f0:	20000ef8 	.word	0x20000ef8
 80019f4:	2000025c 	.word	0x2000025c
 80019f8:	200003f8 	.word	0x200003f8
 80019fc:	200003cc 	.word	0x200003cc
 8001a00:	20000234 	.word	0x20000234
 8001a04:	20000f74 	.word	0x20000f74
 8001a08:	20000f54 	.word	0x20000f54

08001a0c <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop

08001a10 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001a10:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001a12:	4c08      	ldr	r4, [pc, #32]	@ (8001a34 <FOC_CalcCurrRef+0x24>)
 8001a14:	2326      	movs	r3, #38	@ 0x26
 8001a16:	fb03 4400 	mla	r4, r3, r0, r4
 8001a1a:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001a1e:	b103      	cbz	r3, 8001a22 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001a20:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001a22:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <FOC_CalcCurrRef+0x28>)
 8001a24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a28:	f007 fa40 	bl	8008eac <STC_CalcTorqueReference>
 8001a2c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001a2e:	8220      	strh	r0, [r4, #16]
}
 8001a30:	bd10      	pop	{r4, pc}
 8001a32:	bf00      	nop
 8001a34:	20000f74 	.word	0x20000f74
 8001a38:	20000ef4 	.word	0x20000ef4

08001a3c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001a3c:	4b01      	ldr	r3, [pc, #4]	@ (8001a44 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001a3e:	8018      	strh	r0, [r3, #0]
}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000ecc 	.word	0x20000ecc

08001a48 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001a4a:	8818      	ldrh	r0, [r3, #0]
 8001a4c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a4e:	fab0 f080 	clz	r0, r0
 8001a52:	0940      	lsrs	r0, r0, #5
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000ecc 	.word	0x20000ecc

08001a5c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001a5c:	4b01      	ldr	r3, [pc, #4]	@ (8001a64 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001a5e:	8018      	strh	r0, [r3, #0]
}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000eca 	.word	0x20000eca

08001a68 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001a6a:	8818      	ldrh	r0, [r3, #0]
 8001a6c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a6e:	fab0 f080 	clz	r0, r0
 8001a72:	0940      	lsrs	r0, r0, #5
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000eca 	.word	0x20000eca

08001a7c <TSK_MediumFrequencyTaskM1>:
{
 8001a7c:	b530      	push	{r4, r5, lr}
 8001a7e:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001a80:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001a82:	f10d 0106 	add.w	r1, sp, #6
 8001a86:	484d      	ldr	r0, [pc, #308]	@ (8001bbc <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 8001a88:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001a8c:	f006 f924 	bl	8007cd8 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001a90:	4d4b      	ldr	r5, [pc, #300]	@ (8001bc0 <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001a92:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8001a94:	6828      	ldr	r0, [r5, #0]
 8001a96:	f006 fed5 	bl	8008844 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001a9a:	484a      	ldr	r0, [pc, #296]	@ (8001bc4 <TSK_MediumFrequencyTaskM1+0x148>)
 8001a9c:	f007 fb10 	bl	80090c0 <STM_GetState>
  switch ( StateM1 )
 8001aa0:	1ec3      	subs	r3, r0, #3
 8001aa2:	2b0f      	cmp	r3, #15
 8001aa4:	d81b      	bhi.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
 8001aa6:	e8df f003 	tbb	[pc, r3]
 8001aaa:	392d      	.short	0x392d
 8001aac:	6008513e 	.word	0x6008513e
 8001ab0:	1a1a1a69 	.word	0x1a1a1a69
 8001ab4:	6e1a1a1a 	.word	0x6e1a1a1a
 8001ab8:	1c7c      	.short	0x1c7c
    ICS_SwitchOffPWM( pwmcHandle[M1] );
 8001aba:	4b43      	ldr	r3, [pc, #268]	@ (8001bc8 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	f006 fcd5 	bl	800846c <ICS_SwitchOffPWM>
    FOC_Clear( M1 );
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff fe80 	bl	80017c8 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001ac8:	6828      	ldr	r0, [r5, #0]
 8001aca:	f006 fdd3 	bl	8008674 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001ace:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001ad2:	f7ff ffc3 	bl	8001a5c <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001ad6:	483b      	ldr	r0, [pc, #236]	@ (8001bc4 <TSK_MediumFrequencyTaskM1+0x148>)
 8001ad8:	2108      	movs	r1, #8
 8001ada:	f007 fa77 	bl	8008fcc <STM_NextState>
}
 8001ade:	b003      	add	sp, #12
 8001ae0:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 8001ae2:	4836      	ldr	r0, [pc, #216]	@ (8001bbc <TSK_MediumFrequencyTaskM1+0x140>)
 8001ae4:	f006 f832 	bl	8007b4c <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001ae8:	4836      	ldr	r0, [pc, #216]	@ (8001bc4 <TSK_MediumFrequencyTaskM1+0x148>)
 8001aea:	2104      	movs	r1, #4
 8001aec:	f007 fa6e 	bl	8008fcc <STM_NextState>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d0f4      	beq.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
      FOC_Clear( M1 );
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fe67 	bl	80017c8 <FOC_Clear>
      ICS_SwitchOnPWM( pwmcHandle[M1] );
 8001afa:	4b33      	ldr	r3, [pc, #204]	@ (8001bc8 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	f006 fc75 	bl	80083ec <ICS_SwitchOnPWM>
 8001b02:	e7ec      	b.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
    ICS_TurnOnLowSides( pwmcHandle[M1] );
 8001b04:	4b30      	ldr	r3, [pc, #192]	@ (8001bc8 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	f006 fc4a 	bl	80083a0 <ICS_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001b0c:	2014      	movs	r0, #20
 8001b0e:	f7ff ff95 	bl	8001a3c <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001b12:	2110      	movs	r1, #16
 8001b14:	482b      	ldr	r0, [pc, #172]	@ (8001bc4 <TSK_MediumFrequencyTaskM1+0x148>)
 8001b16:	f007 fa59 	bl	8008fcc <STM_NextState>
    break;
 8001b1a:	e7e0      	b.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	4829      	ldr	r0, [pc, #164]	@ (8001bc4 <TSK_MediumFrequencyTaskM1+0x148>)
 8001b20:	f007 fa54 	bl	8008fcc <STM_NextState>
    break;
 8001b24:	e7db      	b.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
	  FOC_InitAdditionalMethods(M1);
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff ff70 	bl	8001a0c <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff ff6f 	bl	8001a10 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001b32:	2106      	movs	r1, #6
 8001b34:	4823      	ldr	r0, [pc, #140]	@ (8001bc4 <TSK_MediumFrequencyTaskM1+0x148>)
 8001b36:	f007 fa49 	bl	8008fcc <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001b3a:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <TSK_MediumFrequencyTaskM1+0x150>)
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	f007 fa15 	bl	8008f6c <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001b42:	4b23      	ldr	r3, [pc, #140]	@ (8001bd0 <TSK_MediumFrequencyTaskM1+0x154>)
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	f7ff fc51 	bl	80013ec <MCI_ExecBufferedCommands>
    break;
 8001b4a:	e7c8      	b.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001b4c:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <TSK_MediumFrequencyTaskM1+0x154>)
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	f7ff fc4c 	bl	80013ec <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff ff5b 	bl	8001a10 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d1bf      	bne.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001b5e:	4622      	mov	r2, r4
 8001b60:	2120      	movs	r1, #32
 8001b62:	4818      	ldr	r0, [pc, #96]	@ (8001bc4 <TSK_MediumFrequencyTaskM1+0x148>)
 8001b64:	f007 fa10 	bl	8008f88 <STM_FaultProcessing>
 8001b68:	e7b9      	b.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001b6a:	f7ff ff7d 	bl	8001a68 <TSK_StopPermanencyTimeHasElapsedM1>
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	d0b5      	beq.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001b72:	2109      	movs	r1, #9
 8001b74:	4813      	ldr	r0, [pc, #76]	@ (8001bc4 <TSK_MediumFrequencyTaskM1+0x148>)
 8001b76:	f007 fa29 	bl	8008fcc <STM_NextState>
 8001b7a:	e7b0      	b.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
    STM_NextState( &STM[M1], IDLE );
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4811      	ldr	r0, [pc, #68]	@ (8001bc4 <TSK_MediumFrequencyTaskM1+0x148>)
 8001b80:	f007 fa24 	bl	8008fcc <STM_NextState>
}
 8001b84:	e7ab      	b.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001b86:	f7ff ff5f 	bl	8001a48 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d0a7      	beq.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001b90:	2100      	movs	r1, #0
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	f007 f804 	bl	8008ba0 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001b98:	2111      	movs	r1, #17
 8001b9a:	480a      	ldr	r0, [pc, #40]	@ (8001bc4 <TSK_MediumFrequencyTaskM1+0x148>)
 8001b9c:	f007 fa16 	bl	8008fcc <STM_NextState>
 8001ba0:	e79d      	b.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001ba2:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	f006 fffa 	bl	8008ba0 <PWMC_CurrentReadingCalibr>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d096      	beq.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
      STM_NextState( &STM[M1], CLEAR );
 8001bb0:	2112      	movs	r1, #18
 8001bb2:	4804      	ldr	r0, [pc, #16]	@ (8001bc4 <TSK_MediumFrequencyTaskM1+0x148>)
 8001bb4:	f007 fa0a 	bl	8008fcc <STM_NextState>
 8001bb8:	e791      	b.n	8001ade <TSK_MediumFrequencyTaskM1+0x62>
 8001bba:	bf00      	nop
 8001bbc:	2000025c 	.word	0x2000025c
 8001bc0:	20000ed8 	.word	0x20000ed8
 8001bc4:	20000ef8 	.word	0x20000ef8
 8001bc8:	20000edc 	.word	0x20000edc
 8001bcc:	20000ef4 	.word	0x20000ef4
 8001bd0:	20000f54 	.word	0x20000f54

08001bd4 <MC_Scheduler>:
{
 8001bd4:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MC_Scheduler+0x48>)
 8001bd8:	781c      	ldrb	r4, [r3, #0]
 8001bda:	2c01      	cmp	r4, #1
 8001bdc:	d000      	beq.n	8001be0 <MC_Scheduler+0xc>
}
 8001bde:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001be0:	4d0f      	ldr	r5, [pc, #60]	@ (8001c20 <MC_Scheduler+0x4c>)
 8001be2:	882b      	ldrh	r3, [r5, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b1ab      	cbz	r3, 8001c14 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001be8:	882b      	ldrh	r3, [r5, #0]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8001c24 <MC_Scheduler+0x50>)
 8001bf2:	8813      	ldrh	r3, [r2, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	b11b      	cbz	r3, 8001c00 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001bf8:	8813      	ldrh	r3, [r2, #0]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001c00:	4a09      	ldr	r2, [pc, #36]	@ (8001c28 <MC_Scheduler+0x54>)
 8001c02:	8813      	ldrh	r3, [r2, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0e9      	beq.n	8001bde <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001c0a:	8813      	ldrh	r3, [r2, #0]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	8013      	strh	r3, [r2, #0]
}
 8001c12:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001c14:	f7ff ff32 	bl	8001a7c <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001c18:	802c      	strh	r4, [r5, #0]
 8001c1a:	e7e9      	b.n	8001bf0 <MC_Scheduler+0x1c>
 8001c1c:	20000ec8 	.word	0x20000ec8
 8001c20:	20000ece 	.word	0x20000ece
 8001c24:	20000ecc 	.word	0x20000ecc
 8001c28:	20000eca 	.word	0x20000eca

08001c2c <MC_RunMotorControlTasks>:
{
 8001c2c:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001c2e:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <MC_RunMotorControlTasks+0x18>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b903      	cbnz	r3, 8001c36 <MC_RunMotorControlTasks+0xa>
}
 8001c34:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001c36:	f7ff ffcd 	bl	8001bd4 <MC_Scheduler>
}
 8001c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001c3e:	f001 b9b3 	b.w	8002fa8 <UI_Scheduler>
 8001c42:	bf00      	nop
 8001c44:	20000ec8 	.word	0x20000ec8

08001c48 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8001c4c:	4830      	ldr	r0, [pc, #192]	@ (8001d10 <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001c4e:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8001d2c <TSK_HighFrequencyTask+0xe4>
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c52:	4c30      	ldr	r4, [pc, #192]	@ (8001d14 <TSK_HighFrequencyTask+0xcc>)
{
 8001c54:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 8001c56:	f006 f821 	bl	8007c9c <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <TSK_HighFrequencyTask+0xd0>)
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	f007 f8bf 	bl	8008de0 <STC_GetSpeedSensor>
 8001c62:	4607      	mov	r7, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001c64:	f007 f85a 	bl	8008d1c <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001c68:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001c6a:	4605      	mov	r5, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001c6c:	f8d8 0000 	ldr.w	r0, [r8]
 8001c70:	f006 fe76 	bl	8008960 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001c74:	9803      	ldr	r0, [sp, #12]
 8001c76:	f7ff fc99 	bl	80015ac <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c7a:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001c7c:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c7e:	f7ff fd0b 	bl	8001698 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001c82:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <TSK_HighFrequencyTask+0xd4>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c84:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c88:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c8a:	b200      	sxth	r0, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001c8c:	1a09      	subs	r1, r1, r0
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	f006 fd98 	bl	80087c4 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001c94:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8001c98:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001c9c:	1ac9      	subs	r1, r1, r3
 8001c9e:	4b20      	ldr	r3, [pc, #128]	@ (8001d20 <TSK_HighFrequencyTask+0xd8>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001ca0:	4606      	mov	r6, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	f006 fd8e 	bl	80087c4 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <TSK_HighFrequencyTask+0xdc>)
 8001caa:	f8ad 6008 	strh.w	r6, [sp, #8]
 8001cae:	f8ad 000a 	strh.w	r0, [sp, #10]
 8001cb2:	9902      	ldr	r1, [sp, #8]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	f005 fe69 	bl	800798c <Circle_Limitation>
 8001cba:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001cbc:	4638      	mov	r0, r7
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001cbe:	9602      	str	r6, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001cc0:	f007 f834 	bl	8008d2c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	9802      	ldr	r0, [sp, #8]
 8001cc8:	f7ff fd28 	bl	800171c <MCM_Rev_Park>
 8001ccc:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001cce:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001cd2:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001cd4:	f006 fe46 	bl	8008964 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001cd8:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001cda:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 8001cdc:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001cde:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001ce0:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001ce2:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001ce4:	f8c4 6016 	str.w	r6, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 8001ce8:	2901      	cmp	r1, #1
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001cea:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001cec:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001cee:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001cf2:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8001cf4:	d003      	beq.n	8001cfe <TSK_HighFrequencyTask+0xb6>
}
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	b006      	add	sp, #24
 8001cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	4809      	ldr	r0, [pc, #36]	@ (8001d28 <TSK_HighFrequencyTask+0xe0>)
 8001d02:	f007 f941 	bl	8008f88 <STM_FaultProcessing>
}
 8001d06:	2000      	movs	r0, #0
 8001d08:	b006      	add	sp, #24
 8001d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000025c 	.word	0x2000025c
 8001d14:	20000f74 	.word	0x20000f74
 8001d18:	20000ef4 	.word	0x20000ef4
 8001d1c:	20000eec 	.word	0x20000eec
 8001d20:	20000ee8 	.word	0x20000ee8
 8001d24:	20000ed4 	.word	0x20000ed4
 8001d28:	20000ef8 	.word	0x20000ef8
 8001d2c:	20000edc 	.word	0x20000edc

08001d30 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001d32:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001d34:	4e20      	ldr	r6, [pc, #128]	@ (8001db8 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8001d36:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001d38:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001d3c:	f006 fcf0 	bl	8008720 <NTC_CalcAvTemp>
 8001d40:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001d42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001d46:	f006 ff4b 	bl	8008be0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001d4a:	f025 0508 	bic.w	r5, r5, #8
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001d4e:	4305      	orrs	r5, r0
 8001d50:	b2ad      	uxth	r5, r5
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001d52:	b334      	cbz	r4, 8001da2 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001d54:	4f19      	ldr	r7, [pc, #100]	@ (8001dbc <TSK_SafetyTask_PWMOFF+0x8c>)
 8001d56:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001d5a:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8001d5e:	43ea      	mvns	r2, r5
 8001d60:	b292      	uxth	r2, r2
 8001d62:	4629      	mov	r1, r5
 8001d64:	4638      	mov	r0, r7
 8001d66:	f007 f90f 	bl	8008f88 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001d6a:	4638      	mov	r0, r7
 8001d6c:	f007 f9a8 	bl	80090c0 <STM_GetState>
 8001d70:	280a      	cmp	r0, #10
 8001d72:	d002      	beq.n	8001d7a <TSK_SafetyTask_PWMOFF+0x4a>
 8001d74:	280b      	cmp	r0, #11
 8001d76:	d00e      	beq.n	8001d96 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001d7e:	f006 ff0d 	bl	8008b9c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7ff fd20 	bl	80017c8 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001d88:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <TSK_SafetyTask_PWMOFF+0x90>)
 8001d8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001d92:	f006 bc6f 	b.w	8008674 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d96:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 8001d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d9e:	f006 befd 	b.w	8008b9c <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001da2:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <TSK_SafetyTask_PWMOFF+0x94>)
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	f006 ff55 	bl	8008c54 <RVBS_CalcAvVbus>
 8001daa:	f020 0008 	bic.w	r0, r0, #8
 8001dae:	4305      	orrs	r5, r0
 8001db0:	b2ad      	uxth	r5, r5
 8001db2:	e7cf      	b.n	8001d54 <TSK_SafetyTask_PWMOFF+0x24>
 8001db4:	20000ee0 	.word	0x20000ee0
 8001db8:	20000edc 	.word	0x20000edc
 8001dbc:	20000ef8 	.word	0x20000ef8
 8001dc0:	20000ed8 	.word	0x20000ed8
 8001dc4:	20000ee4 	.word	0x20000ee4

08001dc8 <TSK_SafetyTask>:
{
 8001dc8:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <TSK_SafetyTask+0x1c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d000      	beq.n	8001dd4 <TSK_SafetyTask+0xc>
}
 8001dd2:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff ffab 	bl	8001d30 <TSK_SafetyTask_PWMOFF>
}
 8001dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001dde:	f000 bda1 	b.w	8002924 <RCM_ExecUserConv>
 8001de2:	bf00      	nop
 8001de4:	20000ec8 	.word	0x20000ec8

08001de8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001de8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  ICS_SwitchOffPWM(pwmcHandle[M1]);
 8001dea:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <TSK_HardwareFaultTask+0x18>)
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	f006 fb3d 	bl	800846c <ICS_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001df6:	4803      	ldr	r0, [pc, #12]	@ (8001e04 <TSK_HardwareFaultTask+0x1c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2180      	movs	r1, #128	@ 0x80
 8001dfc:	f007 b8c4 	b.w	8008f88 <STM_FaultProcessing>
 8001e00:	20000edc 	.word	0x20000edc
 8001e04:	20000ef8 	.word	0x20000ef8

08001e08 <startMediumFrequencyTask>:

/* startMediumFrequencyTask function */
void startMediumFrequencyTask(void const * argument)
{
 8001e08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f004 ff98 	bl	8006d40 <vTaskDelay>
    MC_RunMotorControlTasks();
 8001e10:	f7ff ff0c 	bl	8001c2c <MC_RunMotorControlTasks>
  for(;;)
 8001e14:	e7f9      	b.n	8001e0a <startMediumFrequencyTask+0x2>
 8001e16:	bf00      	nop

08001e18 <StartSafetyTask>:
  /* USER CODE END MF task 1 */
}

/* startSafetyTask function */
void StartSafetyTask(void const * argument)
{
 8001e18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f004 ff90 	bl	8006d40 <vTaskDelay>
    TSK_SafetyTask();
 8001e20:	f7ff ffd2 	bl	8001dc8 <TSK_SafetyTask>
  for(;;)
 8001e24:	e7f9      	b.n	8001e1a <StartSafetyTask+0x2>
 8001e26:	bf00      	nop

08001e28 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001e28:	b410      	push	{r4}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f14 <mc_lock_pins+0xec>)
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f18 <mc_lock_pins+0xf0>)
 8001e2e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e30:	2110      	movs	r1, #16
 8001e32:	61d1      	str	r1, [r2, #28]
 8001e34:	b08d      	sub	sp, #52	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e36:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e38:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e3a:	4b38      	ldr	r3, [pc, #224]	@ (8001f1c <mc_lock_pins+0xf4>)
  temp = READ_REG(GPIOx->LCKR);
 8001e3c:	920b      	str	r2, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e3e:	2102      	movs	r1, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e40:	4a37      	ldr	r2, [pc, #220]	@ (8001f20 <mc_lock_pins+0xf8>)
  (void) temp;
 8001e42:	980b      	ldr	r0, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e44:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e46:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e48:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e4a:	69da      	ldr	r2, [r3, #28]
 8001e4c:	920a      	str	r2, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e4e:	2104      	movs	r1, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e50:	4a34      	ldr	r2, [pc, #208]	@ (8001f24 <mc_lock_pins+0xfc>)
  (void) temp;
 8001e52:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e54:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e56:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e58:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	9209      	str	r2, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e5e:	2101      	movs	r1, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e60:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  (void) temp;
 8001e64:	9809      	ldr	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e66:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e68:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e6a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	9208      	str	r2, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e70:	f44f 7180 	mov.w	r1, #256	@ 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e74:	4a2c      	ldr	r2, [pc, #176]	@ (8001f28 <mc_lock_pins+0x100>)
  (void) temp;
 8001e76:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e78:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e7a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e7c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	9207      	str	r2, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e82:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e86:	f44f 7000 	mov.w	r0, #512	@ 0x200
  (void) temp;
 8001e8a:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e8c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e8e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e90:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001e92:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e94:	4a25      	ldr	r2, [pc, #148]	@ (8001f2c <mc_lock_pins+0x104>)
  temp = READ_REG(GPIOx->LCKR);
 8001e96:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e98:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e9c:	f44f 31a0 	mov.w	r1, #81920	@ 0x14000
  (void) temp;
 8001ea0:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ea2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ea4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ea6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ea8:	69d1      	ldr	r1, [r2, #28]
 8001eaa:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eb0:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 8001eb4:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eb6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eb8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eba:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ebc:	69d9      	ldr	r1, [r3, #28]
 8001ebe:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ec0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ec4:	f44f 31c0 	mov.w	r1, #98304	@ 0x18000
  (void) temp;
 8001ec8:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eca:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ecc:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ece:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ed0:	69d1      	ldr	r1, [r2, #28]
 8001ed2:	9103      	str	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ed4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ed8:	f44f 3190 	mov.w	r1, #73728	@ 0x12000
  (void) temp;
 8001edc:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ede:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ee0:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ee2:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ee4:	69d2      	ldr	r2, [r2, #28]
 8001ee6:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ee8:	2108      	movs	r1, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eea:	4a11      	ldr	r2, [pc, #68]	@ (8001f30 <mc_lock_pins+0x108>)
  (void) temp;
 8001eec:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eee:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ef0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ef2:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ef4:	69d9      	ldr	r1, [r3, #28]
 8001ef6:	9101      	str	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ef8:	3278      	adds	r2, #120	@ 0x78
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001efa:	2180      	movs	r1, #128	@ 0x80
  (void) temp;
 8001efc:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001efe:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f00:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f02:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001f08:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 8001f0a:	b00d      	add	sp, #52	@ 0x34
 8001f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40020800 	.word	0x40020800
 8001f18:	00010010 	.word	0x00010010
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	00010002 	.word	0x00010002
 8001f24:	00010004 	.word	0x00010004
 8001f28:	00010100 	.word	0x00010100
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	00010008 	.word	0x00010008

08001f34 <MCP_ReceivedFrame>:
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
uint8_t uart = 0;
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f36:	460c      	mov	r4, r1
 8001f38:	b08d      	sub	sp, #52	@ 0x34
 8001f3a:	4615      	mov	r5, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001f3c:	2100      	movs	r1, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001f3e:	0962      	lsrs	r2, r4, #5
{
 8001f40:	4607      	mov	r7, r0
 8001f42:	461e      	mov	r6, r3
  bool bNoError = false; // Default is error
 8001f44:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8001f48:	d11f      	bne.n	8001f8a <MCP_ReceivedFrame+0x56>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001f4a:	2c1b      	cmp	r4, #27
 8001f4c:	d824      	bhi.n	8001f98 <MCP_ReceivedFrame+0x64>
 8001f4e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001f52:	0060      	.short	0x0060
 8001f54:	00b80063 	.word	0x00b80063
 8001f58:	00230151 	.word	0x00230151
 8001f5c:	015b0023 	.word	0x015b0023
 8001f60:	003a0184 	.word	0x003a0184
 8001f64:	0215018c 	.word	0x0215018c
 8001f68:	01f501de 	.word	0x01f501de
 8001f6c:	002301a0 	.word	0x002301a0
 8001f70:	00230023 	.word	0x00230023
 8001f74:	00600023 	.word	0x00600023
 8001f78:	01be01a9 	.word	0x01be01a9
 8001f7c:	00230023 	.word	0x00230023
 8001f80:	00230023 	.word	0x00230023
 8001f84:	00230023 	.word	0x00230023
 8001f88:	01cd      	.short	0x01cd
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001f8a:	3a01      	subs	r2, #1
 8001f8c:	f001 f84c 	bl	8003028 <UI_SetReg>
 8001f90:	b198      	cbz	r0, 8001fba <MCP_ReceivedFrame+0x86>
      Code &= 0x1F; /* Mask: 0001|1111 */
 8001f92:	f004 041f 	and.w	r4, r4, #31
 8001f96:	e7d8      	b.n	8001f4a <MCP_ReceivedFrame+0x16>
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001f98:	2301      	movs	r3, #1
    break;
  }

  if (RequireAck)
  {
    if (bNoError)
 8001f9a:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001f9e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	f040 81f4 	bne.w	8002390 <MCP_ReceivedFrame+0x45c>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001fa8:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8001fac:	2301      	movs	r3, #1
 8001fae:	f10d 020e 	add.w	r2, sp, #14
 8001fb2:	21ff      	movs	r1, #255	@ 0xff
 8001fb4:	47a0      	blx	r4
    }
  }
}
 8001fb6:	b00d      	add	sp, #52	@ 0x34
 8001fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001fba:	230b      	movs	r3, #11
    if (bNoError)
 8001fbc:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001fc0:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001fc4:	e7ed      	b.n	8001fa2 <MCP_ReceivedFrame+0x6e>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001fc6:	f10d 000e 	add.w	r0, sp, #14
 8001fca:	7829      	ldrb	r1, [r5, #0]
 8001fcc:	9000      	str	r0, [sp, #0]
 8001fce:	ab03      	add	r3, sp, #12
 8001fd0:	f10d 020a 	add.w	r2, sp, #10
 8001fd4:	4638      	mov	r0, r7
 8001fd6:	f001 fb3d 	bl	8003654 <UI_GetRevupData>
      outBuff[4] = (uint8_t)(FinalTorque);
 8001fda:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8001fde:	f8bd 100a 	ldrh.w	r1, [sp, #10]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001fe2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001fe6:	69fc      	ldr	r4, [r7, #28]
      outBuff[0] = (uint8_t)(rpm);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f360 0207 	bfi	r2, r0, #0, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001fee:	1200      	asrs	r0, r0, #8
      outBuff[0] = (uint8_t)(rpm);
 8001ff0:	f360 220f 	bfi	r2, r0, #8, #8
 8001ff4:	f361 4217 	bfi	r2, r1, #16, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001ff8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001ffc:	0a09      	lsrs	r1, r1, #8
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001ffe:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8002000:	f361 621f 	bfi	r2, r1, #24, #8
 8002004:	e9cd 3204 	strd	r3, r2, [sp, #16]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8002008:	2308      	movs	r3, #8
 800200a:	69b8      	ldr	r0, [r7, #24]
 800200c:	aa04      	add	r2, sp, #16
 800200e:	21f0      	movs	r1, #240	@ 0xf0
 8002010:	47a0      	blx	r4
    if (bNoError)
 8002012:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002016:	e7c4      	b.n	8001fa2 <MCP_ReceivedFrame+0x6e>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002018:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 800201a:	2305      	movs	r3, #5
 800201c:	2948      	cmp	r1, #72	@ 0x48
 800201e:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8002022:	f200 81fb 	bhi.w	800241c <MCP_ReceivedFrame+0x4e8>
 8002026:	2948      	cmp	r1, #72	@ 0x48
 8002028:	f200 821a 	bhi.w	8002460 <MCP_ReceivedFrame+0x52c>
 800202c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002030:	021802f9 	.word	0x021802f9
 8002034:	02f20218 	.word	0x02f20218
 8002038:	024b0218 	.word	0x024b0218
 800203c:	024b024b 	.word	0x024b024b
 8002040:	024b024b 	.word	0x024b024b
 8002044:	024b024b 	.word	0x024b024b
 8002048:	024b024b 	.word	0x024b024b
 800204c:	024b024b 	.word	0x024b024b
 8002050:	02280228 	.word	0x02280228
 8002054:	02180218 	.word	0x02180218
 8002058:	024b024b 	.word	0x024b024b
 800205c:	024b024b 	.word	0x024b024b
 8002060:	0218024b 	.word	0x0218024b
 8002064:	02180218 	.word	0x02180218
 8002068:	01a201a2 	.word	0x01a201a2
 800206c:	02180218 	.word	0x02180218
 8002070:	02180218 	.word	0x02180218
 8002074:	02180218 	.word	0x02180218
 8002078:	02180218 	.word	0x02180218
 800207c:	02180218 	.word	0x02180218
 8002080:	02180218 	.word	0x02180218
 8002084:	02180218 	.word	0x02180218
 8002088:	02180218 	.word	0x02180218
 800208c:	02180218 	.word	0x02180218
 8002090:	02180218 	.word	0x02180218
 8002094:	02180218 	.word	0x02180218
 8002098:	02180218 	.word	0x02180218
 800209c:	02180218 	.word	0x02180218
 80020a0:	02180218 	.word	0x02180218
 80020a4:	02180218 	.word	0x02180218
 80020a8:	02180218 	.word	0x02180218
 80020ac:	02180218 	.word	0x02180218
 80020b0:	024b0218 	.word	0x024b0218
 80020b4:	02180218 	.word	0x02180218
 80020b8:	02180218 	.word	0x02180218
 80020bc:	02280228 	.word	0x02280228
 80020c0:	0228      	.short	0x0228
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80020c2:	f995 3000 	ldrsb.w	r3, [r5]
 80020c6:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80020c8:	2203      	movs	r2, #3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f88d 200e 	strb.w	r2, [sp, #14]
 80020d0:	f2c0 8185 	blt.w	80023de <MCP_ReceivedFrame+0x4aa>
 80020d4:	2963      	cmp	r1, #99	@ 0x63
 80020d6:	f200 81db 	bhi.w	8002490 <MCP_ReceivedFrame+0x55c>
 80020da:	2941      	cmp	r1, #65	@ 0x41
 80020dc:	f200 8160 	bhi.w	80023a0 <MCP_ReceivedFrame+0x46c>
 80020e0:	2941      	cmp	r1, #65	@ 0x41
 80020e2:	d896      	bhi.n	8002012 <MCP_ReceivedFrame+0xde>
 80020e4:	a301      	add	r3, pc, #4	@ (adr r3, 80020ec <MCP_ReceivedFrame+0x1b8>)
 80020e6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	080024e9 	.word	0x080024e9
 80020f0:	080024a3 	.word	0x080024a3
 80020f4:	080024e9 	.word	0x080024e9
 80020f8:	080024e9 	.word	0x080024e9
 80020fc:	080024a3 	.word	0x080024a3
 8002100:	080023bb 	.word	0x080023bb
 8002104:	080023bb 	.word	0x080023bb
 8002108:	080023bb 	.word	0x080023bb
 800210c:	080023bb 	.word	0x080023bb
 8002110:	080023bb 	.word	0x080023bb
 8002114:	080023bb 	.word	0x080023bb
 8002118:	080023bb 	.word	0x080023bb
 800211c:	080023bb 	.word	0x080023bb
 8002120:	080023bb 	.word	0x080023bb
 8002124:	080023bb 	.word	0x080023bb
 8002128:	080023bb 	.word	0x080023bb
 800212c:	080023bb 	.word	0x080023bb
 8002130:	080023bb 	.word	0x080023bb
 8002134:	080023bb 	.word	0x080023bb
 8002138:	080023bb 	.word	0x080023bb
 800213c:	080023bb 	.word	0x080023bb
 8002140:	080023bb 	.word	0x080023bb
 8002144:	080023bb 	.word	0x080023bb
 8002148:	080023bb 	.word	0x080023bb
 800214c:	080023bb 	.word	0x080023bb
 8002150:	080023bb 	.word	0x080023bb
 8002154:	080023bb 	.word	0x080023bb
 8002158:	080023bb 	.word	0x080023bb
 800215c:	08002013 	.word	0x08002013
 8002160:	08002013 	.word	0x08002013
 8002164:	080024a3 	.word	0x080024a3
 8002168:	080023bb 	.word	0x080023bb
 800216c:	080023bb 	.word	0x080023bb
 8002170:	080023bb 	.word	0x080023bb
 8002174:	080024e9 	.word	0x080024e9
 8002178:	08002013 	.word	0x08002013
 800217c:	08002013 	.word	0x08002013
 8002180:	08002013 	.word	0x08002013
 8002184:	08002013 	.word	0x08002013
 8002188:	08002013 	.word	0x08002013
 800218c:	08002013 	.word	0x08002013
 8002190:	08002013 	.word	0x08002013
 8002194:	08002013 	.word	0x08002013
 8002198:	08002013 	.word	0x08002013
 800219c:	08002013 	.word	0x08002013
 80021a0:	08002013 	.word	0x08002013
 80021a4:	08002013 	.word	0x08002013
 80021a8:	08002013 	.word	0x08002013
 80021ac:	08002013 	.word	0x08002013
 80021b0:	08002013 	.word	0x08002013
 80021b4:	08002013 	.word	0x08002013
 80021b8:	08002013 	.word	0x08002013
 80021bc:	08002013 	.word	0x08002013
 80021c0:	08002013 	.word	0x08002013
 80021c4:	08002013 	.word	0x08002013
 80021c8:	08002013 	.word	0x08002013
 80021cc:	08002013 	.word	0x08002013
 80021d0:	08002013 	.word	0x08002013
 80021d4:	08002013 	.word	0x08002013
 80021d8:	08002013 	.word	0x08002013
 80021dc:	08002013 	.word	0x08002013
 80021e0:	08002013 	.word	0x08002013
 80021e4:	08002013 	.word	0x08002013
 80021e8:	08002013 	.word	0x08002013
 80021ec:	08002013 	.word	0x08002013
 80021f0:	080023bb 	.word	0x080023bb
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80021f4:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80021f6:	7829      	ldrb	r1, [r5, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80021f8:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80021fc:	4638      	mov	r0, r7
 80021fe:	f001 f9d7 	bl	80035b0 <UI_ExecCmd>
 8002202:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002206:	e6cc      	b.n	8001fa2 <MCP_ReceivedFrame+0x6e>
        outBuff[i] = 0;
 8002208:	ac04      	add	r4, sp, #16
 800220a:	2100      	movs	r1, #0
 800220c:	2220      	movs	r2, #32
 800220e:	4620      	mov	r0, r4
 8002210:	f007 faa6 	bl	8009760 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002214:	f8d7 60a8 	ldr.w	r6, [r7, #168]	@ 0xa8
 8002218:	f10d 0112 	add.w	r1, sp, #18
 800221c:	1e73      	subs	r3, r6, #1
 800221e:	f106 051c 	add.w	r5, r6, #28
 8002222:	e004      	b.n	800222e <MCP_ReceivedFrame+0x2fa>
 8002224:	429d      	cmp	r5, r3
        outBuff[3+i] = pHandle->s_fwVer[i];
 8002226:	f801 2f01 	strb.w	r2, [r1, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800222a:	f000 8202 	beq.w	8002632 <MCP_ReceivedFrame+0x6fe>
        outBuff[3+i] = pHandle->s_fwVer[i];
 800222e:	4618      	mov	r0, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002230:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002234:	2a09      	cmp	r2, #9
 8002236:	d1f5      	bne.n	8002224 <MCP_ReceivedFrame+0x2f0>
 8002238:	f1c6 0301 	rsb	r3, r6, #1
 800223c:	4403      	add	r3, r0
      outBuff[0] = pHandle->s_fwVer[i+5];
 800223e:	1d5a      	adds	r2, r3, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8002240:	1dd9      	adds	r1, r3, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002242:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8002244:	5cb2      	ldrb	r2, [r6, r2]
 8002246:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 800224a:	5c72      	ldrb	r2, [r6, r1]
 800224c:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002250:	5cf3      	ldrb	r3, [r6, r3]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002252:	69fd      	ldr	r5, [r7, #28]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002254:	f88d 3012 	strb.w	r3, [sp, #18]
 8002258:	e087      	b.n	800236a <MCP_ReceivedFrame+0x436>
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800225a:	88aa      	ldrh	r2, [r5, #4]
 800225c:	6829      	ldr	r1, [r5, #0]
 800225e:	4638      	mov	r0, r7
 8002260:	f001 f9dc 	bl	800361c <UI_ExecSpeedRamp>
 8002264:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002268:	e69b      	b.n	8001fa2 <MCP_ReceivedFrame+0x6e>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800226a:	f8d5 2001 	ldr.w	r2, [r5, #1]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 800226e:	4bb3      	ldr	r3, [pc, #716]	@ (800253c <MCP_ReceivedFrame+0x608>)
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8002270:	f9b5 1005 	ldrsh.w	r1, [r5, #5]
 8002274:	9100      	str	r1, [sp, #0]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8002276:	fb83 0302 	smull	r0, r3, r3, r2
 800227a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 800227e:	7829      	ldrb	r1, [r5, #0]
 8002280:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 8002284:	b21b      	sxth	r3, r3
 8002286:	4638      	mov	r0, r7
 8002288:	f001 fa02 	bl	8003690 <UI_SetRevupData>
 800228c:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002290:	e687      	b.n	8001fa2 <MCP_ReceivedFrame+0x6e>
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8002292:	6829      	ldr	r1, [r5, #0]
 8002294:	88aa      	ldrh	r2, [r5, #4]
 8002296:	b209      	sxth	r1, r1
 8002298:	4638      	mov	r0, r7
 800229a:	f001 f9d1 	bl	8003640 <UI_ExecTorqueRamp>
 800229e:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80022a2:	e67e      	b.n	8001fa2 <MCP_ReceivedFrame+0x6e>
  	   bNoError = true;
 80022a4:	2401      	movs	r4, #1
  	   uint8_t changeDone = 0x13;
 80022a6:	2313      	movs	r3, #19
  	   changeSpeedMode(speed_mode_IQmax,allowable_rpm,ramp);
 80022a8:	892a      	ldrh	r2, [r5, #8]
 80022aa:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
 80022ae:	f9b5 0000 	ldrsh.w	r0, [r5]
  	   bNoError = true;
 80022b2:	f88d 4009 	strb.w	r4, [sp, #9]
  	   uint8_t changeDone = 0x13;
 80022b6:	f88d 3010 	strb.w	r3, [sp, #16]
  	   changeSpeedMode(speed_mode_IQmax,allowable_rpm,ramp);
 80022ba:	f7fe fc9d 	bl	8000bf8 <changeSpeedMode>
  	   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&IQReceived,1);
 80022be:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 80022c2:	4623      	mov	r3, r4
 80022c4:	aa04      	add	r2, sp, #16
 80022c6:	21f0      	movs	r1, #240	@ 0xf0
 80022c8:	47a8      	blx	r5
}
 80022ca:	b00d      	add	sp, #52	@ 0x34
 80022cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	   uint16_t throttlePercentage = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80022ce:	882e      	ldrh	r6, [r5, #0]
  	   setIQ(IQ_value);
 80022d0:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
  	   uint8_t IQReceived = 0x14;
 80022d4:	2314      	movs	r3, #20
  	   bNoError = true;
 80022d6:	2401      	movs	r4, #1
 80022d8:	f88d 4009 	strb.w	r4, [sp, #9]
  	   uint8_t IQReceived = 0x14;
 80022dc:	f88d 3010 	strb.w	r3, [sp, #16]
  	   setIQ(IQ_value);
 80022e0:	f7fe fc5e 	bl	8000ba0 <setIQ>
  	   set_ThrottlePercent(throttlePercentage);
 80022e4:	4630      	mov	r0, r6
 80022e6:	f7fe fc61 	bl	8000bac <set_ThrottlePercent>
 80022ea:	e7e8      	b.n	80022be <MCP_ReceivedFrame+0x38a>
    	switch(behaviorID)
 80022ec:	782b      	ldrb	r3, [r5, #0]
 80022ee:	2b0a      	cmp	r3, #10
 80022f0:	f200 81a3 	bhi.w	800263a <MCP_ReceivedFrame+0x706>
 80022f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80022f8:	01340143 	.word	0x01340143
 80022fc:	0181018b 	.word	0x0181018b
 8002300:	01740177 	.word	0x01740177
 8002304:	01620168 	.word	0x01620168
 8002308:	014e0158 	.word	0x014e0158
 800230c:	0112      	.short	0x0112
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 800230e:	4c8c      	ldr	r4, [pc, #560]	@ (8002540 <MCP_ReceivedFrame+0x60c>)
      stepList.data = buffer;
 8002310:	9504      	str	r5, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8002312:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002314:	4621      	mov	r1, r4
 8002316:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8002318:	f88d 6014 	strb.w	r6, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800231c:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8002320:	f001 f9de 	bl	80036e0 <UI_GetMPInfo>
 8002324:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8002328:	2800      	cmp	r0, #0
 800232a:	f43f ae3d 	beq.w	8001fa8 <MCP_ReceivedFrame+0x74>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 800232e:	69fd      	ldr	r5, [r7, #28]
 8002330:	7923      	ldrb	r3, [r4, #4]
 8002332:	6822      	ldr	r2, [r4, #0]
 8002334:	69b8      	ldr	r0, [r7, #24]
 8002336:	21f0      	movs	r1, #240	@ 0xf0
 8002338:	47a8      	blx	r5
  if (RequireAck)
 800233a:	e63c      	b.n	8001fb6 <MCP_ReceivedFrame+0x82>
 800233c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002340:	ac04      	add	r4, sp, #16
 8002342:	3b01      	subs	r3, #1
 8002344:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002346:	2000      	movs	r0, #0
 8002348:	e004      	b.n	8002354 <MCP_ReceivedFrame+0x420>
 800234a:	3001      	adds	r0, #1
 800234c:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 800234e:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8002352:	d009      	beq.n	8002368 <MCP_ReceivedFrame+0x434>
 8002354:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002358:	2900      	cmp	r1, #0
 800235a:	d1f6      	bne.n	800234a <MCP_ReceivedFrame+0x416>
        outBuff[i] = 0;
 800235c:	f1c0 0220 	rsb	r2, r0, #32
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	4420      	add	r0, r4
 8002364:	f007 f9fc 	bl	8009760 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002368:	69fd      	ldr	r5, [r7, #28]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 800236a:	69b8      	ldr	r0, [r7, #24]
 800236c:	2320      	movs	r3, #32
 800236e:	4622      	mov	r2, r4
 8002370:	21f0      	movs	r1, #240	@ 0xf0
 8002372:	47a8      	blx	r5
      bNoError = true;
 8002374:	2301      	movs	r3, #1
 8002376:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 800237a:	e009      	b.n	8002390 <MCP_ReceivedFrame+0x45c>
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 800237c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8002380:	f9b5 1000 	ldrsh.w	r1, [r5]
 8002384:	4638      	mov	r0, r7
 8002386:	f001 f99d 	bl	80036c4 <UI_SetCurrentReferences>
      bNoError = true;
 800238a:	2301      	movs	r3, #1
 800238c:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8002390:	2300      	movs	r3, #0
 8002392:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002396:	461a      	mov	r2, r3
 8002398:	21f0      	movs	r1, #240	@ 0xf0
 800239a:	47a0      	blx	r4
}
 800239c:	b00d      	add	sp, #52	@ 0x34
 800239e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a0:	f1a1 0346 	sub.w	r3, r1, #70	@ 0x46
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b1b      	cmp	r3, #27
 80023a8:	f63f ae33 	bhi.w	8002012 <MCP_ReceivedFrame+0xde>
 80023ac:	4865      	ldr	r0, [pc, #404]	@ (8002544 <MCP_ReceivedFrame+0x610>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	4203      	tst	r3, r0
 80023b6:	f000 80a9 	beq.w	800250c <MCP_ReceivedFrame+0x5d8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80023ba:	f10d 0209 	add.w	r2, sp, #9
 80023be:	4638      	mov	r0, r7
 80023c0:	f000 fee2 	bl	8003188 <UI_GetReg>
          if ( bNoError == true )
 80023c4:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80023c8:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f43f adec 	beq.w	8001fa8 <MCP_ReceivedFrame+0x74>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 80023d0:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 80023d4:	2302      	movs	r3, #2
 80023d6:	aa04      	add	r2, sp, #16
 80023d8:	21f0      	movs	r1, #240	@ 0xf0
 80023da:	47a0      	blx	r4
  if (RequireAck)
 80023dc:	e5eb      	b.n	8001fb6 <MCP_ReceivedFrame+0x82>
 80023de:	f081 0380 	eor.w	r3, r1, #128	@ 0x80
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 80023e8:	f63f ae13 	bhi.w	8002012 <MCP_ReceivedFrame+0xde>
 80023ec:	2a08      	cmp	r2, #8
 80023ee:	f63f ae10 	bhi.w	8002012 <MCP_ReceivedFrame+0xde>
 80023f2:	a301      	add	r3, pc, #4	@ (adr r3, 80023f8 <MCP_ReceivedFrame+0x4c4>)
 80023f4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80023f8:	080024e9 	.word	0x080024e9
 80023fc:	08002013 	.word	0x08002013
 8002400:	080024e9 	.word	0x080024e9
 8002404:	080024a3 	.word	0x080024a3
 8002408:	080024a3 	.word	0x080024a3
 800240c:	080024a3 	.word	0x080024a3
 8002410:	080023bb 	.word	0x080023bb
 8002414:	080023bb 	.word	0x080023bb
 8002418:	080023bb 	.word	0x080023bb
 800241c:	2965      	cmp	r1, #101	@ 0x65
 800241e:	d91d      	bls.n	800245c <MCP_ReceivedFrame+0x528>
 8002420:	f1a1 0374 	sub.w	r3, r1, #116	@ 0x74
 8002424:	b2da      	uxtb	r2, r3
 8002426:	2a14      	cmp	r2, #20
 8002428:	d81a      	bhi.n	8002460 <MCP_ReceivedFrame+0x52c>
 800242a:	2b14      	cmp	r3, #20
 800242c:	d818      	bhi.n	8002460 <MCP_ReceivedFrame+0x52c>
 800242e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002432:	00f1      	.short	0x00f1
 8002434:	00270027 	.word	0x00270027
 8002438:	00270027 	.word	0x00270027
 800243c:	00170027 	.word	0x00170027
 8002440:	00170017 	.word	0x00170017
 8002444:	00270027 	.word	0x00270027
 8002448:	00170017 	.word	0x00170017
 800244c:	00170017 	.word	0x00170017
 8002450:	00170017 	.word	0x00170017
 8002454:	004a0017 	.word	0x004a0017
 8002458:	004a004a 	.word	0x004a004a
 800245c:	294e      	cmp	r1, #78	@ 0x4e
 800245e:	d805      	bhi.n	800246c <MCP_ReceivedFrame+0x538>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002460:	2302      	movs	r3, #2
    if (bNoError)
 8002462:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002466:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 800246a:	e59a      	b.n	8001fa2 <MCP_ReceivedFrame+0x6e>
 800246c:	f1a1 024f 	sub.w	r2, r1, #79	@ 0x4f
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	2301      	movs	r3, #1
 8002474:	4093      	lsls	r3, r2
 8002476:	4a34      	ldr	r2, [pc, #208]	@ (8002548 <MCP_ReceivedFrame+0x614>)
 8002478:	4213      	tst	r3, r2
 800247a:	d124      	bne.n	80024c6 <MCP_ReceivedFrame+0x592>
 800247c:	295b      	cmp	r1, #91	@ 0x5b
 800247e:	d1ef      	bne.n	8002460 <MCP_ReceivedFrame+0x52c>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002480:	f8d5 2001 	ldr.w	r2, [r5, #1]
 8002484:	4638      	mov	r0, r7
 8002486:	f000 fdcf 	bl	8003028 <UI_SetReg>
 800248a:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800248e:	e588      	b.n	8001fa2 <MCP_ReceivedFrame+0x6e>
 8002490:	f1a1 0364 	sub.w	r3, r1, #100	@ 0x64
 8002494:	482d      	ldr	r0, [pc, #180]	@ (800254c <MCP_ReceivedFrame+0x618>)
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2201      	movs	r2, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	4018      	ands	r0, r3
 80024a0:	b1c8      	cbz	r0, 80024d6 <MCP_ReceivedFrame+0x5a2>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80024a2:	f10d 0209 	add.w	r2, sp, #9
 80024a6:	4638      	mov	r0, r7
 80024a8:	f000 fe6e 	bl	8003188 <UI_GetReg>
          if ( bNoError == true )
 80024ac:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80024b0:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f43f ad78 	beq.w	8001fa8 <MCP_ReceivedFrame+0x74>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80024b8:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 80024bc:	2304      	movs	r3, #4
 80024be:	aa04      	add	r2, sp, #16
 80024c0:	21f0      	movs	r1, #240	@ 0xf0
 80024c2:	47a0      	blx	r4
  if (RequireAck)
 80024c4:	e577      	b.n	8001fb6 <MCP_ReceivedFrame+0x82>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80024c6:	f8b5 2001 	ldrh.w	r2, [r5, #1]
 80024ca:	4638      	mov	r0, r7
 80024cc:	f000 fdac 	bl	8003028 <UI_SetReg>
 80024d0:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 80024d4:	e565      	b.n	8001fa2 <MCP_ReceivedFrame+0x6e>
 80024d6:	f64c 4203 	movw	r2, #52227	@ 0xcc03
 80024da:	4213      	tst	r3, r2
 80024dc:	f47f af6d 	bne.w	80023ba <MCP_ReceivedFrame+0x486>
 80024e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002550 <MCP_ReceivedFrame+0x61c>)
 80024e2:	4213      	tst	r3, r2
 80024e4:	f43f ad95 	beq.w	8002012 <MCP_ReceivedFrame+0xde>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80024e8:	f10d 0209 	add.w	r2, sp, #9
 80024ec:	4638      	mov	r0, r7
 80024ee:	f000 fe4b 	bl	8003188 <UI_GetReg>
           if ( bNoError == true )
 80024f2:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80024f6:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f43f ad55 	beq.w	8001fa8 <MCP_ReceivedFrame+0x74>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80024fe:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 8002502:	2301      	movs	r3, #1
 8002504:	aa04      	add	r2, sp, #16
 8002506:	21f0      	movs	r1, #240	@ 0xf0
 8002508:	47a0      	blx	r4
  if (RequireAck)
 800250a:	e554      	b.n	8001fb6 <MCP_ReceivedFrame+0x82>
 800250c:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <MCP_ReceivedFrame+0x620>)
 800250e:	4213      	tst	r3, r2
 8002510:	d1c7      	bne.n	80024a2 <MCP_ReceivedFrame+0x56e>
 8002512:	4a11      	ldr	r2, [pc, #68]	@ (8002558 <MCP_ReceivedFrame+0x624>)
 8002514:	401a      	ands	r2, r3
 8002516:	2a00      	cmp	r2, #0
 8002518:	d1e6      	bne.n	80024e8 <MCP_ReceivedFrame+0x5b4>
 800251a:	e57a      	b.n	8002012 <MCP_ReceivedFrame+0xde>
    		   uart++;
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <MCP_ReceivedFrame+0x628>)
 800251e:	7819      	ldrb	r1, [r3, #0]
    		   bNoError = true;
 8002520:	2401      	movs	r4, #1
    		   uart++;
 8002522:	4421      	add	r1, r4
    		   uint8_t timeout = 0x0B;
 8002524:	220b      	movs	r2, #11
    		   uart++;
 8002526:	b2c9      	uxtb	r1, r1
    		   updateConnectionStatus(true,uart);
 8002528:	4620      	mov	r0, r4
    		   bNoError = true;
 800252a:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t timeout = 0x0B;
 800252e:	f88d 2010 	strb.w	r2, [sp, #16]
    		   uart++;
 8002532:	7019      	strb	r1, [r3, #0]
    		   updateConnectionStatus(true,uart);
 8002534:	f7fe fc08 	bl	8000d48 <updateConnectionStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&timeout,1);
 8002538:	e6c1      	b.n	80022be <MCP_ReceivedFrame+0x38a>
 800253a:	bf00      	nop
 800253c:	2aaaaaab 	.word	0x2aaaaaab
 8002540:	20000f9c 	.word	0x20000f9c
 8002544:	0f8ffe78 	.word	0x0f8ffe78
 8002548:	006407f1 	.word	0x006407f1
 800254c:	0ffe11f0 	.word	0x0ffe11f0
 8002550:	0001020c 	.word	0x0001020c
 8002554:	00200107 	.word	0x00200107
 8002558:	00100080 	.word	0x00100080
 800255c:	20000f9a 	.word	0x20000f9a
    		   bNoError = true;
 8002560:	2401      	movs	r4, #1
 8002562:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t errorReport = GET_MOTOR_ERROR_REPORT();
 8002566:	f7fe fcad 	bl	8000ec4 <GET_MOTOR_ERROR_REPORT>
 800256a:	4603      	mov	r3, r0
 800256c:	f88d 3010 	strb.w	r3, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR, &errorReport, 1);
 8002570:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8002574:	4623      	mov	r3, r4
 8002576:	aa04      	add	r2, sp, #16
 8002578:	21f0      	movs	r1, #240	@ 0xf0
 800257a:	47a8      	blx	r5
  if (RequireAck)
 800257c:	e51b      	b.n	8001fb6 <MCP_ReceivedFrame+0x82>
    		   bNoError = true;
 800257e:	2301      	movs	r3, #1
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&bootDone,1);
 8002580:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
    		   uint8_t bootDone = 0x01;
 8002584:	f88d 3010 	strb.w	r3, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&bootDone,1);
 8002588:	aa04      	add	r2, sp, #16
    		   bNoError = true;
 800258a:	f88d 3009 	strb.w	r3, [sp, #9]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&bootDone,1);
 800258e:	21f0      	movs	r1, #240	@ 0xf0
 8002590:	47a0      	blx	r4
  if (RequireAck)
 8002592:	e510      	b.n	8001fb6 <MCP_ReceivedFrame+0x82>
    		   bNoError = true;
 8002594:	2401      	movs	r4, #1
    		   uint8_t lightOff = 0x0A;
 8002596:	230a      	movs	r3, #10
    		   updateLightSensorStatus(0x00);
 8002598:	2000      	movs	r0, #0
    		   bNoError = true;
 800259a:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t lightOff = 0x0A;
 800259e:	f88d 3010 	strb.w	r3, [sp, #16]
    		   updateLightSensorStatus(0x00);
 80025a2:	f7fe fb41 	bl	8000c28 <updateLightSensorStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&lightOff,1);
 80025a6:	e68a      	b.n	80022be <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 80025a8:	2401      	movs	r4, #1
    		   uint8_t lightOn = 0x09;
 80025aa:	2309      	movs	r3, #9
    		   updateLightSensorStatus(0x01);
 80025ac:	4620      	mov	r0, r4
    		   bNoError = true;
 80025ae:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t lightOn = 0x09;
 80025b2:	f88d 3010 	strb.w	r3, [sp, #16]
    		   updateLightSensorStatus(0x01);
 80025b6:	f7fe fb37 	bl	8000c28 <updateLightSensorStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&lightOn,1);
 80025ba:	e680      	b.n	80022be <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 80025bc:	2301      	movs	r3, #1
 80025be:	f88d 3009 	strb.w	r3, [sp, #9]
    		   changePowerMode();
 80025c2:	f7fe fad9 	bl	8000b78 <changePowerMode>
  if (RequireAck)
 80025c6:	e4f6      	b.n	8001fb6 <MCP_ReceivedFrame+0x82>
    		   bNoError = true;
 80025c8:	2301      	movs	r3, #1
    		   uint8_t lightOff = 0x07;
 80025ca:	2207      	movs	r2, #7
    		   uint8_t toggle = 0x06;
 80025cc:	f88d 2010 	strb.w	r2, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&toggle,1);
 80025d0:	e9d7 0406 	ldrd	r0, r4, [r7, #24]
 80025d4:	aa04      	add	r2, sp, #16
    		   bNoError = true;
 80025d6:	f88d 3009 	strb.w	r3, [sp, #9]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&toggle,1);
 80025da:	21f0      	movs	r1, #240	@ 0xf0
 80025dc:	47a0      	blx	r4
  if (RequireAck)
 80025de:	e4ea      	b.n	8001fb6 <MCP_ReceivedFrame+0x82>
    		   bNoError = true;
 80025e0:	2301      	movs	r3, #1
    		   uint8_t toggle = 0x06;
 80025e2:	2206      	movs	r2, #6
 80025e4:	e7f2      	b.n	80025cc <MCP_ReceivedFrame+0x698>
    		   bNoError = true;
 80025e6:	2401      	movs	r4, #1
    		   uint8_t releaseBrake = 0x05;
 80025e8:	2305      	movs	r3, #5
    		   updateBrakeStatus(false);
 80025ea:	2000      	movs	r0, #0
    		   bNoError = true;
 80025ec:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t releaseBrake = 0x05;
 80025f0:	f88d 3010 	strb.w	r3, [sp, #16]
    		   updateBrakeStatus(false);
 80025f4:	f7fe faf4 	bl	8000be0 <updateBrakeStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&releaseBrake,1);
 80025f8:	e661      	b.n	80022be <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 80025fa:	2401      	movs	r4, #1
    		   uint8_t pressBrake = 0x04;
 80025fc:	2304      	movs	r3, #4
    		   updateBrakeStatus(true);
 80025fe:	4620      	mov	r0, r4
    		   bNoError = true;
 8002600:	f88d 4009 	strb.w	r4, [sp, #9]
    		   uint8_t pressBrake = 0x04;
 8002604:	f88d 3010 	strb.w	r3, [sp, #16]
    		   updateBrakeStatus(true);
 8002608:	f7fe faea 	bl	8000be0 <updateBrakeStatus>
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&pressBrake,1);
 800260c:	e657      	b.n	80022be <MCP_ReceivedFrame+0x38a>
    		   bNoError = true;
 800260e:	2301      	movs	r3, #1
    		   uint8_t twistedThorttle = 0x03;
 8002610:	2203      	movs	r2, #3
 8002612:	e7db      	b.n	80025cc <MCP_ReceivedFrame+0x698>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8002614:	786a      	ldrb	r2, [r5, #1]
 8002616:	4638      	mov	r0, r7
 8002618:	f000 fd06 	bl	8003028 <UI_SetReg>
 800261c:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002620:	e4bf      	b.n	8001fa2 <MCP_ReceivedFrame+0x6e>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002622:	786a      	ldrb	r2, [r5, #1]
 8002624:	2100      	movs	r1, #0
 8002626:	4638      	mov	r0, r7
 8002628:	f000 fcfe 	bl	8003028 <UI_SetReg>
 800262c:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8002630:	e4b7      	b.n	8001fa2 <MCP_ReceivedFrame+0x6e>
 8002632:	2326      	movs	r3, #38	@ 0x26
 8002634:	2124      	movs	r1, #36	@ 0x24
 8002636:	2222      	movs	r2, #34	@ 0x22
 8002638:	e604      	b.n	8002244 <MCP_ReceivedFrame+0x310>
    		   uint8_t invalidCMD = 0xFF;
 800263a:	23ff      	movs	r3, #255	@ 0xff
 800263c:	f88d 3010 	strb.w	r3, [sp, #16]
    		   pHandle -> fFcpSend(pHandle->pFCP, ACK_NOERROR,&invalidCMD,1);
 8002640:	69fc      	ldr	r4, [r7, #28]
 8002642:	2301      	movs	r3, #1
 8002644:	e4e1      	b.n	800200a <MCP_ReceivedFrame+0xd6>
 8002646:	bf00      	nop

08002648 <MCP_WaitNextFrame>:
{
 8002648:	b510      	push	{r4, lr}
 800264a:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 800264c:	6980      	ldr	r0, [r0, #24]
 800264e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002650:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8002652:	2280      	movs	r2, #128	@ 0x80
 8002654:	f884 20ac 	strb.w	r2, [r4, #172]	@ 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8002658:	6a23      	ldr	r3, [r4, #32]
 800265a:	69a0      	ldr	r0, [r4, #24]
}
 800265c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8002660:	4718      	bx	r3
 8002662:	bf00      	nop

08002664 <MCP_Init>:
{
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	4604      	mov	r4, r0
 800266a:	461d      	mov	r5, r3
 800266c:	9b07      	ldr	r3, [sp, #28]
  pHandle->s_fwVer = s_fwVer;
 800266e:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
  FCP_SetClient( pFCP, pHandle,
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <MCP_Init+0x34>)
  pHandle->pFCP = pFCP;
 8002674:	61a1      	str	r1, [r4, #24]
{
 8002676:	4608      	mov	r0, r1
 8002678:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	4a07      	ldr	r2, [pc, #28]	@ (800269c <MCP_Init+0x38>)
 800267e:	4b08      	ldr	r3, [pc, #32]	@ (80026a0 <MCP_Init+0x3c>)
 8002680:	4621      	mov	r1, r4
 8002682:	f005 f9bf 	bl	8007a04 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8002686:	9b06      	ldr	r3, [sp, #24]
 8002688:	6263      	str	r3, [r4, #36]	@ 0x24
  pHandle->fFcpReceive = fFcpReceive;
 800268a:	e9c4 6507 	strd	r6, r5, [r4, #28]
  MCP_WaitNextFrame(pHandle);
 800268e:	4620      	mov	r0, r4
 8002690:	f7ff ffda 	bl	8002648 <MCP_WaitNextFrame>
}
 8002694:	b002      	add	sp, #8
 8002696:	bd70      	pop	{r4, r5, r6, pc}
 8002698:	080026a5 	.word	0x080026a5
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	08001f35 	.word	0x08001f35

080026a4 <MCP_OnTimeOut>:
{
 80026a4:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 80026a6:	f7ff ffcf 	bl	8002648 <MCP_WaitNextFrame>
}
 80026aa:	bd08      	pop	{r3, pc}

080026ac <MCP_SentFrame>:
{
 80026ac:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 80026ae:	f7ff ffcb 	bl	8002648 <MCP_WaitNextFrame>
}
 80026b2:	bd08      	pop	{r3, pc}

080026b4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80026b4:	b530      	push	{r4, r5, lr}
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80026b6:	4d09      	ldr	r5, [pc, #36]	@ (80026dc <MX_MotorControl_Init+0x28>)
 80026b8:	4c09      	ldr	r4, [pc, #36]	@ (80026e0 <MX_MotorControl_Init+0x2c>)
{
 80026ba:	b083      	sub	sp, #12
  MCboot(pMCI,pMCT);
 80026bc:	4629      	mov	r1, r5
 80026be:	4620      	mov	r0, r4
 80026c0:	f7ff f8bc 	bl	800183c <MCboot>
  mc_lock_pins();
 80026c4:	f7ff fbb0 	bl	8001e28 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80026c8:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <MX_MotorControl_Init+0x30>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4806      	ldr	r0, [pc, #24]	@ (80026e8 <MX_MotorControl_Init+0x34>)
 80026ce:	462b      	mov	r3, r5
 80026d0:	4622      	mov	r2, r4
 80026d2:	2101      	movs	r1, #1
 80026d4:	f000 fc26 	bl	8002f24 <UI_TaskInit>
}
 80026d8:	b003      	add	sp, #12
 80026da:	bd30      	pop	{r4, r5, pc}
 80026dc:	20000fa4 	.word	0x20000fa4
 80026e0:	20000fa8 	.word	0x20000fa8
 80026e4:	08009bec 	.word	0x08009bec
 80026e8:	20000564 	.word	0x20000564

080026ec <vPortSetupTimerInterrupt>:

void vPortSetupTimerInterrupt( void )
{
 80026ec:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80026ee:	f001 fdcd 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80026f2:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <vPortSetupTimerInterrupt+0x18>)
 80026f4:	fba3 3000 	umull	r3, r0, r3, r0
 80026f8:	09c0      	lsrs	r0, r0, #7
}
 80026fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80026fe:	f001 baef 	b.w	8003ce0 <HAL_SYSTICK_Config>
 8002702:	bf00      	nop
 8002704:	10624dd3 	.word	0x10624dd3

08002708 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002708:	4b6a      	ldr	r3, [pc, #424]	@ (80028b4 <RCM_RegisterRegConv+0x1ac>)
{
 800270a:	b570      	push	{r4, r5, r6, lr}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800270c:	681c      	ldr	r4, [r3, #0]
{
 800270e:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002710:	2c00      	cmp	r4, #0
 8002712:	d077      	beq.n	8002804 <RCM_RegisterRegConv+0xfc>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002714:	7922      	ldrb	r2, [r4, #4]
 8002716:	f890 c004 	ldrb.w	ip, [r0, #4]
 800271a:	4562      	cmp	r2, ip
 800271c:	d01d      	beq.n	800275a <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	2a00      	cmp	r2, #0
 8002722:	f000 808a 	beq.w	800283a <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002726:	7914      	ldrb	r4, [r2, #4]
 8002728:	4564      	cmp	r4, ip
  uint8_t handle=255;
 800272a:	f04f 00ff 	mov.w	r0, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800272e:	d072      	beq.n	8002816 <RCM_RegisterRegConv+0x10e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002730:	689c      	ldr	r4, [r3, #8]
 8002732:	2c00      	cmp	r4, #0
 8002734:	f000 8085 	beq.w	8002842 <RCM_RegisterRegConv+0x13a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002738:	7922      	ldrb	r2, [r4, #4]
 800273a:	4562      	cmp	r2, ip
 800273c:	d077      	beq.n	800282e <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800273e:	68dc      	ldr	r4, [r3, #12]
 8002740:	2c00      	cmp	r4, #0
 8002742:	f000 808d 	beq.w	8002860 <RCM_RegisterRegConv+0x158>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002746:	7922      	ldrb	r2, [r4, #4]
 8002748:	4562      	cmp	r2, ip
 800274a:	f000 8095 	beq.w	8002878 <RCM_RegisterRegConv+0x170>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 800274e:	2803      	cmp	r0, #3
 8002750:	bf98      	it	ls
 8002752:	680a      	ldrls	r2, [r1, #0]
 8002754:	d906      	bls.n	8002764 <RCM_RegisterRegConv+0x5c>
 8002756:	20ff      	movs	r0, #255	@ 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8002758:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800275a:	6802      	ldr	r2, [r0, #0]
 800275c:	6820      	ldr	r0, [r4, #0]
 800275e:	4282      	cmp	r2, r0
 8002760:	d1dd      	bne.n	800271e <RCM_RegisterRegConv+0x16>
  uint8_t i=0;
 8002762:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 8002764:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002768:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800276a:	4c53      	ldr	r4, [pc, #332]	@ (80028b8 <RCM_RegisterRegConv+0x1b0>)
 800276c:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 800276e:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002770:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002774:	d411      	bmi.n	800279a <RCM_RegisterRegConv+0x92>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002776:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002778:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800277c:	f023 0320 	bic.w	r3, r3, #32
 8002780:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002782:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002784:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002786:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800278a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800278e:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002790:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002792:	6893      	ldr	r3, [r2, #8]
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800279a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800279c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80027a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80027a2:	790b      	ldrb	r3, [r1, #4]
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80027aa:	d83a      	bhi.n	8002822 <RCM_RegisterRegConv+0x11a>
 80027ac:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80027b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
 80027bc:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80027c0:	fab4 f484 	clz	r4, r4
 80027c4:	fa2e fe04 	lsr.w	lr, lr, r4
 80027c8:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 80027ca:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80027ce:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 80027d2:	f04f 7cf8 	mov.w	ip, #32505856	@ 0x1f00000
 80027d6:	fa9c f5ac 	rbit	r5, ip
 80027da:	fab5 f585 	clz	r5, r5
 80027de:	fa9c fcac 	rbit	ip, ip
 80027e2:	688e      	ldr	r6, [r1, #8]
 80027e4:	fabc fc8c 	clz	ip, ip
 80027e8:	fa23 f105 	lsr.w	r1, r3, r5
 80027ec:	fa23 f30c 	lsr.w	r3, r3, ip
 80027f0:	fa06 f503 	lsl.w	r5, r6, r3
 80027f4:	2307      	movs	r3, #7
 80027f6:	408b      	lsls	r3, r1
 80027f8:	ea24 0303 	bic.w	r3, r4, r3
 80027fc:	432b      	orrs	r3, r5
 80027fe:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8002802:	bd70      	pop	{r4, r5, r6, pc}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	2a00      	cmp	r2, #0
 8002808:	d03c      	beq.n	8002884 <RCM_RegisterRegConv+0x17c>
 800280a:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 800280e:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002810:	7914      	ldrb	r4, [r2, #4]
 8002812:	4564      	cmp	r4, ip
 8002814:	d18c      	bne.n	8002730 <RCM_RegisterRegConv+0x28>
 8002816:	6814      	ldr	r4, [r2, #0]
 8002818:	680a      	ldr	r2, [r1, #0]
 800281a:	4294      	cmp	r4, r2
 800281c:	d188      	bne.n	8002730 <RCM_RegisterRegConv+0x28>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800281e:	2001      	movs	r0, #1
 8002820:	e7a0      	b.n	8002764 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002822:	3c1e      	subs	r4, #30
 8002824:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002828:	f003 7e00 	and.w	lr, r3, #33554432	@ 0x2000000
 800282c:	e7c4      	b.n	80027b8 <RCM_RegisterRegConv+0xb0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800282e:	6824      	ldr	r4, [r4, #0]
 8002830:	680a      	ldr	r2, [r1, #0]
 8002832:	4294      	cmp	r4, r2
 8002834:	d183      	bne.n	800273e <RCM_RegisterRegConv+0x36>
      i++;
 8002836:	2002      	movs	r0, #2
 8002838:	e794      	b.n	8002764 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800283a:	689c      	ldr	r4, [r3, #8]
 800283c:	b1b4      	cbz	r4, 800286c <RCM_RegisterRegConv+0x164>
 800283e:	2001      	movs	r0, #1
 8002840:	e77a      	b.n	8002738 <RCM_RegisterRegConv+0x30>
 8002842:	2804      	cmp	r0, #4
 8002844:	d924      	bls.n	8002890 <RCM_RegisterRegConv+0x188>
 8002846:	68d8      	ldr	r0, [r3, #12]
 8002848:	2800      	cmp	r0, #0
 800284a:	d02f      	beq.n	80028ac <RCM_RegisterRegConv+0x1a4>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800284c:	7902      	ldrb	r2, [r0, #4]
 800284e:	4562      	cmp	r2, ip
 8002850:	680a      	ldr	r2, [r1, #0]
 8002852:	d1f0      	bne.n	8002836 <RCM_RegisterRegConv+0x12e>
 8002854:	6800      	ldr	r0, [r0, #0]
      i++;
 8002856:	4282      	cmp	r2, r0
 8002858:	bf0c      	ite	eq
 800285a:	2003      	moveq	r0, #3
 800285c:	2002      	movne	r0, #2
 800285e:	e781      	b.n	8002764 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002860:	2804      	cmp	r0, #4
 8002862:	680a      	ldr	r2, [r1, #0]
 8002864:	f67f af7e 	bls.w	8002764 <RCM_RegisterRegConv+0x5c>
 8002868:	2003      	movs	r0, #3
 800286a:	e77b      	b.n	8002764 <RCM_RegisterRegConv+0x5c>
 800286c:	68dc      	ldr	r4, [r3, #12]
 800286e:	b1dc      	cbz	r4, 80028a8 <RCM_RegisterRegConv+0x1a0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002870:	7922      	ldrb	r2, [r4, #4]
 8002872:	4562      	cmp	r2, ip
 8002874:	d118      	bne.n	80028a8 <RCM_RegisterRegConv+0x1a0>
 8002876:	2001      	movs	r0, #1
 8002878:	6824      	ldr	r4, [r4, #0]
 800287a:	680a      	ldr	r2, [r1, #0]
 800287c:	4294      	cmp	r4, r2
 800287e:	f47f af66 	bne.w	800274e <RCM_RegisterRegConv+0x46>
 8002882:	e7f1      	b.n	8002868 <RCM_RegisterRegConv+0x160>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002884:	689c      	ldr	r4, [r3, #8]
 8002886:	b11c      	cbz	r4, 8002890 <RCM_RegisterRegConv+0x188>
 8002888:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 800288c:	4610      	mov	r0, r2
 800288e:	e753      	b.n	8002738 <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002890:	68dc      	ldr	r4, [r3, #12]
 8002892:	b914      	cbnz	r4, 800289a <RCM_RegisterRegConv+0x192>
 8002894:	680a      	ldr	r2, [r1, #0]
 8002896:	4620      	mov	r0, r4
 8002898:	e764      	b.n	8002764 <RCM_RegisterRegConv+0x5c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800289a:	7920      	ldrb	r0, [r4, #4]
 800289c:	790a      	ldrb	r2, [r1, #4]
 800289e:	4290      	cmp	r0, r2
 80028a0:	d006      	beq.n	80028b0 <RCM_RegisterRegConv+0x1a8>
 80028a2:	680a      	ldr	r2, [r1, #0]
 80028a4:	2000      	movs	r0, #0
 80028a6:	e75d      	b.n	8002764 <RCM_RegisterRegConv+0x5c>
 80028a8:	680a      	ldr	r2, [r1, #0]
 80028aa:	e7b8      	b.n	800281e <RCM_RegisterRegConv+0x116>
 80028ac:	680a      	ldr	r2, [r1, #0]
 80028ae:	e7c2      	b.n	8002836 <RCM_RegisterRegConv+0x12e>
 80028b0:	2000      	movs	r0, #0
 80028b2:	e7e1      	b.n	8002878 <RCM_RegisterRegConv+0x170>
 80028b4:	20000fd4 	.word	0x20000fd4
 80028b8:	20000fb4 	.word	0x20000fb4

080028bc <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80028bc:	4b18      	ldr	r3, [pc, #96]	@ (8002920 <RCM_ExecRegularConv+0x64>)
 80028be:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80028c2:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80028c4:	6812      	ldr	r2, [r2, #0]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80028c6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80028ca:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80028cc:	bf93      	iteet	ls
 80028ce:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 80028d2:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80028d4:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
 80028d8:	f043 7300 	orrls.w	r3, r3, #33554432	@ 0x2000000
 80028dc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80028e0:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80028e4:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80028e8:	fab1 f181 	clz	r1, r1
 80028ec:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 80028f0:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 80028fc:	f021 011f 	bic.w	r1, r1, #31
 8002900:	4319      	orrs	r1, r3

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8002902:	0153      	lsls	r3, r2, #5
 8002904:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
 8002908:	f103 4384 	add.w	r3, r3, #1107296256	@ 0x42000000
 800290c:	2101      	movs	r1, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800290e:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 8002910:	f8c3 1178 	str.w	r1, [r3, #376]	@ 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8002914:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8002916:	079b      	lsls	r3, r3, #30
 8002918:	d5fc      	bpl.n	8002914 <RCM_ExecRegularConv+0x58>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800291a:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 800291c:	b280      	uxth	r0, r0
 800291e:	4770      	bx	lr
 8002920:	20000fd4 	.word	0x20000fd4

08002924 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002924:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8002926:	4c0e      	ldr	r4, [pc, #56]	@ (8002960 <RCM_ExecUserConv+0x3c>)
 8002928:	7823      	ldrb	r3, [r4, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d000      	beq.n	8002930 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 800292e:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002930:	4d0c      	ldr	r5, [pc, #48]	@ (8002964 <RCM_ExecUserConv+0x40>)
 8002932:	7828      	ldrb	r0, [r5, #0]
 8002934:	f7ff ffc2 	bl	80028bc <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002938:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <RCM_ExecUserConv+0x44>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800293a:	4a0c      	ldr	r2, [pc, #48]	@ (800296c <RCM_ExecUserConv+0x48>)
 800293c:	4601      	mov	r1, r0
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800293e:	7828      	ldrb	r0, [r5, #0]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002940:	8011      	strh	r1, [r2, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002942:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002946:	2202      	movs	r2, #2
 8002948:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800294a:	2d00      	cmp	r5, #0
 800294c:	d0ef      	beq.n	800292e <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800294e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002952:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002954:	2300      	movs	r3, #0
 8002956:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002958:	462b      	mov	r3, r5
}
 800295a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800295e:	4718      	bx	r3
 8002960:	20000fac 	.word	0x20000fac
 8002964:	20000fb0 	.word	0x20000fb0
 8002968:	20000fb4 	.word	0x20000fb4
 800296c:	20000fae 	.word	0x20000fae

08002970 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002970:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <HAL_MspInit+0x3c>)
 8002974:	2200      	movs	r2, #0
 8002976:	9200      	str	r2, [sp, #0]
 8002978:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800297a:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800297e:	6459      	str	r1, [r3, #68]	@ 0x44
 8002980:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8002982:	f400 4080 	and.w	r0, r0, #16384	@ 0x4000
 8002986:	9000      	str	r0, [sp, #0]
 8002988:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	9201      	str	r2, [sp, #4]
 800298c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800298e:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8002992:	6418      	str	r0, [r3, #64]	@ 0x40
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800299e:	210f      	movs	r1, #15
 80029a0:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029a6:	f001 b92d 	b.w	8003c04 <HAL_NVIC_SetPriority>
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800

080029b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80029b2:	6803      	ldr	r3, [r0, #0]
 80029b4:	4a3c      	ldr	r2, [pc, #240]	@ (8002aa8 <HAL_ADC_MspInit+0xf8>)
{
 80029b6:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80029ba:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80029c0:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80029c4:	940a      	str	r4, [sp, #40]	@ 0x28
  if(hadc->Instance==ADC1)
 80029c6:	d004      	beq.n	80029d2 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80029c8:	4a38      	ldr	r2, [pc, #224]	@ (8002aac <HAL_ADC_MspInit+0xfc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d046      	beq.n	8002a5c <HAL_ADC_MspInit+0xac>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80029ce:	b00c      	add	sp, #48	@ 0x30
 80029d0:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029d2:	4b37      	ldr	r3, [pc, #220]	@ (8002ab0 <HAL_ADC_MspInit+0x100>)
 80029d4:	9400      	str	r4, [sp, #0]
 80029d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d8:	4836      	ldr	r0, [pc, #216]	@ (8002ab4 <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029de:	645a      	str	r2, [r3, #68]	@ 0x44
 80029e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029e2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80029e6:	9200      	str	r2, [sp, #0]
 80029e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ea:	9401      	str	r4, [sp, #4]
 80029ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ee:	f042 0204 	orr.w	r2, r2, #4
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80029f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029f6:	f002 0204 	and.w	r2, r2, #4
 80029fa:	9201      	str	r2, [sp, #4]
 80029fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fe:	9402      	str	r4, [sp, #8]
 8002a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a0a:	f002 0201 	and.w	r2, r2, #1
 8002a0e:	9202      	str	r2, [sp, #8]
 8002a10:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a12:	9403      	str	r4, [sp, #12]
 8002a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a16:	f042 0202 	orr.w	r2, r2, #2
 8002a1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a24:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = BATTERY_CURRENT_Pin|MOTOR_TEMP_Pin;
 8002a26:	2205      	movs	r2, #5
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2e:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a30:	f001 f970 	bl	8003d14 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 8002a36:	2288      	movs	r2, #136	@ 0x88
 8002a38:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3a:	481f      	ldr	r0, [pc, #124]	@ (8002ab8 <HAL_ADC_MspInit+0x108>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin;
 8002a3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f001 f967 	bl	8003d14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMPERATURE_Pin;
 8002a46:	2201      	movs	r2, #1
 8002a48:	2303      	movs	r3, #3
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8002a4a:	481c      	ldr	r0, [pc, #112]	@ (8002abc <HAL_ADC_MspInit+0x10c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = TEMPERATURE_Pin;
 8002a50:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(TEMPERATURE_GPIO_Port, &GPIO_InitStruct);
 8002a54:	f001 f95e 	bl	8003d14 <HAL_GPIO_Init>
}
 8002a58:	b00c      	add	sp, #48	@ 0x30
 8002a5a:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002a5c:	4b14      	ldr	r3, [pc, #80]	@ (8002ab0 <HAL_ADC_MspInit+0x100>)
 8002a5e:	9404      	str	r4, [sp, #16]
 8002a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002a62:	4814      	ldr	r0, [pc, #80]	@ (8002ab4 <HAL_ADC_MspInit+0x104>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a6c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002a70:	9204      	str	r2, [sp, #16]
 8002a72:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a74:	9405      	str	r4, [sp, #20]
 8002a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a78:	f042 0204 	orr.w	r2, r2, #4
 8002a7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8002a80:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8002aa0 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8002a8c:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a90:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002a92:	f001 f93f 	bl	8003d14 <HAL_GPIO_Init>
}
 8002a96:	b00c      	add	sp, #48	@ 0x30
 8002a98:	bd10      	pop	{r4, pc}
 8002a9a:	bf00      	nop
 8002a9c:	f3af 8000 	nop.w
 8002aa0:	00000010 	.word	0x00000010
 8002aa4:	00000003 	.word	0x00000003
 8002aa8:	40012000 	.word	0x40012000
 8002aac:	40012100 	.word	0x40012100
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40020400 	.word	0x40020400

08002ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ac0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8002ac2:	6802      	ldr	r2, [r0, #0]
 8002ac4:	4922      	ldr	r1, [pc, #136]	@ (8002b50 <HAL_TIM_Base_MspInit+0x90>)
{
 8002ac6:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8002aca:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002ad0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002ad4:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8002ad8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002adc:	d00e      	beq.n	8002afc <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ade:	b00a      	add	sp, #40	@ 0x28
 8002ae0:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b54 <HAL_TIM_Base_MspInit+0x94>)
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aee:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	9b01      	ldr	r3, [sp, #4]
}
 8002af8:	b00a      	add	sp, #40	@ 0x28
 8002afa:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002afc:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8002b00:	9302      	str	r3, [sp, #8]
 8002b02:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8002b04:	f040 0001 	orr.w	r0, r0, #1
 8002b08:	6410      	str	r0, [r2, #64]	@ 0x40
 8002b0a:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8002b0c:	f000 0001 	and.w	r0, r0, #1
 8002b10:	9002      	str	r0, [sp, #8]
 8002b12:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b14:	9303      	str	r3, [sp, #12]
 8002b16:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	480f      	ldr	r0, [pc, #60]	@ (8002b58 <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b20:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8002b22:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8002b48 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b30:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 8002b32:	ed8d 7b04 	vstr	d7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b36:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3a:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3c:	f001 f8ea 	bl	8003d14 <HAL_GPIO_Init>
}
 8002b40:	b00a      	add	sp, #40	@ 0x28
 8002b42:	bd10      	pop	{r4, pc}
 8002b44:	f3af 8000 	nop.w
 8002b48:	00000007 	.word	0x00000007
 8002b4c:	00000002 	.word	0x00000002
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020000 	.word	0x40020000

08002b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b5c:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bdc <HAL_TIM_MspPostInit+0x80>)
 8002b60:	6801      	ldr	r1, [r0, #0]
{
 8002b62:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002b66:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002b6c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002b70:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8002b72:	d001      	beq.n	8002b78 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b74:	b008      	add	sp, #32
 8002b76:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b78:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b80:	4817      	ldr	r0, [pc, #92]	@ (8002be0 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b82:	f041 0102 	orr.w	r1, r1, #2
 8002b86:	6311      	str	r1, [r2, #48]	@ 0x30
 8002b88:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002b8a:	f001 0102 	and.w	r1, r1, #2
 8002b8e:	9100      	str	r1, [sp, #0]
 8002b90:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b96:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	4323      	orrs	r3, r4
 8002b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b9e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba0:	4023      	ands	r3, r4
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002ba8:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8002bac:	2302      	movs	r3, #2
 8002bae:	2602      	movs	r6, #2
 8002bb0:	2702      	movs	r7, #2
 8002bb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bba:	f001 f8ab 	bl	8003d14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002bbe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002bc2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc4:	4807      	ldr	r0, [pc, #28]	@ (8002be4 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bc6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002bca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002bce:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd2:	f001 f89f 	bl	8003d14 <HAL_GPIO_Init>
}
 8002bd6:	b008      	add	sp, #32
 8002bd8:	bdd0      	pop	{r4, r6, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40020400 	.word	0x40020400
 8002be4:	40020000 	.word	0x40020000

08002be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8002bea:	4a1b      	ldr	r2, [pc, #108]	@ (8002c58 <HAL_UART_MspInit+0x70>)
 8002bec:	6801      	ldr	r1, [r0, #0]
{
 8002bee:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 8002bf2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002bf8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002bfc:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 8002bfe:	d002      	beq.n	8002c06 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c00:	b009      	add	sp, #36	@ 0x24
 8002c02:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c06:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8002c0e:	f040 0010 	orr.w	r0, r0, #16
 8002c12:	6450      	str	r0, [r2, #68]	@ 0x44
 8002c14:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8002c16:	f000 0010 	and.w	r0, r0, #16
 8002c1a:	9000      	str	r0, [sp, #0]
 8002c1c:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c22:	480e      	ldr	r0, [pc, #56]	@ (8002c5c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002c2c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8002c50 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c38:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002c3a:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c40:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c42:	f001 f867 	bl	8003d14 <HAL_GPIO_Init>
}
 8002c46:	b009      	add	sp, #36	@ 0x24
 8002c48:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c4c:	f3af 8000 	nop.w
 8002c50:	000000c0 	.word	0x000000c0
 8002c54:	00000002 	.word	0x00000002
 8002c58:	40011000 	.word	0x40011000
 8002c5c:	40020400 	.word	0x40020400

08002c60 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002c60:	b508      	push	{r3, lr}
  if(huart->Instance==USART1)
 8002c62:	6802      	ldr	r2, [r0, #0]
 8002c64:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <HAL_UART_MspDeInit+0x28>)
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d000      	beq.n	8002c6c <HAL_UART_MspDeInit+0xc>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002c6a:	bd08      	pop	{r3, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 8002c6c:	4a07      	ldr	r2, [pc, #28]	@ (8002c8c <HAL_UART_MspDeInit+0x2c>)
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 8002c6e:	4808      	ldr	r0, [pc, #32]	@ (8002c90 <HAL_UART_MspDeInit+0x30>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8002c70:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8002c72:	f023 0310 	bic.w	r3, r3, #16
 8002c76:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 8002c78:	21c0      	movs	r1, #192	@ 0xc0
 8002c7a:	f001 f95b 	bl	8003f34 <HAL_GPIO_DeInit>
}
 8002c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002c82:	2025      	movs	r0, #37	@ 0x25
 8002c84:	f001 b808 	b.w	8003c98 <HAL_NVIC_DisableIRQ>
 8002c88:	40011000 	.word	0x40011000
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40020400 	.word	0x40020400

08002c94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c98:	4b23      	ldr	r3, [pc, #140]	@ (8002d28 <HAL_InitTick+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	9202      	str	r2, [sp, #8]
 8002c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ca0:	f042 0210 	orr.w	r2, r2, #16
 8002ca4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	9302      	str	r3, [sp, #8]
{
 8002cae:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cb0:	a901      	add	r1, sp, #4
 8002cb2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002cb4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cb6:	f001 fb0f 	bl	80042d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002cba:	9b06      	ldr	r3, [sp, #24]
 8002cbc:	b9d3      	cbnz	r3, 8002cf4 <HAL_InitTick+0x60>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cbe:	f001 faeb 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8002cc2:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cc4:	4a19      	ldr	r2, [pc, #100]	@ (8002d2c <HAL_InitTick+0x98>)

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002cc6:	4c1a      	ldr	r4, [pc, #104]	@ (8002d30 <HAL_InitTick+0x9c>)
 8002cc8:	491a      	ldr	r1, [pc, #104]	@ (8002d34 <HAL_InitTick+0xa0>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0c9b      	lsrs	r3, r3, #18
 8002cd0:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8002cd2:	2200      	movs	r2, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8002cd4:	e9c4 1300 	strd	r1, r3, [r4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 8002cd8:	4620      	mov	r0, r4
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002cda:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim6.Init.ClockDivision = 0;
 8002cde:	6122      	str	r2, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce0:	60a2      	str	r2, [r4, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce2:	61a2      	str	r2, [r4, #24]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ce4:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim6);
 8002ce6:	f001 fd5d 	bl	80047a4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002cea:	4606      	mov	r6, r0
 8002cec:	b130      	cbz	r0, 8002cfc <HAL_InitTick+0x68>
    }
  }

 /* Return function status */
  return status;
}
 8002cee:	4630      	mov	r0, r6
 8002cf0:	b008      	add	sp, #32
 8002cf2:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cf4:	f001 fad0 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8002cf8:	0043      	lsls	r3, r0, #1
 8002cfa:	e7e3      	b.n	8002cc4 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f001 fde1 	bl	80048c4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002d02:	4606      	mov	r6, r0
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d1f2      	bne.n	8002cee <HAL_InitTick+0x5a>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d08:	2036      	movs	r0, #54	@ 0x36
 8002d0a:	f000 ffb7 	bl	8003c7c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0e:	2d0f      	cmp	r5, #15
 8002d10:	d901      	bls.n	8002d16 <HAL_InitTick+0x82>
        status = HAL_ERROR;
 8002d12:	2601      	movs	r6, #1
 8002d14:	e7eb      	b.n	8002cee <HAL_InitTick+0x5a>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002d16:	4632      	mov	r2, r6
 8002d18:	4629      	mov	r1, r5
 8002d1a:	2036      	movs	r0, #54	@ 0x36
 8002d1c:	f000 ff72 	bl	8003c04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d20:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <HAL_InitTick+0xa4>)
 8002d22:	601d      	str	r5, [r3, #0]
 8002d24:	e7e3      	b.n	8002cee <HAL_InitTick+0x5a>
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	431bde83 	.word	0x431bde83
 8002d30:	20000fe4 	.word	0x20000fe4
 8002d34:	40001000 	.word	0x40001000
 8002d38:	20000574 	.word	0x20000574

08002d3c <HAL_SuspendTick>:
  * @retval None
  */
void HAL_SuspendTick(void)
{
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <HAL_SuspendTick+0x10>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68d3      	ldr	r3, [r2, #12]
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	60d3      	str	r3, [r2, #12]
}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000fe4 	.word	0x20000fe4

08002d50 <HAL_ResumeTick>:
  * @retval None
  */
void HAL_ResumeTick(void)
{
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <HAL_ResumeTick+0x10>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68d3      	ldr	r3, [r2, #12]
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000fe4 	.word	0x20000fe4

08002d64 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d64:	4801      	ldr	r0, [pc, #4]	@ (8002d6c <TIM6_DAC_IRQHandler+0x8>)
 8002d66:	f002 b8bb 	b.w	8004ee0 <HAL_TIM_IRQHandler>
 8002d6a:	bf00      	nop
 8002d6c:	20000fe4 	.word	0x20000fe4

08002d70 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8002d70:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <ADC_IRQHandler+0x24>)
 8002d72:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8002d74:	0752      	lsls	r2, r2, #29
 8002d76:	d505      	bpl.n	8002d84 <ADC_IRQHandler+0x14>
  {
    // Clear Flags
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	f022 020c 	bic.w	r2, r2, #12
 8002d7e:	601a      	str	r2, [r3, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8002d80:	f7fe bf62 	b.w	8001c48 <TSK_HighFrequencyTask>
  }
#ifdef ADC3
  else
  {
    // Clear Flags
    ADC3->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8002d84:	4a04      	ldr	r2, [pc, #16]	@ (8002d98 <ADC_IRQHandler+0x28>)
 8002d86:	6813      	ldr	r3, [r2, #0]
 8002d88:	f023 030c 	bic.w	r3, r3, #12
 8002d8c:	6013      	str	r3, [r2, #0]

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8002d8e:	f7fe bf5b 	b.w	8001c48 <TSK_HighFrequencyTask>
 8002d92:	bf00      	nop
 8002d94:	40012000 	.word	0x40012000
 8002d98:	40012200 	.word	0x40012200

08002d9c <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8002d9c:	4803      	ldr	r0, [pc, #12]	@ (8002dac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d9e:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8002da0:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002da2:	f06f 0201 	mvn.w	r2, #1
 8002da6:	611a      	str	r2, [r3, #16]
  ICS_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002da8:	f005 bbf4 	b.w	8008594 <ICS_TIMx_UP_IRQHandler>
 8002dac:	20000324 	.word	0x20000324

08002db0 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002db0:	4807      	ldr	r0, [pc, #28]	@ (8002dd0 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 8002db2:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8002db4:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8002db6:	68db      	ldr	r3, [r3, #12]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	0612      	lsls	r2, r2, #24
 8002dbc:	d504      	bpl.n	8002dc8 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002dbe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002dc2:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    ICS_BRK_IRQHandler(&PWM_Handle_M1);
 8002dc4:	f005 fc30 	bl	8008628 <ICS_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002dc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002dcc:	f7fe bf02 	b.w	8001bd4 <MC_Scheduler>
 8002dd0:	20000324 	.word	0x20000324

08002dd4 <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8002dd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 8002dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8002e08 <TIM2_IRQHandler+0x34>)
 8002dd8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	07d1      	lsls	r1, r2, #31
 8002dde:	d506      	bpl.n	8002dee <TIM2_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002de0:	f06f 0201 	mvn.w	r2, #1
 8002de4:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_UPDATE(HALL_M1.TIMx);
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8002de6:	4620      	mov	r0, r4
 8002de8:	f005 f94e 	bl	8008088 <HALL_TIMx_UP_IRQHandler>
  else
  {
    /* Nothing to do */
  }
  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 8002dec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	0792      	lsls	r2, r2, #30
 8002df2:	d507      	bpl.n	8002e04 <TIM2_IRQHandler+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002df4:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8002df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8002dfc:	4802      	ldr	r0, [pc, #8]	@ (8002e08 <TIM2_IRQHandler+0x34>)
 8002dfe:	611a      	str	r2, [r3, #16]
 8002e00:	f004 bfb6 	b.w	8007d70 <HALL_TIMx_CC_IRQHandler>
}
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	bf00      	nop
 8002e08:	2000025c 	.word	0x2000025c

08002e0c <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002e0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002e0e:	4c1f      	ldr	r4, [pc, #124]	@ (8002e8c <USART1_IRQHandler+0x80>)
 8002e10:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	0691      	lsls	r1, r2, #26
{
 8002e18:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002e1a:	d407      	bmi.n	8002e2c <USART1_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002e1c:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002e1e:	0612      	lsls	r2, r2, #24
 8002e20:	d413      	bmi.n	8002e4a <USART1_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002e22:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002e24:	071b      	lsls	r3, r3, #28
 8002e26:	d418      	bmi.n	8002e5a <USART1_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002e2c:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002e2e:	4620      	mov	r0, r4
 8002e30:	b2c9      	uxtb	r1, r1
 8002e32:	f006 fa03 	bl	800923c <UFCP_RX_IRQ_Handler>
 8002e36:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d01e      	beq.n	8002e7a <USART1_IRQHandler+0x6e>
    if (retVal == 2)
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d021      	beq.n	8002e84 <USART1_IRQHandler+0x78>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002e40:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	0612      	lsls	r2, r2, #24
 8002e48:	d5eb      	bpl.n	8002e22 <USART1_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 8002e4a:	4810      	ldr	r0, [pc, #64]	@ (8002e8c <USART1_IRQHandler+0x80>)
 8002e4c:	f006 f94e 	bl	80090ec <UFCP_TX_IRQ_Handler>
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002e50:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	071b      	lsls	r3, r3, #28
 8002e58:	d5e6      	bpl.n	8002e28 <USART1_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002e5a:	480c      	ldr	r0, [pc, #48]	@ (8002e8c <USART1_IRQHandler+0x80>)
 8002e5c:	f006 fa54 	bl	8009308 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002e60:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  tmpreg = USARTx->SR;
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002e68:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002e6e:	9b01      	ldr	r3, [sp, #4]
}
 8002e70:	b002      	add	sp, #8
 8002e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 8002e76:	f000 b8b9 	b.w	8002fec <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStart();
 8002e7a:	f000 f8bd 	bl	8002ff8 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002e7e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8002e82:	e7cb      	b.n	8002e1c <USART1_IRQHandler+0x10>
      UI_SerialCommunicationTimeOutStop();
 8002e84:	f000 f8b2 	bl	8002fec <UI_SerialCommunicationTimeOutStop>
 8002e88:	e7da      	b.n	8002e40 <USART1_IRQHandler+0x34>
 8002e8a:	bf00      	nop
 8002e8c:	20000004 	.word	0x20000004

08002e90 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002e90:	b510      	push	{r4, lr}
 8002e92:	b082      	sub	sp, #8
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002e94:	f7fe ffa8 	bl	8001de8 <TSK_HardwareFaultTask>
 8002e98:	4c1b      	ldr	r4, [pc, #108]	@ (8002f08 <HardFault_Handler+0x78>)

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002e9a:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	0712      	lsls	r2, r2, #28
 8002ea2:	d41d      	bmi.n	8002ee0 <HardFault_Handler+0x50>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002ea4:	681a      	ldr	r2, [r3, #0]
        UFCP_OVR_IRQ_Handler(&pUSART);
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002ea6:	0610      	lsls	r0, r2, #24
 8002ea8:	d40f      	bmi.n	8002eca <HardFault_Handler+0x3a>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002eaa:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002eac:	0692      	lsls	r2, r2, #26
 8002eae:	d5f6      	bpl.n	8002e9e <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002eb0:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	b2c9      	uxtb	r1, r1
 8002eb6:	f006 f9c1 	bl	800923c <UFCP_RX_IRQ_Handler>
 8002eba:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d01f      	beq.n	8002f00 <HardFault_Handler+0x70>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d1ea      	bne.n	8002e9a <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8002ec4:	f000 f892 	bl	8002fec <UI_SerialCommunicationTimeOutStop>
 8002ec8:	e7e7      	b.n	8002e9a <HardFault_Handler+0xa>
        UFCP_TX_IRQ_Handler(&pUSART);
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f006 f90e 	bl	80090ec <UFCP_TX_IRQ_Handler>
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002ed0:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	0691      	lsls	r1, r2, #26
 8002ed8:	d4ea      	bmi.n	8002eb0 <HardFault_Handler+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002eda:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002edc:	0712      	lsls	r2, r2, #28
 8002ede:	d5e1      	bpl.n	8002ea4 <HardFault_Handler+0x14>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f006 fa11 	bl	8009308 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002ee6:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  tmpreg = USARTx->SR;
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002eee:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002ef4:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 8002ef6:	f000 f879 	bl	8002fec <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002efa:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 8002efe:	e7d1      	b.n	8002ea4 <HardFault_Handler+0x14>
          UI_SerialCommunicationTimeOutStart();
 8002f00:	f000 f87a 	bl	8002ff8 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002f04:	e7c9      	b.n	8002e9a <HardFault_Handler+0xa>
 8002f06:	bf00      	nop
 8002f08:	20000004 	.word	0x20000004

08002f0c <EXTI9_5_IRQHandler>:

}

void EXTI9_5_IRQHandler(void)
{
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET)
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <EXTI9_5_IRQHandler+0x14>)
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	0612      	lsls	r2, r2, #24
 8002f12:	d400      	bmi.n	8002f16 <EXTI9_5_IRQHandler+0xa>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
		wakeUp();
	}

}
 8002f14:	4770      	bx	lr
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8002f16:	2280      	movs	r2, #128	@ 0x80
 8002f18:	615a      	str	r2, [r3, #20]
		wakeUp();
 8002f1a:	f7fd be37 	b.w	8000b8c <wakeUp>
 8002f1e:	bf00      	nop
 8002f20:	40013c00 	.word	0x40013c00

08002f24 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
 8002f28:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 8002f9c <UI_TaskInit+0x78>
    pMCP->_Super = UI_Params;
 8002f2c:	f8df e070 	ldr.w	lr, [pc, #112]	@ 8002fa0 <UI_TaskInit+0x7c>

    UFCP_Init( & pUSART );
 8002f30:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8002fa4 <UI_TaskInit+0x80>
{
 8002f34:	461e      	mov	r6, r3
    pMCP = &MCP_UI_Params;
 8002f36:	4b15      	ldr	r3, [pc, #84]	@ (8002f8c <UI_TaskInit+0x68>)
 8002f38:	f8c8 3000 	str.w	r3, [r8]
{
 8002f3c:	4607      	mov	r7, r0
 8002f3e:	460c      	mov	r4, r1
 8002f40:	4615      	mov	r5, r2
    pMCP->_Super = UI_Params;
 8002f42:	469c      	mov	ip, r3
 8002f44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002f48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002f4c:	e89e 0003 	ldmia.w	lr, {r0, r1}
{
 8002f50:	b082      	sub	sp, #8
    pMCP->_Super = UI_Params;
 8002f52:	e88c 0003 	stmia.w	ip, {r0, r1}
    UFCP_Init( & pUSART );
 8002f56:	4648      	mov	r0, r9
{
 8002f58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
    UFCP_Init( & pUSART );
 8002f5c:	f006 f8c4 	bl	80090e8 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <UI_TaskInit+0x6c>)
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	f8cd a004 	str.w	sl, [sp, #4]
 8002f68:	f8d8 0000 	ldr.w	r0, [r8]
 8002f6c:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <UI_TaskInit+0x70>)
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f98 <UI_TaskInit+0x74>)
 8002f70:	4649      	mov	r1, r9
 8002f72:	f7ff fb77 	bl	8002664 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002f76:	f8d8 0000 	ldr.w	r0, [r8]
 8002f7a:	970a      	str	r7, [sp, #40]	@ 0x28
 8002f7c:	4633      	mov	r3, r6
 8002f7e:	462a      	mov	r2, r5
 8002f80:	4621      	mov	r1, r4

}
 8002f82:	b002      	add	sp, #8
 8002f84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002f88:	f000 b83c 	b.w	8003004 <UI_Init>
 8002f8c:	20001030 	.word	0x20001030
 8002f90:	08009329 	.word	0x08009329
 8002f94:	08009155 	.word	0x08009155
 8002f98:	08009181 	.word	0x08009181
 8002f9c:	200010e0 	.word	0x200010e0
 8002fa0:	20000e9c 	.word	0x20000e9c
 8002fa4:	20000004 	.word	0x20000004

08002fa8 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe0 <UI_Scheduler+0x38>)
 8002faa:	8813      	ldrh	r3, [r2, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	b11b      	cbz	r3, 8002fb8 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002fb0:	8813      	ldrh	r3, [r2, #0]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <UI_Scheduler+0x3c>)
 8002fba:	8813      	ldrh	r3, [r2, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d903      	bls.n	8002fca <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002fc2:	8813      	ldrh	r3, [r2, #0]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002fca:	4a07      	ldr	r2, [pc, #28]	@ (8002fe8 <UI_Scheduler+0x40>)
 8002fcc:	8813      	ldrh	r3, [r2, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d903      	bls.n	8002fdc <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002fd4:	8813      	ldrh	r3, [r2, #0]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	8013      	strh	r3, [r2, #0]
  }
}
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	2000102e 	.word	0x2000102e
 8002fe4:	2000102c 	.word	0x2000102c
 8002fe8:	20000568 	.word	0x20000568

08002fec <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002fec:	4b01      	ldr	r3, [pc, #4]	@ (8002ff4 <UI_SerialCommunicationTimeOutStop+0x8>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	801a      	strh	r2, [r3, #0]
}
 8002ff2:	4770      	bx	lr
 8002ff4:	2000102c 	.word	0x2000102c

08002ff8 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002ff8:	4b01      	ldr	r3, [pc, #4]	@ (8003000 <UI_SerialCommunicationTimeOutStart+0x8>)
 8002ffa:	224f      	movs	r2, #79	@ 0x4f
 8002ffc:	801a      	strh	r2, [r3, #0]
}
 8002ffe:	4770      	bx	lr
 8003000:	2000102c 	.word	0x2000102c

08003004 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8003004:	e9c0 2302 	strd	r2, r3, [r0, #8]
  pHandle->bDriveNum = bMCNum;
 8003008:	7101      	strb	r1, [r0, #4]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 800300a:	9b00      	ldr	r3, [sp, #0]
 800300c:	6103      	str	r3, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 800300e:	2100      	movs	r1, #0
 8003010:	7501      	strb	r1, [r0, #20]
}
 8003012:	4770      	bx	lr

08003014 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8003014:	7903      	ldrb	r3, [r0, #4]
 8003016:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8003018:	bf86      	itte	hi
 800301a:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 800301c:	2001      	movhi	r0, #1
    retVal = false;
 800301e:	2000      	movls	r0, #0
  }
  return retVal;
}
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop

08003024 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8003024:	7d00      	ldrb	r0, [r0, #20]
 8003026:	4770      	bx	lr

08003028 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8003028:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800302a:	6884      	ldr	r4, [r0, #8]
 800302c:	7d03      	ldrb	r3, [r0, #20]
 800302e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8003032:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003034:	68c2      	ldr	r2, [r0, #12]
{
 8003036:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 800303c:	295b      	cmp	r1, #91	@ 0x5b
 800303e:	d82f      	bhi.n	80030a0 <UI_SetReg+0x78>
 8003040:	e8df f001 	tbb	[pc, r1]
 8003044:	412e2e3d 	.word	0x412e2e3d
 8003048:	59544f2e 	.word	0x59544f2e
 800304c:	736e695e 	.word	0x736e695e
 8003050:	8d888378 	.word	0x8d888378
 8003054:	2e2e2e2e 	.word	0x2e2e2e2e
 8003058:	2e2e2e2e 	.word	0x2e2e2e2e
 800305c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003060:	2e2e2e2e 	.word	0x2e2e2e2e
 8003064:	2e2e2e2e 	.word	0x2e2e2e2e
 8003068:	2e2e2e2e 	.word	0x2e2e2e2e
 800306c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003070:	2e2e2e2e 	.word	0x2e2e2e2e
 8003074:	2e2e2e2e 	.word	0x2e2e2e2e
 8003078:	2e2e2e2e 	.word	0x2e2e2e2e
 800307c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003080:	2e2e2e2e 	.word	0x2e2e2e2e
 8003084:	2e2e922e 	.word	0x2e2e922e
 8003088:	2e2e2e2e 	.word	0x2e2e2e2e
 800308c:	2e2e2e2e 	.word	0x2e2e2e2e
 8003090:	2e2e2e2e 	.word	0x2e2e2e2e
 8003094:	2e2e2e2e 	.word	0x2e2e2e2e
 8003098:	2e2e2e2e 	.word	0x2e2e2e2e
 800309c:	312e2e2e 	.word	0x312e2e2e
 80030a0:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 80030a2:	b003      	add	sp, #12
 80030a4:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 80030a6:	4937      	ldr	r1, [pc, #220]	@ (8003184 <UI_SetReg+0x15c>)
 80030a8:	fb81 3104 	smull	r3, r1, r1, r4
 80030ac:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 80030b0:	2200      	movs	r2, #0
 80030b2:	b209      	sxth	r1, r1
 80030b4:	4628      	mov	r0, r5
 80030b6:	f7fe f965 	bl	8001384 <MCI_ExecSpeedRamp>
  bool retVal = true;
 80030ba:	2001      	movs	r0, #1
 80030bc:	e7f1      	b.n	80030a2 <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 80030be:	b2e1      	uxtb	r1, r4
 80030c0:	f7ff ffa8 	bl	8003014 <UI_SelectMC>
    break;
 80030c4:	e7ed      	b.n	80030a2 <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 80030c6:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 80030ca:	d052      	beq.n	8003172 <UI_SetReg+0x14a>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 80030cc:	2c01      	cmp	r4, #1
 80030ce:	d1f4      	bne.n	80030ba <UI_SetReg+0x92>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80030d0:	4628      	mov	r0, r5
 80030d2:	f7fe f9e7 	bl	80014a4 <MCI_GetMecSpeedRefUnit>
 80030d6:	2200      	movs	r2, #0
 80030d8:	4601      	mov	r1, r0
 80030da:	4628      	mov	r0, r5
 80030dc:	f7fe f952 	bl	8001384 <MCI_ExecSpeedRamp>
 80030e0:	e7eb      	b.n	80030ba <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	b221      	sxth	r1, r4
 80030e6:	f005 fb55 	bl	8008794 <PID_SetKP>
    break;
 80030ea:	e7e6      	b.n	80030ba <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	b221      	sxth	r1, r4
 80030f0:	f005 fb52 	bl	8008798 <PID_SetKI>
    break;
 80030f4:	e7e1      	b.n	80030ba <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	b221      	sxth	r1, r4
 80030fa:	f005 fb5d 	bl	80087b8 <PID_SetKD>
    break;
 80030fe:	e7dc      	b.n	80030ba <UI_SetReg+0x92>
      currComp = MCI_GetIqdref(pMCI);
 8003100:	4628      	mov	r0, r5
 8003102:	f7fe f9fd 	bl	8001500 <MCI_GetIqdref>
 8003106:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8003108:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 800310c:	9901      	ldr	r1, [sp, #4]
 800310e:	4628      	mov	r0, r5
 8003110:	f7fe f94c 	bl	80013ac <MCI_SetCurrentReferences>
    break;
 8003114:	e7d1      	b.n	80030ba <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8003116:	6858      	ldr	r0, [r3, #4]
 8003118:	b221      	sxth	r1, r4
 800311a:	f005 fb3b 	bl	8008794 <PID_SetKP>
    break;
 800311e:	e7cc      	b.n	80030ba <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8003120:	6858      	ldr	r0, [r3, #4]
 8003122:	b221      	sxth	r1, r4
 8003124:	f005 fb38 	bl	8008798 <PID_SetKI>
    break;
 8003128:	e7c7      	b.n	80030ba <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 800312a:	6858      	ldr	r0, [r3, #4]
 800312c:	b221      	sxth	r1, r4
 800312e:	f005 fb43 	bl	80087b8 <PID_SetKD>
    break;
 8003132:	e7c2      	b.n	80030ba <UI_SetReg+0x92>
      currComp = MCI_GetIqdref(pMCI);
 8003134:	4628      	mov	r0, r5
 8003136:	f7fe f9e3 	bl	8001500 <MCI_GetIqdref>
 800313a:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 800313c:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8003140:	9901      	ldr	r1, [sp, #4]
 8003142:	4628      	mov	r0, r5
 8003144:	f7fe f932 	bl	80013ac <MCI_SetCurrentReferences>
    break;
 8003148:	e7b7      	b.n	80030ba <UI_SetReg+0x92>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 800314a:	6898      	ldr	r0, [r3, #8]
 800314c:	b221      	sxth	r1, r4
 800314e:	f005 fb21 	bl	8008794 <PID_SetKP>
    break;
 8003152:	e7b2      	b.n	80030ba <UI_SetReg+0x92>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8003154:	6898      	ldr	r0, [r3, #8]
 8003156:	b221      	sxth	r1, r4
 8003158:	f005 fb1e 	bl	8008798 <PID_SetKI>
    break;
 800315c:	e7ad      	b.n	80030ba <UI_SetReg+0x92>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 800315e:	6898      	ldr	r0, [r3, #8]
 8003160:	b221      	sxth	r1, r4
 8003162:	f005 fb29 	bl	80087b8 <PID_SetKD>
    break;
 8003166:	e7a8      	b.n	80030ba <UI_SetReg+0x92>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8003168:	b221      	sxth	r1, r4
 800316a:	4628      	mov	r0, r5
 800316c:	f7fe fa0a 	bl	8001584 <MCI_SetIdref>
    break;
 8003170:	e7a3      	b.n	80030ba <UI_SetReg+0x92>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8003172:	4628      	mov	r0, r5
 8003174:	f7fe f9ee 	bl	8001554 <MCI_GetTeref>
 8003178:	4622      	mov	r2, r4
 800317a:	4601      	mov	r1, r0
 800317c:	4628      	mov	r0, r5
 800317e:	f7fe f90b 	bl	8001398 <MCI_ExecTorqueRamp>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8003182:	e79a      	b.n	80030ba <UI_SetReg+0x92>
 8003184:	2aaaaaab 	.word	0x2aaaaaab

08003188 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8003188:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800318a:	68c4      	ldr	r4, [r0, #12]
 800318c:	7d03      	ldrb	r3, [r0, #20]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800318e:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8003190:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003194:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8003198:	b08d      	sub	sp, #52	@ 0x34

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 800319a:	2a00      	cmp	r2, #0
 800319c:	f000 808b 	beq.w	80032b6 <UI_GetReg+0x12e>
  {
    *success = true;
 80031a0:	f04f 0c01 	mov.w	ip, #1
 80031a4:	f882 c000 	strb.w	ip, [r2]
  }

  switch (bRegID)
 80031a8:	2981      	cmp	r1, #129	@ 0x81
 80031aa:	f200 8111 	bhi.w	80033d0 <UI_GetReg+0x248>
 80031ae:	e8df f011 	tbh	[pc, r1, lsl #1]
 80031b2:	0143      	.short	0x0143
 80031b4:	016d0171 	.word	0x016d0171
 80031b8:	01620169 	.word	0x01620169
 80031bc:	015a015e 	.word	0x015a015e
 80031c0:	01130156 	.word	0x01130156
 80031c4:	01d30126 	.word	0x01d30126
 80031c8:	010901cf 	.word	0x010901cf
 80031cc:	0146014a 	.word	0x0146014a
 80031d0:	010f014e 	.word	0x010f014e
 80031d4:	010f010f 	.word	0x010f010f
 80031d8:	010f010f 	.word	0x010f010f
 80031dc:	010f010f 	.word	0x010f010f
 80031e0:	010f010f 	.word	0x010f010f
 80031e4:	01520122 	.word	0x01520122
 80031e8:	010f01ea 	.word	0x010f01ea
 80031ec:	01e3010f 	.word	0x01e3010f
 80031f0:	011d0118 	.word	0x011d0118
 80031f4:	01dc010f 	.word	0x01dc010f
 80031f8:	013401d7 	.word	0x013401d7
 80031fc:	012a012f 	.word	0x012a012f
 8003200:	011d0118 	.word	0x011d0118
 8003204:	01090113 	.word	0x01090113
 8003208:	01770139 	.word	0x01770139
 800320c:	01c8013e 	.word	0x01c8013e
 8003210:	019e01b3 	.word	0x019e01b3
 8003214:	010f010f 	.word	0x010f010f
 8003218:	010f010f 	.word	0x010f010f
 800321c:	010f010f 	.word	0x010f010f
 8003220:	010f010f 	.word	0x010f010f
 8003224:	010f010f 	.word	0x010f010f
 8003228:	010f010f 	.word	0x010f010f
 800322c:	010f010f 	.word	0x010f010f
 8003230:	01900197 	.word	0x01900197
 8003234:	010f0109 	.word	0x010f0109
 8003238:	010f010f 	.word	0x010f010f
 800323c:	010f010f 	.word	0x010f010f
 8003240:	010f010f 	.word	0x010f010f
 8003244:	010f010f 	.word	0x010f010f
 8003248:	010f010f 	.word	0x010f010f
 800324c:	010f010f 	.word	0x010f010f
 8003250:	010f010f 	.word	0x010f010f
 8003254:	010f010f 	.word	0x010f010f
 8003258:	010f010f 	.word	0x010f010f
 800325c:	010f010f 	.word	0x010f010f
 8003260:	010f010f 	.word	0x010f010f
 8003264:	010f010f 	.word	0x010f010f
 8003268:	010f0180 	.word	0x010f0180
 800326c:	010f010f 	.word	0x010f010f
 8003270:	010f010f 	.word	0x010f010f
 8003274:	010f010f 	.word	0x010f010f
 8003278:	010f010f 	.word	0x010f010f
 800327c:	010f010f 	.word	0x010f010f
 8003280:	010f010f 	.word	0x010f010f
 8003284:	010f010f 	.word	0x010f010f
 8003288:	010f010f 	.word	0x010f010f
 800328c:	017c010f 	.word	0x017c010f
 8003290:	01cd018c 	.word	0x01cd018c
 8003294:	0111010f 	.word	0x0111010f
 8003298:	010f0111 	.word	0x010f0111
 800329c:	010f010f 	.word	0x010f010f
 80032a0:	010f010f 	.word	0x010f010f
 80032a4:	010f010f 	.word	0x010f010f
 80032a8:	010f010f 	.word	0x010f010f
 80032ac:	010f010f 	.word	0x010f010f
 80032b0:	010f010f 	.word	0x010f010f
 80032b4:	0111      	.short	0x0111
 80032b6:	2981      	cmp	r1, #129	@ 0x81
 80032b8:	f200 808c 	bhi.w	80033d4 <UI_GetReg+0x24c>
 80032bc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80032c0:	00ea00bc 	.word	0x00ea00bc
 80032c4:	00e200e6 	.word	0x00e200e6
 80032c8:	00d700db 	.word	0x00d700db
 80032cc:	00cf00d3 	.word	0x00cf00d3
 80032d0:	009f008c 	.word	0x009f008c
 80032d4:	0148014c 	.word	0x0148014c
 80032d8:	00c30082 	.word	0x00c30082
 80032dc:	00c700bf 	.word	0x00c700bf
 80032e0:	008a008a 	.word	0x008a008a
 80032e4:	008a008a 	.word	0x008a008a
 80032e8:	008a008a 	.word	0x008a008a
 80032ec:	008a008a 	.word	0x008a008a
 80032f0:	009b008a 	.word	0x009b008a
 80032f4:	016300cb 	.word	0x016300cb
 80032f8:	008a008a 	.word	0x008a008a
 80032fc:	0091015c 	.word	0x0091015c
 8003300:	008a0096 	.word	0x008a0096
 8003304:	01500155 	.word	0x01500155
 8003308:	00a800ad 	.word	0x00a800ad
 800330c:	009100a3 	.word	0x009100a3
 8003310:	008c0096 	.word	0x008c0096
 8003314:	00b20082 	.word	0x00b20082
 8003318:	00b700f0 	.word	0x00b700f0
 800331c:	012c0141 	.word	0x012c0141
 8003320:	008a0117 	.word	0x008a0117
 8003324:	008a008a 	.word	0x008a008a
 8003328:	008a008a 	.word	0x008a008a
 800332c:	008a008a 	.word	0x008a008a
 8003330:	008a008a 	.word	0x008a008a
 8003334:	008a008a 	.word	0x008a008a
 8003338:	008a008a 	.word	0x008a008a
 800333c:	0110008a 	.word	0x0110008a
 8003340:	00820109 	.word	0x00820109
 8003344:	008a008a 	.word	0x008a008a
 8003348:	008a008a 	.word	0x008a008a
 800334c:	008a008a 	.word	0x008a008a
 8003350:	008a008a 	.word	0x008a008a
 8003354:	008a008a 	.word	0x008a008a
 8003358:	008a008a 	.word	0x008a008a
 800335c:	008a008a 	.word	0x008a008a
 8003360:	008a008a 	.word	0x008a008a
 8003364:	008a008a 	.word	0x008a008a
 8003368:	008a008a 	.word	0x008a008a
 800336c:	008a008a 	.word	0x008a008a
 8003370:	008a008a 	.word	0x008a008a
 8003374:	00f9008a 	.word	0x00f9008a
 8003378:	008a008a 	.word	0x008a008a
 800337c:	008a008a 	.word	0x008a008a
 8003380:	008a008a 	.word	0x008a008a
 8003384:	008a008a 	.word	0x008a008a
 8003388:	008a008a 	.word	0x008a008a
 800338c:	008a008a 	.word	0x008a008a
 8003390:	008a008a 	.word	0x008a008a
 8003394:	008a008a 	.word	0x008a008a
 8003398:	008a008a 	.word	0x008a008a
 800339c:	010500f5 	.word	0x010500f5
 80033a0:	008a0146 	.word	0x008a0146
 80033a4:	008a008a 	.word	0x008a008a
 80033a8:	008a008a 	.word	0x008a008a
 80033ac:	008a008a 	.word	0x008a008a
 80033b0:	008a008a 	.word	0x008a008a
 80033b4:	008a008a 	.word	0x008a008a
 80033b8:	008a008a 	.word	0x008a008a
 80033bc:	008a008a 	.word	0x008a008a
 80033c0:	008a008a 	.word	0x008a008a
    }
    break;

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 80033c4:	4628      	mov	r0, r5
 80033c6:	f7fe f89b 	bl	8001500 <MCI_GetIqdref>
 80033ca:	1400      	asrs	r0, r0, #16
      }
	}
    break;
  }
  return bRetVal;
}
 80033cc:	b00d      	add	sp, #52	@ 0x34
 80033ce:	bd30      	pop	{r4, r5, pc}
        *success = false;
 80033d0:	2300      	movs	r3, #0
 80033d2:	7013      	strb	r3, [r2, #0]
      bRetVal = CTRBDID;
 80033d4:	2000      	movs	r0, #0
  return bRetVal;
 80033d6:	e7f9      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = MCI_GetIqdref(pMCI).q;
 80033d8:	4628      	mov	r0, r5
 80033da:	f7fe f891 	bl	8001500 <MCI_GetIqdref>
 80033de:	b200      	sxth	r0, r0
    break;
 80033e0:	e7f4      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = MCI_GetIqd(pMCI).q;
 80033e2:	4628      	mov	r0, r5
 80033e4:	f7fe f87e 	bl	80014e4 <MCI_GetIqd>
 80033e8:	b200      	sxth	r0, r0
    break;
 80033ea:	e7ef      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = MCI_GetIqd(pMCI).d;
 80033ec:	4628      	mov	r0, r5
 80033ee:	f7fe f879 	bl	80014e4 <MCI_GetIqd>
 80033f2:	1400      	asrs	r0, r0, #16
    break;
 80033f4:	e7ea      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80033f6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80033f8:	f004 fac2 	bl	8007980 <VBS_GetAvBusVoltage_V>
    break;
 80033fc:	e7e6      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80033fe:	6860      	ldr	r0, [r4, #4]
 8003400:	f005 f9cc 	bl	800879c <PID_GetKP>
    break;
 8003404:	e7e2      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8003406:	4628      	mov	r0, r5
 8003408:	f7fe f85e 	bl	80014c8 <MCI_GetIalphabeta>
 800340c:	1400      	asrs	r0, r0, #16
    break;
 800340e:	e7dd      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8003410:	4628      	mov	r0, r5
 8003412:	f7fe f859 	bl	80014c8 <MCI_GetIalphabeta>
 8003416:	b200      	sxth	r0, r0
    break;
 8003418:	e7d8      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = MCI_GetIab(pMCI).b;
 800341a:	4628      	mov	r0, r5
 800341c:	f7fe f846 	bl	80014ac <MCI_GetIab>
 8003420:	1400      	asrs	r0, r0, #16
    break;
 8003422:	e7d3      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = MCI_GetVqd(pMCI).q;
 8003424:	4628      	mov	r0, r5
 8003426:	f7fe f879 	bl	800151c <MCI_GetVqd>
 800342a:	b200      	sxth	r0, r0
    break;
 800342c:	e7ce      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 800342e:	4628      	mov	r0, r5
 8003430:	f7fe f882 	bl	8001538 <MCI_GetValphabeta>
 8003434:	b200      	sxth	r0, r0
    break;
 8003436:	e7c9      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8003438:	f7ff fdf4 	bl	8003024 <UI_GetSelectedMC>
    break;
 800343c:	e7c6      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 800343e:	68a0      	ldr	r0, [r4, #8]
 8003440:	f005 f9b0 	bl	80087a4 <PID_GetKI>
    break;
 8003444:	e7c2      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8003446:	68a0      	ldr	r0, [r4, #8]
 8003448:	f005 f9a8 	bl	800879c <PID_GetKP>
    break;
 800344c:	e7be      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800344e:	68a0      	ldr	r0, [r4, #8]
 8003450:	f005 f9b4 	bl	80087bc <PID_GetKD>
    break;
 8003454:	e7ba      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003456:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003458:	f005 f97e 	bl	8008758 <NTC_GetAvTemp_C>
    break;
 800345c:	e7b6      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	f005 f9ac 	bl	80087bc <PID_GetKD>
    break;
 8003464:	e7b2      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8003466:	6820      	ldr	r0, [r4, #0]
 8003468:	f005 f99c 	bl	80087a4 <PID_GetKI>
    break;
 800346c:	e7ae      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 800346e:	6820      	ldr	r0, [r4, #0]
 8003470:	f005 f994 	bl	800879c <PID_GetKP>
    break;
 8003474:	e7aa      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003476:	4628      	mov	r0, r5
 8003478:	f7fe f814 	bl	80014a4 <MCI_GetMecSpeedRefUnit>
 800347c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003480:	0040      	lsls	r0, r0, #1
    break;
 8003482:	e7a3      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003484:	4628      	mov	r0, r5
 8003486:	f7fd fff7 	bl	8001478 <MCI_GetControlMode>
    break;
 800348a:	e79f      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 800348c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800348e:	f005 fe17 	bl	80090c0 <STM_GetState>
	break;
 8003492:	e79b      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003494:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
}
 8003496:	b00d      	add	sp, #52	@ 0x34
 8003498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 800349c:	f005 be1e 	b.w	80090dc <STM_GetFaultState>
      bRetVal = MCI_GetVqd(pMCI).d;
 80034a0:	4628      	mov	r0, r5
 80034a2:	f7fe f83b 	bl	800151c <MCI_GetVqd>
 80034a6:	1400      	asrs	r0, r0, #16
    break;
 80034a8:	e790      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 80034aa:	6820      	ldr	r0, [r4, #0]
 80034ac:	f005 f980 	bl	80087b0 <PID_GetKPDivisor>
    break;
 80034b0:	e78c      	b.n	80033cc <UI_GetReg+0x244>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80034b2:	4628      	mov	r0, r5
 80034b4:	f7fd ffe0 	bl	8001478 <MCI_GetControlMode>
 80034b8:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80034ba:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80034bc:	d06f      	beq.n	800359e <UI_GetReg+0x416>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80034be:	f7fd fff1 	bl	80014a4 <MCI_GetMecSpeedRefUnit>
 80034c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80034c6:	0040      	lsls	r0, r0, #1
 80034c8:	e780      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 80034ca:	6820      	ldr	r0, [r4, #0]
 80034cc:	f005 f972 	bl	80087b4 <PID_GetKIDivisor>
    break;
 80034d0:	e77c      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 80034d2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80034d4:	f005 fd38 	bl	8008f48 <STC_GetMinAppNegativeMecSpeedUnit>
 80034d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80034dc:	0040      	lsls	r0, r0, #1
    break;
 80034de:	e775      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 80034e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80034e2:	f005 fd2f 	bl	8008f44 <STC_GetMaxAppPositiveMecSpeedUnit>
 80034e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80034ea:	0040      	lsls	r0, r0, #1
    break;
 80034ec:	e76e      	b.n	80033cc <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80034ee:	6902      	ldr	r2, [r0, #16]
 80034f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80034f4:	0f1a      	lsrs	r2, r3, #28
 80034f6:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80034f8:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80034fc:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80034fe:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003502:	d948      	bls.n	8003596 <UI_GetReg+0x40e>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003504:	2b01      	cmp	r3, #1
 8003506:	f63f af65 	bhi.w	80033d4 <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 800350a:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800350c:	2800      	cmp	r0, #0
 800350e:	f43f af61 	beq.w	80033d4 <UI_GetReg+0x24c>
        bRetVal = SPD_GetS16Speed(pSPD);
 8003512:	f005 fc45 	bl	8008da0 <SPD_GetS16Speed>
 8003516:	e759      	b.n	80033cc <UI_GetReg+0x244>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003518:	6902      	ldr	r2, [r0, #16]
 800351a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800351e:	0f1a      	lsrs	r2, r3, #28
 8003520:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003522:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003526:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003528:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800352c:	d92f      	bls.n	800358e <UI_GetReg+0x406>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800352e:	2b01      	cmp	r3, #1
 8003530:	f63f af50 	bhi.w	80033d4 <UI_GetReg+0x24c>
        pSPD = pMCT->pSpeedSensorAux;
 8003534:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003536:	2800      	cmp	r0, #0
 8003538:	f43f af4c 	beq.w	80033d4 <UI_GetReg+0x24c>
        bRetVal = SPD_GetElAngle(pSPD);
 800353c:	f005 fbee 	bl	8008d1c <SPD_GetElAngle>
 8003540:	e744      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8003542:	4628      	mov	r0, r5
 8003544:	f7fd fff8 	bl	8001538 <MCI_GetValphabeta>
 8003548:	1400      	asrs	r0, r0, #16
    break;
 800354a:	e73f      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)(MC_UID);
 800354c:	4817      	ldr	r0, [pc, #92]	@ (80035ac <UI_GetReg+0x424>)
 800354e:	e73d      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003550:	6860      	ldr	r0, [r4, #4]
 8003552:	f005 f933 	bl	80087bc <PID_GetKD>
    break;
 8003556:	e739      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8003558:	6860      	ldr	r0, [r4, #4]
 800355a:	f005 f923 	bl	80087a4 <PID_GetKI>
    break;
 800355e:	e735      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = MCI_GetIab(pMCI).a;
 8003560:	4628      	mov	r0, r5
 8003562:	f7fd ffa3 	bl	80014ac <MCI_GetIab>
 8003566:	b200      	sxth	r0, r0
    break;
 8003568:	e730      	b.n	80033cc <UI_GetReg+0x244>
      if (pMCT->pRevupCtrl)
 800356a:	6960      	ldr	r0, [r4, #20]
 800356c:	2800      	cmp	r0, #0
 800356e:	f43f af31 	beq.w	80033d4 <UI_GetReg+0x24c>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8003572:	f005 fbcf 	bl	8008d14 <RUC_GetNumberOfPhases>
 8003576:	e729      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8003578:	4628      	mov	r0, r5
 800357a:	f7fd ff8b 	bl	8001494 <MCI_GetAvrgMecSpeedUnit>
 800357e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003582:	0040      	lsls	r0, r0, #1
    break;
 8003584:	e722      	b.n	80033cc <UI_GetReg+0x244>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8003586:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003588:	f005 f8a2 	bl	80086d0 <MPM_GetAvrgElMotorPowerW>
    break;
 800358c:	e71e      	b.n	80033cc <UI_GetReg+0x244>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800358e:	2b01      	cmp	r3, #1
 8003590:	d9d0      	bls.n	8003534 <UI_GetReg+0x3ac>
        pSPD = pMCT->pSpeedSensorMain;
 8003592:	69a0      	ldr	r0, [r4, #24]
 8003594:	e7cf      	b.n	8003536 <UI_GetReg+0x3ae>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003596:	2b01      	cmp	r3, #1
 8003598:	d9b7      	bls.n	800350a <UI_GetReg+0x382>
        pSPD = pMCT->pSpeedSensorMain;
 800359a:	69a0      	ldr	r0, [r4, #24]
 800359c:	e7b6      	b.n	800350c <UI_GetReg+0x384>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 800359e:	f7fd ff6d 	bl	800147c <MCI_GetLastRampFinalSpeed>
 80035a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80035a6:	0040      	lsls	r0, r0, #1
 80035a8:	e710      	b.n	80033cc <UI_GetReg+0x244>
 80035aa:	bf00      	nop
 80035ac:	34a6847a 	.word	0x34a6847a

080035b0 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80035b0:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80035b2:	6883      	ldr	r3, [r0, #8]
 80035b4:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 80035b6:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80035b8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 80035bc:	290d      	cmp	r1, #13
 80035be:	d811      	bhi.n	80035e4 <UI_ExecCmd+0x34>
 80035c0:	e8df f001 	tbb	[pc, r1]
 80035c4:	0e160b12 	.word	0x0e160b12
 80035c8:	231f070e 	.word	0x231f070e
 80035cc:	10101027 	.word	0x10101027
 80035d0:	0b10      	.short	0x0b10
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 80035d2:	4620      	mov	r0, r4
 80035d4:	f7fd ff46 	bl	8001464 <MCI_GetSTMState>
 80035d8:	b130      	cbz	r0, 80035e8 <UI_ExecCmd+0x38>
      MCI_StopMotor(pMCI);
 80035da:	4620      	mov	r0, r4
 80035dc:	f7fd fefa 	bl	80013d4 <MCI_StopMotor>
  bool retVal = true;
 80035e0:	2001      	movs	r0, #1
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80035e2:	bd10      	pop	{r4, pc}
    retVal = false;
 80035e4:	2000      	movs	r0, #0
}
 80035e6:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 80035e8:	4620      	mov	r0, r4
 80035ea:	f7fd fee9 	bl	80013c0 <MCI_StartMotor>
 80035ee:	e7f7      	b.n	80035e0 <UI_ExecCmd+0x30>
      if (MCI_GetSTMState(pMCI) == RUN)
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7fd ff37 	bl	8001464 <MCI_GetSTMState>
 80035f6:	2806      	cmp	r0, #6
 80035f8:	d1f2      	bne.n	80035e0 <UI_ExecCmd+0x30>
        MCI_StopRamp(pMCI);
 80035fa:	4620      	mov	r0, r4
 80035fc:	f7fd ff46 	bl	800148c <MCI_StopRamp>
 8003600:	e7ee      	b.n	80035e0 <UI_ExecCmd+0x30>
      MCI_FaultAcknowledged(pMCI);
 8003602:	4620      	mov	r0, r4
 8003604:	f7fd feea 	bl	80013dc <MCI_FaultAcknowledged>
    break;
 8003608:	e7ea      	b.n	80035e0 <UI_ExecCmd+0x30>
      MCI_EncoderAlign(pMCI);
 800360a:	4620      	mov	r0, r4
 800360c:	f7fd feea 	bl	80013e4 <MCI_EncoderAlign>
    break;
 8003610:	e7e6      	b.n	80035e0 <UI_ExecCmd+0x30>
      MCI_Clear_Iqdref(pMCI);
 8003612:	4620      	mov	r0, r4
 8003614:	f7fd ffc0 	bl	8001598 <MCI_Clear_Iqdref>
    break;
 8003618:	e7e2      	b.n	80035e0 <UI_ExecCmd+0x30>
 800361a:	bf00      	nop

0800361c <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 800361c:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800361e:	4b07      	ldr	r3, [pc, #28]	@ (800363c <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003620:	f890 c014 	ldrb.w	ip, [r0, #20]
 8003624:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003626:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 800362a:	fb83 c301 	smull	ip, r3, r3, r1
 800362e:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003632:	b209      	sxth	r1, r1
 8003634:	f7fd fea6 	bl	8001384 <MCI_ExecSpeedRamp>
  return true;
}
 8003638:	2001      	movs	r0, #1
 800363a:	bd08      	pop	{r3, pc}
 800363c:	2aaaaaab 	.word	0x2aaaaaab

08003640 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8003640:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003642:	6883      	ldr	r3, [r0, #8]
 8003644:	f890 c014 	ldrb.w	ip, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8003648:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800364c:	f7fd fea4 	bl	8001398 <MCI_ExecTorqueRamp>
  return true;
}
 8003650:	2001      	movs	r0, #1
 8003652:	bd08      	pop	{r3, pc}

08003654 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	4617      	mov	r7, r2
 8003658:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800365a:	7d02      	ldrb	r2, [r0, #20]
 800365c:	68c3      	ldr	r3, [r0, #12]
 800365e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003662:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 8003664:	b18c      	cbz	r4, 800368a <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003666:	4620      	mov	r0, r4
 8003668:	460d      	mov	r5, r1
 800366a:	f005 fb3d 	bl	8008ce8 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800366e:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003670:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003672:	4620      	mov	r0, r4
 8003674:	f005 fb3e 	bl	8008cf4 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8003678:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800367a:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800367c:	4620      	mov	r0, r4
 800367e:	f005 fb41 	bl	8008d04 <RUC_GetPhaseFinalTorque>
 8003682:	9b06      	ldr	r3, [sp, #24]
 8003684:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8003686:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8003688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 800368a:	4620      	mov	r0, r4
}
 800368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800368e:	bf00      	nop

08003690 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	461e      	mov	r6, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003694:	7d05      	ldrb	r5, [r0, #20]
 8003696:	68c3      	ldr	r3, [r0, #12]
{
 8003698:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800369c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80036a0:	695d      	ldr	r5, [r3, #20]
{
 80036a2:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80036a4:	4628      	mov	r0, r5
 80036a6:	f005 fb0d 	bl	8008cc4 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80036aa:	4632      	mov	r2, r6
 80036ac:	4621      	mov	r1, r4
 80036ae:	4628      	mov	r0, r5
 80036b0:	f005 fb0e 	bl	8008cd0 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80036b4:	4628      	mov	r0, r5
 80036b6:	463a      	mov	r2, r7
 80036b8:	4621      	mov	r1, r4
 80036ba:	f005 fb0f 	bl	8008cdc <RUC_SetPhaseFinalTorque>
  return true;
}
 80036be:	2001      	movs	r0, #1
 80036c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c2:	bf00      	nop

080036c4 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80036c4:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80036c6:	f890 c014 	ldrb.w	ip, [r0, #20]
 80036ca:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 80036cc:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 80036d0:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 80036d4:	9901      	ldr	r1, [sp, #4]
 80036d6:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 80036da:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 80036dc:	f7fd be66 	b.w	80013ac <MCI_SetCurrentReferences>

080036e0 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80036e0:	2000      	movs	r0, #0
 80036e2:	4770      	bx	lr

080036e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036e4:	4a03      	ldr	r2, [pc, #12]	@ (80036f4 <SystemInit+0x10>)
 80036e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80036ea:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <HAL_Init+0x30>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003702:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800370a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003712:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003714:	2003      	movs	r0, #3
 8003716:	f000 fa63 	bl	8003be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800371a:	200f      	movs	r0, #15
 800371c:	f7ff faba 	bl	8002c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003720:	f7ff f926 	bl	8002970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003724:	2000      	movs	r0, #0
 8003726:	bd08      	pop	{r3, pc}
 8003728:	40023c00 	.word	0x40023c00

0800372c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800372c:	4a03      	ldr	r2, [pc, #12]	@ (800373c <HAL_IncTick+0x10>)
 800372e:	4b04      	ldr	r3, [pc, #16]	@ (8003740 <HAL_IncTick+0x14>)
 8003730:	6811      	ldr	r1, [r2, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	440b      	add	r3, r1
 8003736:	6013      	str	r3, [r2, #0]
}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	200010e4 	.word	0x200010e4
 8003740:	20000570 	.word	0x20000570

08003744 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003744:	4b01      	ldr	r3, [pc, #4]	@ (800374c <HAL_GetTick+0x8>)
 8003746:	6818      	ldr	r0, [r3, #0]
}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	200010e4 	.word	0x200010e4

08003750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003754:	f7ff fff6 	bl	8003744 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003758:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800375a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800375c:	d002      	beq.n	8003764 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800375e:	4b04      	ldr	r3, [pc, #16]	@ (8003770 <HAL_Delay+0x20>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003764:	f7ff ffee 	bl	8003744 <HAL_GetTick>
 8003768:	1b40      	subs	r0, r0, r5
 800376a:	42a0      	cmp	r0, r4
 800376c:	d3fa      	bcc.n	8003764 <HAL_Delay+0x14>
  {
  }
}
 800376e:	bd38      	pop	{r3, r4, r5, pc}
 8003770:	20000570 	.word	0x20000570

08003774 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003774:	2800      	cmp	r0, #0
 8003776:	f000 809e 	beq.w	80038b6 <HAL_ADC_Init+0x142>
{
 800377a:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800377c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800377e:	4604      	mov	r4, r0
 8003780:	b13d      	cbz	r5, 8003792 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003782:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003784:	06db      	lsls	r3, r3, #27
 8003786:	d50c      	bpl.n	80037a2 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003788:	2300      	movs	r3, #0
 800378a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 800378e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003790:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003792:	f7ff f90d 	bl	80029b0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003796:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003798:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 800379a:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800379e:	06db      	lsls	r3, r3, #27
 80037a0:	d4f2      	bmi.n	8003788 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 80037a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037a4:	4a47      	ldr	r2, [pc, #284]	@ (80038c4 <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 80037a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037aa:	f023 0302 	bic.w	r3, r3, #2
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037b4:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037b6:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037b8:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80037bc:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037be:	6851      	ldr	r1, [r2, #4]
 80037c0:	6860      	ldr	r0, [r4, #4]
 80037c2:	4301      	orrs	r1, r0
 80037c4:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037c6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037c8:	6920      	ldr	r0, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037ca:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80037d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037da:	685a      	ldr	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037dc:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037de:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037e2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037ea:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ec:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	4302      	orrs	r2, r0
 80037f8:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037fa:	4a33      	ldr	r2, [pc, #204]	@ (80038c8 <HAL_ADC_Init+0x154>)
 80037fc:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037fe:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003800:	d051      	beq.n	80038a6 <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003802:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003806:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003808:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	4311      	orrs	r1, r2
 800380e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003816:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	4302      	orrs	r2, r0
 800381c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	f022 0202 	bic.w	r2, r2, #2
 8003824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	7e21      	ldrb	r1, [r4, #24]
 800382a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800382e:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003830:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003834:	2a00      	cmp	r2, #0
 8003836:	d040      	beq.n	80038ba <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003838:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800383a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800383c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003840:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003848:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	3901      	subs	r1, #1
 800384e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003852:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003856:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003858:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800385c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800385e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003860:	3901      	subs	r1, #1
 8003862:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003866:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003868:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800386a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800386c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003870:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8003878:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 800387c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003884:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003886:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003888:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800388a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800388e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003890:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003892:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003894:	f023 0303 	bic.w	r3, r3, #3
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 800389e:	2300      	movs	r3, #0
 80038a0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80038a4:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	e7b3      	b.n	800381e <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 80038b6:	2001      	movs	r0, #1
}
 80038b8:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	e7c7      	b.n	8003854 <HAL_ADC_Init+0xe0>
 80038c4:	40012300 	.word	0x40012300
 80038c8:	0f000001 	.word	0x0f000001

080038cc <HAL_ADC_ConfigChannel>:
{
 80038cc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80038ce:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80038d2:	b082      	sub	sp, #8
 80038d4:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80038d6:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80038d8:	f04f 0000 	mov.w	r0, #0
 80038dc:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80038de:	f000 809e 	beq.w	8003a1e <HAL_ADC_ConfigChannel+0x152>
 80038e2:	2301      	movs	r3, #1
 80038e4:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038e8:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038ea:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038ec:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038ee:	2d09      	cmp	r5, #9
 80038f0:	b2a8      	uxth	r0, r5
 80038f2:	d828      	bhi.n	8003946 <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038f4:	691e      	ldr	r6, [r3, #16]
 80038f6:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80038fa:	f04f 0c07 	mov.w	ip, #7
 80038fe:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003902:	ea26 060c 	bic.w	r6, r6, ip
 8003906:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003908:	691e      	ldr	r6, [r3, #16]
 800390a:	fa04 f40e 	lsl.w	r4, r4, lr
 800390e:	4334      	orrs	r4, r6
 8003910:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 8003912:	684c      	ldr	r4, [r1, #4]
 8003914:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003916:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 800391a:	d82a      	bhi.n	8003972 <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800391c:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800391e:	3905      	subs	r1, #5
 8003920:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003924:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003926:	fa0c f101 	lsl.w	r1, ip, r1
 800392a:	ea24 0101 	bic.w	r1, r4, r1
 800392e:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003930:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003932:	4308      	orrs	r0, r1
 8003934:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003936:	493b      	ldr	r1, [pc, #236]	@ (8003a24 <HAL_ADC_ConfigChannel+0x158>)
 8003938:	428b      	cmp	r3, r1
 800393a:	d02b      	beq.n	8003994 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 800393c:	2000      	movs	r0, #0
 800393e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 8003942:	b002      	add	sp, #8
 8003944:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003946:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800394a:	68de      	ldr	r6, [r3, #12]
 800394c:	f1ac 0c1e 	sub.w	ip, ip, #30
 8003950:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003954:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003958:	fa0e fc0c 	lsl.w	ip, lr, ip
 800395c:	ea26 060c 	bic.w	r6, r6, ip
 8003960:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003962:	68de      	ldr	r6, [r3, #12]
 8003964:	4334      	orrs	r4, r6
 8003966:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 8003968:	684c      	ldr	r4, [r1, #4]
 800396a:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800396c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8003970:	d9d4      	bls.n	800391c <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8003972:	2c0c      	cmp	r4, #12
 8003974:	d81f      	bhi.n	80039b6 <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003976:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003978:	3923      	subs	r1, #35	@ 0x23
 800397a:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800397c:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800397e:	fa06 f101 	lsl.w	r1, r6, r1
 8003982:	ea24 0101 	bic.w	r1, r4, r1
 8003986:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003988:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800398a:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800398c:	4925      	ldr	r1, [pc, #148]	@ (8003a24 <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800398e:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003990:	428b      	cmp	r3, r1
 8003992:	d1d3      	bne.n	800393c <HAL_ADC_ConfigChannel+0x70>
 8003994:	2d12      	cmp	r5, #18
 8003996:	d01b      	beq.n	80039d0 <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003998:	4b23      	ldr	r3, [pc, #140]	@ (8003a28 <HAL_ADC_ConfigChannel+0x15c>)
 800399a:	429d      	cmp	r5, r3
 800399c:	d022      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0x118>
 800399e:	2d11      	cmp	r5, #17
 80039a0:	d1cc      	bne.n	800393c <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039a2:	4b22      	ldr	r3, [pc, #136]	@ (8003a2c <HAL_ADC_ConfigChannel+0x160>)
 80039a4:	6859      	ldr	r1, [r3, #4]
 80039a6:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 80039aa:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039ac:	6859      	ldr	r1, [r3, #4]
 80039ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80039b2:	6059      	str	r1, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039b4:	e7c2      	b.n	800393c <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039b6:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80039b8:	3941      	subs	r1, #65	@ 0x41
 80039ba:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039bc:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039be:	fa06 f101 	lsl.w	r1, r6, r1
 80039c2:	ea24 0101 	bic.w	r1, r4, r1
 80039c6:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039ca:	4308      	orrs	r0, r1
 80039cc:	62d8      	str	r0, [r3, #44]	@ 0x2c
 80039ce:	e7b2      	b.n	8003936 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80039d0:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <HAL_ADC_ConfigChannel+0x160>)
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 80039d8:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 80039e0:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039e2:	e7ab      	b.n	800393c <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039e4:	4b11      	ldr	r3, [pc, #68]	@ (8003a2c <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039e6:	4c12      	ldr	r4, [pc, #72]	@ (8003a30 <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039e8:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039ea:	4812      	ldr	r0, [pc, #72]	@ (8003a34 <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039ec:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 80039f0:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80039f8:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	fba0 0303 	umull	r0, r3, r0, r3
 8003a00:	0c9b      	lsrs	r3, r3, #18
 8003a02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003a0a:	9b01      	ldr	r3, [sp, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d095      	beq.n	800393c <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8003a10:	9b01      	ldr	r3, [sp, #4]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003a16:	9b01      	ldr	r3, [sp, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f9      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x144>
 8003a1c:	e78e      	b.n	800393c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003a1e:	2002      	movs	r0, #2
}
 8003a20:	b002      	add	sp, #8
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
 8003a24:	40012000 	.word	0x40012000
 8003a28:	10000012 	.word	0x10000012
 8003a2c:	40012300 	.word	0x40012300
 8003a30:	2000056c 	.word	0x2000056c
 8003a34:	431bde83 	.word	0x431bde83

08003a38 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003a38:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a3a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003a3e:	698d      	ldr	r5, [r1, #24]
  __HAL_LOCK(hadc);
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	f000 80c2 	beq.w	8003bca <HAL_ADCEx_InjectedConfigChannel+0x192>
 8003a46:	2301      	movs	r3, #1
 8003a48:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003a4c:	680c      	ldr	r4, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003a4e:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003a50:	688a      	ldr	r2, [r1, #8]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003a52:	2c09      	cmp	r4, #9
 8003a54:	4684      	mov	ip, r0
 8003a56:	b2a0      	uxth	r0, r4
 8003a58:	d861      	bhi.n	8003b1e <HAL_ADCEx_InjectedConfigChannel+0xe6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003a5a:	691e      	ldr	r6, [r3, #16]
 8003a5c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003a60:	2707      	movs	r7, #7
 8003a62:	fa07 f70e 	lsl.w	r7, r7, lr
 8003a66:	ea26 0607 	bic.w	r6, r6, r7
 8003a6a:	611e      	str	r6, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003a6c:	691e      	ldr	r6, [r3, #16]
 8003a6e:	fa02 f20e 	lsl.w	r2, r2, lr
 8003a72:	4332      	orrs	r2, r6
 8003a74:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003a78:	690f      	ldr	r7, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003a7a:	684e      	ldr	r6, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003a7c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003a80:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003a82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a84:	f107 3eff 	add.w	lr, r7, #4294967295
 8003a88:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 8003a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003a8e:	1cf2      	adds	r2, r6, #3
 8003a90:	1bd2      	subs	r2, r2, r7
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
 8003a96:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003a9a:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003a9e:	4090      	lsls	r0, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003aa0:	fa0e f202 	lsl.w	r2, lr, r2
 8003aa4:	ea27 0202 	bic.w	r2, r7, r2
 8003aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003aaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aac:	4310      	orrs	r0, r2
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003aae:	4a48      	ldr	r2, [pc, #288]	@ (8003bd0 <HAL_ADCEx_InjectedConfigChannel+0x198>)
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003ab0:	6398      	str	r0, [r3, #56]	@ 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003ab2:	4295      	cmp	r5, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8003aba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003abc:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003abe:	d065      	beq.n	8003b8c <HAL_ADCEx_InjectedConfigChannel+0x154>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8003ac0:	4315      	orrs	r5, r2
 8003ac2:	609d      	str	r5, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003ac4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003ac6:	69c8      	ldr	r0, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003ac8:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	4302      	orrs	r2, r0
 8003ad2:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8003ad4:	7d4a      	ldrb	r2, [r1, #21]
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	d031      	beq.n	8003b3e <HAL_ADCEx_InjectedConfigChannel+0x106>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ae0:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003ae2:	7d0a      	ldrb	r2, [r1, #20]
 8003ae4:	2a00      	cmp	r2, #0
 8003ae6:	d031      	beq.n	8003b4c <HAL_ADCEx_InjectedConfigChannel+0x114>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003aee:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8003af0:	2e02      	cmp	r6, #2
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003af2:	68ca      	ldr	r2, [r1, #12]
  switch(sConfigInjected->InjectedRank)
 8003af4:	d031      	beq.n	8003b5a <HAL_ADCEx_InjectedConfigChannel+0x122>
 8003af6:	2e03      	cmp	r6, #3
 8003af8:	d056      	beq.n	8003ba8 <HAL_ADCEx_InjectedConfigChannel+0x170>
 8003afa:	2e01      	cmp	r6, #1
 8003afc:	d04a      	beq.n	8003b94 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003afe:	6a19      	ldr	r1, [r3, #32]
 8003b00:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8003b04:	f021 010f 	bic.w	r1, r1, #15
 8003b08:	6219      	str	r1, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003b0a:	6a19      	ldr	r1, [r3, #32]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003b10:	4a30      	ldr	r2, [pc, #192]	@ (8003bd4 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d02d      	beq.n	8003b72 <HAL_ADCEx_InjectedConfigChannel+0x13a>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b16:	2000      	movs	r0, #0
 8003b18:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
}
 8003b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003b1e:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8003b22:	68df      	ldr	r7, [r3, #12]
 8003b24:	3e1e      	subs	r6, #30
 8003b26:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003b2a:	40b2      	lsls	r2, r6
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003b2c:	fa0e f606 	lsl.w	r6, lr, r6
 8003b30:	ea27 0606 	bic.w	r6, r7, r6
 8003b34:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003b36:	68de      	ldr	r6, [r3, #12]
 8003b38:	4332      	orrs	r2, r6
 8003b3a:	60da      	str	r2, [r3, #12]
 8003b3c:	e79b      	b.n	8003a76 <HAL_ADCEx_InjectedConfigChannel+0x3e>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b44:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003b46:	7d0a      	ldrb	r2, [r1, #20]
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	d1cd      	bne.n	8003ae8 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b52:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003b54:	2e02      	cmp	r6, #2
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003b56:	68ca      	ldr	r2, [r1, #12]
  switch(sConfigInjected->InjectedRank)
 8003b58:	d1cd      	bne.n	8003af6 <HAL_ADCEx_InjectedConfigChannel+0xbe>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003b5a:	6999      	ldr	r1, [r3, #24]
 8003b5c:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8003b60:	f021 010f 	bic.w	r1, r1, #15
 8003b64:	6199      	str	r1, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003b66:	6999      	ldr	r1, [r3, #24]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003b6c:	4a19      	ldr	r2, [pc, #100]	@ (8003bd4 <HAL_ADCEx_InjectedConfigChannel+0x19c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d1d1      	bne.n	8003b16 <HAL_ADCEx_InjectedConfigChannel+0xde>
 8003b72:	2c12      	cmp	r4, #18
 8003b74:	d022      	beq.n	8003bbc <HAL_ADCEx_InjectedConfigChannel+0x184>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003b76:	4b18      	ldr	r3, [pc, #96]	@ (8003bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>)
 8003b78:	429c      	cmp	r4, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_ADCEx_InjectedConfigChannel+0x148>
 8003b7c:	2c11      	cmp	r4, #17
 8003b7e:	d1ca      	bne.n	8003b16 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b80:	4a16      	ldr	r2, [pc, #88]	@ (8003bdc <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8003b82:	6853      	ldr	r3, [r2, #4]
 8003b84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b88:	6053      	str	r3, [r2, #4]
 8003b8a:	e7c4      	b.n	8003b16 <HAL_ADCEx_InjectedConfigChannel+0xde>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8003b8c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003b90:	609a      	str	r2, [r3, #8]
 8003b92:	e79f      	b.n	8003ad4 <HAL_ADCEx_InjectedConfigChannel+0x9c>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003b94:	6959      	ldr	r1, [r3, #20]
 8003b96:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8003b9a:	f021 010f 	bic.w	r1, r1, #15
 8003b9e:	6159      	str	r1, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003ba0:	6959      	ldr	r1, [r3, #20]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	615a      	str	r2, [r3, #20]
      break;
 8003ba6:	e7b3      	b.n	8003b10 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003ba8:	69d9      	ldr	r1, [r3, #28]
 8003baa:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
 8003bae:	f021 010f 	bic.w	r1, r1, #15
 8003bb2:	61d9      	str	r1, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003bb4:	69d9      	ldr	r1, [r3, #28]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	61da      	str	r2, [r3, #28]
      break;
 8003bba:	e7a9      	b.n	8003b10 <HAL_ADCEx_InjectedConfigChannel+0xd8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003bbc:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 8003bc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003bc4:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003bc8:	e7a5      	b.n	8003b16 <HAL_ADCEx_InjectedConfigChannel+0xde>
  __HAL_LOCK(hadc);
 8003bca:	2002      	movs	r0, #2
}
 8003bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	000f0001 	.word	0x000f0001
 8003bd4:	40012000 	.word	0x40012000
 8003bd8:	10000012 	.word	0x10000012
 8003bdc:	40012300 	.word	0x40012300

08003be0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003be0:	4907      	ldr	r1, [pc, #28]	@ (8003c00 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003be2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003be6:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bee:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bf0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bf2:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003bfa:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c04:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <HAL_NVIC_SetPriority+0x70>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c0c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c0e:	f1c3 0e07 	rsb	lr, r3, #7
 8003c12:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c16:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c1a:	bf28      	it	cs
 8003c1c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c20:	f1bc 0f06 	cmp.w	ip, #6
 8003c24:	d91c      	bls.n	8003c60 <HAL_NVIC_SetPriority+0x5c>
 8003c26:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	fa03 f30c 	lsl.w	r3, r3, ip
 8003c32:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	fa03 f30e 	lsl.w	r3, r3, lr
 8003c3e:	ea21 0303 	bic.w	r3, r1, r3
 8003c42:	fa03 f30c 	lsl.w	r3, r3, ip
 8003c46:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c48:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8003c4a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	db0a      	blt.n	8003c66 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c50:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003c54:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003c58:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003c5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c60:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c62:	4694      	mov	ip, r2
 8003c64:	e7e7      	b.n	8003c36 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c66:	4a04      	ldr	r2, [pc, #16]	@ (8003c78 <HAL_NVIC_SetPriority+0x74>)
 8003c68:	f000 000f 	and.w	r0, r0, #15
 8003c6c:	4402      	add	r2, r0
 8003c6e:	7613      	strb	r3, [r2, #24]
 8003c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c74:	e000ed00 	.word	0xe000ed00
 8003c78:	e000ecfc 	.word	0xe000ecfc

08003c7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	db07      	blt.n	8003c90 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c80:	0941      	lsrs	r1, r0, #5
 8003c82:	4a04      	ldr	r2, [pc, #16]	@ (8003c94 <HAL_NVIC_EnableIRQ+0x18>)
 8003c84:	f000 001f 	and.w	r0, r0, #31
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4083      	lsls	r3, r0
 8003c8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000e100 	.word	0xe000e100

08003c98 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	db0c      	blt.n	8003cb6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9c:	0943      	lsrs	r3, r0, #5
 8003c9e:	4906      	ldr	r1, [pc, #24]	@ (8003cb8 <HAL_NVIC_DisableIRQ+0x20>)
 8003ca0:	f000 001f 	and.w	r0, r0, #31
 8003ca4:	3320      	adds	r3, #32
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4082      	lsls	r2, r0
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003cb2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003cb6:	4770      	bx	lr
 8003cb8:	e000e100 	.word	0xe000e100

08003cbc <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8003cbc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003cc0:	4905      	ldr	r1, [pc, #20]	@ (8003cd8 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003cc2:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003cc4:	68ca      	ldr	r2, [r1, #12]
 8003cc6:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60cb      	str	r3, [r1, #12]
 8003cce:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003cd2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003cd4:	e7fd      	b.n	8003cd2 <HAL_NVIC_SystemReset+0x16>
 8003cd6:	bf00      	nop
 8003cd8:	e000ed00 	.word	0xe000ed00
 8003cdc:	05fa0004 	.word	0x05fa0004

08003ce0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ce0:	3801      	subs	r0, #1
 8003ce2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003ce6:	d301      	bcc.n	8003cec <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ce8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003cea:	4770      	bx	lr
{
 8003cec:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf2:	4c07      	ldr	r4, [pc, #28]	@ (8003d10 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cf4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf6:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003cfa:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cfe:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d00:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d02:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d04:	619a      	str	r2, [r3, #24]
}
 8003d06:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d0a:	6119      	str	r1, [r3, #16]
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d18:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d1a:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1c:	f8df a200 	ldr.w	sl, [pc, #512]	@ 8003f20 <HAL_GPIO_Init+0x20c>
{
 8003d20:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8003d22:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d26:	4689      	mov	r9, r1
 8003d28:	e003      	b.n	8003d32 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	f000 808c 	beq.w	8003e4a <HAL_GPIO_Init+0x136>
    ioposition = 0x01U << position;
 8003d32:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d36:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8003d3a:	43a2      	bics	r2, r4
 8003d3c:	d1f5      	bne.n	8003d2a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d3e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003d42:	f001 0203 	and.w	r2, r1, #3
 8003d46:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d4a:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d4c:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d4e:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d52:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d54:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d58:	d97a      	bls.n	8003e50 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d5a:	2a03      	cmp	r2, #3
 8003d5c:	f040 80b1 	bne.w	8003ec2 <HAL_GPIO_Init+0x1ae>
      temp = GPIOx->MODER;
 8003d60:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d62:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d66:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d68:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d6a:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003d6e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d70:	d0db      	beq.n	8003d2a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d72:	2200      	movs	r2, #0
 8003d74:	9203      	str	r2, [sp, #12]
 8003d76:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8003d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d7e:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8003d82:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8003d86:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003d8a:	9203      	str	r2, [sp, #12]
 8003d8c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003d8e:	f023 0203 	bic.w	r2, r3, #3
 8003d92:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d96:	f003 0703 	and.w	r7, r3, #3
 8003d9a:	260f      	movs	r6, #15
 8003d9c:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8003da0:	00bf      	lsls	r7, r7, #2
 8003da2:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003da6:	4e5b      	ldr	r6, [pc, #364]	@ (8003f14 <HAL_GPIO_Init+0x200>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8003da8:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003daa:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dac:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003db0:	d022      	beq.n	8003df8 <HAL_GPIO_Init+0xe4>
 8003db2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003db6:	42b0      	cmp	r0, r6
 8003db8:	f000 808e 	beq.w	8003ed8 <HAL_GPIO_Init+0x1c4>
 8003dbc:	4e56      	ldr	r6, [pc, #344]	@ (8003f18 <HAL_GPIO_Init+0x204>)
 8003dbe:	42b0      	cmp	r0, r6
 8003dc0:	f000 8090 	beq.w	8003ee4 <HAL_GPIO_Init+0x1d0>
 8003dc4:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8003f24 <HAL_GPIO_Init+0x210>
 8003dc8:	4560      	cmp	r0, ip
 8003dca:	f000 8091 	beq.w	8003ef0 <HAL_GPIO_Init+0x1dc>
 8003dce:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8003f28 <HAL_GPIO_Init+0x214>
 8003dd2:	4560      	cmp	r0, ip
 8003dd4:	f000 8092 	beq.w	8003efc <HAL_GPIO_Init+0x1e8>
 8003dd8:	f8df c150 	ldr.w	ip, [pc, #336]	@ 8003f2c <HAL_GPIO_Init+0x218>
 8003ddc:	4560      	cmp	r0, ip
 8003dde:	f000 8093 	beq.w	8003f08 <HAL_GPIO_Init+0x1f4>
 8003de2:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 8003f30 <HAL_GPIO_Init+0x21c>
 8003de6:	4560      	cmp	r0, ip
 8003de8:	bf0c      	ite	eq
 8003dea:	f04f 0c06 	moveq.w	ip, #6
 8003dee:	f04f 0c07 	movne.w	ip, #7
 8003df2:	fa0c f707 	lsl.w	r7, ip, r7
 8003df6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003df8:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dfa:	4a48      	ldr	r2, [pc, #288]	@ (8003f1c <HAL_GPIO_Init+0x208>)
 8003dfc:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dfe:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8003e00:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003e04:	4e45      	ldr	r6, [pc, #276]	@ (8003f1c <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8003e06:	bf54      	ite	pl
 8003e08:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003e0a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8003e0e:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8003e10:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8003e12:	4e42      	ldr	r6, [pc, #264]	@ (8003f1c <HAL_GPIO_Init+0x208>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e14:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8003e16:	bf54      	ite	pl
 8003e18:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003e1a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8003e1e:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8003e20:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e22:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003e24:	4e3d      	ldr	r6, [pc, #244]	@ (8003f1c <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8003e26:	bf54      	ite	pl
 8003e28:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003e2a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8003e2e:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e30:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e32:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e34:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003e38:	4938      	ldr	r1, [pc, #224]	@ (8003f1c <HAL_GPIO_Init+0x208>)
        temp &= ~((uint32_t)iocurrent);
 8003e3a:	bf54      	ite	pl
 8003e3c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003e3e:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e42:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8003e44:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e46:	f47f af74 	bne.w	8003d32 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8003e4a:	b005      	add	sp, #20
 8003e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8003e50:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e52:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e56:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8003e5a:	fa07 f70c 	lsl.w	r7, r7, ip
 8003e5e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003e62:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003e64:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e66:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e6a:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8003e6e:	409f      	lsls	r7, r3
 8003e70:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003e74:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003e76:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e78:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8003e80:	fa07 f70c 	lsl.w	r7, r7, ip
 8003e84:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e88:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003e8a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e8c:	f47f af68 	bne.w	8003d60 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8003e90:	08df      	lsrs	r7, r3, #3
 8003e92:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8003e96:	9701      	str	r7, [sp, #4]
 8003e98:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e9a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003e9e:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ea0:	f003 0e07 	and.w	lr, r3, #7
 8003ea4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003ea8:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003eaa:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eae:	fa06 fe0e 	lsl.w	lr, r6, lr
 8003eb2:	9e00      	ldr	r6, [sp, #0]
 8003eb4:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003eb8:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003eba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003ebe:	6237      	str	r7, [r6, #32]
 8003ec0:	e74e      	b.n	8003d60 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8003ec2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ec4:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ec8:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8003ecc:	fa07 f70c 	lsl.w	r7, r7, ip
 8003ed0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8003ed4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed6:	e743      	b.n	8003d60 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ed8:	f04f 0c01 	mov.w	ip, #1
 8003edc:	fa0c f707 	lsl.w	r7, ip, r7
 8003ee0:	433d      	orrs	r5, r7
 8003ee2:	e789      	b.n	8003df8 <HAL_GPIO_Init+0xe4>
 8003ee4:	f04f 0c02 	mov.w	ip, #2
 8003ee8:	fa0c f707 	lsl.w	r7, ip, r7
 8003eec:	433d      	orrs	r5, r7
 8003eee:	e783      	b.n	8003df8 <HAL_GPIO_Init+0xe4>
 8003ef0:	f04f 0c03 	mov.w	ip, #3
 8003ef4:	fa0c f707 	lsl.w	r7, ip, r7
 8003ef8:	433d      	orrs	r5, r7
 8003efa:	e77d      	b.n	8003df8 <HAL_GPIO_Init+0xe4>
 8003efc:	f04f 0c04 	mov.w	ip, #4
 8003f00:	fa0c f707 	lsl.w	r7, ip, r7
 8003f04:	433d      	orrs	r5, r7
 8003f06:	e777      	b.n	8003df8 <HAL_GPIO_Init+0xe4>
 8003f08:	f04f 0c05 	mov.w	ip, #5
 8003f0c:	fa0c f707 	lsl.w	r7, ip, r7
 8003f10:	433d      	orrs	r5, r7
 8003f12:	e771      	b.n	8003df8 <HAL_GPIO_Init+0xe4>
 8003f14:	40020000 	.word	0x40020000
 8003f18:	40020800 	.word	0x40020800
 8003f1c:	40013c00 	.word	0x40013c00
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40020c00 	.word	0x40020c00
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40021400 	.word	0x40021400
 8003f30:	40021800 	.word	0x40021800

08003f34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f38:	2300      	movs	r3, #0
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003f3a:	4f4e      	ldr	r7, [pc, #312]	@ (8004074 <HAL_GPIO_DeInit+0x140>)
{
 8003f3c:	b083      	sub	sp, #12
    ioposition = 0x01U << position;
 8003f3e:	2601      	movs	r6, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f40:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f44:	f04f 0a03 	mov.w	sl, #3
 8003f48:	e002      	b.n	8003f50 <HAL_GPIO_DeInit+0x1c>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d070      	beq.n	8004032 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8003f50:	fa06 f203 	lsl.w	r2, r6, r3
    if(iocurrent == ioposition)
 8003f54:	ea32 0401 	bics.w	r4, r2, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8003f58:	ea02 0c01 	and.w	ip, r2, r1
    if(iocurrent == ioposition)
 8003f5c:	d1f5      	bne.n	8003f4a <HAL_GPIO_DeInit+0x16>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f5e:	f023 0503 	bic.w	r5, r3, #3
 8003f62:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f66:	f003 0403 	and.w	r4, r3, #3
 8003f6a:	00a4      	lsls	r4, r4, #2
 8003f6c:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 8003f70:	fa09 f804 	lsl.w	r8, r9, r4
 8003f74:	9401      	str	r4, [sp, #4]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f76:	4c40      	ldr	r4, [pc, #256]	@ (8004078 <HAL_GPIO_DeInit+0x144>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f78:	f8d5 e008 	ldr.w	lr, [r5, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f7c:	42a0      	cmp	r0, r4
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f7e:	ea08 0e0e 	and.w	lr, r8, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f82:	d059      	beq.n	8004038 <HAL_GPIO_DeInit+0x104>
 8003f84:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003f88:	42a0      	cmp	r0, r4
 8003f8a:	d057      	beq.n	800403c <HAL_GPIO_DeInit+0x108>
 8003f8c:	4c3b      	ldr	r4, [pc, #236]	@ (800407c <HAL_GPIO_DeInit+0x148>)
 8003f8e:	42a0      	cmp	r0, r4
 8003f90:	d058      	beq.n	8004044 <HAL_GPIO_DeInit+0x110>
 8003f92:	4c3b      	ldr	r4, [pc, #236]	@ (8004080 <HAL_GPIO_DeInit+0x14c>)
 8003f94:	42a0      	cmp	r0, r4
 8003f96:	d05b      	beq.n	8004050 <HAL_GPIO_DeInit+0x11c>
 8003f98:	4c3a      	ldr	r4, [pc, #232]	@ (8004084 <HAL_GPIO_DeInit+0x150>)
 8003f9a:	42a0      	cmp	r0, r4
 8003f9c:	d05e      	beq.n	800405c <HAL_GPIO_DeInit+0x128>
 8003f9e:	f8df b0e8 	ldr.w	fp, [pc, #232]	@ 8004088 <HAL_GPIO_DeInit+0x154>
 8003fa2:	4558      	cmp	r0, fp
 8003fa4:	d060      	beq.n	8004068 <HAL_GPIO_DeInit+0x134>
 8003fa6:	f8df b0e4 	ldr.w	fp, [pc, #228]	@ 800408c <HAL_GPIO_DeInit+0x158>
 8003faa:	9c01      	ldr	r4, [sp, #4]
 8003fac:	4558      	cmp	r0, fp
 8003fae:	bf14      	ite	ne
 8003fb0:	f04f 0b07 	movne.w	fp, #7
 8003fb4:	f04f 0b06 	moveq.w	fp, #6
 8003fb8:	fa0b f404 	lsl.w	r4, fp, r4
 8003fbc:	45a6      	cmp	lr, r4
 8003fbe:	d113      	bne.n	8003fe8 <HAL_GPIO_DeInit+0xb4>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003fc0:	683c      	ldr	r4, [r7, #0]
 8003fc2:	ea24 040c 	bic.w	r4, r4, ip
 8003fc6:	603c      	str	r4, [r7, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003fc8:	687c      	ldr	r4, [r7, #4]
 8003fca:	ea24 040c 	bic.w	r4, r4, ip
 8003fce:	607c      	str	r4, [r7, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003fd0:	68fc      	ldr	r4, [r7, #12]
 8003fd2:	ea24 040c 	bic.w	r4, r4, ip
 8003fd6:	60fc      	str	r4, [r7, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003fd8:	68bc      	ldr	r4, [r7, #8]
 8003fda:	ea24 040c 	bic.w	r4, r4, ip
 8003fde:	60bc      	str	r4, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003fe0:	68ac      	ldr	r4, [r5, #8]
 8003fe2:	ea24 0408 	bic.w	r4, r4, r8
 8003fe6:	60ac      	str	r4, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fe8:	6804      	ldr	r4, [r0, #0]
 8003fea:	005d      	lsls	r5, r3, #1
 8003fec:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ff0:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ff4:	ea24 0405 	bic.w	r4, r4, r5
 8003ff8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8003ffc:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ffe:	f003 0407 	and.w	r4, r3, #7
 8004002:	f8dc e020 	ldr.w	lr, [ip, #32]
 8004006:	00a4      	lsls	r4, r4, #2
 8004008:	fa09 f404 	lsl.w	r4, r9, r4
 800400c:	ea2e 0404 	bic.w	r4, lr, r4
 8004010:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004014:	68c4      	ldr	r4, [r0, #12]
 8004016:	ea24 0405 	bic.w	r4, r4, r5
 800401a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800401c:	6844      	ldr	r4, [r0, #4]
 800401e:	ea24 0202 	bic.w	r2, r4, r2
 8004022:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004024:	6882      	ldr	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004026:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004028:	ea22 0205 	bic.w	r2, r2, r5
  for(position = 0U; position < GPIO_NUMBER; position++)
 800402c:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800402e:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004030:	d18e      	bne.n	8003f50 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004032:	b003      	add	sp, #12
 8004034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004038:	2400      	movs	r4, #0
 800403a:	e7bf      	b.n	8003fbc <HAL_GPIO_DeInit+0x88>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800403c:	9c01      	ldr	r4, [sp, #4]
 800403e:	fa06 f404 	lsl.w	r4, r6, r4
 8004042:	e7bb      	b.n	8003fbc <HAL_GPIO_DeInit+0x88>
 8004044:	9c01      	ldr	r4, [sp, #4]
 8004046:	f04f 0b02 	mov.w	fp, #2
 800404a:	fa0b f404 	lsl.w	r4, fp, r4
 800404e:	e7b5      	b.n	8003fbc <HAL_GPIO_DeInit+0x88>
 8004050:	9c01      	ldr	r4, [sp, #4]
 8004052:	f04f 0b03 	mov.w	fp, #3
 8004056:	fa0b f404 	lsl.w	r4, fp, r4
 800405a:	e7af      	b.n	8003fbc <HAL_GPIO_DeInit+0x88>
 800405c:	9c01      	ldr	r4, [sp, #4]
 800405e:	f04f 0b04 	mov.w	fp, #4
 8004062:	fa0b f404 	lsl.w	r4, fp, r4
 8004066:	e7a9      	b.n	8003fbc <HAL_GPIO_DeInit+0x88>
 8004068:	9c01      	ldr	r4, [sp, #4]
 800406a:	f04f 0b05 	mov.w	fp, #5
 800406e:	fa0b f404 	lsl.w	r4, fp, r4
 8004072:	e7a3      	b.n	8003fbc <HAL_GPIO_DeInit+0x88>
 8004074:	40013c00 	.word	0x40013c00
 8004078:	40020000 	.word	0x40020000
 800407c:	40020800 	.word	0x40020800
 8004080:	40020c00 	.word	0x40020c00
 8004084:	40021000 	.word	0x40021000
 8004088:	40021400 	.word	0x40021400
 800408c:	40021800 	.word	0x40021800

08004090 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004090:	b902      	cbnz	r2, 8004094 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004092:	0409      	lsls	r1, r1, #16
 8004094:	6181      	str	r1, [r0, #24]
  }
}
 8004096:	4770      	bx	lr

08004098 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004098:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 800409a:	4c0d      	ldr	r4, [pc, #52]	@ (80040d0 <HAL_PWR_EnterSTOPMode+0x38>)
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800409c:	4a0d      	ldr	r2, [pc, #52]	@ (80040d4 <HAL_PWR_EnterSTOPMode+0x3c>)
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	f023 0303 	bic.w	r3, r3, #3
 80040a4:	4303      	orrs	r3, r0
 80040a6:	6023      	str	r3, [r4, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040a8:	6913      	ldr	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80040aa:	2901      	cmp	r1, #1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6113      	str	r3, [r2, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80040b2:	d00a      	beq.n	80040ca <HAL_PWR_EnterSTOPMode+0x32>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80040b4:	bf40      	sev
    __WFE();
 80040b6:	bf20      	wfe
    __WFE();
 80040b8:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80040ba:	4a06      	ldr	r2, [pc, #24]	@ (80040d4 <HAL_PWR_EnterSTOPMode+0x3c>)
}
 80040bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80040c0:	6913      	ldr	r3, [r2, #16]
 80040c2:	f023 0304 	bic.w	r3, r3, #4
 80040c6:	6113      	str	r3, [r2, #16]
}
 80040c8:	4770      	bx	lr
    __WFI();
 80040ca:	bf30      	wfi
 80040cc:	e7f5      	b.n	80040ba <HAL_PWR_EnterSTOPMode+0x22>
 80040ce:	bf00      	nop
 80040d0:	40007000 	.word	0x40007000
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040d8:	b530      	push	{r4, r5, lr}
 80040da:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80040dc:	4b19      	ldr	r3, [pc, #100]	@ (8004144 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040de:	491a      	ldr	r1, [pc, #104]	@ (8004148 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040e0:	4d1a      	ldr	r5, [pc, #104]	@ (800414c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	2200      	movs	r2, #0
 80040e4:	9201      	str	r2, [sp, #4]
 80040e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040e8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80040ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040f6:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040fa:	640a      	str	r2, [r1, #64]	@ 0x40
  tickstart = HAL_GetTick();
 80040fc:	f7ff fb22 	bl	8003744 <HAL_GetTick>
 8004100:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004102:	e005      	b.n	8004110 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004104:	f7ff fb1e 	bl	8003744 <HAL_GetTick>
 8004108:	1b00      	subs	r0, r0, r4
 800410a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800410e:	d816      	bhi.n	800413e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004110:	686b      	ldr	r3, [r5, #4]
 8004112:	03da      	lsls	r2, r3, #15
 8004114:	d5f6      	bpl.n	8004104 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004116:	4b0c      	ldr	r3, [pc, #48]	@ (8004148 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004118:	4d0c      	ldr	r5, [pc, #48]	@ (800414c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800411a:	2201      	movs	r2, #1
 800411c:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 800411e:	f7ff fb11 	bl	8003744 <HAL_GetTick>
 8004122:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004124:	e005      	b.n	8004132 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004126:	f7ff fb0d 	bl	8003744 <HAL_GetTick>
 800412a:	1b00      	subs	r0, r0, r4
 800412c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004130:	d805      	bhi.n	800413e <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004132:	686b      	ldr	r3, [r5, #4]
 8004134:	039b      	lsls	r3, r3, #14
 8004136:	d5f6      	bpl.n	8004126 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004138:	2000      	movs	r0, #0
}
 800413a:	b003      	add	sp, #12
 800413c:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800413e:	2003      	movs	r0, #3
}
 8004140:	b003      	add	sp, #12
 8004142:	bd30      	pop	{r4, r5, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	420e0000 	.word	0x420e0000
 800414c:	40007000 	.word	0x40007000

08004150 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004150:	2800      	cmp	r0, #0
 8004152:	f000 8087 	beq.w	8004264 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004156:	4a48      	ldr	r2, [pc, #288]	@ (8004278 <HAL_RCC_ClockConfig+0x128>)
 8004158:	6813      	ldr	r3, [r2, #0]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	428b      	cmp	r3, r1
{
 8004160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004164:	460d      	mov	r5, r1
 8004166:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004168:	d209      	bcs.n	800417e <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	b2cb      	uxtb	r3, r1
 800416c:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	428b      	cmp	r3, r1
 8004176:	d002      	beq.n	800417e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004178:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 800417a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	0798      	lsls	r0, r3, #30
 8004182:	d514      	bpl.n	80041ae <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	0759      	lsls	r1, r3, #29
 8004186:	d504      	bpl.n	8004192 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004188:	493c      	ldr	r1, [pc, #240]	@ (800427c <HAL_RCC_ClockConfig+0x12c>)
 800418a:	688a      	ldr	r2, [r1, #8]
 800418c:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8004190:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004192:	071a      	lsls	r2, r3, #28
 8004194:	d504      	bpl.n	80041a0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004196:	4939      	ldr	r1, [pc, #228]	@ (800427c <HAL_RCC_ClockConfig+0x12c>)
 8004198:	688a      	ldr	r2, [r1, #8]
 800419a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800419e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4936      	ldr	r1, [pc, #216]	@ (800427c <HAL_RCC_ClockConfig+0x12c>)
 80041a2:	68a0      	ldr	r0, [r4, #8]
 80041a4:	688a      	ldr	r2, [r1, #8]
 80041a6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80041aa:	4302      	orrs	r2, r0
 80041ac:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ae:	07df      	lsls	r7, r3, #31
 80041b0:	d521      	bpl.n	80041f6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b2:	6862      	ldr	r2, [r4, #4]
 80041b4:	2a01      	cmp	r2, #1
 80041b6:	d057      	beq.n	8004268 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b8:	1e93      	subs	r3, r2, #2
 80041ba:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041bc:	4b2f      	ldr	r3, [pc, #188]	@ (800427c <HAL_RCC_ClockConfig+0x12c>)
 80041be:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c0:	d94d      	bls.n	800425e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	0799      	lsls	r1, r3, #30
 80041c4:	d5d8      	bpl.n	8004178 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c6:	4e2d      	ldr	r6, [pc, #180]	@ (800427c <HAL_RCC_ClockConfig+0x12c>)
 80041c8:	68b3      	ldr	r3, [r6, #8]
 80041ca:	f023 0303 	bic.w	r3, r3, #3
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80041d2:	f7ff fab7 	bl	8003744 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d6:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80041da:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041dc:	e004      	b.n	80041e8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041de:	f7ff fab1 	bl	8003744 <HAL_GetTick>
 80041e2:	1bc0      	subs	r0, r0, r7
 80041e4:	4540      	cmp	r0, r8
 80041e6:	d844      	bhi.n	8004272 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e8:	68b3      	ldr	r3, [r6, #8]
 80041ea:	6862      	ldr	r2, [r4, #4]
 80041ec:	f003 030c 	and.w	r3, r3, #12
 80041f0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80041f4:	d1f3      	bne.n	80041de <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041f6:	4a20      	ldr	r2, [pc, #128]	@ (8004278 <HAL_RCC_ClockConfig+0x128>)
 80041f8:	6813      	ldr	r3, [r2, #0]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	42ab      	cmp	r3, r5
 8004200:	d906      	bls.n	8004210 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	b2eb      	uxtb	r3, r5
 8004204:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	6813      	ldr	r3, [r2, #0]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	42ab      	cmp	r3, r5
 800420e:	d1b3      	bne.n	8004178 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	075a      	lsls	r2, r3, #29
 8004214:	d506      	bpl.n	8004224 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004216:	4919      	ldr	r1, [pc, #100]	@ (800427c <HAL_RCC_ClockConfig+0x12c>)
 8004218:	68e0      	ldr	r0, [r4, #12]
 800421a:	688a      	ldr	r2, [r1, #8]
 800421c:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8004220:	4302      	orrs	r2, r0
 8004222:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	071b      	lsls	r3, r3, #28
 8004226:	d507      	bpl.n	8004238 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004228:	4a14      	ldr	r2, [pc, #80]	@ (800427c <HAL_RCC_ClockConfig+0x12c>)
 800422a:	6921      	ldr	r1, [r4, #16]
 800422c:	6893      	ldr	r3, [r2, #8]
 800422e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004232:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004236:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004238:	f000 f870 	bl	800431c <HAL_RCC_GetSysClockFreq>
 800423c:	4a0f      	ldr	r2, [pc, #60]	@ (800427c <HAL_RCC_ClockConfig+0x12c>)
 800423e:	4c10      	ldr	r4, [pc, #64]	@ (8004280 <HAL_RCC_ClockConfig+0x130>)
 8004240:	6892      	ldr	r2, [r2, #8]
 8004242:	4910      	ldr	r1, [pc, #64]	@ (8004284 <HAL_RCC_ClockConfig+0x134>)
 8004244:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004248:	4603      	mov	r3, r0
 800424a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 800424c:	480e      	ldr	r0, [pc, #56]	@ (8004288 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800424e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004250:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004252:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004254:	f7fe fd1e 	bl	8002c94 <HAL_InitTick>
  return HAL_OK;
 8004258:	2000      	movs	r0, #0
}
 800425a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425e:	0198      	lsls	r0, r3, #6
 8004260:	d4b1      	bmi.n	80041c6 <HAL_RCC_ClockConfig+0x76>
 8004262:	e789      	b.n	8004178 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004264:	2001      	movs	r0, #1
}
 8004266:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004268:	4b04      	ldr	r3, [pc, #16]	@ (800427c <HAL_RCC_ClockConfig+0x12c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	039e      	lsls	r6, r3, #14
 800426e:	d4aa      	bmi.n	80041c6 <HAL_RCC_ClockConfig+0x76>
 8004270:	e782      	b.n	8004178 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004272:	2003      	movs	r0, #3
 8004274:	e781      	b.n	800417a <HAL_RCC_ClockConfig+0x2a>
 8004276:	bf00      	nop
 8004278:	40023c00 	.word	0x40023c00
 800427c:	40023800 	.word	0x40023800
 8004280:	08009c14 	.word	0x08009c14
 8004284:	2000056c 	.word	0x2000056c
 8004288:	20000574 	.word	0x20000574

0800428c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800428c:	4b01      	ldr	r3, [pc, #4]	@ (8004294 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	2000056c 	.word	0x2000056c

08004298 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004298:	4b04      	ldr	r3, [pc, #16]	@ (80042ac <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800429a:	4905      	ldr	r1, [pc, #20]	@ (80042b0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4a05      	ldr	r2, [pc, #20]	@ (80042b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80042a0:	6808      	ldr	r0, [r1, #0]
 80042a2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80042a6:	5cd3      	ldrb	r3, [r2, r3]
}
 80042a8:	40d8      	lsrs	r0, r3
 80042aa:	4770      	bx	lr
 80042ac:	40023800 	.word	0x40023800
 80042b0:	2000056c 	.word	0x2000056c
 80042b4:	08009c0c 	.word	0x08009c0c

080042b8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042b8:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80042ba:	4905      	ldr	r1, [pc, #20]	@ (80042d0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	4a05      	ldr	r2, [pc, #20]	@ (80042d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80042c0:	6808      	ldr	r0, [r1, #0]
 80042c2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80042c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80042c8:	40d8      	lsrs	r0, r3
 80042ca:	4770      	bx	lr
 80042cc:	40023800 	.word	0x40023800
 80042d0:	2000056c 	.word	0x2000056c
 80042d4:	08009c0c 	.word	0x08009c0c

080042d8 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004314 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042da:	220f      	movs	r2, #15
 80042dc:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	f002 0203 	and.w	r2, r2, #3
 80042e4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80042ec:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80042f4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	08db      	lsrs	r3, r3, #3
{
 80042fa:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042fc:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004300:	4c05      	ldr	r4, [pc, #20]	@ (8004318 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004302:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004304:	6823      	ldr	r3, [r4, #0]
}
 8004306:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	600b      	str	r3, [r1, #0]
}
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800
 8004318:	40023c00 	.word	0x40023c00

0800431c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800431c:	491d      	ldr	r1, [pc, #116]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x78>)
{
 800431e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004320:	688b      	ldr	r3, [r1, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b08      	cmp	r3, #8
 8004328:	d01a      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0x44>
 800432a:	2b0c      	cmp	r3, #12
 800432c:	d116      	bne.n	800435c <HAL_RCC_GetSysClockFreq+0x40>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800432e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004330:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004332:	6849      	ldr	r1, [r1, #4]
 8004334:	4818      	ldr	r0, [pc, #96]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x7c>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004336:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800433e:	bf18      	it	ne
 8004340:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004342:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004346:	fba1 0100 	umull	r0, r1, r1, r0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434a:	f7fc fa97 	bl	800087c <__aeabi_uldivmod>
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800434e:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x78>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 8004356:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800435a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800435c:	480e      	ldr	r0, [pc, #56]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x7c>)
}
 800435e:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004360:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004362:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004364:	6849      	ldr	r1, [r1, #4]
 8004366:	480c      	ldr	r0, [pc, #48]	@ (8004398 <HAL_RCC_GetSysClockFreq+0x7c>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004368:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004370:	bf18      	it	ne
 8004372:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004374:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004378:	fba1 0100 	umull	r0, r1, r1, r0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800437c:	f7fc fa7e 	bl	800087c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004380:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <HAL_RCC_GetSysClockFreq+0x78>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004388:	3301      	adds	r3, #1
 800438a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800438c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004390:	bd08      	pop	{r3, pc}
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800
 8004398:	00f42400 	.word	0x00f42400

0800439c <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800439c:	2800      	cmp	r0, #0
 800439e:	f000 81fb 	beq.w	8004798 <HAL_RCC_OscConfig+0x3fc>
{
 80043a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a6:	6803      	ldr	r3, [r0, #0]
 80043a8:	07de      	lsls	r6, r3, #31
{
 80043aa:	b082      	sub	sp, #8
 80043ac:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ae:	d536      	bpl.n	800441e <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043b0:	49a1      	ldr	r1, [pc, #644]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 80043b2:	688a      	ldr	r2, [r1, #8]
 80043b4:	f002 020c 	and.w	r2, r2, #12
 80043b8:	2a04      	cmp	r2, #4
 80043ba:	f000 80de 	beq.w	800457a <HAL_RCC_OscConfig+0x1de>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043be:	688a      	ldr	r2, [r1, #8]
 80043c0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043c4:	2a08      	cmp	r2, #8
 80043c6:	f000 80d4 	beq.w	8004572 <HAL_RCC_OscConfig+0x1d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ca:	499b      	ldr	r1, [pc, #620]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 80043cc:	688a      	ldr	r2, [r1, #8]
 80043ce:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043d2:	2a0c      	cmp	r2, #12
 80043d4:	f000 8104 	beq.w	80045e0 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d8:	6863      	ldr	r3, [r4, #4]
 80043da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043de:	f000 8118 	beq.w	8004612 <HAL_RCC_OscConfig+0x276>
 80043e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e6:	f000 8192 	beq.w	800470e <HAL_RCC_OscConfig+0x372>
 80043ea:	4d93      	ldr	r5, [pc, #588]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 80043ec:	682a      	ldr	r2, [r5, #0]
 80043ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80043f2:	602a      	str	r2, [r5, #0]
 80043f4:	682a      	ldr	r2, [r5, #0]
 80043f6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80043fa:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 810d 	bne.w	800461c <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7ff f99f 	bl	8003744 <HAL_GetTick>
 8004406:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004408:	e005      	b.n	8004416 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800440a:	f7ff f99b 	bl	8003744 <HAL_GetTick>
 800440e:	1b80      	subs	r0, r0, r6
 8004410:	2864      	cmp	r0, #100	@ 0x64
 8004412:	f200 80fa 	bhi.w	800460a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	682b      	ldr	r3, [r5, #0]
 8004418:	039f      	lsls	r7, r3, #14
 800441a:	d4f6      	bmi.n	800440a <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	079d      	lsls	r5, r3, #30
 8004420:	d52f      	bpl.n	8004482 <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004422:	4a85      	ldr	r2, [pc, #532]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 8004424:	6891      	ldr	r1, [r2, #8]
 8004426:	f011 0f0c 	tst.w	r1, #12
 800442a:	f000 8099 	beq.w	8004560 <HAL_RCC_OscConfig+0x1c4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800442e:	6891      	ldr	r1, [r2, #8]
 8004430:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004434:	2908      	cmp	r1, #8
 8004436:	f000 808f 	beq.w	8004558 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800443a:	497f      	ldr	r1, [pc, #508]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 800443c:	688a      	ldr	r2, [r1, #8]
 800443e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004442:	2a0c      	cmp	r2, #12
 8004444:	f000 815e 	beq.w	8004704 <HAL_RCC_OscConfig+0x368>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004448:	68e3      	ldr	r3, [r4, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8112 	beq.w	8004674 <HAL_RCC_OscConfig+0x2d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004450:	4b7a      	ldr	r3, [pc, #488]	@ (800463c <HAL_RCC_OscConfig+0x2a0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004452:	4e79      	ldr	r6, [pc, #484]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
        __HAL_RCC_HSI_ENABLE();
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004458:	f7ff f974 	bl	8003744 <HAL_GetTick>
 800445c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445e:	e005      	b.n	800446c <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004460:	f7ff f970 	bl	8003744 <HAL_GetTick>
 8004464:	1b40      	subs	r0, r0, r5
 8004466:	2802      	cmp	r0, #2
 8004468:	f200 80cf 	bhi.w	800460a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446c:	6833      	ldr	r3, [r6, #0]
 800446e:	079f      	lsls	r7, r3, #30
 8004470:	d5f6      	bpl.n	8004460 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	6833      	ldr	r3, [r6, #0]
 8004474:	6922      	ldr	r2, [r4, #16]
 8004476:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800447a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800447e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	071a      	lsls	r2, r3, #28
 8004484:	d452      	bmi.n	800452c <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004486:	075d      	lsls	r5, r3, #29
 8004488:	d530      	bpl.n	80044ec <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448a:	4a6b      	ldr	r2, [pc, #428]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 800448c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800448e:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8004492:	f000 8099 	beq.w	80045c8 <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 8004496:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	4e69      	ldr	r6, [pc, #420]	@ (8004640 <HAL_RCC_OscConfig+0x2a4>)
 800449a:	6833      	ldr	r3, [r6, #0]
 800449c:	05d8      	lsls	r0, r3, #23
 800449e:	f140 80a4 	bpl.w	80045ea <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a2:	68a3      	ldr	r3, [r4, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	f000 80cd 	beq.w	8004644 <HAL_RCC_OscConfig+0x2a8>
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	f000 8139 	beq.w	8004722 <HAL_RCC_OscConfig+0x386>
 80044b0:	4e61      	ldr	r6, [pc, #388]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 80044b2:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	6732      	str	r2, [r6, #112]	@ 0x70
 80044ba:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80044bc:	f022 0204 	bic.w	r2, r2, #4
 80044c0:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 80c3 	bne.w	800464e <HAL_RCC_OscConfig+0x2b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c8:	f7ff f93c 	bl	8003744 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80044d0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d2:	e005      	b.n	80044e0 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7ff f936 	bl	8003744 <HAL_GetTick>
 80044d8:	1bc0      	subs	r0, r0, r7
 80044da:	4540      	cmp	r0, r8
 80044dc:	f200 8095 	bhi.w	800460a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80044e2:	079b      	lsls	r3, r3, #30
 80044e4:	d4f6      	bmi.n	80044d4 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e6:	2d00      	cmp	r5, #0
 80044e8:	f040 8106 	bne.w	80046f8 <HAL_RCC_OscConfig+0x35c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ec:	69a3      	ldr	r3, [r4, #24]
 80044ee:	b1cb      	cbz	r3, 8004524 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044f0:	4d51      	ldr	r5, [pc, #324]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 80044f2:	68aa      	ldr	r2, [r5, #8]
 80044f4:	f002 020c 	and.w	r2, r2, #12
 80044f8:	2a08      	cmp	r2, #8
 80044fa:	f000 80cc 	beq.w	8004696 <HAL_RCC_OscConfig+0x2fa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044fe:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004500:	4b4e      	ldr	r3, [pc, #312]	@ (800463c <HAL_RCC_OscConfig+0x2a0>)
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004508:	f000 8115 	beq.w	8004736 <HAL_RCC_OscConfig+0x39a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7ff f91a 	bl	8003744 <HAL_GetTick>
 8004510:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	e004      	b.n	800451e <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004514:	f7ff f916 	bl	8003744 <HAL_GetTick>
 8004518:	1b00      	subs	r0, r0, r4
 800451a:	2802      	cmp	r0, #2
 800451c:	d875      	bhi.n	800460a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451e:	682b      	ldr	r3, [r5, #0]
 8004520:	019b      	lsls	r3, r3, #6
 8004522:	d4f7      	bmi.n	8004514 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004524:	2000      	movs	r0, #0
}
 8004526:	b002      	add	sp, #8
 8004528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800452c:	6963      	ldr	r3, [r4, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d02d      	beq.n	800458e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_LSI_ENABLE();
 8004532:	4b42      	ldr	r3, [pc, #264]	@ (800463c <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004534:	4e40      	ldr	r6, [pc, #256]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_ENABLE();
 8004536:	2201      	movs	r2, #1
 8004538:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800453c:	f7ff f902 	bl	8003744 <HAL_GetTick>
 8004540:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004542:	e004      	b.n	800454e <HAL_RCC_OscConfig+0x1b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004544:	f7ff f8fe 	bl	8003744 <HAL_GetTick>
 8004548:	1b40      	subs	r0, r0, r5
 800454a:	2802      	cmp	r0, #2
 800454c:	d85d      	bhi.n	800460a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004550:	079b      	lsls	r3, r3, #30
 8004552:	d5f7      	bpl.n	8004544 <HAL_RCC_OscConfig+0x1a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	e796      	b.n	8004486 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004558:	6852      	ldr	r2, [r2, #4]
 800455a:	0250      	lsls	r0, r2, #9
 800455c:	f53f af6d 	bmi.w	800443a <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004560:	4a35      	ldr	r2, [pc, #212]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	0792      	lsls	r2, r2, #30
 8004566:	d523      	bpl.n	80045b0 <HAL_RCC_OscConfig+0x214>
 8004568:	68e2      	ldr	r2, [r4, #12]
 800456a:	2a01      	cmp	r2, #1
 800456c:	d020      	beq.n	80045b0 <HAL_RCC_OscConfig+0x214>
    return HAL_ERROR;
 800456e:	2001      	movs	r0, #1
 8004570:	e7d9      	b.n	8004526 <HAL_RCC_OscConfig+0x18a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004572:	684a      	ldr	r2, [r1, #4]
 8004574:	0255      	lsls	r5, r2, #9
 8004576:	f57f af28 	bpl.w	80043ca <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457a:	4a2f      	ldr	r2, [pc, #188]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	0392      	lsls	r2, r2, #14
 8004580:	f57f af4d 	bpl.w	800441e <HAL_RCC_OscConfig+0x82>
 8004584:	6862      	ldr	r2, [r4, #4]
 8004586:	2a00      	cmp	r2, #0
 8004588:	f47f af49 	bne.w	800441e <HAL_RCC_OscConfig+0x82>
 800458c:	e7ef      	b.n	800456e <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_LSI_DISABLE();
 800458e:	4a2b      	ldr	r2, [pc, #172]	@ (800463c <HAL_RCC_OscConfig+0x2a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004590:	4e29      	ldr	r6, [pc, #164]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
      __HAL_RCC_LSI_DISABLE();
 8004592:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004596:	f7ff f8d5 	bl	8003744 <HAL_GetTick>
 800459a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800459c:	e004      	b.n	80045a8 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459e:	f7ff f8d1 	bl	8003744 <HAL_GetTick>
 80045a2:	1b40      	subs	r0, r0, r5
 80045a4:	2802      	cmp	r0, #2
 80045a6:	d830      	bhi.n	800460a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a8:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80045aa:	079f      	lsls	r7, r3, #30
 80045ac:	d4f7      	bmi.n	800459e <HAL_RCC_OscConfig+0x202>
 80045ae:	e7d1      	b.n	8004554 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b0:	4921      	ldr	r1, [pc, #132]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 80045b2:	6920      	ldr	r0, [r4, #16]
 80045b4:	680a      	ldr	r2, [r1, #0]
 80045b6:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80045ba:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80045be:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c0:	071a      	lsls	r2, r3, #28
 80045c2:	f57f af60 	bpl.w	8004486 <HAL_RCC_OscConfig+0xea>
 80045c6:	e7b1      	b.n	800452c <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c8:	9301      	str	r3, [sp, #4]
 80045ca:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80045cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045d2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80045d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d8:	9301      	str	r3, [sp, #4]
 80045da:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80045dc:	2501      	movs	r5, #1
 80045de:	e75b      	b.n	8004498 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045e0:	684a      	ldr	r2, [r1, #4]
 80045e2:	0251      	lsls	r1, r2, #9
 80045e4:	f57f aef8 	bpl.w	80043d8 <HAL_RCC_OscConfig+0x3c>
 80045e8:	e7c7      	b.n	800457a <HAL_RCC_OscConfig+0x1de>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ea:	6833      	ldr	r3, [r6, #0]
 80045ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80045f2:	f7ff f8a7 	bl	8003744 <HAL_GetTick>
 80045f6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f8:	6833      	ldr	r3, [r6, #0]
 80045fa:	05d9      	lsls	r1, r3, #23
 80045fc:	f53f af51 	bmi.w	80044a2 <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004600:	f7ff f8a0 	bl	8003744 <HAL_GetTick>
 8004604:	1bc0      	subs	r0, r0, r7
 8004606:	2802      	cmp	r0, #2
 8004608:	d9f6      	bls.n	80045f8 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800460a:	2003      	movs	r0, #3
}
 800460c:	b002      	add	sp, #8
 800460e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004612:	4a09      	ldr	r2, [pc, #36]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
 8004614:	6813      	ldr	r3, [r2, #0]
 8004616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800461a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800461c:	f7ff f892 	bl	8003744 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004620:	4e05      	ldr	r6, [pc, #20]	@ (8004638 <HAL_RCC_OscConfig+0x29c>)
        tickstart = HAL_GetTick();
 8004622:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004624:	e004      	b.n	8004630 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004626:	f7ff f88d 	bl	8003744 <HAL_GetTick>
 800462a:	1b40      	subs	r0, r0, r5
 800462c:	2864      	cmp	r0, #100	@ 0x64
 800462e:	d8ec      	bhi.n	800460a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004630:	6833      	ldr	r3, [r6, #0]
 8004632:	039b      	lsls	r3, r3, #14
 8004634:	d5f7      	bpl.n	8004626 <HAL_RCC_OscConfig+0x28a>
 8004636:	e6f1      	b.n	800441c <HAL_RCC_OscConfig+0x80>
 8004638:	40023800 	.word	0x40023800
 800463c:	42470000 	.word	0x42470000
 8004640:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004644:	4a55      	ldr	r2, [pc, #340]	@ (800479c <HAL_RCC_OscConfig+0x400>)
 8004646:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800464e:	f7ff f879 	bl	8003744 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	4f52      	ldr	r7, [pc, #328]	@ (800479c <HAL_RCC_OscConfig+0x400>)
      tickstart = HAL_GetTick();
 8004654:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004656:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465a:	e004      	b.n	8004666 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7ff f872 	bl	8003744 <HAL_GetTick>
 8004660:	1b80      	subs	r0, r0, r6
 8004662:	4540      	cmp	r0, r8
 8004664:	d8d1      	bhi.n	800460a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004668:	079a      	lsls	r2, r3, #30
 800466a:	d5f7      	bpl.n	800465c <HAL_RCC_OscConfig+0x2c0>
    if(pwrclkchanged == SET)
 800466c:	2d00      	cmp	r5, #0
 800466e:	f43f af3d 	beq.w	80044ec <HAL_RCC_OscConfig+0x150>
 8004672:	e041      	b.n	80046f8 <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_HSI_DISABLE();
 8004674:	4a4a      	ldr	r2, [pc, #296]	@ (80047a0 <HAL_RCC_OscConfig+0x404>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004676:	4e49      	ldr	r6, [pc, #292]	@ (800479c <HAL_RCC_OscConfig+0x400>)
        __HAL_RCC_HSI_DISABLE();
 8004678:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800467a:	f7ff f863 	bl	8003744 <HAL_GetTick>
 800467e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004680:	e004      	b.n	800468c <HAL_RCC_OscConfig+0x2f0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004682:	f7ff f85f 	bl	8003744 <HAL_GetTick>
 8004686:	1b40      	subs	r0, r0, r5
 8004688:	2802      	cmp	r0, #2
 800468a:	d8be      	bhi.n	800460a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	0799      	lsls	r1, r3, #30
 8004690:	d4f7      	bmi.n	8004682 <HAL_RCC_OscConfig+0x2e6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	e6f5      	b.n	8004482 <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004696:	2b01      	cmp	r3, #1
 8004698:	f43f af69 	beq.w	800456e <HAL_RCC_OscConfig+0x1d2>
        pll_config = RCC->PLLCFGR;
 800469c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a4:	4291      	cmp	r1, r2
 80046a6:	f47f af62 	bne.w	800456e <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046ac:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b0:	4291      	cmp	r1, r2
 80046b2:	f47f af5c 	bne.w	800456e <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80046b8:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80046bc:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046be:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80046c2:	f47f af54 	bne.w	800456e <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80046c8:	0852      	lsrs	r2, r2, #1
 80046ca:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80046ce:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80046d4:	f47f af4b 	bne.w	800456e <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80046da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046de:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80046e2:	f47f af44 	bne.w	800456e <HAL_RCC_OscConfig+0x1d2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80046e8:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ec:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80046f0:	bf14      	ite	ne
 80046f2:	2001      	movne	r0, #1
 80046f4:	2000      	moveq	r0, #0
 80046f6:	e716      	b.n	8004526 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f8:	4a28      	ldr	r2, [pc, #160]	@ (800479c <HAL_RCC_OscConfig+0x400>)
 80046fa:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80046fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004700:	6413      	str	r3, [r2, #64]	@ 0x40
 8004702:	e6f3      	b.n	80044ec <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004704:	684a      	ldr	r2, [r1, #4]
 8004706:	0251      	lsls	r1, r2, #9
 8004708:	f53f ae9e 	bmi.w	8004448 <HAL_RCC_OscConfig+0xac>
 800470c:	e728      	b.n	8004560 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470e:	4b23      	ldr	r3, [pc, #140]	@ (800479c <HAL_RCC_OscConfig+0x400>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800471e:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004720:	e77c      	b.n	800461c <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004722:	4b1e      	ldr	r3, [pc, #120]	@ (800479c <HAL_RCC_OscConfig+0x400>)
 8004724:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004726:	f042 0204 	orr.w	r2, r2, #4
 800472a:	671a      	str	r2, [r3, #112]	@ 0x70
 800472c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004734:	e78b      	b.n	800464e <HAL_RCC_OscConfig+0x2b2>
        tickstart = HAL_GetTick();
 8004736:	f7ff f805 	bl	8003744 <HAL_GetTick>
 800473a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473c:	e005      	b.n	800474a <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473e:	f7ff f801 	bl	8003744 <HAL_GetTick>
 8004742:	1b80      	subs	r0, r0, r6
 8004744:	2802      	cmp	r0, #2
 8004746:	f63f af60 	bhi.w	800460a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	0199      	lsls	r1, r3, #6
 800474e:	d4f6      	bmi.n	800473e <HAL_RCC_OscConfig+0x3a2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004750:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004754:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004756:	430b      	orrs	r3, r1
 8004758:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800475c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8004760:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004762:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004766:	0852      	lsrs	r2, r2, #1
 8004768:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800476c:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800476e:	490c      	ldr	r1, [pc, #48]	@ (80047a0 <HAL_RCC_OscConfig+0x404>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004770:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004774:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004776:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004778:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800477a:	f7fe ffe3 	bl	8003744 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477e:	4d07      	ldr	r5, [pc, #28]	@ (800479c <HAL_RCC_OscConfig+0x400>)
        tickstart = HAL_GetTick();
 8004780:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004782:	e005      	b.n	8004790 <HAL_RCC_OscConfig+0x3f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004784:	f7fe ffde 	bl	8003744 <HAL_GetTick>
 8004788:	1b00      	subs	r0, r0, r4
 800478a:	2802      	cmp	r0, #2
 800478c:	f63f af3d 	bhi.w	800460a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	019a      	lsls	r2, r3, #6
 8004794:	d5f6      	bpl.n	8004784 <HAL_RCC_OscConfig+0x3e8>
 8004796:	e6c5      	b.n	8004524 <HAL_RCC_OscConfig+0x188>
    return HAL_ERROR;
 8004798:	2001      	movs	r0, #1
}
 800479a:	4770      	bx	lr
 800479c:	40023800 	.word	0x40023800
 80047a0:	42470000 	.word	0x42470000

080047a4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a4:	2800      	cmp	r0, #0
 80047a6:	f000 8086 	beq.w	80048b6 <HAL_TIM_Base_Init+0x112>
{
 80047aa:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80047b0:	4604      	mov	r4, r0
 80047b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d078      	beq.n	80048ac <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ba:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047bc:	493f      	ldr	r1, [pc, #252]	@ (80048bc <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 80047be:	2302      	movs	r3, #2
 80047c0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80047c6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c8:	d05c      	beq.n	8004884 <HAL_TIM_Base_Init+0xe0>
 80047ca:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80047ce:	d030      	beq.n	8004832 <HAL_TIM_Base_Init+0x8e>
 80047d0:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 80047d4:	428a      	cmp	r2, r1
 80047d6:	d02c      	beq.n	8004832 <HAL_TIM_Base_Init+0x8e>
 80047d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80047dc:	428a      	cmp	r2, r1
 80047de:	d028      	beq.n	8004832 <HAL_TIM_Base_Init+0x8e>
 80047e0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80047e4:	428a      	cmp	r2, r1
 80047e6:	d024      	beq.n	8004832 <HAL_TIM_Base_Init+0x8e>
 80047e8:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 80047ec:	428a      	cmp	r2, r1
 80047ee:	d049      	beq.n	8004884 <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047f0:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 80047f4:	428a      	cmp	r2, r1
 80047f6:	d020      	beq.n	800483a <HAL_TIM_Base_Init+0x96>
 80047f8:	4931      	ldr	r1, [pc, #196]	@ (80048c0 <HAL_TIM_Base_Init+0x11c>)
 80047fa:	428a      	cmp	r2, r1
 80047fc:	d01d      	beq.n	800483a <HAL_TIM_Base_Init+0x96>
 80047fe:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004802:	428a      	cmp	r2, r1
 8004804:	d019      	beq.n	800483a <HAL_TIM_Base_Init+0x96>
 8004806:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 800480a:	428a      	cmp	r2, r1
 800480c:	d015      	beq.n	800483a <HAL_TIM_Base_Init+0x96>
 800480e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004812:	428a      	cmp	r2, r1
 8004814:	d011      	beq.n	800483a <HAL_TIM_Base_Init+0x96>
 8004816:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800481a:	428a      	cmp	r2, r1
 800481c:	d00d      	beq.n	800483a <HAL_TIM_Base_Init+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481e:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004820:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004822:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004828:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800482a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800482c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800482e:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004830:	e010      	b.n	8004854 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 8004832:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004838:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800483c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800483e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004842:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004848:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800484a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800484c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800484e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004850:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004852:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004854:	2301      	movs	r3, #1
 8004856:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004858:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004860:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004864:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004868:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004874:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004878:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800487c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004880:	2000      	movs	r0, #0
}
 8004882:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004884:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004886:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800488c:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800488e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004892:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004894:	69a1      	ldr	r1, [r4, #24]
 8004896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800489a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800489c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489e:	68e3      	ldr	r3, [r4, #12]
 80048a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048a2:	6863      	ldr	r3, [r4, #4]
 80048a4:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80048a6:	6963      	ldr	r3, [r4, #20]
 80048a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80048aa:	e7d3      	b.n	8004854 <HAL_TIM_Base_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 80048ac:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80048b0:	f7fe f906 	bl	8002ac0 <HAL_TIM_Base_MspInit>
 80048b4:	e781      	b.n	80047ba <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 80048b6:	2001      	movs	r0, #1
}
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40014400 	.word	0x40014400

080048c4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80048c4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d12f      	bne.n	800492c <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048cc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ce:	4918      	ldr	r1, [pc, #96]	@ (8004930 <HAL_TIM_Base_Start_IT+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	2202      	movs	r2, #2
 80048d2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e0:	d019      	beq.n	8004916 <HAL_TIM_Base_Start_IT+0x52>
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e6:	d016      	beq.n	8004916 <HAL_TIM_Base_Start_IT+0x52>
 80048e8:	4a12      	ldr	r2, [pc, #72]	@ (8004934 <HAL_TIM_Base_Start_IT+0x70>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_TIM_Base_Start_IT+0x52>
 80048ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00f      	beq.n	8004916 <HAL_TIM_Base_Start_IT+0x52>
 80048f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00b      	beq.n	8004916 <HAL_TIM_Base_Start_IT+0x52>
 80048fe:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8004902:	4293      	cmp	r3, r2
 8004904:	d007      	beq.n	8004916 <HAL_TIM_Base_Start_IT+0x52>
 8004906:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800490a:	4293      	cmp	r3, r2
 800490c:	d003      	beq.n	8004916 <HAL_TIM_Base_Start_IT+0x52>
 800490e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004912:	4293      	cmp	r3, r2
 8004914:	d104      	bne.n	8004920 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491c:	2a06      	cmp	r2, #6
 800491e:	d003      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004928:	2000      	movs	r0, #0
 800492a:	4770      	bx	lr
    return HAL_ERROR;
 800492c:	2001      	movs	r0, #1
}
 800492e:	4770      	bx	lr
 8004930:	40010000 	.word	0x40010000
 8004934:	40000400 	.word	0x40000400

08004938 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop

0800493c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800493c:	2800      	cmp	r0, #0
 800493e:	f000 8086 	beq.w	8004a4e <HAL_TIM_PWM_Init+0x112>
{
 8004942:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004944:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004948:	4604      	mov	r4, r0
 800494a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800494e:	2b00      	cmp	r3, #0
 8004950:	d078      	beq.n	8004a44 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004952:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004954:	493f      	ldr	r1, [pc, #252]	@ (8004a54 <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004956:	2302      	movs	r3, #2
 8004958:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800495c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800495e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004960:	d05c      	beq.n	8004a1c <HAL_TIM_PWM_Init+0xe0>
 8004962:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004966:	d030      	beq.n	80049ca <HAL_TIM_PWM_Init+0x8e>
 8004968:	f5a1 417c 	sub.w	r1, r1, #64512	@ 0xfc00
 800496c:	428a      	cmp	r2, r1
 800496e:	d02c      	beq.n	80049ca <HAL_TIM_PWM_Init+0x8e>
 8004970:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004974:	428a      	cmp	r2, r1
 8004976:	d028      	beq.n	80049ca <HAL_TIM_PWM_Init+0x8e>
 8004978:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800497c:	428a      	cmp	r2, r1
 800497e:	d024      	beq.n	80049ca <HAL_TIM_PWM_Init+0x8e>
 8004980:	f501 4178 	add.w	r1, r1, #63488	@ 0xf800
 8004984:	428a      	cmp	r2, r1
 8004986:	d049      	beq.n	8004a1c <HAL_TIM_PWM_Init+0xe0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004988:	f501 5170 	add.w	r1, r1, #15360	@ 0x3c00
 800498c:	428a      	cmp	r2, r1
 800498e:	d020      	beq.n	80049d2 <HAL_TIM_PWM_Init+0x96>
 8004990:	4931      	ldr	r1, [pc, #196]	@ (8004a58 <HAL_TIM_PWM_Init+0x11c>)
 8004992:	428a      	cmp	r2, r1
 8004994:	d01d      	beq.n	80049d2 <HAL_TIM_PWM_Init+0x96>
 8004996:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800499a:	428a      	cmp	r2, r1
 800499c:	d019      	beq.n	80049d2 <HAL_TIM_PWM_Init+0x96>
 800499e:	f5a1 3198 	sub.w	r1, r1, #77824	@ 0x13000
 80049a2:	428a      	cmp	r2, r1
 80049a4:	d015      	beq.n	80049d2 <HAL_TIM_PWM_Init+0x96>
 80049a6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80049aa:	428a      	cmp	r2, r1
 80049ac:	d011      	beq.n	80049d2 <HAL_TIM_PWM_Init+0x96>
 80049ae:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80049b2:	428a      	cmp	r2, r1
 80049b4:	d00d      	beq.n	80049d2 <HAL_TIM_PWM_Init+0x96>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b6:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 80049b8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ba:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049c0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80049c2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049c6:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c8:	e010      	b.n	80049ec <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 |= Structure->CounterMode;
 80049ca:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80049d0:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049d2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049da:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80049e4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80049e6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049ea:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80049ec:	2301      	movs	r3, #1
 80049ee:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80049f8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80049fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004a00:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a0c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004a10:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004a18:	2000      	movs	r0, #0
}
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004a1c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a1e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a24:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a2c:	69a1      	ldr	r1, [r4, #24]
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a32:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004a34:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a36:	68e3      	ldr	r3, [r4, #12]
 8004a38:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a3a:	6863      	ldr	r3, [r4, #4]
 8004a3c:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004a3e:	6963      	ldr	r3, [r4, #20]
 8004a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a42:	e7d3      	b.n	80049ec <HAL_TIM_PWM_Init+0xb0>
    htim->Lock = HAL_UNLOCKED;
 8004a44:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004a48:	f7ff ff76 	bl	8004938 <HAL_TIM_PWM_MspInit>
 8004a4c:	e781      	b.n	8004952 <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8004a4e:	2001      	movs	r0, #1
}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40014400 	.word	0x40014400

08004a5c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004a5c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	f000 80c6 	beq.w	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x196>
 8004a66:	2301      	movs	r3, #1
{
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8004a6c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8004a70:	2a0c      	cmp	r2, #12
 8004a72:	d808      	bhi.n	8004a86 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004a74:	e8df f002 	tbb	[pc, r2]
 8004a78:	0707073e 	.word	0x0707073e
 8004a7c:	07070767 	.word	0x07070767
 8004a80:	07070793 	.word	0x07070793
 8004a84:	0c          	.byte	0x0c
 8004a85:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8004a86:	2300      	movs	r3, #0
 8004a88:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8004a8c:	2001      	movs	r0, #1
}
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a90:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a92:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a94:	6a1a      	ldr	r2, [r3, #32]
 8004a96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a9a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004a9c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004a9e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004aa0:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa2:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aaa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004aac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ab0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab4:	4d6a      	ldr	r5, [pc, #424]	@ (8004c60 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8004ab6:	42ab      	cmp	r3, r5
 8004ab8:	f000 80bc 	beq.w	8004c34 <HAL_TIM_PWM_ConfigChannel+0x1d8>
 8004abc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004ac0:	42ab      	cmp	r3, r5
 8004ac2:	f000 80b7 	beq.w	8004c34 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac8:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aca:	6848      	ldr	r0, [r1, #4]
 8004acc:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ace:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ad0:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ad2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ad4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004ae8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004aea:	2300      	movs	r3, #0
 8004aec:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004af0:	2000      	movs	r0, #0
}
 8004af2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004af4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004af6:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af8:	6a1a      	ldr	r2, [r3, #32]
 8004afa:	f022 0201 	bic.w	r2, r2, #1
 8004afe:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004b00:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004b02:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b04:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b06:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004b0a:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8004b0c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004b0e:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8004b12:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b14:	4d52      	ldr	r5, [pc, #328]	@ (8004c60 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8004b16:	42ab      	cmp	r3, r5
 8004b18:	d06d      	beq.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x19a>
 8004b1a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004b1e:	42ab      	cmp	r3, r5
 8004b20:	d069      	beq.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x19a>
  TIMx->CR2 = tmpcr2;
 8004b22:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b24:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004b26:	6848      	ldr	r0, [r1, #4]
 8004b28:	6358      	str	r0, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8004b2a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b2c:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b2e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b30:	f042 0208 	orr.w	r2, r2, #8
 8004b34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b36:	699a      	ldr	r2, [r3, #24]
 8004b38:	f022 0204 	bic.w	r2, r2, #4
 8004b3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b3e:	699a      	ldr	r2, [r3, #24]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	619a      	str	r2, [r3, #24]
      break;
 8004b44:	e7d1      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b46:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b48:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b4a:	6a1a      	ldr	r2, [r3, #32]
 8004b4c:	f022 0210 	bic.w	r2, r2, #16
 8004b50:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004b52:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004b54:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b56:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b58:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b5c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b60:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004b62:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b66:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b6a:	4d3d      	ldr	r5, [pc, #244]	@ (8004c60 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8004b6c:	42ab      	cmp	r3, r5
 8004b6e:	d051      	beq.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x1b8>
 8004b70:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004b74:	42ab      	cmp	r3, r5
 8004b76:	d04d      	beq.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CR2 = tmpcr2;
 8004b78:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b7a:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004b7c:	6848      	ldr	r0, [r1, #4]
 8004b7e:	6398      	str	r0, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004b80:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b82:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b84:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b94:	699a      	ldr	r2, [r3, #24]
 8004b96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b9a:	619a      	str	r2, [r3, #24]
      break;
 8004b9c:	e7a5      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x8e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b9e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004ba0:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba2:	6a1a      	ldr	r2, [r3, #32]
 8004ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ba8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004baa:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004bac:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004bae:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb0:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004bb4:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bb6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004bb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bbc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bc0:	4d27      	ldr	r5, [pc, #156]	@ (8004c60 <HAL_TIM_PWM_ConfigChannel+0x204>)
 8004bc2:	42ab      	cmp	r3, r5
 8004bc4:	d03c      	beq.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x1e4>
 8004bc6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004bca:	42ab      	cmp	r3, r5
 8004bcc:	d038      	beq.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x1e4>
  TIMx->CR2 = tmpcr2;
 8004bce:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004bd0:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004bd2:	6848      	ldr	r0, [r1, #4]
 8004bd4:	63d8      	str	r0, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8004bd6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bd8:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bda:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bdc:	f042 0208 	orr.w	r2, r2, #8
 8004be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	f022 0204 	bic.w	r2, r2, #4
 8004be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	61da      	str	r2, [r3, #28]
      break;
 8004bf0:	e77b      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x8e>
  __HAL_LOCK(htim);
 8004bf2:	2002      	movs	r0, #2
}
 8004bf4:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004bf6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bf8:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004bfc:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bfe:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c02:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c06:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c0e:	ea4e 0404 	orr.w	r4, lr, r4
 8004c12:	e786      	b.n	8004b22 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c14:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c1a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c1e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c22:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c26:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c2e:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 8004c32:	e7a1      	b.n	8004b78 <HAL_TIM_PWM_ConfigChannel+0x11c>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c34:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c36:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c3a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004c3e:	e742      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c40:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c4a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c4e:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c52:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c5a:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 8004c5e:	e7b6      	b.n	8004bce <HAL_TIM_PWM_ConfigChannel+0x172>
 8004c60:	40010000 	.word	0x40010000

08004c64 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004c64:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d071      	beq.n	8004d50 <HAL_TIM_ConfigClockSource+0xec>
 8004c6c:	4602      	mov	r2, r0
{
 8004c6e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004c70:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8004c72:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8004c78:	2001      	movs	r0, #1
 8004c7a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004c7e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c84:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004c88:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004c8a:	680b      	ldr	r3, [r1, #0]
 8004c8c:	2b60      	cmp	r3, #96	@ 0x60
 8004c8e:	d061      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0xf0>
 8004c90:	d824      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x78>
 8004c92:	2b40      	cmp	r3, #64	@ 0x40
 8004c94:	d077      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0x122>
 8004c96:	d94a      	bls.n	8004d2e <HAL_TIM_ConfigClockSource+0xca>
 8004c98:	2b50      	cmp	r3, #80	@ 0x50
 8004c9a:	d117      	bne.n	8004ccc <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9c:	684b      	ldr	r3, [r1, #4]
 8004c9e:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca0:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004ca6:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca8:	6a23      	ldr	r3, [r4, #32]
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb0:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cba:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004cbc:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cbe:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cc4:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc8:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004cce:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004cd4:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8004cd8:	bc30      	pop	{r4, r5}
 8004cda:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce0:	d0f3      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x66>
 8004ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce6:	d110      	bne.n	8004d0a <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ce8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004cec:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cee:	432b      	orrs	r3, r5
 8004cf0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf2:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cf6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004cfa:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cfc:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cfe:	68a3      	ldr	r3, [r4, #8]
 8004d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d04:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2000      	movs	r0, #0
 8004d08:	e7e0      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004d0a:	2b70      	cmp	r3, #112	@ 0x70
 8004d0c:	d1de      	bne.n	8004ccc <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d0e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004d12:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d14:	432b      	orrs	r3, r5
 8004d16:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d18:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d1c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004d20:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004d22:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004d24:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d26:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004d2a:	60a3      	str	r3, [r4, #8]
      break;
 8004d2c:	e7cd      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d002      	beq.n	8004d38 <HAL_TIM_ConfigClockSource+0xd4>
 8004d32:	d909      	bls.n	8004d48 <HAL_TIM_ConfigClockSource+0xe4>
 8004d34:	2b30      	cmp	r3, #48	@ 0x30
 8004d36:	d1c9      	bne.n	8004ccc <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8004d38:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d3a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004d44:	60a3      	str	r3, [r4, #8]
}
 8004d46:	e7c0      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8004d48:	f033 0110 	bics.w	r1, r3, #16
 8004d4c:	d1be      	bne.n	8004ccc <HAL_TIM_ConfigClockSource+0x68>
 8004d4e:	e7f3      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8004d50:	2002      	movs	r0, #2
}
 8004d52:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d54:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d56:	6848      	ldr	r0, [r1, #4]
 8004d58:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d5a:	f023 0310 	bic.w	r3, r3, #16
 8004d5e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d60:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8004d62:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d64:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d6c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d70:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004d74:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004d76:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004d78:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d7e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8004d82:	60a3      	str	r3, [r4, #8]
}
 8004d84:	e7a1      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d86:	684b      	ldr	r3, [r1, #4]
 8004d88:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8004d8a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d8c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004d90:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d92:	6a23      	ldr	r3, [r4, #32]
 8004d94:	f023 0301 	bic.w	r3, r3, #1
 8004d98:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004da0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004da4:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004da6:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004da8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dae:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8004db2:	60a3      	str	r3, [r4, #8]
}
 8004db4:	e789      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x66>
 8004db6:	bf00      	nop

08004db8 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004db8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004dbc:	2a01      	cmp	r2, #1
 8004dbe:	d050      	beq.n	8004e62 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8004dc0:	4603      	mov	r3, r0
{
 8004dc2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc4:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 8004dc6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8004dcc:	2001      	movs	r0, #1
 8004dce:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004dd2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004dd4:	6848      	ldr	r0, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004dd6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dd8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004ddc:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004dde:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004de2:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 8004de4:	2850      	cmp	r0, #80	@ 0x50
  htim->Instance->SMCR = tmpsmcr;
 8004de6:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004de8:	d060      	beq.n	8004eac <HAL_TIM_SlaveConfigSynchro+0xf4>
 8004dea:	d90f      	bls.n	8004e0c <HAL_TIM_SlaveConfigSynchro+0x54>
 8004dec:	2860      	cmp	r0, #96	@ 0x60
 8004dee:	d03a      	beq.n	8004e66 <HAL_TIM_SlaveConfigSynchro+0xae>
 8004df0:	2870      	cmp	r0, #112	@ 0x70
 8004df2:	d10e      	bne.n	8004e12 <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df4:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8004df8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dfa:	432a      	orrs	r2, r5
 8004dfc:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dfe:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004e06:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004e08:	60a2      	str	r2, [r4, #8]
 8004e0a:	e00f      	b.n	8004e2c <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8004e0c:	2840      	cmp	r0, #64	@ 0x40
 8004e0e:	d03d      	beq.n	8004e8c <HAL_TIM_SlaveConfigSynchro+0xd4>
 8004e10:	d907      	bls.n	8004e22 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 8004e12:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8004e14:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8004e16:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004e1e:	bc30      	pop	{r4, r5}
 8004e20:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004e22:	2820      	cmp	r0, #32
 8004e24:	d002      	beq.n	8004e2c <HAL_TIM_SlaveConfigSynchro+0x74>
 8004e26:	d912      	bls.n	8004e4e <HAL_TIM_SlaveConfigSynchro+0x96>
 8004e28:	2830      	cmp	r0, #48	@ 0x30
 8004e2a:	d1f2      	bne.n	8004e12 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004e2c:	68e2      	ldr	r2, [r4, #12]
 8004e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e32:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e34:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8004e36:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e3e:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	f883 503d 	strb.w	r5, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004e44:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  return HAL_OK;
 8004e48:	4608      	mov	r0, r1
}
 8004e4a:	bc30      	pop	{r4, r5}
 8004e4c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004e4e:	f030 0210 	bics.w	r2, r0, #16
 8004e52:	d0eb      	beq.n	8004e2c <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8004e54:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8004e56:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8004e58:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004e60:	e7dd      	b.n	8004e1e <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8004e62:	2002      	movs	r0, #2
}
 8004e64:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e66:	6a22      	ldr	r2, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e68:	6888      	ldr	r0, [r1, #8]
 8004e6a:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	f022 0210 	bic.w	r2, r2, #16
 8004e70:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e72:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8004e74:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e76:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e7a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e7e:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e82:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004e86:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004e88:	6222      	str	r2, [r4, #32]
 8004e8a:	e7cf      	b.n	8004e2c <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e8c:	2d05      	cmp	r5, #5
 8004e8e:	d0c0      	beq.n	8004e12 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8004e90:	6a20      	ldr	r0, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e92:	6a22      	ldr	r2, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e94:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	6222      	str	r2, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004e9c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e9e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004ea2:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004ea6:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004ea8:	6220      	str	r0, [r4, #32]
      break;
 8004eaa:	e7bf      	b.n	8004e2c <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eac:	688a      	ldr	r2, [r1, #8]
 8004eae:	6908      	ldr	r0, [r1, #16]
  tmpccer = TIMx->CCER;
 8004eb0:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004eb6:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb8:	6a22      	ldr	r2, [r4, #32]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	6222      	str	r2, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec0:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ec2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec6:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004eca:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004ecc:	6221      	str	r1, [r4, #32]
 8004ece:	e7ad      	b.n	8004e2c <HAL_TIM_SlaveConfigSynchro+0x74>

08004ed0 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop

08004ed4 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop

08004ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop

08004edc <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop

08004ee0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ee0:	6803      	ldr	r3, [r0, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	0791      	lsls	r1, r2, #30
{
 8004ee6:	b510      	push	{r4, lr}
 8004ee8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eea:	d502      	bpl.n	8004ef2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	0792      	lsls	r2, r2, #30
 8004ef0:	d45f      	bmi.n	8004fb2 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	0750      	lsls	r0, r2, #29
 8004ef6:	d502      	bpl.n	8004efe <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	0751      	lsls	r1, r2, #29
 8004efc:	d446      	bmi.n	8004f8c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	0712      	lsls	r2, r2, #28
 8004f02:	d502      	bpl.n	8004f0a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	0710      	lsls	r0, r2, #28
 8004f08:	d42e      	bmi.n	8004f68 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	06d2      	lsls	r2, r2, #27
 8004f0e:	d502      	bpl.n	8004f16 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	06d0      	lsls	r0, r2, #27
 8004f14:	d418      	bmi.n	8004f48 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	07d1      	lsls	r1, r2, #31
 8004f1a:	d502      	bpl.n	8004f22 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	07d2      	lsls	r2, r2, #31
 8004f20:	d45d      	bmi.n	8004fde <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	0610      	lsls	r0, r2, #24
 8004f26:	d502      	bpl.n	8004f2e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	0611      	lsls	r1, r2, #24
 8004f2c:	d45f      	bmi.n	8004fee <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	0652      	lsls	r2, r2, #25
 8004f32:	d502      	bpl.n	8004f3a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	0650      	lsls	r0, r2, #25
 8004f38:	d461      	bmi.n	8004ffe <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	0691      	lsls	r1, r2, #26
 8004f3e:	d502      	bpl.n	8004f46 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	0692      	lsls	r2, r2, #26
 8004f44:	d443      	bmi.n	8004fce <HAL_TIM_IRQHandler+0xee>
}
 8004f46:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f48:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f4c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f4e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f50:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004f58:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f5a:	d064      	beq.n	8005026 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5c:	f7ff ffba 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f60:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f62:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f64:	7722      	strb	r2, [r4, #28]
 8004f66:	e7d6      	b.n	8004f16 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f68:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f6c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f6e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f70:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f78:	d152      	bne.n	8005020 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	f7ff ffa9 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f7ff ffaa 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f84:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f86:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f88:	7722      	strb	r2, [r4, #28]
 8004f8a:	e7be      	b.n	8004f0a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f8c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f90:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f92:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f94:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f9e:	d13c      	bne.n	800501a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa0:	f7ff ff96 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7ff ff97 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fac:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fae:	7722      	strb	r2, [r4, #28]
 8004fb0:	e7a5      	b.n	8004efe <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fb2:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb6:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fb8:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fba:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	079b      	lsls	r3, r3, #30
 8004fc0:	d025      	beq.n	800500e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	f7ff ff87 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fc8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	7722      	strb	r2, [r4, #28]
 8004fcc:	e791      	b.n	8004ef2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fce:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004fd2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fd4:	611a      	str	r2, [r3, #16]
}
 8004fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004fda:	f000 b9dd 	b.w	8005398 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fde:	f06f 0201 	mvn.w	r2, #1
 8004fe2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f7fc f989 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	e799      	b.n	8004f22 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fee:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ff2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f000 f9d1 	bl	800539c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	e797      	b.n	8004f2e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ffe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005002:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005004:	4620      	mov	r0, r4
 8005006:	f7ff ff69 	bl	8004edc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	e795      	b.n	8004f3a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800500e:	f7ff ff5f 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005012:	4620      	mov	r0, r4
 8005014:	f7ff ff60 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005018:	e7d5      	b.n	8004fc6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800501a:	f7ff ff5b 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
 800501e:	e7c4      	b.n	8004faa <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8005020:	f7ff ff58 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
 8005024:	e7ae      	b.n	8004f84 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005026:	f7ff ff53 	bl	8004ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502a:	4620      	mov	r0, r4
 800502c:	f7ff ff54 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005030:	e796      	b.n	8004f60 <HAL_TIM_IRQHandler+0x80>
 8005032:	bf00      	nop

08005034 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005034:	4a35      	ldr	r2, [pc, #212]	@ (800510c <TIM_Base_SetConfig+0xd8>)
  tmpcr1 = TIMx->CR1;
 8005036:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005038:	4290      	cmp	r0, r2
{
 800503a:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800503c:	d04d      	beq.n	80050da <TIM_Base_SetConfig+0xa6>
 800503e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005042:	d034      	beq.n	80050ae <TIM_Base_SetConfig+0x7a>
 8005044:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005048:	4290      	cmp	r0, r2
 800504a:	d030      	beq.n	80050ae <TIM_Base_SetConfig+0x7a>
 800504c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005050:	4290      	cmp	r0, r2
 8005052:	d02c      	beq.n	80050ae <TIM_Base_SetConfig+0x7a>
 8005054:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005058:	4290      	cmp	r0, r2
 800505a:	d028      	beq.n	80050ae <TIM_Base_SetConfig+0x7a>
 800505c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005060:	4290      	cmp	r0, r2
 8005062:	d03a      	beq.n	80050da <TIM_Base_SetConfig+0xa6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005064:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8005068:	4290      	cmp	r0, r2
 800506a:	d024      	beq.n	80050b6 <TIM_Base_SetConfig+0x82>
 800506c:	4a28      	ldr	r2, [pc, #160]	@ (8005110 <TIM_Base_SetConfig+0xdc>)
 800506e:	4290      	cmp	r0, r2
 8005070:	d021      	beq.n	80050b6 <TIM_Base_SetConfig+0x82>
 8005072:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005076:	4290      	cmp	r0, r2
 8005078:	d01d      	beq.n	80050b6 <TIM_Base_SetConfig+0x82>
 800507a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800507e:	4290      	cmp	r0, r2
 8005080:	d019      	beq.n	80050b6 <TIM_Base_SetConfig+0x82>
 8005082:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005086:	4290      	cmp	r0, r2
 8005088:	d015      	beq.n	80050b6 <TIM_Base_SetConfig+0x82>
 800508a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800508e:	4290      	cmp	r0, r2
 8005090:	d011      	beq.n	80050b6 <TIM_Base_SetConfig+0x82>
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005092:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8005094:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005096:	6949      	ldr	r1, [r1, #20]
 8005098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800509c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800509e:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80050a0:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a2:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050a4:	6282      	str	r2, [r0, #40]	@ 0x28
}
 80050a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->EGR = TIM_EGR_UG;
 80050aa:	6143      	str	r3, [r0, #20]
}
 80050ac:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80050ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80050b4:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b6:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b8:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050be:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c4:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c6:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80050c8:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80050ca:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80050cc:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ce:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050d0:	6282      	str	r2, [r0, #40]	@ 0x28
}
 80050d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  TIMx->EGR = TIM_EGR_UG;
 80050d6:	6143      	str	r3, [r0, #20]
}
 80050d8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80050da:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050dc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80050e2:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80050e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ea:	694a      	ldr	r2, [r1, #20]
}
 80050ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050f4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80050f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050f8:	688b      	ldr	r3, [r1, #8]
 80050fa:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050fc:	680b      	ldr	r3, [r1, #0]
 80050fe:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005100:	690b      	ldr	r3, [r1, #16]
 8005102:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005104:	2301      	movs	r3, #1
 8005106:	6143      	str	r3, [r0, #20]
}
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000
 8005110:	40014400 	.word	0x40014400

08005114 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005114:	6a03      	ldr	r3, [r0, #32]
 8005116:	f023 0310 	bic.w	r3, r3, #16
 800511a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800511c:	6a03      	ldr	r3, [r0, #32]
{
 800511e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8005120:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005122:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005124:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005126:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800512a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800512e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005130:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005134:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005138:	4d0e      	ldr	r5, [pc, #56]	@ (8005174 <TIM_OC2_SetConfig+0x60>)
 800513a:	42a8      	cmp	r0, r5
 800513c:	d00a      	beq.n	8005154 <TIM_OC2_SetConfig+0x40>
 800513e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005142:	42a8      	cmp	r0, r5
 8005144:	d006      	beq.n	8005154 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 8005146:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005148:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800514a:	6182      	str	r2, [r0, #24]
}
 800514c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800514e:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005150:	6203      	str	r3, [r0, #32]
}
 8005152:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005154:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800515a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800515e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005162:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005166:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800516a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800516e:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 8005172:	e7e8      	b.n	8005146 <TIM_OC2_SetConfig+0x32>
 8005174:	40010000 	.word	0x40010000

08005178 <TIM_TI1_SetConfig>:
{
 8005178:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517a:	6a04      	ldr	r4, [r0, #32]
 800517c:	f024 0401 	bic.w	r4, r4, #1
 8005180:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005182:	4c1b      	ldr	r4, [pc, #108]	@ (80051f0 <TIM_TI1_SetConfig+0x78>)
  tmpccmr1 = TIMx->CCMR1;
 8005184:	6985      	ldr	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8005186:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005188:	42a0      	cmp	r0, r4
{
 800518a:	4694      	mov	ip, r2
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800518c:	d01c      	beq.n	80051c8 <TIM_TI1_SetConfig+0x50>
 800518e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005192:	d019      	beq.n	80051c8 <TIM_TI1_SetConfig+0x50>
 8005194:	4a17      	ldr	r2, [pc, #92]	@ (80051f4 <TIM_TI1_SetConfig+0x7c>)
 8005196:	4290      	cmp	r0, r2
 8005198:	d016      	beq.n	80051c8 <TIM_TI1_SetConfig+0x50>
 800519a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800519e:	4290      	cmp	r0, r2
 80051a0:	d012      	beq.n	80051c8 <TIM_TI1_SetConfig+0x50>
 80051a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80051a6:	4290      	cmp	r0, r2
 80051a8:	d00e      	beq.n	80051c8 <TIM_TI1_SetConfig+0x50>
 80051aa:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80051ae:	4290      	cmp	r0, r2
 80051b0:	d00a      	beq.n	80051c8 <TIM_TI1_SetConfig+0x50>
 80051b2:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80051b6:	4290      	cmp	r0, r2
 80051b8:	d006      	beq.n	80051c8 <TIM_TI1_SetConfig+0x50>
 80051ba:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80051be:	4290      	cmp	r0, r2
 80051c0:	d002      	beq.n	80051c8 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051c2:	f045 0201 	orr.w	r2, r5, #1
 80051c6:	e003      	b.n	80051d0 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051c8:	f025 0203 	bic.w	r2, r5, #3
    tmpccmr1 |= TIM_ICSelection;
 80051cc:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051d0:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051d2:	f026 0c0a 	bic.w	ip, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051da:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051dc:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051e0:	4313      	orrs	r3, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051e2:	ea41 010c 	orr.w	r1, r1, ip
  TIMx->CCMR1 = tmpccmr1;
 80051e6:	6183      	str	r3, [r0, #24]
}
 80051e8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 80051ea:	6201      	str	r1, [r0, #32]
}
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40010000 	.word	0x40010000
 80051f4:	40000400 	.word	0x40000400

080051f8 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop

080051fc <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d05f      	beq.n	80052c0 <HAL_TIMEx_HallSensor_Init+0xc4>
{
 8005200:	b530      	push	{r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005202:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
{
 8005206:	b089      	sub	sp, #36	@ 0x24
 8005208:	460d      	mov	r5, r1
 800520a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800520c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005210:	2b00      	cmp	r3, #0
 8005212:	d050      	beq.n	80052b6 <HAL_TIMEx_HallSensor_Init+0xba>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8005216:	2302      	movs	r3, #2
 8005218:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005220:	f7ff ff08 	bl	8005034 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005224:	68ab      	ldr	r3, [r5, #8]
 8005226:	6829      	ldr	r1, [r5, #0]
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	2203      	movs	r2, #3
 800522c:	f7ff ffa4 	bl	8005178 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005230:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005232:	6869      	ldr	r1, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005234:	6983      	ldr	r3, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005236:	68ea      	ldr	r2, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005238:	f023 030c 	bic.w	r3, r3, #12
 800523c:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800523e:	6983      	ldr	r3, [r0, #24]
 8005240:	430b      	orrs	r3, r1
 8005242:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005244:	6843      	ldr	r3, [r0, #4]
 8005246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800524a:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800524c:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800524e:	9202      	str	r2, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005254:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005256:	6883      	ldr	r3, [r0, #8]
 8005258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800525c:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800525e:	6883      	ldr	r3, [r0, #8]
 8005260:	f023 0307 	bic.w	r3, r3, #7
 8005264:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005266:	6883      	ldr	r3, [r0, #8]
 8005268:	f043 0304 	orr.w	r3, r3, #4
 800526c:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800526e:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005270:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005272:	2370      	movs	r3, #112	@ 0x70
 8005274:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005276:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800527a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800527e:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005280:	f7ff ff48 	bl	8005114 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005284:	6822      	ldr	r2, [r4, #0]
 8005286:	6851      	ldr	r1, [r2, #4]
 8005288:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800528c:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800528e:	6851      	ldr	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005290:	2301      	movs	r3, #1
  return HAL_OK;
 8005292:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005294:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 8005298:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800529a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800529e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052a2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 80052ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80052b2:	b009      	add	sp, #36	@ 0x24
 80052b4:	bd30      	pop	{r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80052b6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80052ba:	f7ff ff9d 	bl	80051f8 <HAL_TIMEx_HallSensor_MspInit>
 80052be:	e7a9      	b.n	8005214 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 80052c0:	2001      	movs	r0, #1
}
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80052c8:	2a01      	cmp	r2, #1
 80052ca:	d037      	beq.n	800533c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80052cc:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ce:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	2002      	movs	r0, #2
{
 80052d2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80052d8:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052da:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80052dc:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80052de:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e2:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052e4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e6:	4816      	ldr	r0, [pc, #88]	@ (8005340 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 80052e8:	4282      	cmp	r2, r0
 80052ea:	d01a      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80052ec:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80052f0:	d017      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80052f2:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80052f6:	4282      	cmp	r2, r0
 80052f8:	d013      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80052fa:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80052fe:	4282      	cmp	r2, r0
 8005300:	d00f      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005302:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8005306:	4282      	cmp	r2, r0
 8005308:	d00b      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800530a:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 800530e:	4282      	cmp	r2, r0
 8005310:	d007      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005312:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8005316:	4282      	cmp	r2, r0
 8005318:	d003      	beq.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800531a:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 800531e:	4282      	cmp	r2, r0
 8005320:	d104      	bne.n	800532c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005322:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005324:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005328:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800532a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800532c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005334:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005338:	bc30      	pop	{r4, r5}
 800533a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800533c:	2002      	movs	r0, #2
}
 800533e:	4770      	bx	lr
 8005340:	40010000 	.word	0x40010000

08005344 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005344:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d023      	beq.n	8005394 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 800534c:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800534e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005356:	4602      	mov	r2, r0
 8005358:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800535a:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800535c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800535e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005362:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005364:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005368:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800536a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800536c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005370:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005372:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005374:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005376:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800537a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800537c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005380:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8005382:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005384:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8005386:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005388:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 800538c:	4608      	mov	r0, r1
}
 800538e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005392:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005394:	2002      	movs	r0, #2
}
 8005396:	4770      	bx	lr

08005398 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop

0800539c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop

080053a0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f000 8086 	beq.w	80054b2 <HAL_UART_Init+0x112>
{
 80053a6:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80053ac:	4604      	mov	r4, r0
 80053ae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d078      	beq.n	80054a8 <HAL_UART_Init+0x108>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053b6:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053b8:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80053ba:	2224      	movs	r2, #36	@ 0x24
 80053bc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053c6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c8:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ca:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053cc:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80053d0:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053d2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053d4:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053d6:	4302      	orrs	r2, r0
 80053d8:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80053da:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053dc:	4302      	orrs	r2, r0
 80053de:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80053e0:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 80053e4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053e8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80053ea:	430a      	orrs	r2, r1
 80053ec:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ee:	695a      	ldr	r2, [r3, #20]
 80053f0:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f2:	4931      	ldr	r1, [pc, #196]	@ (80054b8 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053f4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80053f8:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053fa:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053fc:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053fe:	d035      	beq.n	800546c <HAL_UART_Init+0xcc>
 8005400:	4a2e      	ldr	r2, [pc, #184]	@ (80054bc <HAL_UART_Init+0x11c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d032      	beq.n	800546c <HAL_UART_Init+0xcc>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005406:	f7fe ff47 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800540a:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800540c:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800540e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005412:	e9d4 5300 	ldrd	r5, r3, [r4]
 8005416:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800541a:	d02a      	beq.n	8005472 <HAL_UART_Init+0xd2>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800541c:	009a      	lsls	r2, r3, #2
 800541e:	0f9b      	lsrs	r3, r3, #30
 8005420:	f7fb fa2c 	bl	800087c <__aeabi_uldivmod>
 8005424:	4a26      	ldr	r2, [pc, #152]	@ (80054c0 <HAL_UART_Init+0x120>)
 8005426:	fba2 1300 	umull	r1, r3, r2, r0
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	2164      	movs	r1, #100	@ 0x64
 800542e:	fb01 0013 	mls	r0, r1, r3, r0
 8005432:	0100      	lsls	r0, r0, #4
 8005434:	3032      	adds	r0, #50	@ 0x32
 8005436:	fba2 2000 	umull	r2, r0, r2, r0
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8005440:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005442:	692b      	ldr	r3, [r5, #16]
 8005444:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8005448:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800544a:	696b      	ldr	r3, [r5, #20]
 800544c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8005450:	616b      	str	r3, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8005452:	68eb      	ldr	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005454:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8005456:	2220      	movs	r2, #32
  __HAL_UART_ENABLE(huart);
 8005458:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800545c:	60eb      	str	r3, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545e:	6421      	str	r1, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005460:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005464:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  return HAL_OK;
 8005468:	4608      	mov	r0, r1
}
 800546a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 800546c:	f7fe ff24 	bl	80042b8 <HAL_RCC_GetPCLK2Freq>
 8005470:	e7cb      	b.n	800540a <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005472:	18da      	adds	r2, r3, r3
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	415b      	adcs	r3, r3
 800547a:	f7fb f9ff 	bl	800087c <__aeabi_uldivmod>
 800547e:	4a10      	ldr	r2, [pc, #64]	@ (80054c0 <HAL_UART_Init+0x120>)
 8005480:	fba2 3100 	umull	r3, r1, r2, r0
 8005484:	0949      	lsrs	r1, r1, #5
 8005486:	2364      	movs	r3, #100	@ 0x64
 8005488:	fb03 0311 	mls	r3, r3, r1, r0
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	3332      	adds	r3, #50	@ 0x32
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8005498:	091b      	lsrs	r3, r3, #4
 800549a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800549e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054a2:	4413      	add	r3, r2
 80054a4:	60ab      	str	r3, [r5, #8]
 80054a6:	e7cc      	b.n	8005442 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 80054a8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 80054ac:	f7fd fb9c 	bl	8002be8 <HAL_UART_MspInit>
 80054b0:	e781      	b.n	80053b6 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 80054b2:	2001      	movs	r0, #1
}
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40011000 	.word	0x40011000
 80054bc:	40011400 	.word	0x40011400
 80054c0:	51eb851f 	.word	0x51eb851f

080054c4 <HAL_UART_DeInit>:
  if (huart == NULL)
 80054c4:	b1b0      	cbz	r0, 80054f4 <HAL_UART_DeInit+0x30>
  __HAL_UART_DISABLE(huart);
 80054c6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80054c8:	2324      	movs	r3, #36	@ 0x24
{
 80054ca:	b510      	push	{r4, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80054cc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 80054d0:	68d3      	ldr	r3, [r2, #12]
 80054d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054d6:	4604      	mov	r4, r0
 80054d8:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 80054da:	f7fd fbc1 	bl	8002c60 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054de:	2300      	movs	r3, #0
 80054e0:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(huart);
 80054e2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80054e6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80054ea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 80054ee:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f0:	6323      	str	r3, [r4, #48]	@ 0x30
}
 80054f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80054f4:	2001      	movs	r0, #1
}
 80054f6:	4770      	bx	lr

080054f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054f8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80054fa:	f001 fc81 	bl	8006e00 <vTaskStartScheduler>
  
  return osOK;
}
 80054fe:	2000      	movs	r0, #0
 8005500:	bd08      	pop	{r3, pc}
 8005502:	bf00      	nop

08005504 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	4684      	mov	ip, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005508:	6945      	ldr	r5, [r0, #20]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800550a:	f8dc 2010 	ldr.w	r2, [ip, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800550e:	6840      	ldr	r0, [r0, #4]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005510:	f9bc e008 	ldrsh.w	lr, [ip, #8]
{
 8005514:	460b      	mov	r3, r1
 8005516:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005518:	f8dc 1000 	ldr.w	r1, [ip]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800551c:	b17d      	cbz	r5, 800553e <osThreadCreate+0x3a>
 800551e:	f8dc 6018 	ldr.w	r6, [ip, #24]
 8005522:	b166      	cbz	r6, 800553e <osThreadCreate+0x3a>
  if (priority != osPriorityError) {
 8005524:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8005528:	bf14      	ite	ne
 800552a:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800552e:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005530:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8005534:	9400      	str	r4, [sp, #0]
 8005536:	f001 fab7 	bl	8006aa8 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 800553a:	b006      	add	sp, #24
 800553c:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800553e:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8005542:	bf14      	ite	ne
 8005544:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005548:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800554a:	9400      	str	r4, [sp, #0]
 800554c:	ac05      	add	r4, sp, #20
 800554e:	b292      	uxth	r2, r2
 8005550:	9401      	str	r4, [sp, #4]
 8005552:	f001 fb59 	bl	8006c08 <xTaskCreate>
 8005556:	2801      	cmp	r0, #1
  return handle;
 8005558:	bf0c      	ite	eq
 800555a:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 800555c:	2000      	movne	r0, #0
}
 800555e:	b006      	add	sp, #24
 8005560:	bd70      	pop	{r4, r5, r6, pc}
 8005562:	bf00      	nop

08005564 <osThreadGetPriority>:
* @param   thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  current priority value of the thread function.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
*/
osPriority osThreadGetPriority (osThreadId thread_id)
{
 8005564:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005566:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_uxTaskPriorityGet == 1)
  if (inHandlerMode())
 800556a:	b133      	cbz	r3, 800557a <osThreadGetPriority+0x16>
  {
    return makeCmsisPriority(uxTaskPriorityGetFromISR(thread_id));  
 800556c:	f001 fc2c 	bl	8006dc8 <uxTaskPriorityGetFromISR>
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 8005570:	2806      	cmp	r0, #6
 8005572:	d806      	bhi.n	8005582 <osThreadGetPriority+0x1e>
    priority = (osPriority)((int)osPriorityIdle + (int)(fpriority - tskIDLE_PRIORITY));
 8005574:	3803      	subs	r0, #3
 8005576:	b200      	sxth	r0, r0
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
  }
#else
  return osPriorityError;
#endif
}
 8005578:	bd08      	pop	{r3, pc}
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
 800557a:	f001 fc11 	bl	8006da0 <uxTaskPriorityGet>
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 800557e:	2806      	cmp	r0, #6
 8005580:	d9f8      	bls.n	8005574 <osThreadGetPriority+0x10>
  osPriority priority = osPriorityError;
 8005582:	2084      	movs	r0, #132	@ 0x84
}
 8005584:	bd08      	pop	{r3, pc}
 8005586:	bf00      	nop

08005588 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8005588:	b530      	push	{r4, r5, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800558a:	e9d0 5400 	ldrd	r5, r4, [r0]
{
 800558e:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8005590:	f1a1 0201 	sub.w	r2, r1, #1
 8005594:	fab2 f282 	clz	r2, r2
 8005598:	4808      	ldr	r0, [pc, #32]	@ (80055bc <osTimerCreate+0x34>)
{
 800559a:	b083      	sub	sp, #12
    return xTimerCreateStatic((const char *)"",
 800559c:	0952      	lsrs	r2, r2, #5
  if(timer_def->controlblock != NULL) {
 800559e:	b134      	cbz	r4, 80055ae <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 80055a0:	e9cd 5400 	strd	r5, r4, [sp]
 80055a4:	2101      	movs	r1, #1
 80055a6:	f002 f935 	bl	8007814 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 80055aa:	b003      	add	sp, #12
 80055ac:	bd30      	pop	{r4, r5, pc}
    return xTimerCreate((const char *)"",
 80055ae:	9500      	str	r5, [sp, #0]
 80055b0:	2101      	movs	r1, #1
 80055b2:	f002 f8c7 	bl	8007744 <xTimerCreate>
}
 80055b6:	b003      	add	sp, #12
 80055b8:	bd30      	pop	{r4, r5, pc}
 80055ba:	bf00      	nop
 80055bc:	08009c28 	.word	0x08009c28

080055c0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80055c0:	b510      	push	{r4, lr}
 80055c2:	b084      	sub	sp, #16
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80055c4:	2400      	movs	r4, #0
 80055c6:	2901      	cmp	r1, #1
 80055c8:	460a      	mov	r2, r1
 80055ca:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 80055cc:	bf38      	it	cc
 80055ce:	2201      	movcc	r2, #1
 80055d0:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 80055d4:	b14b      	cbz	r3, 80055ea <osTimerStart+0x2a>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80055d6:	9400      	str	r4, [sp, #0]
 80055d8:	ab03      	add	r3, sp, #12
 80055da:	2109      	movs	r1, #9
 80055dc:	f002 f99a 	bl	8007914 <xTimerGenericCommand>
 80055e0:	2801      	cmp	r0, #1
 80055e2:	d00b      	beq.n	80055fc <osTimerStart+0x3c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 80055e4:	20ff      	movs	r0, #255	@ 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 80055e6:	b004      	add	sp, #16
 80055e8:	bd10      	pop	{r4, pc}
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	2104      	movs	r1, #4
 80055ee:	f002 f991 	bl	8007914 <xTimerGenericCommand>
 80055f2:	2801      	cmp	r0, #1
 80055f4:	d1f6      	bne.n	80055e4 <osTimerStart+0x24>
  osStatus result = osOK;
 80055f6:	2000      	movs	r0, #0
}
 80055f8:	b004      	add	sp, #16
 80055fa:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 80055fc:	9b03      	ldr	r3, [sp, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f9      	beq.n	80055f6 <osTimerStart+0x36>
 8005602:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800560a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8005616:	2000      	movs	r0, #0
  return result;
 8005618:	e7ee      	b.n	80055f8 <osTimerStart+0x38>
 800561a:	bf00      	nop

0800561c <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800561c:	b500      	push	{lr}
 800561e:	b085      	sub	sp, #20
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8005620:	2200      	movs	r2, #0
 8005622:	9203      	str	r2, [sp, #12]
 8005624:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 8005628:	b1b3      	cbz	r3, 8005658 <osTimerStop+0x3c>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800562a:	9200      	str	r2, [sp, #0]
 800562c:	ab03      	add	r3, sp, #12
 800562e:	2108      	movs	r1, #8
 8005630:	f002 f970 	bl	8007914 <xTimerGenericCommand>
 8005634:	2801      	cmp	r0, #1
 8005636:	d116      	bne.n	8005666 <osTimerStop+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	b14b      	cbz	r3, 8005650 <osTimerStop+0x34>
 800563c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005644:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8005650:	2000      	movs	r0, #0
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 8005652:	b005      	add	sp, #20
 8005654:	f85d fb04 	ldr.w	pc, [sp], #4
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	2103      	movs	r1, #3
 800565e:	f002 f959 	bl	8007914 <xTimerGenericCommand>
 8005662:	2801      	cmp	r0, #1
 8005664:	d0f4      	beq.n	8005650 <osTimerStop+0x34>
      return osErrorOS;
 8005666:	20ff      	movs	r0, #255	@ 0xff
}
 8005668:	b005      	add	sp, #20
 800566a:	f85d fb04 	ldr.w	pc, [sp], #4
 800566e:	bf00      	nop

08005670 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005674:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8005676:	f001 fc67 	bl	8006f48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800567a:	4a51      	ldr	r2, [pc, #324]	@ (80057c0 <pvPortMalloc+0x150>)
 800567c:	6815      	ldr	r5, [r2, #0]
 800567e:	2d00      	cmp	r5, #0
 8005680:	d035      	beq.n	80056ee <pvPortMalloc+0x7e>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005682:	4b50      	ldr	r3, [pc, #320]	@ (80057c4 <pvPortMalloc+0x154>)
 8005684:	681e      	ldr	r6, [r3, #0]
 8005686:	4234      	tst	r4, r6
 8005688:	d12b      	bne.n	80056e2 <pvPortMalloc+0x72>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800568a:	b354      	cbz	r4, 80056e2 <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800568c:	f104 0008 	add.w	r0, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005690:	0764      	lsls	r4, r4, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005692:	bf1c      	itt	ne
 8005694:	f020 0007 	bicne.w	r0, r0, #7
 8005698:	3008      	addne	r0, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800569a:	b310      	cbz	r0, 80056e2 <pvPortMalloc+0x72>
 800569c:	f8df e138 	ldr.w	lr, [pc, #312]	@ 80057d8 <pvPortMalloc+0x168>
 80056a0:	f8de c000 	ldr.w	ip, [lr]
 80056a4:	4584      	cmp	ip, r0
 80056a6:	d31c      	bcc.n	80056e2 <pvPortMalloc+0x72>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80056a8:	4c47      	ldr	r4, [pc, #284]	@ (80057c8 <pvPortMalloc+0x158>)
 80056aa:	6823      	ldr	r3, [r4, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056ac:	e003      	b.n	80056b6 <pvPortMalloc+0x46>
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	b122      	cbz	r2, 80056bc <pvPortMalloc+0x4c>
 80056b2:	461c      	mov	r4, r3
 80056b4:	4613      	mov	r3, r2
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	4281      	cmp	r1, r0
 80056ba:	d3f8      	bcc.n	80056ae <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056bc:	42ab      	cmp	r3, r5
 80056be:	d010      	beq.n	80056e2 <pvPortMalloc+0x72>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	6022      	str	r2, [r4, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056c4:	1a0a      	subs	r2, r1, r0
 80056c6:	2a10      	cmp	r2, #16
 80056c8:	d946      	bls.n	8005758 <pvPortMalloc+0xe8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056ca:	181c      	adds	r4, r3, r0
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056cc:	0761      	lsls	r1, r4, #29
 80056ce:	d02c      	beq.n	800572a <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	e7fe      	b.n	80056e0 <pvPortMalloc+0x70>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056e2:	f001 fc39 	bl	8006f58 <xTaskResumeAll>
void *pvReturn = NULL;
 80056e6:	2400      	movs	r4, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 80056e8:	4620      	mov	r0, r4
 80056ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056ee:	4b37      	ldr	r3, [pc, #220]	@ (80057cc <pvPortMalloc+0x15c>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056f0:	4835      	ldr	r0, [pc, #212]	@ (80057c8 <pvPortMalloc+0x158>)
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056f2:	4f34      	ldr	r7, [pc, #208]	@ (80057c4 <pvPortMalloc+0x154>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056f4:	075d      	lsls	r5, r3, #29
	uxAddress -= xHeapStructSize;
 80056f6:	4d36      	ldr	r5, [pc, #216]	@ (80057d0 <pvPortMalloc+0x160>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056f8:	bf18      	it	ne
 80056fa:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056fc:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005700:	bf18      	it	ne
 8005702:	f023 0307 	bicne.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005706:	6015      	str	r5, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005708:	4a32      	ldr	r2, [pc, #200]	@ (80057d4 <pvPortMalloc+0x164>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800570a:	6003      	str	r3, [r0, #0]
 800570c:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800570e:	1aeb      	subs	r3, r5, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005710:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005712:	4a31      	ldr	r2, [pc, #196]	@ (80057d8 <pvPortMalloc+0x168>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005714:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005718:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800571a:	2200      	movs	r2, #0
 800571c:	6042      	str	r2, [r0, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800571e:	603e      	str	r6, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8005720:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005724:	e9c1 5300 	strd	r5, r3, [r1]
}
 8005728:	e7ad      	b.n	8005686 <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800572a:	6062      	str	r2, [r4, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800572c:	4a26      	ldr	r2, [pc, #152]	@ (80057c8 <pvPortMalloc+0x158>)
						pxBlock->xBlockSize = xWantedSize;
 800572e:	6058      	str	r0, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005730:	4617      	mov	r7, r2
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	4294      	cmp	r4, r2
 8005736:	d8fb      	bhi.n	8005730 <pvPortMalloc+0xc0>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005738:	6879      	ldr	r1, [r7, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800573a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800573e:	eb07 0901 	add.w	r9, r7, r1
 8005742:	454c      	cmp	r4, r9
 8005744:	d028      	beq.n	8005798 <pvPortMalloc+0x128>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005746:	eb04 0108 	add.w	r1, r4, r8
 800574a:	428a      	cmp	r2, r1
 800574c:	d02e      	beq.n	80057ac <pvPortMalloc+0x13c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800574e:	6022      	str	r2, [r4, #0]
 8005750:	4601      	mov	r1, r0

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005752:	42a7      	cmp	r7, r4
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005754:	bf18      	it	ne
 8005756:	603c      	strne	r4, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005758:	481e      	ldr	r0, [pc, #120]	@ (80057d4 <pvPortMalloc+0x164>)
 800575a:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800575c:	ebac 0201 	sub.w	r2, ip, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005760:	42a2      	cmp	r2, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005762:	bf38      	it	cc
 8005764:	6002      	strcc	r2, [r0, #0]
					xNumberOfSuccessfulAllocations++;
 8005766:	481d      	ldr	r0, [pc, #116]	@ (80057dc <pvPortMalloc+0x16c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005768:	f8ce 2000 	str.w	r2, [lr]
					xNumberOfSuccessfulAllocations++;
 800576c:	6802      	ldr	r2, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800576e:	4331      	orrs	r1, r6
					pxBlock->pxNextFreeBlock = NULL;
 8005770:	2500      	movs	r5, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005772:	f103 0408 	add.w	r4, r3, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005776:	6059      	str	r1, [r3, #4]
					xNumberOfSuccessfulAllocations++;
 8005778:	3201      	adds	r2, #1
					pxBlock->pxNextFreeBlock = NULL;
 800577a:	601d      	str	r5, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800577c:	6002      	str	r2, [r0, #0]
	( void ) xTaskResumeAll();
 800577e:	f001 fbeb 	bl	8006f58 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005782:	0763      	lsls	r3, r4, #29
 8005784:	d0b0      	beq.n	80056e8 <pvPortMalloc+0x78>
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	e7fe      	b.n	8005796 <pvPortMalloc+0x126>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005798:	4488      	add	r8, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800579a:	eb07 0108 	add.w	r1, r7, r8
 800579e:	428a      	cmp	r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057a0:	f8c7 8004 	str.w	r8, [r7, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057a4:	d001      	beq.n	80057aa <pvPortMalloc+0x13a>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057a6:	6859      	ldr	r1, [r3, #4]
 80057a8:	e7d6      	b.n	8005758 <pvPortMalloc+0xe8>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057aa:	463c      	mov	r4, r7
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ac:	42aa      	cmp	r2, r5
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057ae:	bf1c      	itt	ne
 80057b0:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057b2:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057b4:	6022      	str	r2, [r4, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057b6:	bf1c      	itt	ne
 80057b8:	4441      	addne	r1, r8
 80057ba:	6061      	strne	r1, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057bc:	6859      	ldr	r1, [r3, #4]
 80057be:	e7c8      	b.n	8005752 <pvPortMalloc+0xe2>
 80057c0:	200010fc 	.word	0x200010fc
 80057c4:	200010e8 	.word	0x200010e8
 80057c8:	20001100 	.word	0x20001100
 80057cc:	20001108 	.word	0x20001108
 80057d0:	20004d00 	.word	0x20004d00
 80057d4:	200010f4 	.word	0x200010f4
 80057d8:	200010f8 	.word	0x200010f8
 80057dc:	200010f0 	.word	0x200010f0

080057e0 <vPortFree>:
	if( pv != NULL )
 80057e0:	b1d0      	cbz	r0, 8005818 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005894 <vPortFree+0xb4>)
 80057e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	4213      	tst	r3, r2
 80057ec:	d00b      	beq.n	8005806 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057ee:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80057f2:	b191      	cbz	r1, 800581a <vPortFree+0x3a>
 80057f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	e7fe      	b.n	8005804 <vPortFree+0x24>
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005816:	e7fe      	b.n	8005816 <vPortFree+0x36>
 8005818:	4770      	bx	lr
{
 800581a:	b570      	push	{r4, r5, r6, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800581c:	ea23 0302 	bic.w	r3, r3, r2
{
 8005820:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005822:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005826:	4c1c      	ldr	r4, [pc, #112]	@ (8005898 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005828:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800582a:	f001 fb8d 	bl	8006f48 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800582e:	9801      	ldr	r0, [sp, #4]
 8005830:	6822      	ldr	r2, [r4, #0]
 8005832:	f850 5c04 	ldr.w	r5, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005836:	4b19      	ldr	r3, [pc, #100]	@ (800589c <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005838:	1951      	adds	r1, r2, r5
 800583a:	6021      	str	r1, [r4, #0]
		puc -= xHeapStructSize;
 800583c:	f1a0 0208 	sub.w	r2, r0, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005840:	4619      	mov	r1, r3
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d8fb      	bhi.n	8005840 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005848:	684e      	ldr	r6, [r1, #4]
 800584a:	198c      	adds	r4, r1, r6
 800584c:	42a2      	cmp	r2, r4
 800584e:	d011      	beq.n	8005874 <vPortFree+0x94>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005850:	eb02 0e05 	add.w	lr, r2, r5
 8005854:	4573      	cmp	r3, lr
 8005856:	d013      	beq.n	8005880 <vPortFree+0xa0>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005858:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
 800585c:	4291      	cmp	r1, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800585e:	bf18      	it	ne
 8005860:	600a      	strne	r2, [r1, #0]
					xNumberOfSuccessfulFrees++;
 8005862:	4a0f      	ldr	r2, [pc, #60]	@ (80058a0 <vPortFree+0xc0>)
 8005864:	6813      	ldr	r3, [r2, #0]
 8005866:	3301      	adds	r3, #1
 8005868:	6013      	str	r3, [r2, #0]
}
 800586a:	b002      	add	sp, #8
 800586c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				( void ) xTaskResumeAll();
 8005870:	f001 bb72 	b.w	8006f58 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005874:	4435      	add	r5, r6
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005876:	194a      	adds	r2, r1, r5
 8005878:	4293      	cmp	r3, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800587a:	604d      	str	r5, [r1, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800587c:	d1f1      	bne.n	8005862 <vPortFree+0x82>
 800587e:	460a      	mov	r2, r1
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005880:	4808      	ldr	r0, [pc, #32]	@ (80058a4 <vPortFree+0xc4>)
 8005882:	6800      	ldr	r0, [r0, #0]
 8005884:	4283      	cmp	r3, r0
 8005886:	d003      	beq.n	8005890 <vPortFree+0xb0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005888:	e9d3 0400 	ldrd	r0, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800588c:	1963      	adds	r3, r4, r5
 800588e:	6053      	str	r3, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005890:	6010      	str	r0, [r2, #0]
 8005892:	e7e3      	b.n	800585c <vPortFree+0x7c>
 8005894:	200010e8 	.word	0x200010e8
 8005898:	200010f8 	.word	0x200010f8
 800589c:	20001100 	.word	0x20001100
 80058a0:	200010ec 	.word	0x200010ec
 80058a4:	200010fc 	.word	0x200010fc

080058a8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058a8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058ac:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058b0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058b2:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058b6:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058ba:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop

080058c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop

080058c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80058c8:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80058ca:	6803      	ldr	r3, [r0, #0]
{
 80058cc:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058ce:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 80058d0:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058d2:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058d6:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058d8:	6091      	str	r1, [r2, #8]
}
 80058da:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80058de:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80058e0:	6003      	str	r3, [r0, #0]
}
 80058e2:	4770      	bx	lr

080058e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058e4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058e6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058e8:	1c6b      	adds	r3, r5, #1
 80058ea:	d010      	beq.n	800590e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058ec:	f100 0308 	add.w	r3, r0, #8
 80058f0:	461c      	mov	r4, r3
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	42aa      	cmp	r2, r5
 80058f8:	d9fa      	bls.n	80058f0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80058fa:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80058fc:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80058fe:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005900:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005902:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005904:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8005906:	6108      	str	r0, [r1, #16]
}
 8005908:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800590a:	6002      	str	r2, [r0, #0]
}
 800590c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800590e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005910:	6863      	ldr	r3, [r4, #4]
 8005912:	e7f2      	b.n	80058fa <vListInsert+0x16>

08005914 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005914:	6903      	ldr	r3, [r0, #16]
{
 8005916:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005918:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800591c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800591e:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8005920:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005922:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005924:	bf08      	it	eq
 8005926:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8005928:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800592a:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800592e:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8005930:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8005932:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005934:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8005936:	6818      	ldr	r0, [r3, #0]
}
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop

0800593c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800593c:	4808      	ldr	r0, [pc, #32]	@ (8005960 <prvPortStartFirstTask+0x24>)
 800593e:	6800      	ldr	r0, [r0, #0]
 8005940:	6800      	ldr	r0, [r0, #0]
 8005942:	f380 8808 	msr	MSP, r0
 8005946:	f04f 0000 	mov.w	r0, #0
 800594a:	f380 8814 	msr	CONTROL, r0
 800594e:	b662      	cpsie	i
 8005950:	b661      	cpsie	f
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	df00      	svc	0
 800595c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800595e:	0000      	.short	0x0000
 8005960:	e000ed08 	.word	0xe000ed08

08005964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005974 <vPortEnableVFP+0x10>
 8005968:	6801      	ldr	r1, [r0, #0]
 800596a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800596e:	6001      	str	r1, [r0, #0]
 8005970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005972:	0000      	.short	0x0000
 8005974:	e000ed88 	.word	0xe000ed88

08005978 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8005978:	4b0e      	ldr	r3, [pc, #56]	@ (80059b4 <prvTaskExitError+0x3c>)
 800597a:	681b      	ldr	r3, [r3, #0]
{
 800597c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800597e:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8005980:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8005982:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8005984:	d008      	beq.n	8005998 <prvTaskExitError+0x20>
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	e7fe      	b.n	8005996 <prvTaskExitError+0x1e>
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80059a8:	9b01      	ldr	r3, [sp, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0fc      	beq.n	80059a8 <prvTaskExitError+0x30>
}
 80059ae:	b002      	add	sp, #8
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	20000578 	.word	0x20000578

080059b8 <pxPortInitialiseStack>:
{
 80059b8:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059be:	4c07      	ldr	r4, [pc, #28]	@ (80059dc <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059c0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059c4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059c8:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059cc:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059d0:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 80059d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059d8:	3844      	subs	r0, #68	@ 0x44
 80059da:	4770      	bx	lr
 80059dc:	08005979 	.word	0x08005979

080059e0 <SVC_Handler>:
	__asm volatile (
 80059e0:	4b07      	ldr	r3, [pc, #28]	@ (8005a00 <pxCurrentTCBConst2>)
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	6808      	ldr	r0, [r1, #0]
 80059e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	f380 8809 	msr	PSP, r0
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8811 	msr	BASEPRI, r0
 80059fa:	4770      	bx	lr
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst2>:
 8005a00:	20004e74 	.word	0x20004e74

08005a04 <vPortEnterCritical>:
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005a14:	4a0b      	ldr	r2, [pc, #44]	@ (8005a44 <vPortEnterCritical+0x40>)
 8005a16:	6813      	ldr	r3, [r2, #0]
 8005a18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8005a1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8005a1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8005a1e:	d000      	beq.n	8005a22 <vPortEnterCritical+0x1e>
}
 8005a20:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a22:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005a26:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f7      	beq.n	8005a20 <vPortEnterCritical+0x1c>
 8005a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	e7fe      	b.n	8005a40 <vPortEnterCritical+0x3c>
 8005a42:	bf00      	nop
 8005a44:	20000578 	.word	0x20000578

08005a48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005a48:	4a08      	ldr	r2, [pc, #32]	@ (8005a6c <vPortExitCritical+0x24>)
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	b943      	cbnz	r3, 8005a60 <vPortExitCritical+0x18>
 8005a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	e7fe      	b.n	8005a5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005a60:	3b01      	subs	r3, #1
 8005a62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a64:	b90b      	cbnz	r3, 8005a6a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a66:	f383 8811 	msr	BASEPRI, r3
}
 8005a6a:	4770      	bx	lr
 8005a6c:	20000578 	.word	0x20000578

08005a70 <PendSV_Handler>:
	__asm volatile
 8005a70:	f3ef 8009 	mrs	r0, PSP
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	4b15      	ldr	r3, [pc, #84]	@ (8005ad0 <pxCurrentTCBConst>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	f01e 0f10 	tst.w	lr, #16
 8005a80:	bf08      	it	eq
 8005a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8a:	6010      	str	r0, [r2, #0]
 8005a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005a94:	f380 8811 	msr	BASEPRI, r0
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f001 fa80 	bl	8006fa4 <vTaskSwitchContext>
 8005aa4:	f04f 0000 	mov.w	r0, #0
 8005aa8:	f380 8811 	msr	BASEPRI, r0
 8005aac:	bc09      	pop	{r0, r3}
 8005aae:	6819      	ldr	r1, [r3, #0]
 8005ab0:	6808      	ldr	r0, [r1, #0]
 8005ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab6:	f01e 0f10 	tst.w	lr, #16
 8005aba:	bf08      	it	eq
 8005abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ac0:	f380 8809 	msr	PSP, r0
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	f3af 8000 	nop.w

08005ad0 <pxCurrentTCBConst>:
 8005ad0:	20004e74 	.word	0x20004e74

08005ad4 <SysTick_Handler>:
{
 8005ad4:	b508      	push	{r3, lr}
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005ae6:	f001 fa4d 	bl	8006f84 <xTaskIncrementTick>
 8005aea:	b128      	cbz	r0, 8005af8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005aec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8005af8:	2300      	movs	r3, #0
 8005afa:	f383 8811 	msr	BASEPRI, r3
}
 8005afe:	bd08      	pop	{r3, pc}

08005b00 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005b04:	4a48      	ldr	r2, [pc, #288]	@ (8005c28 <xPortStartScheduler+0x128>)
 8005b06:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	d041      	beq.n	8005b92 <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b0e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8005b12:	4b46      	ldr	r3, [pc, #280]	@ (8005c2c <xPortStartScheduler+0x12c>)
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d033      	beq.n	8005b80 <xPortStartScheduler+0x80>
{
 8005b18:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b1a:	4b45      	ldr	r3, [pc, #276]	@ (8005c30 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b1c:	4c45      	ldr	r4, [pc, #276]	@ (8005c34 <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b1e:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b20:	4845      	ldr	r0, [pc, #276]	@ (8005c38 <xPortStartScheduler+0x138>)
{
 8005b22:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b24:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b2a:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b34:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b38:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b40:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b42:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b44:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b46:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b48:	bf48      	it	mi
 8005b4a:	2206      	movmi	r2, #6
 8005b4c:	d50f      	bpl.n	8005b6e <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005b5e:	061b      	lsls	r3, r3, #24
 8005b60:	4611      	mov	r1, r2
 8005b62:	f102 32ff 	add.w	r2, r2, #4294967295
 8005b66:	d4f2      	bmi.n	8005b4e <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b68:	2903      	cmp	r1, #3
 8005b6a:	d01b      	beq.n	8005ba4 <xPortStartScheduler+0xa4>
 8005b6c:	6001      	str	r1, [r0, #0]
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	e7fe      	b.n	8005b7e <xPortStartScheduler+0x7e>
 8005b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b90:	e7fe      	b.n	8005b90 <xPortStartScheduler+0x90>
 8005b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ba2:	e7fe      	b.n	8005ba2 <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ba4:	9b02      	ldr	r3, [sp, #8]
 8005ba6:	4a22      	ldr	r2, [pc, #136]	@ (8005c30 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8005ba8:	4d24      	ldr	r5, [pc, #144]	@ (8005c3c <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005baa:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bae:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bb2:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bb4:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bb6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bb8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8005bbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005bc0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bc4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8005bc8:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005bcc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	uxCriticalNesting = 0;
 8005bd0:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 8005bd2:	f7fc fd8b 	bl	80026ec <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005bd6:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8005bd8:	f7ff fec4 	bl	8005964 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bdc:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8005be0:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005be4:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8005be8:	f7ff fea8 	bl	800593c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005bec:	f001 f9da 	bl	8006fa4 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8005bf0:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8005bf2:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	d008      	beq.n	8005c0a <xPortStartScheduler+0x10a>
 8005bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	e7fe      	b.n	8005c08 <xPortStartScheduler+0x108>
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0fc      	beq.n	8005c1a <xPortStartScheduler+0x11a>
}
 8005c20:	2000      	movs	r0, #0
 8005c22:	b004      	add	sp, #16
 8005c24:	bd70      	pop	{r4, r5, r6, pc}
 8005c26:	bf00      	nop
 8005c28:	410fc271 	.word	0x410fc271
 8005c2c:	410fc270 	.word	0x410fc270
 8005c30:	e000e400 	.word	0xe000e400
 8005c34:	20004d0c 	.word	0x20004d0c
 8005c38:	20004d08 	.word	0x20004d08
 8005c3c:	20000578 	.word	0x20000578

08005c40 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c40:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	d90e      	bls.n	8005c66 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c48:	4911      	ldr	r1, [pc, #68]	@ (8005c90 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c4a:	4a12      	ldr	r2, [pc, #72]	@ (8005c94 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c4c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c4e:	7812      	ldrb	r2, [r2, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d908      	bls.n	8005c66 <vPortValidateInterruptPriority+0x26>
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	e7fe      	b.n	8005c64 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c66:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8005c98 <vPortValidateInterruptPriority+0x58>)
 8005c6c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d908      	bls.n	8005c8c <vPortValidateInterruptPriority+0x4c>
 8005c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	e7fe      	b.n	8005c8a <vPortValidateInterruptPriority+0x4a>
	}
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	e000e3f0 	.word	0xe000e3f0
 8005c94:	20004d0c 	.word	0x20004d0c
 8005c98:	20004d08 	.word	0x20004d08

08005c9c <prvCopyDataToQueue>:

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c9c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8005c9e:	b570      	push	{r4, r5, r6, lr}
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ca0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8005ca2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ca4:	b92b      	cbnz	r3, 8005cb2 <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ca6:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ca8:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005caa:	b35e      	cbz	r6, 8005d04 <prvCopyDataToQueue+0x68>
BaseType_t xReturn = pdFALSE;
 8005cac:	4618      	mov	r0, r3
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cae:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005cb2:	4616      	mov	r6, r2
 8005cb4:	b982      	cbnz	r2, 8005cd8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	6840      	ldr	r0, [r0, #4]
 8005cba:	f003 fdd5 	bl	8009868 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cbe:	6863      	ldr	r3, [r4, #4]
 8005cc0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cc2:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cc4:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cc6:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cc8:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cca:	bf24      	itt	cs
 8005ccc:	6823      	ldrcs	r3, [r4, #0]
 8005cce:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cd0:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8005cd2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cd4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68c0      	ldr	r0, [r0, #12]
 8005cdc:	f003 fdc4 	bl	8009868 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ce0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005ce2:	68e3      	ldr	r3, [r4, #12]
 8005ce4:	4251      	negs	r1, r2
 8005ce6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ce8:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005cea:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d202      	bcs.n	8005cf6 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cf0:	68a3      	ldr	r3, [r4, #8]
 8005cf2:	440b      	add	r3, r1
 8005cf4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005cf6:	2e02      	cmp	r6, #2
 8005cf8:	d1ea      	bne.n	8005cd0 <prvCopyDataToQueue+0x34>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cfa:	2d01      	cmp	r5, #1
 8005cfc:	bf38      	it	cc
 8005cfe:	2501      	movcc	r5, #1
BaseType_t xReturn = pdFALSE;
 8005d00:	2000      	movs	r0, #0
 8005d02:	e7d4      	b.n	8005cae <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d04:	6880      	ldr	r0, [r0, #8]
 8005d06:	f001 fae1 	bl	80072cc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d0a:	60a6      	str	r6, [r4, #8]
 8005d0c:	e7cf      	b.n	8005cae <prvCopyDataToQueue+0x12>
 8005d0e:	bf00      	nop

08005d10 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d10:	b940      	cbnz	r0, 8005d24 <xQueueGenericCreateStatic+0x14>
 8005d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	e7fe      	b.n	8005d22 <xQueueGenericCreateStatic+0x12>
	{
 8005d24:	b510      	push	{r4, lr}
 8005d26:	461c      	mov	r4, r3
 8005d28:	b082      	sub	sp, #8
		configASSERT( pxStaticQueue != NULL );
 8005d2a:	b183      	cbz	r3, 8005d4e <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d2c:	2a00      	cmp	r2, #0
 8005d2e:	d048      	beq.n	8005dc2 <xQueueGenericCreateStatic+0xb2>
 8005d30:	b1b1      	cbz	r1, 8005d60 <xQueueGenericCreateStatic+0x50>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d32:	2348      	movs	r3, #72	@ 0x48
 8005d34:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d36:	9b01      	ldr	r3, [sp, #4]
 8005d38:	2b48      	cmp	r3, #72	@ 0x48
 8005d3a:	d01a      	beq.n	8005d72 <xQueueGenericCreateStatic+0x62>
 8005d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	e7fe      	b.n	8005d4c <xQueueGenericCreateStatic+0x3c>
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005d5e:	e7fe      	b.n	8005d5e <xQueueGenericCreateStatic+0x4e>
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d70:	e7fe      	b.n	8005d70 <xQueueGenericCreateStatic+0x60>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d72:	9b01      	ldr	r3, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d74:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d76:	2301      	movs	r3, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8005d78:	e9c4 010f 	strd	r0, r1, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d7c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
	taskENTER_CRITICAL();
 8005d80:	f7ff fe40 	bl	8005a04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d84:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
 8005d88:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d8a:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d8c:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d90:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d92:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d94:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d96:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d98:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8005d9a:	22ff      	movs	r2, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d9c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d9e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005da0:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005da4:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8005da8:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dac:	f7ff fd7c 	bl	80058a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005db0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005db4:	f7ff fd78 	bl	80058a8 <vListInitialise>
	taskEXIT_CRITICAL();
 8005db8:	f7ff fe46 	bl	8005a48 <vPortExitCritical>
	}
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	b002      	add	sp, #8
 8005dc0:	bd10      	pop	{r4, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dc2:	b939      	cbnz	r1, 8005dd4 <xQueueGenericCreateStatic+0xc4>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005dc4:	2348      	movs	r3, #72	@ 0x48
 8005dc6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005dc8:	9b01      	ldr	r3, [sp, #4]
 8005dca:	2b48      	cmp	r3, #72	@ 0x48
 8005dcc:	d1b6      	bne.n	8005d3c <xQueueGenericCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005dce:	9b01      	ldr	r3, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	e7cf      	b.n	8005d74 <xQueueGenericCreateStatic+0x64>
 8005dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005de4:	e7fe      	b.n	8005de4 <xQueueGenericCreateStatic+0xd4>
 8005de6:	bf00      	nop

08005de8 <xQueueGenericSend>:
{
 8005de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dec:	b085      	sub	sp, #20
 8005dee:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d043      	beq.n	8005e7c <xQueueGenericSend+0x94>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005df4:	4688      	mov	r8, r1
 8005df6:	461f      	mov	r7, r3
 8005df8:	4604      	mov	r4, r0
 8005dfa:	b399      	cbz	r1, 8005e64 <xQueueGenericSend+0x7c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dfc:	2f02      	cmp	r7, #2
 8005dfe:	d10b      	bne.n	8005e18 <xQueueGenericSend+0x30>
 8005e00:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d008      	beq.n	8005e18 <xQueueGenericSend+0x30>
 8005e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	e7fe      	b.n	8005e16 <xQueueGenericSend+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e18:	f001 fa48 	bl	80072ac <xTaskGetSchedulerState>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d036      	beq.n	8005e8e <xQueueGenericSend+0xa6>
		taskENTER_CRITICAL();
 8005e20:	f7ff fdf0 	bl	8005a04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e24:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005e26:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d301      	bcc.n	8005e30 <xQueueGenericSend+0x48>
 8005e2c:	2f02      	cmp	r7, #2
 8005e2e:	d13a      	bne.n	8005ea6 <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e30:	463a      	mov	r2, r7
 8005e32:	4641      	mov	r1, r8
 8005e34:	4620      	mov	r0, r4
 8005e36:	f7ff ff31 	bl	8005c9c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 814b 	bne.w	80060d8 <xQueueGenericSend+0x2f0>
					else if( xYieldRequired != pdFALSE )
 8005e42:	b148      	cbz	r0, 8005e58 <xQueueGenericSend+0x70>
						queueYIELD_IF_USING_PREEMPTION();
 8005e44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005e58:	f7ff fdf6 	bl	8005a48 <vPortExitCritical>
				return pdPASS;
 8005e5c:	2001      	movs	r0, #1
}
 8005e5e:	b005      	add	sp, #20
 8005e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e64:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0c8      	beq.n	8005dfc <xQueueGenericSend+0x14>
 8005e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	e7fe      	b.n	8005e7a <xQueueGenericSend+0x92>
 8005e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005e8c:	e7fe      	b.n	8005e8c <xQueueGenericSend+0xa4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0c5      	beq.n	8005e20 <xQueueGenericSend+0x38>
 8005e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	e7fe      	b.n	8005ea4 <xQueueGenericSend+0xbc>
 8005ea6:	2200      	movs	r2, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 80d1 	beq.w	8006056 <xQueueGenericSend+0x26e>
				else if( xEntryTimeSet == pdFALSE )
 8005eb4:	2a00      	cmp	r2, #0
 8005eb6:	f000 80ca 	beq.w	800604e <xQueueGenericSend+0x266>
		taskEXIT_CRITICAL();
 8005eba:	f7ff fdc5 	bl	8005a48 <vPortExitCritical>
		vTaskSuspendAll();
 8005ebe:	f001 f843 	bl	8006f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ec2:	f7ff fd9f 	bl	8005a04 <vPortEnterCritical>
 8005ec6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005eca:	2bff      	cmp	r3, #255	@ 0xff
 8005ecc:	bf04      	itt	eq
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8005ed4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005ed8:	2bff      	cmp	r3, #255	@ 0xff
 8005eda:	bf04      	itt	eq
 8005edc:	2300      	moveq	r3, #0
 8005ede:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8005ee2:	f7ff fdb1 	bl	8005a48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ee6:	a901      	add	r1, sp, #4
 8005ee8:	a802      	add	r0, sp, #8
 8005eea:	f001 f997 	bl	800721c <xTaskCheckForTimeOut>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f040 80b5 	bne.w	800605e <xQueueGenericSend+0x276>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ef4:	f7ff fd86 	bl	8005a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ef8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005efa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d04c      	beq.n	8005f9a <xQueueGenericSend+0x1b2>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005f00:	f7ff fda2 	bl	8005a48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005f04:	f7ff fd7e 	bl	8005a04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005f08:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8005f0c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f0e:	2d00      	cmp	r5, #0
 8005f10:	dc04      	bgt.n	8005f1c <xQueueGenericSend+0x134>
 8005f12:	e011      	b.n	8005f38 <xQueueGenericSend+0x150>
			--cTxLock;
 8005f14:	1e6a      	subs	r2, r5, #1
 8005f16:	b2d3      	uxtb	r3, r2
 8005f18:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f1a:	b16b      	cbz	r3, 8005f38 <xQueueGenericSend+0x150>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f1e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f20:	b153      	cbz	r3, 8005f38 <xQueueGenericSend+0x150>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f22:	f001 f92b 	bl	800717c <xTaskRemoveFromEventList>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d0f4      	beq.n	8005f14 <xQueueGenericSend+0x12c>
						vTaskMissedYield();
 8005f2a:	f001 f9b9 	bl	80072a0 <vTaskMissedYield>
			--cTxLock;
 8005f2e:	1e6a      	subs	r2, r5, #1
 8005f30:	b2d3      	uxtb	r3, r2
 8005f32:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f1      	bne.n	8005f1c <xQueueGenericSend+0x134>
		pxQueue->cTxLock = queueUNLOCKED;
 8005f38:	23ff      	movs	r3, #255	@ 0xff
 8005f3a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8005f3e:	f7ff fd83 	bl	8005a48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005f42:	f7ff fd5f 	bl	8005a04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005f46:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8005f4a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	dd14      	ble.n	8005f7a <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f50:	f104 0910 	add.w	r9, r4, #16
 8005f54:	e003      	b.n	8005f5e <xQueueGenericSend+0x176>
				--cRxLock;
 8005f56:	1e6a      	subs	r2, r5, #1
 8005f58:	b2d3      	uxtb	r3, r2
 8005f5a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f5c:	b16b      	cbz	r3, 8005f7a <xQueueGenericSend+0x192>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f5e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f60:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f62:	b153      	cbz	r3, 8005f7a <xQueueGenericSend+0x192>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f64:	f001 f90a 	bl	800717c <xTaskRemoveFromEventList>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d0f4      	beq.n	8005f56 <xQueueGenericSend+0x16e>
					vTaskMissedYield();
 8005f6c:	f001 f998 	bl	80072a0 <vTaskMissedYield>
				--cRxLock;
 8005f70:	1e6a      	subs	r2, r5, #1
 8005f72:	b2d3      	uxtb	r3, r2
 8005f74:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1f1      	bne.n	8005f5e <xQueueGenericSend+0x176>
		pxQueue->cRxLock = queueUNLOCKED;
 8005f7a:	23ff      	movs	r3, #255	@ 0xff
 8005f7c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8005f80:	f7ff fd62 	bl	8005a48 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8005f84:	f000 ffe8 	bl	8006f58 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005f88:	f7ff fd3c 	bl	8005a04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f8c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005f8e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005f90:	429a      	cmp	r2, r3
 8005f92:	f4ff af4d 	bcc.w	8005e30 <xQueueGenericSend+0x48>
{
 8005f96:	2201      	movs	r2, #1
 8005f98:	e788      	b.n	8005eac <xQueueGenericSend+0xc4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f9a:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8005f9e:	f7ff fd53 	bl	8005a48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fa2:	9901      	ldr	r1, [sp, #4]
 8005fa4:	4648      	mov	r0, r9
 8005fa6:	f001 f83b 	bl	8007020 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005faa:	f7ff fd2b 	bl	8005a04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005fae:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005fb2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fb4:	2d00      	cmp	r5, #0
 8005fb6:	dc04      	bgt.n	8005fc2 <xQueueGenericSend+0x1da>
 8005fb8:	e011      	b.n	8005fde <xQueueGenericSend+0x1f6>
			--cTxLock;
 8005fba:	1e6b      	subs	r3, r5, #1
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fc0:	b16a      	cbz	r2, 8005fde <xQueueGenericSend+0x1f6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fc2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fc4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fc6:	b153      	cbz	r3, 8005fde <xQueueGenericSend+0x1f6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fc8:	f001 f8d8 	bl	800717c <xTaskRemoveFromEventList>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d0f4      	beq.n	8005fba <xQueueGenericSend+0x1d2>
						vTaskMissedYield();
 8005fd0:	f001 f966 	bl	80072a0 <vTaskMissedYield>
			--cTxLock;
 8005fd4:	1e6b      	subs	r3, r5, #1
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fda:	2a00      	cmp	r2, #0
 8005fdc:	d1f1      	bne.n	8005fc2 <xQueueGenericSend+0x1da>
		pxQueue->cTxLock = queueUNLOCKED;
 8005fde:	23ff      	movs	r3, #255	@ 0xff
 8005fe0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8005fe4:	f7ff fd30 	bl	8005a48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005fe8:	f7ff fd0c 	bl	8005a04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005fec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005ff0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ff2:	2d00      	cmp	r5, #0
 8005ff4:	dc04      	bgt.n	8006000 <xQueueGenericSend+0x218>
 8005ff6:	e011      	b.n	800601c <xQueueGenericSend+0x234>
				--cRxLock;
 8005ff8:	1e6b      	subs	r3, r5, #1
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ffe:	b16a      	cbz	r2, 800601c <xQueueGenericSend+0x234>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006000:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006002:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006004:	b153      	cbz	r3, 800601c <xQueueGenericSend+0x234>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006006:	f001 f8b9 	bl	800717c <xTaskRemoveFromEventList>
 800600a:	2800      	cmp	r0, #0
 800600c:	d0f4      	beq.n	8005ff8 <xQueueGenericSend+0x210>
					vTaskMissedYield();
 800600e:	f001 f947 	bl	80072a0 <vTaskMissedYield>
				--cRxLock;
 8006012:	1e6b      	subs	r3, r5, #1
 8006014:	b2da      	uxtb	r2, r3
 8006016:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006018:	2a00      	cmp	r2, #0
 800601a:	d1f1      	bne.n	8006000 <xQueueGenericSend+0x218>
		pxQueue->cRxLock = queueUNLOCKED;
 800601c:	23ff      	movs	r3, #255	@ 0xff
 800601e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006022:	f7ff fd11 	bl	8005a48 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8006026:	f000 ff97 	bl	8006f58 <xTaskResumeAll>
 800602a:	b948      	cbnz	r0, 8006040 <xQueueGenericSend+0x258>
					portYIELD_WITHIN_API();
 800602c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006034:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8006040:	f7ff fce0 	bl	8005a04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006044:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006046:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006048:	429a      	cmp	r2, r3
 800604a:	d9a4      	bls.n	8005f96 <xQueueGenericSend+0x1ae>
 800604c:	e6f0      	b.n	8005e30 <xQueueGenericSend+0x48>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800604e:	a802      	add	r0, sp, #8
 8006050:	f001 f8d8 	bl	8007204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006054:	e731      	b.n	8005eba <xQueueGenericSend+0xd2>
					taskEXIT_CRITICAL();
 8006056:	f7ff fcf7 	bl	8005a48 <vPortExitCritical>
					return errQUEUE_FULL;
 800605a:	2000      	movs	r0, #0
 800605c:	e6ff      	b.n	8005e5e <xQueueGenericSend+0x76>
	taskENTER_CRITICAL();
 800605e:	f7ff fcd1 	bl	8005a04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006062:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006066:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006068:	2d00      	cmp	r5, #0
 800606a:	dd10      	ble.n	800608e <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800606c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 8006070:	e003      	b.n	800607a <xQueueGenericSend+0x292>
			--cTxLock;
 8006072:	1e6b      	subs	r3, r5, #1
 8006074:	b2da      	uxtb	r2, r3
 8006076:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006078:	b14a      	cbz	r2, 800608e <xQueueGenericSend+0x2a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800607a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800607c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800607e:	b133      	cbz	r3, 800608e <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006080:	f001 f87c 	bl	800717c <xTaskRemoveFromEventList>
 8006084:	2800      	cmp	r0, #0
 8006086:	d0f4      	beq.n	8006072 <xQueueGenericSend+0x28a>
						vTaskMissedYield();
 8006088:	f001 f90a 	bl	80072a0 <vTaskMissedYield>
 800608c:	e7f1      	b.n	8006072 <xQueueGenericSend+0x28a>
		pxQueue->cTxLock = queueUNLOCKED;
 800608e:	23ff      	movs	r3, #255	@ 0xff
 8006090:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006094:	f7ff fcd8 	bl	8005a48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006098:	f7ff fcb4 	bl	8005a04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800609c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80060a0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060a2:	2d00      	cmp	r5, #0
 80060a4:	dd10      	ble.n	80060c8 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060a6:	f104 0610 	add.w	r6, r4, #16
 80060aa:	e003      	b.n	80060b4 <xQueueGenericSend+0x2cc>
				--cRxLock;
 80060ac:	1e6b      	subs	r3, r5, #1
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060b2:	b14a      	cbz	r2, 80060c8 <xQueueGenericSend+0x2e0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060b4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060b6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060b8:	b133      	cbz	r3, 80060c8 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ba:	f001 f85f 	bl	800717c <xTaskRemoveFromEventList>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d0f4      	beq.n	80060ac <xQueueGenericSend+0x2c4>
					vTaskMissedYield();
 80060c2:	f001 f8ed 	bl	80072a0 <vTaskMissedYield>
 80060c6:	e7f1      	b.n	80060ac <xQueueGenericSend+0x2c4>
		pxQueue->cRxLock = queueUNLOCKED;
 80060c8:	23ff      	movs	r3, #255	@ 0xff
 80060ca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80060ce:	f7ff fcbb 	bl	8005a48 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80060d2:	f000 ff41 	bl	8006f58 <xTaskResumeAll>
			return errQUEUE_FULL;
 80060d6:	e7c0      	b.n	800605a <xQueueGenericSend+0x272>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060d8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80060dc:	f001 f84e 	bl	800717c <xTaskRemoveFromEventList>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f43f aeb9 	beq.w	8005e58 <xQueueGenericSend+0x70>
 80060e6:	e6ad      	b.n	8005e44 <xQueueGenericSend+0x5c>

080060e8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d048      	beq.n	800617e <xQueueGenericSendFromISR+0x96>
{
 80060ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f0:	460e      	mov	r6, r1
 80060f2:	4617      	mov	r7, r2
 80060f4:	461d      	mov	r5, r3
 80060f6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060f8:	b321      	cbz	r1, 8006144 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060fa:	2d02      	cmp	r5, #2
 80060fc:	d10b      	bne.n	8006116 <xQueueGenericSendFromISR+0x2e>
 80060fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d008      	beq.n	8006116 <xQueueGenericSendFromISR+0x2e>
 8006104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	e7fe      	b.n	8006114 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006116:	f7ff fd93 	bl	8005c40 <vPortValidateInterruptPriority>
	__asm volatile
 800611a:	f3ef 8811 	mrs	r8, BASEPRI
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800612e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006130:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006132:	429a      	cmp	r2, r3
 8006134:	d312      	bcc.n	800615c <xQueueGenericSendFromISR+0x74>
 8006136:	2d02      	cmp	r5, #2
 8006138:	d010      	beq.n	800615c <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 800613a:	2000      	movs	r0, #0
	__asm volatile
 800613c:	f388 8811 	msr	BASEPRI, r8
}
 8006140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006144:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0d7      	beq.n	80060fa <xQueueGenericSendFromISR+0x12>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	e7fe      	b.n	800615a <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800615c:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 800615e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006162:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006164:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8006166:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006168:	4620      	mov	r0, r4
 800616a:	f7ff fd97 	bl	8005c9c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800616e:	1c6b      	adds	r3, r5, #1
 8006170:	d00e      	beq.n	8006190 <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006172:	1c6b      	adds	r3, r5, #1
 8006174:	b25b      	sxtb	r3, r3
 8006176:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 800617a:	2001      	movs	r0, #1
 800617c:	e7de      	b.n	800613c <xQueueGenericSendFromISR+0x54>
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800618e:	e7fe      	b.n	800618e <xQueueGenericSendFromISR+0xa6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006190:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f1      	beq.n	800617a <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006196:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800619a:	f000 ffef 	bl	800717c <xTaskRemoveFromEventList>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d0eb      	beq.n	800617a <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 80061a2:	2f00      	cmp	r7, #0
 80061a4:	d0e9      	beq.n	800617a <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061a6:	2301      	movs	r3, #1
 80061a8:	603b      	str	r3, [r7, #0]
 80061aa:	e7e6      	b.n	800617a <xQueueGenericSendFromISR+0x92>

080061ac <xQueueReceive>:
{
 80061ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061b0:	b085      	sub	sp, #20
 80061b2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80061b4:	2800      	cmp	r0, #0
 80061b6:	f000 8164 	beq.w	8006482 <xQueueReceive+0x2d6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ba:	460f      	mov	r7, r1
 80061bc:	4604      	mov	r4, r0
 80061be:	2900      	cmp	r1, #0
 80061c0:	f000 8097 	beq.w	80062f2 <xQueueReceive+0x146>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061c4:	f001 f872 	bl	80072ac <xTaskGetSchedulerState>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	f000 809f 	beq.w	800630c <xQueueReceive+0x160>
		taskENTER_CRITICAL();
 80061ce:	f7ff fc19 	bl	8005a04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061d2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	d175      	bne.n	80062c4 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 80061d8:	9b01      	ldr	r3, [sp, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80f4 	beq.w	80063c8 <xQueueReceive+0x21c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061e0:	a802      	add	r0, sp, #8
 80061e2:	f001 f80f 	bl	8007204 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 80061e6:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061e8:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskEXIT_CRITICAL();
 80061ec:	f7ff fc2c 	bl	8005a48 <vPortExitCritical>
		vTaskSuspendAll();
 80061f0:	f000 feaa 	bl	8006f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061f4:	f7ff fc06 	bl	8005a04 <vPortEnterCritical>
 80061f8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80061fc:	2bff      	cmp	r3, #255	@ 0xff
 80061fe:	bf08      	it	eq
 8006200:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8006204:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006208:	2bff      	cmp	r3, #255	@ 0xff
 800620a:	bf08      	it	eq
 800620c:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8006210:	f7ff fc1a 	bl	8005a48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006214:	a901      	add	r1, sp, #4
 8006216:	a802      	add	r0, sp, #8
 8006218:	f001 f800 	bl	800721c <xTaskCheckForTimeOut>
 800621c:	2800      	cmp	r0, #0
 800621e:	f040 8082 	bne.w	8006326 <xQueueReceive+0x17a>
	taskENTER_CRITICAL();
 8006222:	f7ff fbef 	bl	8005a04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006226:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80d3 	beq.w	80063d4 <xQueueReceive+0x228>
	taskEXIT_CRITICAL();
 800622e:	f7ff fc0b 	bl	8005a48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006232:	f7ff fbe7 	bl	8005a04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006236:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800623a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800623c:	2d00      	cmp	r5, #0
 800623e:	dd14      	ble.n	800626a <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006240:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 8006244:	e003      	b.n	800624e <xQueueReceive+0xa2>
			--cTxLock;
 8006246:	1e6b      	subs	r3, r5, #1
 8006248:	b2da      	uxtb	r2, r3
 800624a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800624c:	b16a      	cbz	r2, 800626a <xQueueReceive+0xbe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800624e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006250:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006252:	b153      	cbz	r3, 800626a <xQueueReceive+0xbe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006254:	f000 ff92 	bl	800717c <xTaskRemoveFromEventList>
 8006258:	2800      	cmp	r0, #0
 800625a:	d0f4      	beq.n	8006246 <xQueueReceive+0x9a>
						vTaskMissedYield();
 800625c:	f001 f820 	bl	80072a0 <vTaskMissedYield>
			--cTxLock;
 8006260:	1e6b      	subs	r3, r5, #1
 8006262:	b2da      	uxtb	r2, r3
 8006264:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006266:	2a00      	cmp	r2, #0
 8006268:	d1f1      	bne.n	800624e <xQueueReceive+0xa2>
		pxQueue->cTxLock = queueUNLOCKED;
 800626a:	23ff      	movs	r3, #255	@ 0xff
 800626c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006270:	f7ff fbea 	bl	8005a48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006274:	f7ff fbc6 	bl	8005a04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006278:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800627c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800627e:	2d00      	cmp	r5, #0
 8006280:	dd14      	ble.n	80062ac <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006282:	f104 0910 	add.w	r9, r4, #16
 8006286:	e003      	b.n	8006290 <xQueueReceive+0xe4>
				--cRxLock;
 8006288:	1e6b      	subs	r3, r5, #1
 800628a:	b2da      	uxtb	r2, r3
 800628c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800628e:	b16a      	cbz	r2, 80062ac <xQueueReceive+0x100>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006290:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006292:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006294:	b153      	cbz	r3, 80062ac <xQueueReceive+0x100>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006296:	f000 ff71 	bl	800717c <xTaskRemoveFromEventList>
 800629a:	2800      	cmp	r0, #0
 800629c:	d0f4      	beq.n	8006288 <xQueueReceive+0xdc>
					vTaskMissedYield();
 800629e:	f000 ffff 	bl	80072a0 <vTaskMissedYield>
				--cRxLock;
 80062a2:	1e6b      	subs	r3, r5, #1
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062a8:	2a00      	cmp	r2, #0
 80062aa:	d1f1      	bne.n	8006290 <xQueueReceive+0xe4>
		pxQueue->cRxLock = queueUNLOCKED;
 80062ac:	23ff      	movs	r3, #255	@ 0xff
 80062ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80062b2:	f7ff fbc9 	bl	8005a48 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80062b6:	f000 fe4f 	bl	8006f58 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80062ba:	f7ff fba3 	bl	8005a04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062be:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062c0:	2d00      	cmp	r5, #0
 80062c2:	d07d      	beq.n	80063c0 <xQueueReceive+0x214>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062c4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80062c6:	b152      	cbz	r2, 80062de <xQueueReceive+0x132>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062c8:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062ca:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062cc:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062ce:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062d0:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062d2:	bf24      	itt	cs
 80062d4:	6821      	ldrcs	r1, [r4, #0]
 80062d6:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062d8:	4638      	mov	r0, r7
 80062da:	f003 fac5 	bl	8009868 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062de:	3d01      	subs	r5, #1
 80062e0:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 80d5 	bne.w	8006494 <xQueueReceive+0x2e8>
				taskEXIT_CRITICAL();
 80062ea:	f7ff fbad 	bl	8005a48 <vPortExitCritical>
				return pdPASS;
 80062ee:	2001      	movs	r0, #1
 80062f0:	e06d      	b.n	80063ce <xQueueReceive+0x222>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062f2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f43f af65 	beq.w	80061c4 <xQueueReceive+0x18>
 80062fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	e7fe      	b.n	800630a <xQueueReceive+0x15e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800630c:	9b01      	ldr	r3, [sp, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f43f af5d 	beq.w	80061ce <xQueueReceive+0x22>
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	e7fe      	b.n	8006324 <xQueueReceive+0x178>
	taskENTER_CRITICAL();
 8006326:	f7ff fb6d 	bl	8005a04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800632a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800632e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006330:	2d00      	cmp	r5, #0
 8006332:	dc04      	bgt.n	800633e <xQueueReceive+0x192>
 8006334:	e011      	b.n	800635a <xQueueReceive+0x1ae>
			--cTxLock;
 8006336:	1e6b      	subs	r3, r5, #1
 8006338:	b2da      	uxtb	r2, r3
 800633a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800633c:	b16a      	cbz	r2, 800635a <xQueueReceive+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800633e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006340:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006342:	b153      	cbz	r3, 800635a <xQueueReceive+0x1ae>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006344:	f000 ff1a 	bl	800717c <xTaskRemoveFromEventList>
 8006348:	2800      	cmp	r0, #0
 800634a:	d0f4      	beq.n	8006336 <xQueueReceive+0x18a>
						vTaskMissedYield();
 800634c:	f000 ffa8 	bl	80072a0 <vTaskMissedYield>
			--cTxLock;
 8006350:	1e6b      	subs	r3, r5, #1
 8006352:	b2da      	uxtb	r2, r3
 8006354:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006356:	2a00      	cmp	r2, #0
 8006358:	d1f1      	bne.n	800633e <xQueueReceive+0x192>
		pxQueue->cTxLock = queueUNLOCKED;
 800635a:	23ff      	movs	r3, #255	@ 0xff
 800635c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006360:	f7ff fb72 	bl	8005a48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006364:	f7ff fb4e 	bl	8005a04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006368:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800636c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800636e:	2d00      	cmp	r5, #0
 8006370:	dd14      	ble.n	800639c <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006372:	f104 0910 	add.w	r9, r4, #16
 8006376:	e003      	b.n	8006380 <xQueueReceive+0x1d4>
				--cRxLock;
 8006378:	1e6b      	subs	r3, r5, #1
 800637a:	b2da      	uxtb	r2, r3
 800637c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800637e:	b16a      	cbz	r2, 800639c <xQueueReceive+0x1f0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006380:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006382:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006384:	b153      	cbz	r3, 800639c <xQueueReceive+0x1f0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006386:	f000 fef9 	bl	800717c <xTaskRemoveFromEventList>
 800638a:	2800      	cmp	r0, #0
 800638c:	d0f4      	beq.n	8006378 <xQueueReceive+0x1cc>
					vTaskMissedYield();
 800638e:	f000 ff87 	bl	80072a0 <vTaskMissedYield>
				--cRxLock;
 8006392:	1e6b      	subs	r3, r5, #1
 8006394:	b2da      	uxtb	r2, r3
 8006396:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006398:	2a00      	cmp	r2, #0
 800639a:	d1f1      	bne.n	8006380 <xQueueReceive+0x1d4>
		pxQueue->cRxLock = queueUNLOCKED;
 800639c:	23ff      	movs	r3, #255	@ 0xff
 800639e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80063a2:	f7ff fb51 	bl	8005a48 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80063a6:	f000 fdd7 	bl	8006f58 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80063aa:	f7ff fb2b 	bl	8005a04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80063b0:	b153      	cbz	r3, 80063c8 <xQueueReceive+0x21c>
	taskEXIT_CRITICAL();
 80063b2:	f7ff fb49 	bl	8005a48 <vPortExitCritical>
		taskENTER_CRITICAL();
 80063b6:	f7ff fb25 	bl	8005a04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ba:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063bc:	2d00      	cmp	r5, #0
 80063be:	d181      	bne.n	80062c4 <xQueueReceive+0x118>
				if( xTicksToWait == ( TickType_t ) 0 )
 80063c0:	9b01      	ldr	r3, [sp, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f47f af12 	bne.w	80061ec <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 80063c8:	f7ff fb3e 	bl	8005a48 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80063cc:	2000      	movs	r0, #0
}
 80063ce:	b005      	add	sp, #20
 80063d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063d4:	f104 0924 	add.w	r9, r4, #36	@ 0x24
	taskEXIT_CRITICAL();
 80063d8:	f7ff fb36 	bl	8005a48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063dc:	9901      	ldr	r1, [sp, #4]
 80063de:	4648      	mov	r0, r9
 80063e0:	f000 fe1e 	bl	8007020 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80063e4:	f7ff fb0e 	bl	8005a04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80063e8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80063ec:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	dc04      	bgt.n	80063fc <xQueueReceive+0x250>
 80063f2:	e011      	b.n	8006418 <xQueueReceive+0x26c>
			--cTxLock;
 80063f4:	1e6b      	subs	r3, r5, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063fa:	b16a      	cbz	r2, 8006418 <xQueueReceive+0x26c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063fe:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006400:	b153      	cbz	r3, 8006418 <xQueueReceive+0x26c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006402:	f000 febb 	bl	800717c <xTaskRemoveFromEventList>
 8006406:	2800      	cmp	r0, #0
 8006408:	d0f4      	beq.n	80063f4 <xQueueReceive+0x248>
						vTaskMissedYield();
 800640a:	f000 ff49 	bl	80072a0 <vTaskMissedYield>
			--cTxLock;
 800640e:	1e6b      	subs	r3, r5, #1
 8006410:	b2da      	uxtb	r2, r3
 8006412:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006414:	2a00      	cmp	r2, #0
 8006416:	d1f1      	bne.n	80063fc <xQueueReceive+0x250>
		pxQueue->cTxLock = queueUNLOCKED;
 8006418:	23ff      	movs	r3, #255	@ 0xff
 800641a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800641e:	f7ff fb13 	bl	8005a48 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006422:	f7ff faef 	bl	8005a04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006426:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800642a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800642c:	2d00      	cmp	r5, #0
 800642e:	dd14      	ble.n	800645a <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006430:	f104 0910 	add.w	r9, r4, #16
 8006434:	e003      	b.n	800643e <xQueueReceive+0x292>
				--cRxLock;
 8006436:	1e6b      	subs	r3, r5, #1
 8006438:	b2da      	uxtb	r2, r3
 800643a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800643c:	b16a      	cbz	r2, 800645a <xQueueReceive+0x2ae>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800643e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006440:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006442:	b153      	cbz	r3, 800645a <xQueueReceive+0x2ae>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006444:	f000 fe9a 	bl	800717c <xTaskRemoveFromEventList>
 8006448:	2800      	cmp	r0, #0
 800644a:	d0f4      	beq.n	8006436 <xQueueReceive+0x28a>
					vTaskMissedYield();
 800644c:	f000 ff28 	bl	80072a0 <vTaskMissedYield>
				--cRxLock;
 8006450:	1e6b      	subs	r3, r5, #1
 8006452:	b2da      	uxtb	r2, r3
 8006454:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006456:	2a00      	cmp	r2, #0
 8006458:	d1f1      	bne.n	800643e <xQueueReceive+0x292>
		pxQueue->cRxLock = queueUNLOCKED;
 800645a:	23ff      	movs	r3, #255	@ 0xff
 800645c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8006460:	f7ff faf2 	bl	8005a48 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8006464:	f000 fd78 	bl	8006f58 <xTaskResumeAll>
 8006468:	2800      	cmp	r0, #0
 800646a:	d1a4      	bne.n	80063b6 <xQueueReceive+0x20a>
					portYIELD_WITHIN_API();
 800646c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006474:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8006480:	e799      	b.n	80063b6 <xQueueReceive+0x20a>
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006492:	e7fe      	b.n	8006492 <xQueueReceive+0x2e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006494:	f104 0010 	add.w	r0, r4, #16
 8006498:	f000 fe70 	bl	800717c <xTaskRemoveFromEventList>
 800649c:	2800      	cmp	r0, #0
 800649e:	f43f af24 	beq.w	80062ea <xQueueReceive+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 80064a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80064a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	e718      	b.n	80062ea <xQueueReceive+0x13e>

080064b8 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064b8:	4b12      	ldr	r3, [pc, #72]	@ (8006504 <vQueueAddToRegistry+0x4c>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	b17a      	cbz	r2, 80064de <vQueueAddToRegistry+0x26>
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	b162      	cbz	r2, 80064dc <vQueueAddToRegistry+0x24>
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	b192      	cbz	r2, 80064ec <vQueueAddToRegistry+0x34>
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	b192      	cbz	r2, 80064f0 <vQueueAddToRegistry+0x38>
 80064ca:	6a1a      	ldr	r2, [r3, #32]
 80064cc:	b192      	cbz	r2, 80064f4 <vQueueAddToRegistry+0x3c>
 80064ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064d0:	b192      	cbz	r2, 80064f8 <vQueueAddToRegistry+0x40>
 80064d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064d4:	b192      	cbz	r2, 80064fc <vQueueAddToRegistry+0x44>
 80064d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064d8:	b192      	cbz	r2, 8006500 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064da:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064dc:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064de:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064e6:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 80064ea:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ec:	2202      	movs	r2, #2
 80064ee:	e7f6      	b.n	80064de <vQueueAddToRegistry+0x26>
 80064f0:	2203      	movs	r2, #3
 80064f2:	e7f4      	b.n	80064de <vQueueAddToRegistry+0x26>
 80064f4:	2204      	movs	r2, #4
 80064f6:	e7f2      	b.n	80064de <vQueueAddToRegistry+0x26>
 80064f8:	2205      	movs	r2, #5
 80064fa:	e7f0      	b.n	80064de <vQueueAddToRegistry+0x26>
 80064fc:	2206      	movs	r2, #6
 80064fe:	e7ee      	b.n	80064de <vQueueAddToRegistry+0x26>
 8006500:	2207      	movs	r2, #7
 8006502:	e7ec      	b.n	80064de <vQueueAddToRegistry+0x26>
 8006504:	20004d10 	.word	0x20004d10

08006508 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	4605      	mov	r5, r0
 800650c:	460e      	mov	r6, r1
 800650e:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006510:	f7ff fa78 	bl	8005a04 <vPortEnterCritical>
 8006514:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8006518:	2bff      	cmp	r3, #255	@ 0xff
 800651a:	bf04      	itt	eq
 800651c:	2300      	moveq	r3, #0
 800651e:	f885 3044 	strbeq.w	r3, [r5, #68]	@ 0x44
 8006522:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8006526:	2bff      	cmp	r3, #255	@ 0xff
 8006528:	bf04      	itt	eq
 800652a:	2300      	moveq	r3, #0
 800652c:	f885 3045 	strbeq.w	r3, [r5, #69]	@ 0x45
 8006530:	f7ff fa8a 	bl	8005a48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006534:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8006536:	2b00      	cmp	r3, #0
 8006538:	d043      	beq.n	80065c2 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 800653a:	f7ff fa63 	bl	8005a04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800653e:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8006542:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006544:	2c00      	cmp	r4, #0
 8006546:	dd14      	ble.n	8006572 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006548:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 800654c:	e003      	b.n	8006556 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 800654e:	1e63      	subs	r3, r4, #1
 8006550:	b2da      	uxtb	r2, r3
 8006552:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006554:	b16a      	cbz	r2, 8006572 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006556:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006558:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800655a:	b153      	cbz	r3, 8006572 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800655c:	f000 fe0e 	bl	800717c <xTaskRemoveFromEventList>
 8006560:	2800      	cmp	r0, #0
 8006562:	d0f4      	beq.n	800654e <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8006564:	f000 fe9c 	bl	80072a0 <vTaskMissedYield>
			--cTxLock;
 8006568:	1e63      	subs	r3, r4, #1
 800656a:	b2da      	uxtb	r2, r3
 800656c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800656e:	2a00      	cmp	r2, #0
 8006570:	d1f1      	bne.n	8006556 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8006572:	23ff      	movs	r3, #255	@ 0xff
 8006574:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006578:	f7ff fa66 	bl	8005a48 <vPortExitCritical>
	taskENTER_CRITICAL();
 800657c:	f7ff fa42 	bl	8005a04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006580:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8006584:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006586:	2c00      	cmp	r4, #0
 8006588:	dd14      	ble.n	80065b4 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800658a:	f105 0610 	add.w	r6, r5, #16
 800658e:	e003      	b.n	8006598 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 8006590:	1e63      	subs	r3, r4, #1
 8006592:	b2da      	uxtb	r2, r3
 8006594:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006596:	b16a      	cbz	r2, 80065b4 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006598:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800659a:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800659c:	b153      	cbz	r3, 80065b4 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800659e:	f000 fded 	bl	800717c <xTaskRemoveFromEventList>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0f4      	beq.n	8006590 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 80065a6:	f000 fe7b 	bl	80072a0 <vTaskMissedYield>
				--cRxLock;
 80065aa:	1e63      	subs	r3, r4, #1
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	d1f1      	bne.n	8006598 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 80065b4:	23ff      	movs	r3, #255	@ 0xff
 80065b6:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80065ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80065be:	f7ff ba43 	b.w	8005a48 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065c2:	4622      	mov	r2, r4
 80065c4:	4631      	mov	r1, r6
 80065c6:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80065ca:	f000 fd79 	bl	80070c0 <vTaskPlaceOnEventListRestricted>
 80065ce:	e7b4      	b.n	800653a <vQueueWaitForMessageRestricted+0x32>

080065d0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065d6:	f7ff fa15 	bl	8005a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065da:	4a34      	ldr	r2, [pc, #208]	@ (80066ac <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80065dc:	4d34      	ldr	r5, [pc, #208]	@ (80066b0 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80065de:	6813      	ldr	r3, [r2, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d031      	beq.n	800664e <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065ea:	4e32      	ldr	r6, [pc, #200]	@ (80066b4 <prvAddNewTaskToReadyList+0xe4>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80065ee:	6832      	ldr	r2, [r6, #0]
 80065f0:	b332      	cbz	r2, 8006640 <prvAddNewTaskToReadyList+0x70>
 80065f2:	4f31      	ldr	r7, [pc, #196]	@ (80066b8 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065f4:	4831      	ldr	r0, [pc, #196]	@ (80066bc <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065f6:	4932      	ldr	r1, [pc, #200]	@ (80066c0 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80065f8:	6802      	ldr	r2, [r0, #0]
 80065fa:	3201      	adds	r2, #1
 80065fc:	6002      	str	r2, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80065fe:	6808      	ldr	r0, [r1, #0]
 8006600:	2201      	movs	r2, #1
 8006602:	409a      	lsls	r2, r3
 8006604:	4302      	orrs	r2, r0
 8006606:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800660a:	600a      	str	r2, [r1, #0]
 800660c:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 8006610:	1d21      	adds	r1, r4, #4
 8006612:	f7ff f959 	bl	80058c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006616:	f7ff fa17 	bl	8005a48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800661a:	6833      	ldr	r3, [r6, #0]
 800661c:	b173      	cbz	r3, 800663c <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800661e:	682a      	ldr	r2, [r5, #0]
 8006620:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006622:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006624:	429a      	cmp	r2, r3
 8006626:	d209      	bcs.n	800663c <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006628:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800662c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006630:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800663c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006640:	682a      	ldr	r2, [r5, #0]
 8006642:	4f1d      	ldr	r7, [pc, #116]	@ (80066b8 <prvAddNewTaskToReadyList+0xe8>)
 8006644:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006646:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006648:	bf98      	it	ls
 800664a:	602c      	strls	r4, [r5, #0]
 800664c:	e7d2      	b.n	80065f4 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800664e:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006650:	6813      	ldr	r3, [r2, #0]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d003      	beq.n	800665e <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006656:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006658:	4f17      	ldr	r7, [pc, #92]	@ (80066b8 <prvAddNewTaskToReadyList+0xe8>)
 800665a:	4e16      	ldr	r6, [pc, #88]	@ (80066b4 <prvAddNewTaskToReadyList+0xe4>)
 800665c:	e7ca      	b.n	80065f4 <prvAddNewTaskToReadyList+0x24>
 800665e:	4f16      	ldr	r7, [pc, #88]	@ (80066b8 <prvAddNewTaskToReadyList+0xe8>)
 8006660:	463e      	mov	r6, r7
 8006662:	f107 088c 	add.w	r8, r7, #140	@ 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006666:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006668:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800666a:	f7ff f91d 	bl	80058a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800666e:	4546      	cmp	r6, r8
 8006670:	d1f9      	bne.n	8006666 <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006672:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 80066d8 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8006676:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 80066dc <prvAddNewTaskToReadyList+0x10c>
 800667a:	4e0e      	ldr	r6, [pc, #56]	@ (80066b4 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 800667c:	4648      	mov	r0, r9
 800667e:	f7ff f913 	bl	80058a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006682:	4640      	mov	r0, r8
 8006684:	f7ff f910 	bl	80058a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006688:	480e      	ldr	r0, [pc, #56]	@ (80066c4 <prvAddNewTaskToReadyList+0xf4>)
 800668a:	f7ff f90d 	bl	80058a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800668e:	480e      	ldr	r0, [pc, #56]	@ (80066c8 <prvAddNewTaskToReadyList+0xf8>)
 8006690:	f7ff f90a 	bl	80058a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006694:	480d      	ldr	r0, [pc, #52]	@ (80066cc <prvAddNewTaskToReadyList+0xfc>)
 8006696:	f7ff f907 	bl	80058a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800669a:	4b0d      	ldr	r3, [pc, #52]	@ (80066d0 <prvAddNewTaskToReadyList+0x100>)
 800669c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066a0:	4b0c      	ldr	r3, [pc, #48]	@ (80066d4 <prvAddNewTaskToReadyList+0x104>)
 80066a2:	f8c3 8000 	str.w	r8, [r3]
		prvAddTaskToReadyList( pxNewTCB );
 80066a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
}
 80066a8:	e7a4      	b.n	80065f4 <prvAddNewTaskToReadyList+0x24>
 80066aa:	bf00      	nop
 80066ac:	20004d74 	.word	0x20004d74
 80066b0:	20004e74 	.word	0x20004e74
 80066b4:	20004d68 	.word	0x20004d68
 80066b8:	20004de8 	.word	0x20004de8
 80066bc:	20004d58 	.word	0x20004d58
 80066c0:	20004d6c 	.word	0x20004d6c
 80066c4:	20004da4 	.word	0x20004da4
 80066c8:	20004d90 	.word	0x20004d90
 80066cc:	20004d78 	.word	0x20004d78
 80066d0:	20004dbc 	.word	0x20004dbc
 80066d4:	20004db8 	.word	0x20004db8
 80066d8:	20004dd4 	.word	0x20004dd4
 80066dc:	20004dc0 	.word	0x20004dc0

080066e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066e4:	4e1b      	ldr	r6, [pc, #108]	@ (8006754 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80066e6:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066e8:	6833      	ldr	r3, [r6, #0]
{
 80066ea:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ec:	1d18      	adds	r0, r3, #4
{
 80066ee:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066f0:	f7ff f910 	bl	8005914 <uxListRemove>
 80066f4:	b940      	cbnz	r0, 8006708 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80066f6:	6833      	ldr	r3, [r6, #0]
 80066f8:	4917      	ldr	r1, [pc, #92]	@ (8006758 <prvAddCurrentTaskToDelayedList+0x78>)
 80066fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fc:	2201      	movs	r2, #1
 80066fe:	409a      	lsls	r2, r3
 8006700:	680b      	ldr	r3, [r1, #0]
 8006702:	ea23 0302 	bic.w	r3, r3, r2
 8006706:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006708:	1c6b      	adds	r3, r5, #1
 800670a:	d017      	beq.n	800673c <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800670c:	6833      	ldr	r3, [r6, #0]
 800670e:	1964      	adds	r4, r4, r5
 8006710:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006712:	d307      	bcc.n	8006724 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006714:	4b11      	ldr	r3, [pc, #68]	@ (800675c <prvAddCurrentTaskToDelayedList+0x7c>)
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800671a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800671e:	3104      	adds	r1, #4
 8006720:	f7ff b8e0 	b.w	80058e4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006724:	4b0e      	ldr	r3, [pc, #56]	@ (8006760 <prvAddCurrentTaskToDelayedList+0x80>)
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	6831      	ldr	r1, [r6, #0]
 800672a:	3104      	adds	r1, #4
 800672c:	f7ff f8da 	bl	80058e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006730:	4b0c      	ldr	r3, [pc, #48]	@ (8006764 <prvAddCurrentTaskToDelayedList+0x84>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006736:	bf88      	it	hi
 8006738:	601c      	strhi	r4, [r3, #0]
}
 800673a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800673c:	2f00      	cmp	r7, #0
 800673e:	d0e5      	beq.n	800670c <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006740:	6831      	ldr	r1, [r6, #0]
 8006742:	4809      	ldr	r0, [pc, #36]	@ (8006768 <prvAddCurrentTaskToDelayedList+0x88>)
}
 8006744:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006748:	3104      	adds	r1, #4
 800674a:	f7ff b8bd 	b.w	80058c8 <vListInsertEnd>
 800674e:	bf00      	nop
 8006750:	20004d70 	.word	0x20004d70
 8006754:	20004e74 	.word	0x20004e74
 8006758:	20004d6c 	.word	0x20004d6c
 800675c:	20004db8 	.word	0x20004db8
 8006760:	20004dbc 	.word	0x20004dbc
 8006764:	20004d54 	.word	0x20004d54
 8006768:	20004d78 	.word	0x20004d78

0800676c <prvIdleTask>:
{
 800676c:	b580      	push	{r7, lr}
 800676e:	4d23      	ldr	r5, [pc, #140]	@ (80067fc <prvIdleTask+0x90>)
 8006770:	4f23      	ldr	r7, [pc, #140]	@ (8006800 <prvIdleTask+0x94>)
 8006772:	4e24      	ldr	r6, [pc, #144]	@ (8006804 <prvIdleTask+0x98>)
 8006774:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8006808 <prvIdleTask+0x9c>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b35b      	cbz	r3, 80067d4 <prvIdleTask+0x68>
			taskENTER_CRITICAL();
 800677c:	f7ff f942 	bl	8005a04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006784:	1d20      	adds	r0, r4, #4
 8006786:	f7ff f8c5 	bl	8005914 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800678a:	6833      	ldr	r3, [r6, #0]
 800678c:	3b01      	subs	r3, #1
 800678e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	3b01      	subs	r3, #1
 8006794:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 8006796:	f7ff f957 	bl	8005a48 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800679a:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800679e:	f002 ffe7 	bl	8009770 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067a2:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 80067a6:	b163      	cbz	r3, 80067c2 <prvIdleTask+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d022      	beq.n	80067f2 <prvIdleTask+0x86>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d0e3      	beq.n	8006778 <prvIdleTask+0xc>
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	e7fe      	b.n	80067c0 <prvIdleTask+0x54>
				vPortFree( pxTCB->pxStack );
 80067c2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80067c4:	f7ff f80c 	bl	80057e0 <vPortFree>
				vPortFree( pxTCB );
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7ff f809 	bl	80057e0 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ce:	682b      	ldr	r3, [r5, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1d3      	bne.n	800677c <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067d4:	f8d8 3000 	ldr.w	r3, [r8]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d9cd      	bls.n	8006778 <prvIdleTask+0xc>
				taskYIELD();
 80067dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80067e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	e7c2      	b.n	8006778 <prvIdleTask+0xc>
				vPortFree( pxTCB );
 80067f2:	4620      	mov	r0, r4
 80067f4:	f7fe fff4 	bl	80057e0 <vPortFree>
 80067f8:	e7be      	b.n	8006778 <prvIdleTask+0xc>
 80067fa:	bf00      	nop
 80067fc:	20004d8c 	.word	0x20004d8c
 8006800:	20004d90 	.word	0x20004d90
 8006804:	20004d74 	.word	0x20004d74
 8006808:	20004de8 	.word	0x20004de8

0800680c <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 800680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006810:	4b48      	ldr	r3, [pc, #288]	@ (8006934 <xTaskIncrementTick.part.0+0x128>)
 8006812:	681d      	ldr	r5, [r3, #0]
 8006814:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
 8006816:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8006818:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800681a:	2d00      	cmp	r5, #0
 800681c:	d041      	beq.n	80068a2 <xTaskIncrementTick.part.0+0x96>
 800681e:	4b46      	ldr	r3, [pc, #280]	@ (8006938 <xTaskIncrementTick.part.0+0x12c>)
 8006820:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	429d      	cmp	r5, r3
 8006826:	d349      	bcc.n	80068bc <xTaskIncrementTick.part.0+0xb0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006828:	4e44      	ldr	r6, [pc, #272]	@ (800693c <xTaskIncrementTick.part.0+0x130>)
 800682a:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8006950 <xTaskIncrementTick.part.0+0x144>
 800682e:	6833      	ldr	r3, [r6, #0]
 8006830:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 8006954 <xTaskIncrementTick.part.0+0x148>
 8006834:	681c      	ldr	r4, [r3, #0]
 8006836:	2c00      	cmp	r4, #0
 8006838:	d076      	beq.n	8006928 <xTaskIncrementTick.part.0+0x11c>
					prvAddTaskToReadyList( pxTCB );
 800683a:	4f41      	ldr	r7, [pc, #260]	@ (8006940 <xTaskIncrementTick.part.0+0x134>)
BaseType_t xSwitchRequired = pdFALSE;
 800683c:	2400      	movs	r4, #0
 800683e:	e022      	b.n	8006886 <xTaskIncrementTick.part.0+0x7a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006840:	f7ff f868 	bl	8005914 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006844:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006848:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800684c:	b10a      	cbz	r2, 8006852 <xTaskIncrementTick.part.0+0x46>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800684e:	f7ff f861 	bl	8005914 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006852:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2201      	movs	r2, #1
 800685a:	4082      	lsls	r2, r0
 800685c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006860:	431a      	orrs	r2, r3
 8006862:	4651      	mov	r1, sl
 8006864:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006868:	603a      	str	r2, [r7, #0]
 800686a:	f7ff f82d 	bl	80058c8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800686e:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006872:	6830      	ldr	r0, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006874:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 8006878:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800687a:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 800687c:	4291      	cmp	r1, r2
 800687e:	bf28      	it	cs
 8006880:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006882:	2b00      	cmp	r3, #0
 8006884:	d050      	beq.n	8006928 <xTaskIncrementTick.part.0+0x11c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006886:	6833      	ldr	r3, [r6, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800688e:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006892:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 8006896:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006898:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800689a:	d2d1      	bcs.n	8006840 <xTaskIncrementTick.part.0+0x34>
						xNextTaskUnblockTime = xItemValue;
 800689c:	9b01      	ldr	r3, [sp, #4]
 800689e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80068a0:	e011      	b.n	80068c6 <xTaskIncrementTick.part.0+0xba>
			taskSWITCH_DELAYED_LISTS();
 80068a2:	4b26      	ldr	r3, [pc, #152]	@ (800693c <xTaskIncrementTick.part.0+0x130>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	b30a      	cbz	r2, 80068ee <xTaskIncrementTick.part.0+0xe2>
 80068aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	e7fe      	b.n	80068ba <xTaskIncrementTick.part.0+0xae>
 80068bc:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8006950 <xTaskIncrementTick.part.0+0x144>
 80068c0:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006954 <xTaskIncrementTick.part.0+0x148>
BaseType_t xSwitchRequired = pdFALSE;
 80068c4:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068c6:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 80068ca:	491e      	ldr	r1, [pc, #120]	@ (8006944 <xTaskIncrementTick.part.0+0x138>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 80068d8:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 80068da:	2a02      	cmp	r2, #2
 80068dc:	bf28      	it	cs
 80068de:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 80068e0:	2b00      	cmp	r3, #0
}
 80068e2:	bf0c      	ite	eq
 80068e4:	4620      	moveq	r0, r4
 80068e6:	2001      	movne	r0, #1
 80068e8:	b003      	add	sp, #12
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80068ee:	4a16      	ldr	r2, [pc, #88]	@ (8006948 <xTaskIncrementTick.part.0+0x13c>)
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	6811      	ldr	r1, [r2, #0]
 80068f4:	6019      	str	r1, [r3, #0]
 80068f6:	4915      	ldr	r1, [pc, #84]	@ (800694c <xTaskIncrementTick.part.0+0x140>)
 80068f8:	6010      	str	r0, [r2, #0]
 80068fa:	680a      	ldr	r2, [r1, #0]
 80068fc:	3201      	adds	r2, #1
 80068fe:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	b93a      	cbnz	r2, 8006916 <xTaskIncrementTick.part.0+0x10a>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006906:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <xTaskIncrementTick.part.0+0x12c>)
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	461a      	mov	r2, r3
 800690c:	f04f 33ff 	mov.w	r3, #4294967295
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	4613      	mov	r3, r2
 8006914:	e785      	b.n	8006822 <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006916:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006918:	4a07      	ldr	r2, [pc, #28]	@ (8006938 <xTaskIncrementTick.part.0+0x12c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800691a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800691c:	9201      	str	r2, [sp, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	4613      	mov	r3, r2
}
 8006926:	e77c      	b.n	8006822 <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006928:	9a01      	ldr	r2, [sp, #4]
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	6013      	str	r3, [r2, #0]
					break;
 8006930:	e7c9      	b.n	80068c6 <xTaskIncrementTick.part.0+0xba>
 8006932:	bf00      	nop
 8006934:	20004d70 	.word	0x20004d70
 8006938:	20004d54 	.word	0x20004d54
 800693c:	20004dbc 	.word	0x20004dbc
 8006940:	20004d6c 	.word	0x20004d6c
 8006944:	20004d60 	.word	0x20004d60
 8006948:	20004db8 	.word	0x20004db8
 800694c:	20004d5c 	.word	0x20004d5c
 8006950:	20004de8 	.word	0x20004de8
 8006954:	20004e74 	.word	0x20004e74

08006958 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8006958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 800695c:	4d48      	ldr	r5, [pc, #288]	@ (8006a80 <xTaskResumeAll.part.0+0x128>)
BaseType_t xTaskResumeAll( void )
 800695e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8006960:	f7ff f850 	bl	8005a04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	3b01      	subs	r3, #1
 8006968:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800696a:	682b      	ldr	r3, [r5, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d16e      	bne.n	8006a4e <xTaskResumeAll.part.0+0xf6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006970:	4b44      	ldr	r3, [pc, #272]	@ (8006a84 <xTaskResumeAll.part.0+0x12c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d06a      	beq.n	8006a4e <xTaskResumeAll.part.0+0xf6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006978:	f8df a120 	ldr.w	sl, [pc, #288]	@ 8006a9c <xTaskResumeAll.part.0+0x144>
 800697c:	f8da 2000 	ldr.w	r2, [sl]
 8006980:	2a00      	cmp	r2, #0
 8006982:	d079      	beq.n	8006a78 <xTaskResumeAll.part.0+0x120>
 8006984:	4b40      	ldr	r3, [pc, #256]	@ (8006a88 <xTaskResumeAll.part.0+0x130>)
 8006986:	4e41      	ldr	r6, [pc, #260]	@ (8006a8c <xTaskResumeAll.part.0+0x134>)
 8006988:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 8006aa0 <xTaskResumeAll.part.0+0x148>
 800698c:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8006aa4 <xTaskResumeAll.part.0+0x14c>
 8006990:	9301      	str	r3, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8006992:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006994:	f8da 200c 	ldr.w	r2, [sl, #12]
 8006998:	f8d2 b00c 	ldr.w	fp, [r2, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800699c:	f10b 0404 	add.w	r4, fp, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069a0:	f10b 0018 	add.w	r0, fp, #24
 80069a4:	f7fe ffb6 	bl	8005914 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a8:	4620      	mov	r0, r4
 80069aa:	f7fe ffb3 	bl	8005914 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069ae:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 80069b2:	6831      	ldr	r1, [r6, #0]
 80069b4:	fa07 f200 	lsl.w	r2, r7, r0
 80069b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80069bc:	430a      	orrs	r2, r1
 80069be:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80069c2:	4621      	mov	r1, r4
 80069c4:	6032      	str	r2, [r6, #0]
 80069c6:	f7fe ff7f 	bl	80058c8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069ca:	f8d8 2000 	ldr.w	r2, [r8]
 80069ce:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
 80069d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069d4:	4291      	cmp	r1, r2
 80069d6:	d341      	bcc.n	8006a5c <xTaskResumeAll.part.0+0x104>
						xYieldPending = pdTRUE;
 80069d8:	9b01      	ldr	r3, [sp, #4]
 80069da:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069dc:	f8da 2000 	ldr.w	r2, [sl]
 80069e0:	2a00      	cmp	r2, #0
 80069e2:	d1d7      	bne.n	8006994 <xTaskResumeAll.part.0+0x3c>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006a90 <xTaskResumeAll.part.0+0x138>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	2a00      	cmp	r2, #0
 80069ec:	d03f      	beq.n	8006a6e <xTaskResumeAll.part.0+0x116>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ee:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069f0:	4b28      	ldr	r3, [pc, #160]	@ (8006a94 <xTaskResumeAll.part.0+0x13c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069f4:	68d2      	ldr	r2, [r2, #12]
 80069f6:	6852      	ldr	r2, [r2, #4]
 80069f8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069fa:	4e27      	ldr	r6, [pc, #156]	@ (8006a98 <xTaskResumeAll.part.0+0x140>)
 80069fc:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80069fe:	b194      	cbz	r4, 8006a26 <xTaskResumeAll.part.0+0xce>
								xYieldPending = pdTRUE;
 8006a00:	2701      	movs	r7, #1
 8006a02:	e006      	b.n	8006a12 <xTaskResumeAll.part.0+0xba>
 8006a04:	f7ff ff02 	bl	800680c <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8006a08:	b108      	cbz	r0, 8006a0e <xTaskResumeAll.part.0+0xb6>
								xYieldPending = pdTRUE;
 8006a0a:	9b01      	ldr	r3, [sp, #4]
 8006a0c:	601f      	str	r7, [r3, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a0e:	3c01      	subs	r4, #1
 8006a10:	d008      	beq.n	8006a24 <xTaskResumeAll.part.0+0xcc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a12:	682b      	ldr	r3, [r5, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0f5      	beq.n	8006a04 <xTaskResumeAll.part.0+0xac>
		++xPendedTicks;
 8006a18:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a1a:	3c01      	subs	r4, #1
		++xPendedTicks;
 8006a1c:	f103 0301 	add.w	r3, r3, #1
 8006a20:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a22:	d1f6      	bne.n	8006a12 <xTaskResumeAll.part.0+0xba>
						xPendedTicks = 0;
 8006a24:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8006a26:	9b01      	ldr	r3, [sp, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	b183      	cbz	r3, 8006a4e <xTaskResumeAll.part.0+0xf6>
					taskYIELD_IF_USING_PREEMPTION();
 8006a2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8006a40:	f7ff f802 	bl	8005a48 <vPortExitCritical>
						xAlreadyYielded = pdTRUE;
 8006a44:	2401      	movs	r4, #1
}
 8006a46:	4620      	mov	r0, r4
 8006a48:	b003      	add	sp, #12
 8006a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	taskEXIT_CRITICAL();
 8006a4e:	f7fe fffb 	bl	8005a48 <vPortExitCritical>
BaseType_t xAlreadyYielded = pdFALSE;
 8006a52:	2400      	movs	r4, #0
}
 8006a54:	4620      	mov	r0, r4
 8006a56:	b003      	add	sp, #12
 8006a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a5c:	f8da 2000 	ldr.w	r2, [sl]
 8006a60:	2a00      	cmp	r2, #0
 8006a62:	d197      	bne.n	8006994 <xTaskResumeAll.part.0+0x3c>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a64:	4b0a      	ldr	r3, [pc, #40]	@ (8006a90 <xTaskResumeAll.part.0+0x138>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	2a00      	cmp	r2, #0
 8006a6c:	d1bf      	bne.n	80069ee <xTaskResumeAll.part.0+0x96>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a6e:	4b09      	ldr	r3, [pc, #36]	@ (8006a94 <xTaskResumeAll.part.0+0x13c>)
 8006a70:	f04f 32ff 	mov.w	r2, #4294967295
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	e7c0      	b.n	80069fa <xTaskResumeAll.part.0+0xa2>
 8006a78:	4b03      	ldr	r3, [pc, #12]	@ (8006a88 <xTaskResumeAll.part.0+0x130>)
 8006a7a:	9301      	str	r3, [sp, #4]
 8006a7c:	e7bd      	b.n	80069fa <xTaskResumeAll.part.0+0xa2>
 8006a7e:	bf00      	nop
 8006a80:	20004d50 	.word	0x20004d50
 8006a84:	20004d74 	.word	0x20004d74
 8006a88:	20004d60 	.word	0x20004d60
 8006a8c:	20004d6c 	.word	0x20004d6c
 8006a90:	20004dbc 	.word	0x20004dbc
 8006a94:	20004d54 	.word	0x20004d54
 8006a98:	20004d64 	.word	0x20004d64
 8006a9c:	20004da4 	.word	0x20004da4
 8006aa0:	20004de8 	.word	0x20004de8
 8006aa4:	20004e74 	.word	0x20004e74

08006aa8 <xTaskCreateStatic>:
	{
 8006aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006ab2:	b1c5      	cbz	r5, 8006ae6 <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
 8006ab4:	b174      	cbz	r4, 8006ad4 <xTaskCreateStatic+0x2c>
 8006ab6:	4606      	mov	r6, r0
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ab8:	20a0      	movs	r0, #160	@ 0xa0
 8006aba:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006abc:	9803      	ldr	r0, [sp, #12]
 8006abe:	28a0      	cmp	r0, #160	@ 0xa0
 8006ac0:	d01a      	beq.n	8006af8 <xTaskCreateStatic+0x50>
 8006ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	e7fe      	b.n	8006ad2 <xTaskCreateStatic+0x2a>
 8006ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006ae4:	e7fe      	b.n	8006ae4 <xTaskCreateStatic+0x3c>
 8006ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006af6:	e7fe      	b.n	8006af6 <xTaskCreateStatic+0x4e>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006af8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8006afc:	3a01      	subs	r2, #1
 8006afe:	eb05 0282 	add.w	r2, r5, r2, lsl #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b02:	6325      	str	r5, [r4, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b04:	f022 0507 	bic.w	r5, r2, #7
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b08:	2202      	movs	r2, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b0a:	9803      	ldr	r0, [sp, #12]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b0c:	f884 209d 	strb.w	r2, [r4, #157]	@ 0x9d
	if( pcName != NULL )
 8006b10:	2900      	cmp	r1, #0
 8006b12:	d073      	beq.n	8006bfc <xTaskCreateStatic+0x154>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b14:	780a      	ldrb	r2, [r1, #0]
 8006b16:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8006b1a:	2a00      	cmp	r2, #0
 8006b1c:	d036      	beq.n	8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b1e:	784a      	ldrb	r2, [r1, #1]
 8006b20:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8006b24:	b392      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b26:	788a      	ldrb	r2, [r1, #2]
 8006b28:	f884 2036 	strb.w	r2, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8006b2c:	b372      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b2e:	78ca      	ldrb	r2, [r1, #3]
 8006b30:	f884 2037 	strb.w	r2, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8006b34:	b352      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b36:	790a      	ldrb	r2, [r1, #4]
 8006b38:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8006b3c:	b332      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b3e:	794a      	ldrb	r2, [r1, #5]
 8006b40:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8006b44:	b312      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b46:	798a      	ldrb	r2, [r1, #6]
 8006b48:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8006b4c:	b1f2      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b4e:	79ca      	ldrb	r2, [r1, #7]
 8006b50:	f884 203b 	strb.w	r2, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8006b54:	b1d2      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b56:	7a0a      	ldrb	r2, [r1, #8]
 8006b58:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8006b5c:	b1b2      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b5e:	7a4a      	ldrb	r2, [r1, #9]
 8006b60:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8006b64:	b192      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b66:	7a8a      	ldrb	r2, [r1, #10]
 8006b68:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 8006b6c:	b172      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b6e:	7aca      	ldrb	r2, [r1, #11]
 8006b70:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8006b74:	b152      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b76:	7b0a      	ldrb	r2, [r1, #12]
 8006b78:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8006b7c:	b132      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b7e:	7b4a      	ldrb	r2, [r1, #13]
 8006b80:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8006b84:	b112      	cbz	r2, 8006b8c <xTaskCreateStatic+0xe4>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b86:	7b8a      	ldrb	r2, [r1, #14]
 8006b88:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b92:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	2f06      	cmp	r7, #6
 8006b98:	bf28      	it	cs
 8006b9a:	2706      	movcs	r7, #6
		pxNewTCB->uxMutexesHeld = 0;
 8006b9c:	f04f 0800 	mov.w	r8, #0
	pxNewTCB->uxPriority = uxPriority;
 8006ba0:	62e7      	str	r7, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006ba2:	6467      	str	r7, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ba4:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8006ba6:	f8c4 8048 	str.w	r8, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006baa:	f7fe fe89 	bl	80058c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bae:	f104 0018 	add.w	r0, r4, #24
 8006bb2:	f7fe fe85 	bl	80058c0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bb6:	f1c7 0707 	rsb	r7, r7, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bba:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bbc:	61a7      	str	r7, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8006bbe:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bc6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bc8:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bca:	f884 809c 	strb.w	r8, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bce:	f002 fdc7 	bl	8009760 <memset>
 8006bd2:	4f0c      	ldr	r7, [pc, #48]	@ (8006c04 <xTaskCreateStatic+0x15c>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bd4:	9b01      	ldr	r3, [sp, #4]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bd6:	6527      	str	r7, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bd8:	461a      	mov	r2, r3
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bda:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006bde:	37d0      	adds	r7, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006be0:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006be2:	6563      	str	r3, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006be4:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006be6:	65a7      	str	r7, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006be8:	f7fe fee6 	bl	80059b8 <pxPortInitialiseStack>
 8006bec:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f7ff fcee 	bl	80065d0 <prvAddNewTaskToReadyList>
	}
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	b004      	add	sp, #16
 8006bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bfc:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 8006c00:	e7c7      	b.n	8006b92 <xTaskCreateStatic+0xea>
 8006c02:	bf00      	nop
 8006c04:	20004fdc 	.word	0x20004fdc

08006c08 <xTaskCreate>:
	{
 8006c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c0c:	0095      	lsls	r5, r2, #2
	{
 8006c0e:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c10:	4628      	mov	r0, r5
	{
 8006c12:	460e      	mov	r6, r1
 8006c14:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c16:	f7fe fd2b 	bl	8005670 <pvPortMalloc>
			if( pxStack != NULL )
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	f000 8086 	beq.w	8006d2c <xTaskCreate+0x124>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c20:	4607      	mov	r7, r0
 8006c22:	20a0      	movs	r0, #160	@ 0xa0
 8006c24:	f7fe fd24 	bl	8005670 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006c28:	4604      	mov	r4, r0
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d07b      	beq.n	8006d26 <xTaskCreate+0x11e>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c2e:	3d04      	subs	r5, #4
 8006c30:	443d      	add	r5, r7
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c32:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8006c34:	6307      	str	r7, [r0, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c36:	f025 0507 	bic.w	r5, r5, #7
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c3a:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
	if( pcName != NULL )
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	d078      	beq.n	8006d34 <xTaskCreate+0x12c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c42:	7833      	ldrb	r3, [r6, #0]
 8006c44:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d036      	beq.n	8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c4c:	7873      	ldrb	r3, [r6, #1]
 8006c4e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 8006c52:	b393      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c54:	78b3      	ldrb	r3, [r6, #2]
 8006c56:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8006c5a:	b373      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c5c:	78f3      	ldrb	r3, [r6, #3]
 8006c5e:	f880 3037 	strb.w	r3, [r0, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 8006c62:	b353      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c64:	7933      	ldrb	r3, [r6, #4]
 8006c66:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8006c6a:	b333      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c6c:	7973      	ldrb	r3, [r6, #5]
 8006c6e:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 8006c72:	b313      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c74:	79b3      	ldrb	r3, [r6, #6]
 8006c76:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8006c7a:	b1f3      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c7c:	79f3      	ldrb	r3, [r6, #7]
 8006c7e:	f880 303b 	strb.w	r3, [r0, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 8006c82:	b1d3      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c84:	7a33      	ldrb	r3, [r6, #8]
 8006c86:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8006c8a:	b1b3      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c8c:	7a73      	ldrb	r3, [r6, #9]
 8006c8e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8006c92:	b193      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c94:	7ab3      	ldrb	r3, [r6, #10]
 8006c96:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 8006c9a:	b173      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c9c:	7af3      	ldrb	r3, [r6, #11]
 8006c9e:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8006ca2:	b153      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ca4:	7b33      	ldrb	r3, [r6, #12]
 8006ca6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8006caa:	b133      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cac:	7b73      	ldrb	r3, [r6, #13]
 8006cae:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8006cb2:	b113      	cbz	r3, 8006cba <xTaskCreate+0xb2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cb4:	7bb3      	ldrb	r3, [r6, #14]
 8006cb6:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cc0:	9e08      	ldr	r6, [sp, #32]
 8006cc2:	2e06      	cmp	r6, #6
 8006cc4:	bf28      	it	cs
 8006cc6:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 8006cc8:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8006cca:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006ccc:	6466      	str	r6, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cce:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8006cd0:	64a7      	str	r7, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cd2:	f7fe fdf5 	bl	80058c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cd6:	f104 0018 	add.w	r0, r4, #24
 8006cda:	f7fe fdf1 	bl	80058c0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cde:	f1c6 0607 	rsb	r6, r6, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ce2:	224c      	movs	r2, #76	@ 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8006ce4:	f8c4 7098 	str.w	r7, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ce8:	4639      	mov	r1, r7
 8006cea:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cec:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cee:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cf0:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cf2:	f884 709c 	strb.w	r7, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006cf6:	f002 fd33 	bl	8009760 <memset>
 8006cfa:	4b10      	ldr	r3, [pc, #64]	@ (8006d3c <xTaskCreate+0x134>)
 8006cfc:	6523      	str	r3, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cfe:	4628      	mov	r0, r5
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d00:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 8006d04:	33d0      	adds	r3, #208	@ 0xd0
 8006d06:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d08:	464a      	mov	r2, r9
 8006d0a:	4641      	mov	r1, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d0c:	6565      	str	r5, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d0e:	f7fe fe53 	bl	80059b8 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8006d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d14:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8006d16:	b103      	cbz	r3, 8006d1a <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d18:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f7ff fc58 	bl	80065d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d20:	2001      	movs	r0, #1
	}
 8006d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006d26:	4638      	mov	r0, r7
 8006d28:	f7fe fd5a 	bl	80057e0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d34:	f880 6034 	strb.w	r6, [r0, #52]	@ 0x34
 8006d38:	e7c2      	b.n	8006cc0 <xTaskCreate+0xb8>
 8006d3a:	bf00      	nop
 8006d3c:	20004fdc 	.word	0x20004fdc

08006d40 <vTaskDelay>:
	{
 8006d40:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d42:	b950      	cbnz	r0, 8006d5a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006d44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	f3bf 8f6f 	isb	sy
	}
 8006d58:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006d5a:	4c10      	ldr	r4, [pc, #64]	@ (8006d9c <vTaskDelay+0x5c>)
 8006d5c:	6821      	ldr	r1, [r4, #0]
 8006d5e:	b141      	cbz	r1, 8006d72 <vTaskDelay+0x32>
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	e7fe      	b.n	8006d70 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d78:	f7ff fcb2 	bl	80066e0 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	b943      	cbnz	r3, 8006d92 <vTaskDelay+0x52>
 8006d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	e7fe      	b.n	8006d90 <vTaskDelay+0x50>
 8006d92:	f7ff fde1 	bl	8006958 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d0d4      	beq.n	8006d44 <vTaskDelay+0x4>
	}
 8006d9a:	bd10      	pop	{r4, pc}
 8006d9c:	20004d50 	.word	0x20004d50

08006da0 <uxTaskPriorityGet>:
	{
 8006da0:	b510      	push	{r4, lr}
 8006da2:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8006da4:	f7fe fe2e 	bl	8005a04 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 8006da8:	b124      	cbz	r4, 8006db4 <uxTaskPriorityGet+0x14>
			uxReturn = pxTCB->uxPriority;
 8006daa:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
		taskEXIT_CRITICAL();
 8006dac:	f7fe fe4c 	bl	8005a48 <vPortExitCritical>
	}
 8006db0:	4620      	mov	r0, r4
 8006db2:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 8006db4:	4b03      	ldr	r3, [pc, #12]	@ (8006dc4 <uxTaskPriorityGet+0x24>)
 8006db6:	681c      	ldr	r4, [r3, #0]
			uxReturn = pxTCB->uxPriority;
 8006db8:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
		taskEXIT_CRITICAL();
 8006dba:	f7fe fe45 	bl	8005a48 <vPortExitCritical>
	}
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20004e74 	.word	0x20004e74

08006dc8 <uxTaskPriorityGetFromISR>:
	{
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	4604      	mov	r4, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dcc:	f7fe ff38 	bl	8005c40 <vPortValidateInterruptPriority>
	__asm volatile
 8006dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8006dd4:	f04f 0250 	mov.w	r2, #80	@ 0x50
 8006dd8:	f382 8811 	msr	BASEPRI, r2
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
			pxTCB = prvGetTCBFromHandle( xTask );
 8006de4:	b11c      	cbz	r4, 8006dee <uxTaskPriorityGetFromISR+0x26>
			uxReturn = pxTCB->uxPriority;
 8006de6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	__asm volatile
 8006de8:	f383 8811 	msr	BASEPRI, r3
	}
 8006dec:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 8006dee:	4a03      	ldr	r2, [pc, #12]	@ (8006dfc <uxTaskPriorityGetFromISR+0x34>)
 8006df0:	6814      	ldr	r4, [r2, #0]
			uxReturn = pxTCB->uxPriority;
 8006df2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006df4:	f383 8811 	msr	BASEPRI, r3
	}
 8006df8:	bd10      	pop	{r4, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20004e74 	.word	0x20004e74

08006e00 <vTaskStartScheduler>:
{
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	b084      	sub	sp, #16
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e04:	aa02      	add	r2, sp, #8
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e06:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e08:	a901      	add	r1, sp, #4
 8006e0a:	4668      	mov	r0, sp
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e0c:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e10:	f7fa f89c 	bl	8000f4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e14:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8006e18:	9d00      	ldr	r5, [sp, #0]
		configASSERT( puxStackBuffer != NULL );
 8006e1a:	b1bb      	cbz	r3, 8006e4c <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 8006e1c:	b16d      	cbz	r5, 8006e3a <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e1e:	21a0      	movs	r1, #160	@ 0xa0
 8006e20:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e22:	9903      	ldr	r1, [sp, #12]
 8006e24:	29a0      	cmp	r1, #160	@ 0xa0
 8006e26:	d01a      	beq.n	8006e5e <vTaskStartScheduler+0x5e>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	e7fe      	b.n	8006e38 <vTaskStartScheduler+0x38>
 8006e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006e4a:	e7fe      	b.n	8006e4a <vTaskStartScheduler+0x4a>
 8006e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006e5c:	e7fe      	b.n	8006e5c <vTaskStartScheduler+0x5c>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e5e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8006e62:	3a01      	subs	r2, #1
 8006e64:	eb03 0282 	add.w	r2, r3, r2, lsl #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e68:	2102      	movs	r1, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e6a:	632b      	str	r3, [r5, #48]	@ 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8006f28 <vTaskStartScheduler+0x128>)
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e6e:	f885 109d 	strb.w	r1, [r5, #157]	@ 0x9d
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e72:	1d28      	adds	r0, r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e74:	636b      	str	r3, [r5, #52]	@ 0x34
		pxNewTCB->uxMutexesHeld = 0;
 8006e76:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e7a:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e7e:	f885 4043 	strb.w	r4, [r5, #67]	@ 0x43
	pxNewTCB->uxPriority = uxPriority;
 8006e82:	62ec      	str	r4, [r5, #44]	@ 0x2c
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e84:	f022 0607 	bic.w	r6, r2, #7
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e88:	9b03      	ldr	r3, [sp, #12]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e8a:	f7fe fd19 	bl	80058c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e8e:	f105 0018 	add.w	r0, r5, #24
 8006e92:	f7fe fd15 	bl	80058c0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e96:	2307      	movs	r3, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e98:	224c      	movs	r2, #76	@ 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8006e9a:	f8c5 4098 	str.w	r4, [r5, #152]	@ 0x98
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e9e:	61ab      	str	r3, [r5, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	18a8      	adds	r0, r5, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ea4:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ea6:	626d      	str	r5, [r5, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ea8:	f885 409c 	strb.w	r4, [r5, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006eac:	f002 fc58 	bl	8009760 <memset>
 8006eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8006f2c <vTaskStartScheduler+0x12c>)
 8006eb2:	652b      	str	r3, [r5, #80]	@ 0x50
 8006eb4:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006eb8:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006eba:	491d      	ldr	r1, [pc, #116]	@ (8006f30 <vTaskStartScheduler+0x130>)
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ebc:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006ebe:	656a      	str	r2, [r5, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	f7fe fd78 	bl	80059b8 <pxPortInitialiseStack>
 8006ec8:	6028      	str	r0, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f7ff fb80 	bl	80065d0 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 8006ed0:	f000 fbda 	bl	8007688 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006ed4:	2801      	cmp	r0, #1
 8006ed6:	d00c      	beq.n	8006ef2 <vTaskStartScheduler+0xf2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d001      	beq.n	8006ee0 <vTaskStartScheduler+0xe0>
}
 8006edc:	b004      	add	sp, #16
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ef0:	e7fe      	b.n	8006ef0 <vTaskStartScheduler+0xf0>
 8006ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f02:	4b0c      	ldr	r3, [pc, #48]	@ (8006f34 <vTaskStartScheduler+0x134>)
 8006f04:	4a0c      	ldr	r2, [pc, #48]	@ (8006f38 <vTaskStartScheduler+0x138>)
 8006f06:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f08:	490c      	ldr	r1, [pc, #48]	@ (8006f3c <vTaskStartScheduler+0x13c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f0a:	334c      	adds	r3, #76	@ 0x4c
 8006f0c:	6013      	str	r3, [r2, #0]
		xSchedulerRunning = pdTRUE;
 8006f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f40 <vTaskStartScheduler+0x140>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f10:	4b0c      	ldr	r3, [pc, #48]	@ (8006f44 <vTaskStartScheduler+0x144>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f12:	f04f 35ff 	mov.w	r5, #4294967295
 8006f16:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8006f18:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f1a:	601c      	str	r4, [r3, #0]
}
 8006f1c:	b004      	add	sp, #16
 8006f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006f22:	f7fe bded 	b.w	8005b00 <xPortStartScheduler>
 8006f26:	bf00      	nop
 8006f28:	454c4449 	.word	0x454c4449
 8006f2c:	20004fdc 	.word	0x20004fdc
 8006f30:	0800676d 	.word	0x0800676d
 8006f34:	20004e74 	.word	0x20004e74
 8006f38:	20000584 	.word	0x20000584
 8006f3c:	20004d54 	.word	0x20004d54
 8006f40:	20004d68 	.word	0x20004d68
 8006f44:	20004d70 	.word	0x20004d70

08006f48 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006f48:	4a02      	ldr	r2, [pc, #8]	@ (8006f54 <vTaskSuspendAll+0xc>)
 8006f4a:	6813      	ldr	r3, [r2, #0]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	6013      	str	r3, [r2, #0]
}
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	20004d50 	.word	0x20004d50

08006f58 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006f58:	4b06      	ldr	r3, [pc, #24]	@ (8006f74 <xTaskResumeAll+0x1c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	b943      	cbnz	r3, 8006f70 <xTaskResumeAll+0x18>
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	e7fe      	b.n	8006f6e <xTaskResumeAll+0x16>
 8006f70:	f7ff bcf2 	b.w	8006958 <xTaskResumeAll.part.0>
 8006f74:	20004d50 	.word	0x20004d50

08006f78 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006f78:	4b01      	ldr	r3, [pc, #4]	@ (8006f80 <xTaskGetTickCount+0x8>)
 8006f7a:	6818      	ldr	r0, [r3, #0]
}
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20004d70 	.word	0x20004d70

08006f84 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f84:	4b05      	ldr	r3, [pc, #20]	@ (8006f9c <xTaskIncrementTick+0x18>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	b90b      	cbnz	r3, 8006f8e <xTaskIncrementTick+0xa>
 8006f8a:	f7ff bc3f 	b.w	800680c <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8006f8e:	4a04      	ldr	r2, [pc, #16]	@ (8006fa0 <xTaskIncrementTick+0x1c>)
 8006f90:	6813      	ldr	r3, [r2, #0]
 8006f92:	3301      	adds	r3, #1
}
 8006f94:	2000      	movs	r0, #0
		++xPendedTicks;
 8006f96:	6013      	str	r3, [r2, #0]
}
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	20004d50 	.word	0x20004d50
 8006fa0:	20004d64 	.word	0x20004d64

08006fa4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fa4:	4b18      	ldr	r3, [pc, #96]	@ (8007008 <vTaskSwitchContext+0x64>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	b11b      	cbz	r3, 8006fb2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006faa:	4b18      	ldr	r3, [pc, #96]	@ (800700c <vTaskSwitchContext+0x68>)
 8006fac:	2201      	movs	r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006fb2:	4916      	ldr	r1, [pc, #88]	@ (800700c <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb4:	4a16      	ldr	r2, [pc, #88]	@ (8007010 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 8006fb6:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb8:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fba:	fab3 f383 	clz	r3, r3
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	f1c3 031f 	rsb	r3, r3, #31
 8006fc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006fc8:	4912      	ldr	r1, [pc, #72]	@ (8007014 <vTaskSwitchContext+0x70>)
 8006fca:	009a      	lsls	r2, r3, #2
 8006fcc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006fd0:	5888      	ldr	r0, [r1, r2]
 8006fd2:	b940      	cbnz	r0, 8006fe6 <vTaskSwitchContext+0x42>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006fe4:	e7fe      	b.n	8006fe4 <vTaskSwitchContext+0x40>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe6:	6858      	ldr	r0, [r3, #4]
 8006fe8:	3208      	adds	r2, #8
 8006fea:	6840      	ldr	r0, [r0, #4]
 8006fec:	6058      	str	r0, [r3, #4]
 8006fee:	440a      	add	r2, r1
 8006ff0:	4290      	cmp	r0, r2
 8006ff2:	bf04      	itt	eq
 8006ff4:	6840      	ldreq	r0, [r0, #4]
 8006ff6:	6058      	streq	r0, [r3, #4]
 8006ff8:	4b07      	ldr	r3, [pc, #28]	@ (8007018 <vTaskSwitchContext+0x74>)
 8006ffa:	68c2      	ldr	r2, [r0, #12]
 8006ffc:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a06      	ldr	r2, [pc, #24]	@ (800701c <vTaskSwitchContext+0x78>)
 8007002:	334c      	adds	r3, #76	@ 0x4c
 8007004:	6013      	str	r3, [r2, #0]
}
 8007006:	4770      	bx	lr
 8007008:	20004d50 	.word	0x20004d50
 800700c:	20004d60 	.word	0x20004d60
 8007010:	20004d6c 	.word	0x20004d6c
 8007014:	20004de8 	.word	0x20004de8
 8007018:	20004e74 	.word	0x20004e74
 800701c:	20000584 	.word	0x20000584

08007020 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007020:	b320      	cbz	r0, 800706c <vTaskPlaceOnEventList+0x4c>
{
 8007022:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007024:	4d1f      	ldr	r5, [pc, #124]	@ (80070a4 <vTaskPlaceOnEventList+0x84>)
 8007026:	460c      	mov	r4, r1
 8007028:	6829      	ldr	r1, [r5, #0]
 800702a:	3118      	adds	r1, #24
 800702c:	f7fe fc5a 	bl	80058e4 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8007030:	4b1d      	ldr	r3, [pc, #116]	@ (80070a8 <vTaskPlaceOnEventList+0x88>)
 8007032:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007034:	6828      	ldr	r0, [r5, #0]
 8007036:	3004      	adds	r0, #4
 8007038:	f7fe fc6c 	bl	8005914 <uxListRemove>
 800703c:	b940      	cbnz	r0, 8007050 <vTaskPlaceOnEventList+0x30>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800703e:	682b      	ldr	r3, [r5, #0]
 8007040:	491a      	ldr	r1, [pc, #104]	@ (80070ac <vTaskPlaceOnEventList+0x8c>)
 8007042:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007044:	680b      	ldr	r3, [r1, #0]
 8007046:	2201      	movs	r2, #1
 8007048:	4082      	lsls	r2, r0
 800704a:	ea23 0302 	bic.w	r3, r3, r2
 800704e:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007050:	1c63      	adds	r3, r4, #1
 8007052:	d014      	beq.n	800707e <vTaskPlaceOnEventList+0x5e>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	19a4      	adds	r4, r4, r6
 8007058:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800705a:	d317      	bcc.n	800708c <vTaskPlaceOnEventList+0x6c>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800705c:	4b14      	ldr	r3, [pc, #80]	@ (80070b0 <vTaskPlaceOnEventList+0x90>)
 800705e:	6818      	ldr	r0, [r3, #0]
 8007060:	6829      	ldr	r1, [r5, #0]
}
 8007062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007066:	3104      	adds	r1, #4
 8007068:	f7fe bc3c 	b.w	80058e4 <vListInsert>
 800706c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800707c:	e7fe      	b.n	800707c <vTaskPlaceOnEventList+0x5c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800707e:	6829      	ldr	r1, [r5, #0]
 8007080:	480c      	ldr	r0, [pc, #48]	@ (80070b4 <vTaskPlaceOnEventList+0x94>)
}
 8007082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007086:	3104      	adds	r1, #4
 8007088:	f7fe bc1e 	b.w	80058c8 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800708c:	4b0a      	ldr	r3, [pc, #40]	@ (80070b8 <vTaskPlaceOnEventList+0x98>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	6829      	ldr	r1, [r5, #0]
 8007092:	3104      	adds	r1, #4
 8007094:	f7fe fc26 	bl	80058e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007098:	4b08      	ldr	r3, [pc, #32]	@ (80070bc <vTaskPlaceOnEventList+0x9c>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800709e:	bf38      	it	cc
 80070a0:	601c      	strcc	r4, [r3, #0]
}
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
 80070a4:	20004e74 	.word	0x20004e74
 80070a8:	20004d70 	.word	0x20004d70
 80070ac:	20004d6c 	.word	0x20004d6c
 80070b0:	20004db8 	.word	0x20004db8
 80070b4:	20004d78 	.word	0x20004d78
 80070b8:	20004dbc 	.word	0x20004dbc
 80070bc:	20004d54 	.word	0x20004d54

080070c0 <vTaskPlaceOnEventListRestricted>:
	{
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d02d      	beq.n	8007122 <vTaskPlaceOnEventListRestricted+0x62>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070c6:	4d26      	ldr	r5, [pc, #152]	@ (8007160 <vTaskPlaceOnEventListRestricted+0xa0>)
 80070c8:	460c      	mov	r4, r1
 80070ca:	6829      	ldr	r1, [r5, #0]
 80070cc:	3118      	adds	r1, #24
 80070ce:	4616      	mov	r6, r2
 80070d0:	f7fe fbfa 	bl	80058c8 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 80070d4:	4b23      	ldr	r3, [pc, #140]	@ (8007164 <vTaskPlaceOnEventListRestricted+0xa4>)
 80070d6:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070d8:	6828      	ldr	r0, [r5, #0]
 80070da:	3004      	adds	r0, #4
		if( xWaitIndefinitely != pdFALSE )
 80070dc:	b1e6      	cbz	r6, 8007118 <vTaskPlaceOnEventListRestricted+0x58>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070de:	f7fe fc19 	bl	8005914 <uxListRemove>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d134      	bne.n	8007150 <vTaskPlaceOnEventListRestricted+0x90>
			xTicksToWait = portMAX_DELAY;
 80070e6:	f04f 34ff 	mov.w	r4, #4294967295
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	491e      	ldr	r1, [pc, #120]	@ (8007168 <vTaskPlaceOnEventListRestricted+0xa8>)
 80070ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f0:	2201      	movs	r2, #1
 80070f2:	409a      	lsls	r2, r3
 80070f4:	680b      	ldr	r3, [r1, #0]
 80070f6:	ea23 0302 	bic.w	r3, r3, r2
 80070fa:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070fc:	1c63      	adds	r3, r4, #1
 80070fe:	d025      	beq.n	800714c <vTaskPlaceOnEventListRestricted+0x8c>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	19e4      	adds	r4, r4, r7
 8007104:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007106:	d315      	bcc.n	8007134 <vTaskPlaceOnEventListRestricted+0x74>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007108:	4b18      	ldr	r3, [pc, #96]	@ (800716c <vTaskPlaceOnEventListRestricted+0xac>)
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	6829      	ldr	r1, [r5, #0]
	}
 800710e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007112:	3104      	adds	r1, #4
 8007114:	f7fe bbe6 	b.w	80058e4 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007118:	f7fe fbfc 	bl	8005914 <uxListRemove>
 800711c:	2800      	cmp	r0, #0
 800711e:	d1ef      	bne.n	8007100 <vTaskPlaceOnEventListRestricted+0x40>
 8007120:	e7e3      	b.n	80070ea <vTaskPlaceOnEventListRestricted+0x2a>
 8007122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8007132:	e7fe      	b.n	8007132 <vTaskPlaceOnEventListRestricted+0x72>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007134:	4b0e      	ldr	r3, [pc, #56]	@ (8007170 <vTaskPlaceOnEventListRestricted+0xb0>)
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	6829      	ldr	r1, [r5, #0]
 800713a:	3104      	adds	r1, #4
 800713c:	f7fe fbd2 	bl	80058e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007140:	4b0c      	ldr	r3, [pc, #48]	@ (8007174 <vTaskPlaceOnEventListRestricted+0xb4>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8007146:	bf38      	it	cc
 8007148:	601c      	strcc	r4, [r3, #0]
	}
 800714a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800714c:	2e00      	cmp	r6, #0
 800714e:	d0d7      	beq.n	8007100 <vTaskPlaceOnEventListRestricted+0x40>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007150:	6829      	ldr	r1, [r5, #0]
 8007152:	4809      	ldr	r0, [pc, #36]	@ (8007178 <vTaskPlaceOnEventListRestricted+0xb8>)
	}
 8007154:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007158:	3104      	adds	r1, #4
 800715a:	f7fe bbb5 	b.w	80058c8 <vListInsertEnd>
 800715e:	bf00      	nop
 8007160:	20004e74 	.word	0x20004e74
 8007164:	20004d70 	.word	0x20004d70
 8007168:	20004d6c 	.word	0x20004d6c
 800716c:	20004db8 	.word	0x20004db8
 8007170:	20004dbc 	.word	0x20004dbc
 8007174:	20004d54 	.word	0x20004d54
 8007178:	20004d78 	.word	0x20004d78

0800717c <xTaskRemoveFromEventList>:
{
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800717e:	68c3      	ldr	r3, [r0, #12]
 8007180:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007182:	b354      	cbz	r4, 80071da <xTaskRemoveFromEventList+0x5e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007184:	f104 0518 	add.w	r5, r4, #24
 8007188:	4628      	mov	r0, r5
 800718a:	f7fe fbc3 	bl	8005914 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800718e:	4b17      	ldr	r3, [pc, #92]	@ (80071ec <xTaskRemoveFromEventList+0x70>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	b173      	cbz	r3, 80071b2 <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007194:	4816      	ldr	r0, [pc, #88]	@ (80071f0 <xTaskRemoveFromEventList+0x74>)
 8007196:	4629      	mov	r1, r5
 8007198:	f7fe fb96 	bl	80058c8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800719c:	4b15      	ldr	r3, [pc, #84]	@ (80071f4 <xTaskRemoveFromEventList+0x78>)
 800719e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80071a6:	bf83      	ittte	hi
 80071a8:	4b13      	ldrhi	r3, [pc, #76]	@ (80071f8 <xTaskRemoveFromEventList+0x7c>)
 80071aa:	2001      	movhi	r0, #1
 80071ac:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80071ae:	2000      	movls	r0, #0
}
 80071b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071b2:	1d26      	adds	r6, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071b4:	4d11      	ldr	r5, [pc, #68]	@ (80071fc <xTaskRemoveFromEventList+0x80>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7fe fbac 	bl	8005914 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80071be:	682f      	ldr	r7, [r5, #0]
 80071c0:	480f      	ldr	r0, [pc, #60]	@ (8007200 <xTaskRemoveFromEventList+0x84>)
 80071c2:	2201      	movs	r2, #1
 80071c4:	409a      	lsls	r2, r3
 80071c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80071ca:	433a      	orrs	r2, r7
 80071cc:	4631      	mov	r1, r6
 80071ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80071d2:	602a      	str	r2, [r5, #0]
 80071d4:	f7fe fb78 	bl	80058c8 <vListInsertEnd>
 80071d8:	e7e0      	b.n	800719c <xTaskRemoveFromEventList+0x20>
 80071da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80071ea:	e7fe      	b.n	80071ea <xTaskRemoveFromEventList+0x6e>
 80071ec:	20004d50 	.word	0x20004d50
 80071f0:	20004da4 	.word	0x20004da4
 80071f4:	20004e74 	.word	0x20004e74
 80071f8:	20004d60 	.word	0x20004d60
 80071fc:	20004d6c 	.word	0x20004d6c
 8007200:	20004de8 	.word	0x20004de8

08007204 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007204:	4a03      	ldr	r2, [pc, #12]	@ (8007214 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007206:	4b04      	ldr	r3, [pc, #16]	@ (8007218 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007208:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	e9c0 2300 	strd	r2, r3, [r0]
}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20004d5c 	.word	0x20004d5c
 8007218:	20004d70 	.word	0x20004d70

0800721c <xTaskCheckForTimeOut>:
{
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800721e:	b308      	cbz	r0, 8007264 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 8007220:	460d      	mov	r5, r1
 8007222:	b1b1      	cbz	r1, 8007252 <xTaskCheckForTimeOut+0x36>
 8007224:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007226:	f7fe fbed 	bl	8005a04 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800722a:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800722c:	4a1a      	ldr	r2, [pc, #104]	@ (8007298 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 800722e:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8007230:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007232:	d02c      	beq.n	800728e <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007234:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800729c <xTaskCheckForTimeOut+0x80>
 8007238:	e9d4 6000 	ldrd	r6, r0, [r4]
 800723c:	f8dc 7000 	ldr.w	r7, [ip]
 8007240:	42be      	cmp	r6, r7
 8007242:	d018      	beq.n	8007276 <xTaskCheckForTimeOut+0x5a>
 8007244:	4288      	cmp	r0, r1
 8007246:	d816      	bhi.n	8007276 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8007248:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800724a:	f7fe fbfd 	bl	8005a48 <vPortExitCritical>
}
 800724e:	4620      	mov	r0, r4
 8007250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8007262:	e7fe      	b.n	8007262 <xTaskCheckForTimeOut+0x46>
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8007274:	e7fe      	b.n	8007274 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007276:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800727a:	4573      	cmp	r3, lr
 800727c:	d909      	bls.n	8007292 <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 800727e:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007280:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007284:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8007286:	4403      	add	r3, r0
 8007288:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800728a:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 800728e:	2400      	movs	r4, #0
 8007290:	e7db      	b.n	800724a <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8007296:	e7d7      	b.n	8007248 <xTaskCheckForTimeOut+0x2c>
 8007298:	20004d70 	.word	0x20004d70
 800729c:	20004d5c 	.word	0x20004d5c

080072a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80072a0:	4b01      	ldr	r3, [pc, #4]	@ (80072a8 <vTaskMissedYield+0x8>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	601a      	str	r2, [r3, #0]
}
 80072a6:	4770      	bx	lr
 80072a8:	20004d60 	.word	0x20004d60

080072ac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80072ac:	4b05      	ldr	r3, [pc, #20]	@ (80072c4 <xTaskGetSchedulerState+0x18>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	b133      	cbz	r3, 80072c0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072b2:	4b05      	ldr	r3, [pc, #20]	@ (80072c8 <xTaskGetSchedulerState+0x1c>)
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	fab0 f080 	clz	r0, r0
 80072ba:	0940      	lsrs	r0, r0, #5
 80072bc:	0040      	lsls	r0, r0, #1
 80072be:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072c0:	2001      	movs	r0, #1
	}
 80072c2:	4770      	bx	lr
 80072c4:	20004d68 	.word	0x20004d68
 80072c8:	20004d50 	.word	0x20004d50

080072cc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80072cc:	b310      	cbz	r0, 8007314 <xTaskPriorityDisinherit+0x48>
	{
 80072ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80072d0:	4b27      	ldr	r3, [pc, #156]	@ (8007370 <xTaskPriorityDisinherit+0xa4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4283      	cmp	r3, r0
 80072d6:	4604      	mov	r4, r0
 80072d8:	d008      	beq.n	80072ec <xTaskPriorityDisinherit+0x20>
 80072da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	e7fe      	b.n	80072ea <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80072ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ee:	b143      	cbz	r3, 8007302 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072f0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80072f2:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 80072f4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072f6:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80072f8:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072fa:	d000      	beq.n	80072fe <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80072fc:	b163      	cbz	r3, 8007318 <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 80072fe:	2000      	movs	r0, #0
	}
 8007300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8007312:	e7fe      	b.n	8007312 <xTaskPriorityDisinherit+0x46>
	BaseType_t xReturn = pdFALSE;
 8007314:	2000      	movs	r0, #0
	}
 8007316:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007318:	1d06      	adds	r6, r0, #4
 800731a:	4630      	mov	r0, r6
 800731c:	f7fe fafa 	bl	8005914 <uxListRemove>
 8007320:	b1a8      	cbz	r0, 800734e <xTaskPriorityDisinherit+0x82>
 8007322:	4814      	ldr	r0, [pc, #80]	@ (8007374 <xTaskPriorityDisinherit+0xa8>)
 8007324:	4a14      	ldr	r2, [pc, #80]	@ (8007378 <xTaskPriorityDisinherit+0xac>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007326:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007328:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 800732a:	4631      	mov	r1, r6
 800732c:	2501      	movs	r5, #1
 800732e:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007330:	f1c3 0707 	rsb	r7, r3, #7
 8007334:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007336:	fa05 f403 	lsl.w	r4, r5, r3
 800733a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800733e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007342:	4334      	orrs	r4, r6
 8007344:	6014      	str	r4, [r2, #0]
 8007346:	f7fe fabf 	bl	80058c8 <vListInsertEnd>
					xReturn = pdTRUE;
 800734a:	4628      	mov	r0, r5
	}
 800734c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800734e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007350:	4808      	ldr	r0, [pc, #32]	@ (8007374 <xTaskPriorityDisinherit+0xa8>)
 8007352:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007356:	0092      	lsls	r2, r2, #2
 8007358:	5882      	ldr	r2, [r0, r2]
 800735a:	b10a      	cbz	r2, 8007360 <xTaskPriorityDisinherit+0x94>
 800735c:	4a06      	ldr	r2, [pc, #24]	@ (8007378 <xTaskPriorityDisinherit+0xac>)
 800735e:	e7e2      	b.n	8007326 <xTaskPriorityDisinherit+0x5a>
 8007360:	4a05      	ldr	r2, [pc, #20]	@ (8007378 <xTaskPriorityDisinherit+0xac>)
 8007362:	2501      	movs	r5, #1
 8007364:	409d      	lsls	r5, r3
 8007366:	6813      	ldr	r3, [r2, #0]
 8007368:	ea23 0305 	bic.w	r3, r3, r5
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	e7da      	b.n	8007326 <xTaskPriorityDisinherit+0x5a>
 8007370:	20004e74 	.word	0x20004e74
 8007374:	20004de8 	.word	0x20004de8
 8007378:	20004d6c 	.word	0x20004d6c

0800737c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007380:	4e21      	ldr	r6, [pc, #132]	@ (8007408 <prvSwitchTimerLists+0x8c>)
 8007382:	b084      	sub	sp, #16

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007384:	e00d      	b.n	80073a2 <prvSwitchTimerLists+0x26>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007386:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007388:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800738a:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800738c:	1d25      	adds	r5, r4, #4
 800738e:	4628      	mov	r0, r5
 8007390:	f7fe fac0 	bl	8005914 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007394:	6a23      	ldr	r3, [r4, #32]
 8007396:	4620      	mov	r0, r4
 8007398:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800739a:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800739e:	075b      	lsls	r3, r3, #29
 80073a0:	d40a      	bmi.n	80073b8 <prvSwitchTimerLists+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073a2:	6833      	ldr	r3, [r6, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	2a00      	cmp	r2, #0
 80073a8:	d1ed      	bne.n	8007386 <prvSwitchTimerLists+0xa>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80073aa:	4a18      	ldr	r2, [pc, #96]	@ (800740c <prvSwitchTimerLists+0x90>)
 80073ac:	6811      	ldr	r1, [r2, #0]
 80073ae:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 80073b0:	6013      	str	r3, [r2, #0]
}
 80073b2:	b004      	add	sp, #16
 80073b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073b8:	69a3      	ldr	r3, [r4, #24]
	if( xTimerQueue != NULL )
 80073ba:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8007410 <prvSwitchTimerLists+0x94>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073be:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 80073c0:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073c2:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 80073c4:	d205      	bcs.n	80073d2 <prvSwitchTimerLists+0x56>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073c6:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80073c8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073ca:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073cc:	f7fe fa8a 	bl	80058e4 <vListInsert>
 80073d0:	e7e7      	b.n	80073a2 <prvSwitchTimerLists+0x26>
	if( xTimerQueue != NULL )
 80073d2:	f8d8 3000 	ldr.w	r3, [r8]
		xMessage.xMessageID = xCommandID;
 80073d6:	2500      	movs	r5, #0
	if( xTimerQueue != NULL )
 80073d8:	b16b      	cbz	r3, 80073f6 <prvSwitchTimerLists+0x7a>
		xMessage.xMessageID = xCommandID;
 80073da:	e9cd 5701 	strd	r5, r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073de:	9403      	str	r4, [sp, #12]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073e0:	f7ff ff64 	bl	80072ac <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073e4:	f8d8 0000 	ldr.w	r0, [r8]
 80073e8:	462b      	mov	r3, r5
 80073ea:	462a      	mov	r2, r5
 80073ec:	a901      	add	r1, sp, #4
 80073ee:	f7fe fcfb 	bl	8005de8 <xQueueGenericSend>
				configASSERT( xResult );
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d1d5      	bne.n	80073a2 <prvSwitchTimerLists+0x26>
 80073f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	e7fe      	b.n	8007406 <prvSwitchTimerLists+0x8a>
 8007408:	20004f48 	.word	0x20004f48
 800740c:	20004f44 	.word	0x20004f44
 8007410:	20004f40 	.word	0x20004f40

08007414 <prvTimerTask>:
{
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	4e97      	ldr	r6, [pc, #604]	@ (8007678 <prvTimerTask+0x264>)
 800741a:	4d98      	ldr	r5, [pc, #608]	@ (800767c <prvTimerTask+0x268>)
 800741c:	4c98      	ldr	r4, [pc, #608]	@ (8007680 <prvTimerTask+0x26c>)
 800741e:	b089      	sub	sp, #36	@ 0x24
					portYIELD_WITHIN_API();
 8007420:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 8007424:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007428:	6832      	ldr	r2, [r6, #0]
 800742a:	6817      	ldr	r7, [r2, #0]
 800742c:	2f00      	cmp	r7, #0
 800742e:	f000 80a1 	beq.w	8007574 <prvTimerTask+0x160>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007432:	68d3      	ldr	r3, [r2, #12]
 8007434:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8007436:	f7ff fd87 	bl	8006f48 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800743a:	f7ff fd9d 	bl	8006f78 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800743e:	682a      	ldr	r2, [r5, #0]
 8007440:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8007442:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8007444:	f200 80a7 	bhi.w	8007596 <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007448:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 800744a:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800744c:	f240 80ad 	bls.w	80075aa <prvTimerTask+0x196>
 8007450:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007452:	6820      	ldr	r0, [r4, #0]
 8007454:	eba7 010a 	sub.w	r1, r7, sl
 8007458:	f7ff f856 	bl	8006508 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800745c:	f7ff fd7c 	bl	8006f58 <xTaskResumeAll>
 8007460:	b928      	cbnz	r0, 800746e <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 8007462:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800746e:	6820      	ldr	r0, [r4, #0]
 8007470:	2200      	movs	r2, #0
 8007472:	a902      	add	r1, sp, #8
 8007474:	f7fe fe9a 	bl	80061ac <xQueueReceive>
 8007478:	2800      	cmp	r0, #0
 800747a:	d0d5      	beq.n	8007428 <prvTimerTask+0x14>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800747c:	9b02      	ldr	r3, [sp, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	dbf5      	blt.n	800746e <prvTimerTask+0x5a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007482:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	b113      	cbz	r3, 800748e <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007488:	1d38      	adds	r0, r7, #4
 800748a:	f7fe fa43 	bl	8005914 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800748e:	f7ff fd73 	bl	8006f78 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8007496:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8007498:	f0c0 8084 	bcc.w	80075a4 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 800749c:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 800749e:	f8c5 b000 	str.w	fp, [r5]
			switch( xMessage.xMessageID )
 80074a2:	2b09      	cmp	r3, #9
 80074a4:	d8e3      	bhi.n	800746e <prvTimerTask+0x5a>
 80074a6:	e8df f003 	tbb	[pc, r3]
 80074aa:	0505      	.short	0x0505
 80074ac:	5c3e5505 	.word	0x5c3e5505
 80074b0:	3e550505 	.word	0x3e550505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074b4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074b8:	9b03      	ldr	r3, [sp, #12]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074ba:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074bc:	f042 0201 	orr.w	r2, r2, #1
 80074c0:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	1899      	adds	r1, r3, r2
 80074c8:	bf2c      	ite	cs
 80074ca:	2001      	movcs	r0, #1
 80074cc:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 80074ce:	4559      	cmp	r1, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074d0:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80074d2:	f200 8085 	bhi.w	80075e0 <prvTimerTask+0x1cc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d6:	ebab 0303 	sub.w	r3, fp, r3
 80074da:	429a      	cmp	r2, r3
 80074dc:	f200 809b 	bhi.w	8007616 <prvTimerTask+0x202>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	4638      	mov	r0, r7
 80074e4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80074ea:	0759      	lsls	r1, r3, #29
 80074ec:	d5bf      	bpl.n	800746e <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 80074ee:	6821      	ldr	r1, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074f0:	9b03      	ldr	r3, [sp, #12]
 80074f2:	69ba      	ldr	r2, [r7, #24]
	if( xTimerQueue != NULL )
 80074f4:	b171      	cbz	r1, 8007514 <prvTimerTask+0x100>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074f6:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074f8:	e9cd 3706 	strd	r3, r7, [sp, #24]
		xMessage.xMessageID = xCommandID;
 80074fc:	2700      	movs	r7, #0
 80074fe:	9705      	str	r7, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007500:	f7ff fed4 	bl	80072ac <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	463b      	mov	r3, r7
 8007508:	463a      	mov	r2, r7
 800750a:	a905      	add	r1, sp, #20
 800750c:	f7fe fc6c 	bl	8005de8 <xQueueGenericSend>
							configASSERT( xResult );
 8007510:	2800      	cmp	r0, #0
 8007512:	d1ac      	bne.n	800746e <prvTimerTask+0x5a>
 8007514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	e7fe      	b.n	8007524 <prvTimerTask+0x110>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007526:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800752a:	9b03      	ldr	r3, [sp, #12]
 800752c:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 8095 	beq.w	8007666 <prvTimerTask+0x252>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800753c:	445b      	add	r3, fp
	if( xNextExpiryTime <= xTimeNow )
 800753e:	455b      	cmp	r3, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007540:	607b      	str	r3, [r7, #4]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007542:	bf96      	itet	ls
 8007544:	4b4f      	ldrls	r3, [pc, #316]	@ (8007684 <prvTimerTask+0x270>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007546:	6830      	ldrhi	r0, [r6, #0]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007548:	6818      	ldrls	r0, [r3, #0]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800754a:	613f      	str	r7, [r7, #16]
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800754c:	1d39      	adds	r1, r7, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800754e:	f7fe f9c9 	bl	80058e4 <vListInsert>
 8007552:	e78c      	b.n	800746e <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007554:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
					break;
 8007560:	e785      	b.n	800746e <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007562:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007566:	079a      	lsls	r2, r3, #30
 8007568:	d544      	bpl.n	80075f4 <prvTimerTask+0x1e0>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800756a:	f023 0301 	bic.w	r3, r3, #1
 800756e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8007572:	e77c      	b.n	800746e <prvTimerTask+0x5a>
	vTaskSuspendAll();
 8007574:	f7ff fce8 	bl	8006f48 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8007578:	f7ff fcfe 	bl	8006f78 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800757c:	682a      	ldr	r2, [r5, #0]
 800757e:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8007580:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8007582:	d308      	bcc.n	8007596 <prvTimerTask+0x182>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007584:	4b3f      	ldr	r3, [pc, #252]	@ (8007684 <prvTimerTask+0x270>)
	xLastTime = xTimeNow;
 8007586:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	6812      	ldr	r2, [r2, #0]
 800758e:	fab2 f282 	clz	r2, r2
 8007592:	0952      	lsrs	r2, r2, #5
 8007594:	e75d      	b.n	8007452 <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 8007596:	f7ff fef1 	bl	800737c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800759a:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 800759e:	f7ff fcdb 	bl	8006f58 <xTaskResumeAll>
 80075a2:	e764      	b.n	800746e <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 80075a4:	f7ff feea 	bl	800737c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075a8:	e778      	b.n	800749c <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 80075aa:	f7ff fcd5 	bl	8006f58 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ae:	6832      	ldr	r2, [r6, #0]
 80075b0:	68d2      	ldr	r2, [r2, #12]
 80075b2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075b6:	f10b 0104 	add.w	r1, fp, #4
 80075ba:	4608      	mov	r0, r1
 80075bc:	9101      	str	r1, [sp, #4]
 80075be:	f7fe f9a9 	bl	8005914 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075c2:	f89b 2024 	ldrb.w	r2, [fp, #36]	@ 0x24
 80075c6:	9901      	ldr	r1, [sp, #4]
 80075c8:	f012 0f04 	tst.w	r2, #4
 80075cc:	d116      	bne.n	80075fc <prvTimerTask+0x1e8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075ce:	f022 0201 	bic.w	r2, r2, #1
 80075d2:	f88b 2024 	strb.w	r2, [fp, #36]	@ 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075d6:	f8db 3020 	ldr.w	r3, [fp, #32]
 80075da:	4658      	mov	r0, fp
 80075dc:	4798      	blx	r3
}
 80075de:	e746      	b.n	800746e <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80075e0:	455b      	cmp	r3, fp
 80075e2:	d902      	bls.n	80075ea <prvTimerTask+0x1d6>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	f43f af7b 	beq.w	80074e0 <prvTimerTask+0xcc>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075ea:	6830      	ldr	r0, [r6, #0]
 80075ec:	1d39      	adds	r1, r7, #4
 80075ee:	f7fe f979 	bl	80058e4 <vListInsert>
	return xProcessTimerNow;
 80075f2:	e73c      	b.n	800746e <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 80075f4:	4638      	mov	r0, r7
 80075f6:	f7fe f8f3 	bl	80057e0 <vPortFree>
 80075fa:	e738      	b.n	800746e <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075fc:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007600:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007604:	183a      	adds	r2, r7, r0
	if( xNextExpiryTime <= xTimeNow )
 8007606:	4552      	cmp	r2, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007608:	f8cb 2004 	str.w	r2, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 800760c:	d909      	bls.n	8007622 <prvTimerTask+0x20e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800760e:	6830      	ldr	r0, [r6, #0]
 8007610:	f7fe f968 	bl	80058e4 <vListInsert>
	return xProcessTimerNow;
 8007614:	e7df      	b.n	80075d6 <prvTimerTask+0x1c2>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007616:	4b1b      	ldr	r3, [pc, #108]	@ (8007684 <prvTimerTask+0x270>)
 8007618:	1d39      	adds	r1, r7, #4
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	f7fe f962 	bl	80058e4 <vListInsert>
	return xProcessTimerNow;
 8007620:	e725      	b.n	800746e <prvTimerTask+0x5a>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007622:	ebaa 0a07 	sub.w	sl, sl, r7
 8007626:	4550      	cmp	r0, sl
 8007628:	d818      	bhi.n	800765c <prvTimerTask+0x248>
	if( xTimerQueue != NULL )
 800762a:	6822      	ldr	r2, [r4, #0]
 800762c:	b16a      	cbz	r2, 800764a <prvTimerTask+0x236>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800762e:	e9cd 7b06 	strd	r7, fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
 8007632:	2700      	movs	r7, #0
 8007634:	9705      	str	r7, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007636:	f7ff fe39 	bl	80072ac <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800763a:	6820      	ldr	r0, [r4, #0]
 800763c:	463b      	mov	r3, r7
 800763e:	463a      	mov	r2, r7
 8007640:	a905      	add	r1, sp, #20
 8007642:	f7fe fbd1 	bl	8005de8 <xQueueGenericSend>
			configASSERT( xResult );
 8007646:	2800      	cmp	r0, #0
 8007648:	d1c5      	bne.n	80075d6 <prvTimerTask+0x1c2>
 800764a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	e7fe      	b.n	800765a <prvTimerTask+0x246>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800765c:	4b09      	ldr	r3, [pc, #36]	@ (8007684 <prvTimerTask+0x270>)
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	f7fe f940 	bl	80058e4 <vListInsert>
	return xProcessTimerNow;
 8007664:	e7b7      	b.n	80075d6 <prvTimerTask+0x1c2>
 8007666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007676:	e7fe      	b.n	8007676 <prvTimerTask+0x262>
 8007678:	20004f48 	.word	0x20004f48
 800767c:	20004f38 	.word	0x20004f38
 8007680:	20004f40 	.word	0x20004f40
 8007684:	20004f44 	.word	0x20004f44

08007688 <xTimerCreateTimerTask>:
{
 8007688:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800768a:	4c23      	ldr	r4, [pc, #140]	@ (8007718 <xTimerCreateTimerTask+0x90>)
{
 800768c:	b089      	sub	sp, #36	@ 0x24
	taskENTER_CRITICAL();
 800768e:	f7fe f9b9 	bl	8005a04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007692:	6825      	ldr	r5, [r4, #0]
 8007694:	b335      	cbz	r5, 80076e4 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007696:	f7fe f9d7 	bl	8005a48 <vPortExitCritical>
	if( xTimerQueue != NULL )
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	b1cb      	cbz	r3, 80076d2 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800769e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076a0:	aa07      	add	r2, sp, #28
 80076a2:	a906      	add	r1, sp, #24
 80076a4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076aa:	f7f9 fc5d 	bl	8000f68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076ae:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80076b2:	2302      	movs	r3, #2
 80076b4:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	9a07      	ldr	r2, [sp, #28]
 80076bc:	4917      	ldr	r1, [pc, #92]	@ (800771c <xTimerCreateTimerTask+0x94>)
 80076be:	4818      	ldr	r0, [pc, #96]	@ (8007720 <xTimerCreateTimerTask+0x98>)
 80076c0:	4623      	mov	r3, r4
 80076c2:	f7ff f9f1 	bl	8006aa8 <xTaskCreateStatic>
 80076c6:	4b17      	ldr	r3, [pc, #92]	@ (8007724 <xTimerCreateTimerTask+0x9c>)
 80076c8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80076ca:	b110      	cbz	r0, 80076d2 <xTimerCreateTimerTask+0x4a>
}
 80076cc:	2001      	movs	r0, #1
 80076ce:	b009      	add	sp, #36	@ 0x24
 80076d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80076e2:	e7fe      	b.n	80076e2 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 80076e4:	4f10      	ldr	r7, [pc, #64]	@ (8007728 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 80076e6:	4e11      	ldr	r6, [pc, #68]	@ (800772c <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 80076e8:	4638      	mov	r0, r7
 80076ea:	f7fe f8dd 	bl	80058a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076ee:	4630      	mov	r0, r6
 80076f0:	f7fe f8da 	bl	80058a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076f4:	4a0e      	ldr	r2, [pc, #56]	@ (8007730 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076f6:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 80076f8:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007734 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007738 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 80076fe:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007700:	210c      	movs	r1, #12
 8007702:	4a0e      	ldr	r2, [pc, #56]	@ (800773c <xTimerCreateTimerTask+0xb4>)
 8007704:	200a      	movs	r0, #10
 8007706:	f7fe fb03 	bl	8005d10 <xQueueGenericCreateStatic>
 800770a:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800770c:	2800      	cmp	r0, #0
 800770e:	d0c2      	beq.n	8007696 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007710:	490b      	ldr	r1, [pc, #44]	@ (8007740 <xTimerCreateTimerTask+0xb8>)
 8007712:	f7fe fed1 	bl	80064b8 <vQueueAddToRegistry>
 8007716:	e7be      	b.n	8007696 <xTimerCreateTimerTask+0xe>
 8007718:	20004f40 	.word	0x20004f40
 800771c:	08009c2c 	.word	0x08009c2c
 8007720:	08007415 	.word	0x08007415
 8007724:	20004f3c 	.word	0x20004f3c
 8007728:	20004f60 	.word	0x20004f60
 800772c:	20004f4c 	.word	0x20004f4c
 8007730:	20004f48 	.word	0x20004f48
 8007734:	20004f44 	.word	0x20004f44
 8007738:	20004e78 	.word	0x20004e78
 800773c:	20004ec0 	.word	0x20004ec0
 8007740:	08009c24 	.word	0x08009c24

08007744 <xTimerCreate>:
	{
 8007744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	4607      	mov	r7, r0
 800774a:	b085      	sub	sp, #20
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800774c:	2028      	movs	r0, #40	@ 0x28
	{
 800774e:	4688      	mov	r8, r1
 8007750:	4616      	mov	r6, r2
 8007752:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007754:	f7fd ff8c 	bl	8005670 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8007758:	4604      	mov	r4, r0
 800775a:	b1e8      	cbz	r0, 8007798 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 800775c:	2300      	movs	r3, #0
 800775e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007762:	f1b8 0f00 	cmp.w	r8, #0
 8007766:	d01b      	beq.n	80077a0 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
 8007768:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 8007808 <xTimerCreate+0xc4>
	taskENTER_CRITICAL();
 800776c:	f7fe f94a 	bl	8005a04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007770:	f8d9 3000 	ldr.w	r3, [r9]
 8007774:	b1eb      	cbz	r3, 80077b2 <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
 8007776:	f7fe f967 	bl	8005a48 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800777a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
		pxNewTimer->pcTimerName = pcTimerName;
 800777c:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 800777e:	e9c4 8506 	strd	r8, r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007782:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007784:	1d20      	adds	r0, r4, #4
 8007786:	f7fe f89b 	bl	80058c0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800778a:	b12e      	cbz	r6, 8007798 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800778c:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8007790:	f043 0304 	orr.w	r3, r3, #4
 8007794:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
	}
 8007798:	4620      	mov	r0, r4
 800779a:	b005      	add	sp, #20
 800779c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80077b0:	e7fe      	b.n	80077b0 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
 80077b2:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800780c <xTimerCreate+0xc8>
			vListInitialise( &xActiveTimerList2 );
 80077b6:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007810 <xTimerCreate+0xcc>
 80077ba:	9303      	str	r3, [sp, #12]
			vListInitialise( &xActiveTimerList1 );
 80077bc:	4658      	mov	r0, fp
 80077be:	f7fe f873 	bl	80058a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077c2:	4650      	mov	r0, sl
 80077c4:	f7fe f870 	bl	80058a8 <vListInitialise>
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	9300      	str	r3, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 80077cc:	4b09      	ldr	r3, [pc, #36]	@ (80077f4 <xTimerCreate+0xb0>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077ce:	4a0a      	ldr	r2, [pc, #40]	@ (80077f8 <xTimerCreate+0xb4>)
			pxCurrentTimerList = &xActiveTimerList1;
 80077d0:	f8c3 b000 	str.w	fp, [r3]
			pxOverflowTimerList = &xActiveTimerList2;
 80077d4:	4b09      	ldr	r3, [pc, #36]	@ (80077fc <xTimerCreate+0xb8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077d6:	210c      	movs	r1, #12
			pxOverflowTimerList = &xActiveTimerList2;
 80077d8:	f8c3 a000 	str.w	sl, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077dc:	200a      	movs	r0, #10
 80077de:	4b08      	ldr	r3, [pc, #32]	@ (8007800 <xTimerCreate+0xbc>)
 80077e0:	f7fe fa96 	bl	8005d10 <xQueueGenericCreateStatic>
 80077e4:	f8c9 0000 	str.w	r0, [r9]
				if( xTimerQueue != NULL )
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d0c4      	beq.n	8007776 <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077ec:	4905      	ldr	r1, [pc, #20]	@ (8007804 <xTimerCreate+0xc0>)
 80077ee:	f7fe fe63 	bl	80064b8 <vQueueAddToRegistry>
 80077f2:	e7c0      	b.n	8007776 <xTimerCreate+0x32>
 80077f4:	20004f48 	.word	0x20004f48
 80077f8:	20004ec0 	.word	0x20004ec0
 80077fc:	20004f44 	.word	0x20004f44
 8007800:	20004e78 	.word	0x20004e78
 8007804:	08009c24 	.word	0x08009c24
 8007808:	20004f40 	.word	0x20004f40
 800780c:	20004f60 	.word	0x20004f60
 8007810:	20004f4c 	.word	0x20004f4c

08007814 <xTimerCreateStatic>:
	{
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	b085      	sub	sp, #20
			volatile size_t xSize = sizeof( StaticTimer_t );
 800781a:	2428      	movs	r4, #40	@ 0x28
 800781c:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800781e:	9c03      	ldr	r4, [sp, #12]
 8007820:	2c28      	cmp	r4, #40	@ 0x28
 8007822:	d008      	beq.n	8007836 <xTimerCreateStatic+0x22>
 8007824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	e7fe      	b.n	8007834 <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007836:	461d      	mov	r5, r3
 8007838:	9b03      	ldr	r3, [sp, #12]
		configASSERT( pxTimerBuffer );
 800783a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800783c:	b343      	cbz	r3, 8007890 <xTimerCreateStatic+0x7c>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800783e:	4616      	mov	r6, r2
 8007840:	461a      	mov	r2, r3
 8007842:	2302      	movs	r3, #2
 8007844:	460f      	mov	r7, r1
 8007846:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800784a:	b351      	cbz	r1, 80078a2 <xTimerCreateStatic+0x8e>
		if( xTimerQueue == NULL )
 800784c:	4c29      	ldr	r4, [pc, #164]	@ (80078f4 <xTimerCreateStatic+0xe0>)
 800784e:	4680      	mov	r8, r0
	taskENTER_CRITICAL();
 8007850:	f7fe f8d8 	bl	8005a04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007854:	f8d4 b000 	ldr.w	fp, [r4]
 8007858:	f1bb 0f00 	cmp.w	fp, #0
 800785c:	d02a      	beq.n	80078b4 <xTimerCreateStatic+0xa0>
	taskEXIT_CRITICAL();
 800785e:	f7fe f8f3 	bl	8005a48 <vPortExitCritical>
		pxNewTimer->pcTimerName = pcTimerName;
 8007862:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007864:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
		pxNewTimer->pcTimerName = pcTimerName;
 8007866:	f8c3 8000 	str.w	r8, [r3]
		pxNewTimer->pvTimerID = pvTimerID;
 800786a:	e9c3 7506 	strd	r7, r5, [r3, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800786e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007870:	1d18      	adds	r0, r3, #4
 8007872:	f7fe f825 	bl	80058c0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007876:	b13e      	cbz	r6, 8007888 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800787a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800787c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007880:	f043 0304 	orr.w	r3, r3, #4
 8007884:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
	}
 8007888:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800788a:	b005      	add	sp, #20
 800788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 80078a0:	e7fe      	b.n	80078a0 <xTimerCreateStatic+0x8c>
 80078a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80078b2:	e7fe      	b.n	80078b2 <xTimerCreateStatic+0x9e>
			vListInitialise( &xActiveTimerList1 );
 80078b4:	f8df a054 	ldr.w	sl, [pc, #84]	@ 800790c <xTimerCreateStatic+0xf8>
			vListInitialise( &xActiveTimerList2 );
 80078b8:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 8007910 <xTimerCreateStatic+0xfc>
			vListInitialise( &xActiveTimerList1 );
 80078bc:	4650      	mov	r0, sl
 80078be:	f7fd fff3 	bl	80058a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078c2:	4648      	mov	r0, r9
 80078c4:	f7fd fff0 	bl	80058a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80078c8:	4a0b      	ldr	r2, [pc, #44]	@ (80078f8 <xTimerCreateStatic+0xe4>)
			pxOverflowTimerList = &xActiveTimerList2;
 80078ca:	4b0c      	ldr	r3, [pc, #48]	@ (80078fc <xTimerCreateStatic+0xe8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078cc:	f8cd b000 	str.w	fp, [sp]
 80078d0:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 80078d2:	f8c2 a000 	str.w	sl, [r2]
			pxOverflowTimerList = &xActiveTimerList2;
 80078d6:	f8c3 9000 	str.w	r9, [r3]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078da:	4a09      	ldr	r2, [pc, #36]	@ (8007900 <xTimerCreateStatic+0xec>)
 80078dc:	4b09      	ldr	r3, [pc, #36]	@ (8007904 <xTimerCreateStatic+0xf0>)
 80078de:	200a      	movs	r0, #10
 80078e0:	f7fe fa16 	bl	8005d10 <xQueueGenericCreateStatic>
 80078e4:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d0b9      	beq.n	800785e <xTimerCreateStatic+0x4a>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80078ea:	4907      	ldr	r1, [pc, #28]	@ (8007908 <xTimerCreateStatic+0xf4>)
 80078ec:	f7fe fde4 	bl	80064b8 <vQueueAddToRegistry>
 80078f0:	e7b5      	b.n	800785e <xTimerCreateStatic+0x4a>
 80078f2:	bf00      	nop
 80078f4:	20004f40 	.word	0x20004f40
 80078f8:	20004f48 	.word	0x20004f48
 80078fc:	20004f44 	.word	0x20004f44
 8007900:	20004ec0 	.word	0x20004ec0
 8007904:	20004e78 	.word	0x20004e78
 8007908:	08009c24 	.word	0x08009c24
 800790c:	20004f60 	.word	0x20004f60
 8007910:	20004f4c 	.word	0x20004f4c

08007914 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8007914:	b1c0      	cbz	r0, 8007948 <xTimerGenericCommand+0x34>
{
 8007916:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8007918:	4d18      	ldr	r5, [pc, #96]	@ (800797c <xTimerGenericCommand+0x68>)
 800791a:	682c      	ldr	r4, [r5, #0]
{
 800791c:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 800791e:	b184      	cbz	r4, 8007942 <xTimerGenericCommand+0x2e>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007920:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 8007922:	e9cd 1201 	strd	r1, r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007926:	9003      	str	r0, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007928:	dc17      	bgt.n	800795a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800792a:	f7ff fcbf 	bl	80072ac <xTaskGetSchedulerState>
 800792e:	2802      	cmp	r0, #2
 8007930:	d01c      	beq.n	800796c <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007932:	2300      	movs	r3, #0
 8007934:	6828      	ldr	r0, [r5, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	a901      	add	r1, sp, #4
 800793a:	f7fe fa55 	bl	8005de8 <xQueueGenericSend>
}
 800793e:	b005      	add	sp, #20
 8007940:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8007942:	4620      	mov	r0, r4
}
 8007944:	b005      	add	sp, #20
 8007946:	bd30      	pop	{r4, r5, pc}
 8007948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8007958:	e7fe      	b.n	8007958 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800795a:	469c      	mov	ip, r3
 800795c:	4662      	mov	r2, ip
 800795e:	2300      	movs	r3, #0
 8007960:	a901      	add	r1, sp, #4
 8007962:	4620      	mov	r0, r4
 8007964:	f7fe fbc0 	bl	80060e8 <xQueueGenericSendFromISR>
}
 8007968:	b005      	add	sp, #20
 800796a:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800796c:	6828      	ldr	r0, [r5, #0]
 800796e:	9a08      	ldr	r2, [sp, #32]
 8007970:	2300      	movs	r3, #0
 8007972:	a901      	add	r1, sp, #4
 8007974:	f7fe fa38 	bl	8005de8 <xQueueGenericSend>
 8007978:	e7e4      	b.n	8007944 <xTimerGenericCommand+0x30>
 800797a:	bf00      	nop
 800797c:	20004f40 	.word	0x20004f40

08007980 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8007980:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8007982:	8840      	ldrh	r0, [r0, #2]
 8007984:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8007988:	0c00      	lsrs	r0, r0, #16
 800798a:	4770      	bx	lr

0800798c <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800798c:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800798e:	8802      	ldrh	r2, [r0, #0]
 8007990:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8007992:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8007996:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800799a:	fb02 f202 	mul.w	r2, r2, r2
 800799e:	4594      	cmp	ip, r2
{
 80079a0:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80079a2:	d919      	bls.n	80079d8 <Circle_Limitation+0x4c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80079a4:	f890 20b2 	ldrb.w	r2, [r0, #178]	@ 0xb2
 80079a8:	ebc2 621c 	rsb	r2, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80079ac:	b2d2      	uxtb	r2, r2
 80079ae:	eb00 0042 	add.w	r0, r0, r2, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80079b2:	8882      	ldrh	r2, [r0, #4]
 80079b4:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80079b8:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80079ba:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80079be:	bfbc      	itt	lt
 80079c0:	f501 41ff 	addlt.w	r1, r1, #32640	@ 0x7f80
 80079c4:	317f      	addlt	r1, #127	@ 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bfbc      	itt	lt
 80079ca:	f503 43ff 	addlt.w	r3, r3, #32640	@ 0x7f80
 80079ce:	337f      	addlt	r3, #127	@ 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80079d0:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80079d4:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 80079d8:	b289      	uxth	r1, r1
 80079da:	2000      	movs	r0, #0
 80079dc:	f361 000f 	bfi	r0, r1, #0, #16
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	f363 401f 	bfi	r0, r3, #16, #16
}
 80079e6:	b004      	add	sp, #16
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop

080079ec <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 80079f0:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 80079f2:	f8c0 3096 	str.w	r3, [r0, #150]	@ 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 80079f6:	f880 309a 	strb.w	r3, [r0, #154]	@ 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 80079fa:	f8a0 311b 	strh.w	r3, [r0, #283]	@ 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 80079fe:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
}
 8007a02:	4770      	bx	lr

08007a04 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8007a04:	b120      	cbz	r0, 8007a10 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8007a06:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8007a0a:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8007a0c:	9b00      	ldr	r3, [sp, #0]
 8007a0e:	60c3      	str	r3, [r0, #12]
  }
}
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop

08007a14 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8007a14:	b178      	cbz	r0, 8007a36 <FCP_CalcCRC+0x22>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8007a16:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8007a18:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 8007a1a:	440b      	add	r3, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007a1c:	b139      	cbz	r1, 8007a2e <FCP_CalcCRC+0x1a>
 8007a1e:	3001      	adds	r0, #1
 8007a20:	4401      	add	r1, r0
    {
      nSum += pFrame->Buffer[idx];
 8007a22:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007a26:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007a28:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8007a2a:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8007a2c:	d1f9      	bne.n	8007a22 <FCP_CalcCRC+0xe>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8007a2e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
 8007a32:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  }

  return nCRC ;
}
 8007a36:	4770      	bx	lr

08007a38 <HALL_Init>:
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
                                     pHandle->_Super.bElToMecRatio;
 8007a38:	7843      	ldrb	r3, [r0, #1]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8007a3a:	f8b0 c016 	ldrh.w	ip, [r0, #22]

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8007a3e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8007a40:	b570      	push	{r4, r5, r6, lr}
  hMaxReliableElSpeedUnit *= 2u;
 8007a42:	f8b0 e014 	ldrh.w	lr, [r0, #20]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8007a46:	fb1c fc03 	smulbb	ip, ip, r3
  hMaxReliableElSpeedUnit *= 2u;
 8007a4a:	fb1e fe03 	smulbb	lr, lr, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8007a4e:	fa1f fc8c 	uxth.w	ip, ip
  hMaxReliableElSpeedUnit *= 2u;
 8007a52:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8007a56:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8007a58:	f1bc 0f03 	cmp.w	ip, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007a5c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8007a5e:	f8a0 10c2 	strh.w	r1, [r0, #194]	@ 0xc2
  hMaxReliableElSpeedUnit *= 2u;
 8007a62:	fa1f fe8e 	uxth.w	lr, lr
  if ( hMinReliableElSpeedUnit == 0u )
 8007a66:	d969      	bls.n	8007b3c <HALL_Init+0x104>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8007a68:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8007a6c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8007a70:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007a74:	f242 7410 	movw	r4, #10000	@ 0x2710
 8007a78:	fbb4 f4fc 	udiv	r4, r4, ip
 8007a7c:	b2a5      	uxth	r5, r4
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8007a7e:	fb04 f101 	mul.w	r1, r4, r1
 8007a82:	4c30      	ldr	r4, [pc, #192]	@ (8007b44 <HALL_Init+0x10c>)
 8007a84:	f8a0 50c0 	strh.w	r5, [r0, #192]	@ 0xc0
 8007a88:	fba4 4101 	umull	r4, r1, r4, r1
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8007a8c:	4c2e      	ldr	r4, [pc, #184]	@ (8007b48 <HALL_Init+0x110>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8007a8e:	8b45      	ldrh	r5, [r0, #26]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8007a90:	f8a0 e0b0 	strh.w	lr, [r0, #176]	@ 0xb0
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8007a94:	fba4 4202 	umull	r4, r2, r4, r2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8007a98:	69c4      	ldr	r4, [r0, #28]
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8007a9a:	0892      	lsrs	r2, r2, #2
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8007a9c:	0989      	lsrs	r1, r1, #6

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8007a9e:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8007aa2:	fbb2 f2f5 	udiv	r2, r2, r5
 8007aa6:	fb04 f202 	mul.w	r2, r4, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8007aaa:	f8c0 20b4 	str.w	r2, [r0, #180]	@ 0xb4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8007aae:	040e      	lsls	r6, r1, #16
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8007ab0:	ea4f 024c 	mov.w	r2, ip, lsl #1
                       / hMaxReliableElSpeedUnit);
 8007ab4:	fbb2 f2fe 	udiv	r2, r2, lr
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8007ab8:	f8c0 20bc 	str.w	r2, [r0, #188]	@ 0xbc

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8007abc:	f890 20c6 	ldrb.w	r2, [r0, #198]	@ 0xc6
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8007ac0:	f8c0 60b8 	str.w	r6, [r0, #184]	@ 0xb8
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8007ac4:	8c84      	ldrh	r4, [r0, #36]	@ 0x24
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8007ac6:	f8a0 10ae 	strh.w	r1, [r0, #174]	@ 0xae
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8007aca:	fb05 f202 	mul.w	r2, r5, r2
 8007ace:	fbb2 f2f4 	udiv	r2, r2, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8007ad2:	699c      	ldr	r4, [r3, #24]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8007ad4:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8007ad6:	f8a0 20c4 	strh.w	r2, [r0, #196]	@ 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8007ada:	f890 2048 	ldrb.w	r2, [r0, #72]	@ 0x48
 8007ade:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8007ae2:	b289      	uxth	r1, r1
  pHandle->SensorIsReliable = true;
 8007ae4:	2401      	movs	r4, #1
 8007ae6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 8007aea:	f880 4049 	strb.w	r4, [r0, #73]	@ 0x49
 8007aee:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8007af0:	6299      	str	r1, [r3, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007af2:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8007af4:	2100      	movs	r1, #0
 8007af6:	4322      	orrs	r2, r4
 8007af8:	615a      	str	r2, [r3, #20]
 8007afa:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	f042 0204 	orr.w	r2, r2, #4
 8007b02:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8007b04:	68da      	ldr	r2, [r3, #12]
 8007b06:	f042 0202 	orr.w	r2, r2, #2
 8007b0a:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	4322      	orrs	r2, r4
 8007b10:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8007b12:	6259      	str	r1, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CCER, Channels);
 8007b14:	6a1a      	ldr	r2, [r3, #32]
 8007b16:	4322      	orrs	r2, r4
 8007b18:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	4322      	orrs	r2, r4
 8007b1e:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 8007b20:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8007b24:	b14a      	cbz	r2, 8007b3a <HALL_Init+0x102>
 8007b26:	f100 034c 	add.w	r3, r0, #76	@ 0x4c
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8007b2a:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 8007b2e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007b32:	f843 1f04 	str.w	r1, [r3, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d1fb      	bne.n	8007b32 <HALL_Init+0xfa>
  }
}
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}
 8007b3c:	2496      	movs	r4, #150	@ 0x96
    pHandle->HallTimeout = 150u;
 8007b3e:	4625      	mov	r5, r4
 8007b40:	e79d      	b.n	8007a7e <HALL_Init+0x46>
 8007b42:	bf00      	nop
 8007b44:	10624dd3 	.word	0x10624dd3
 8007b48:	aaaaaaab 	.word	0xaaaaaaab

08007b4c <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007b4c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8007b4e:	68d1      	ldr	r1, [r2, #12]
 8007b50:	f021 0102 	bic.w	r1, r1, #2

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 8007b54:	2300      	movs	r3, #0
{
 8007b56:	b4f0      	push	{r4, r5, r6, r7}

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8007b58:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	@ 0xae
 8007b5c:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 8007b5e:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 8007b60:	f880 304a 	strb.w	r3, [r0, #74]	@ 0x4a
  pHandle->Direction = POSITIVE;
 8007b64:	f880 10a2 	strb.w	r1, [r0, #162]	@ 0xa2
  pHandle->RatioInc = false;
 8007b68:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 8007b6c:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
  pHandle->FirstCapt = 0u;
 8007b70:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 8007b74:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 8007b76:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  pHandle->SensorIsReliable = true;
 8007b7a:	f880 1049 	strb.w	r1, [r0, #73]	@ 0x49
  pHandle->OVFCounter = 0u;
 8007b7e:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
  pHandle->_Super.hMecAccelUnitP = 0;
 8007b82:	8243      	strh	r3, [r0, #18]
  pHandle->CompSpeed = 0;
 8007b84:	f8a0 30ac 	strh.w	r3, [r0, #172]	@ 0xac
  WRITE_REG(TIMx->PSC, Prescaler);
 8007b88:	6294      	str	r4, [r2, #40]	@ 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8007b8a:	6253      	str	r3, [r2, #36]	@ 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007b8c:	6813      	ldr	r3, [r2, #0]
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8007b8e:	6b86      	ldr	r6, [r0, #56]	@ 0x38
 8007b90:	430b      	orrs	r3, r1
 8007b92:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8007b94:	68d3      	ldr	r3, [r2, #12]
 8007b96:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8007b98:	f043 0302 	orr.w	r3, r3, #2
 8007b9c:	60d3      	str	r3, [r2, #12]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8007b9e:	f890 7020 	ldrb.w	r7, [r0, #32]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8007ba2:	e9d0 5310 	ldrd	r5, r3, [r0, #64]	@ 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8007ba6:	e9d0 420c 	ldrd	r4, r2, [r0, #48]	@ 0x30
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8007baa:	b9ef      	cbnz	r7, 8007be8 <HALL_Clear+0x9c>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8007bac:	692d      	ldr	r5, [r5, #16]
 8007bae:	43ab      	bics	r3, r5
 8007bb0:	6933      	ldr	r3, [r6, #16]
 8007bb2:	6924      	ldr	r4, [r4, #16]
 8007bb4:	bf0c      	ite	eq
 8007bb6:	2501      	moveq	r5, #1
 8007bb8:	2500      	movne	r5, #0
 8007bba:	ea31 0303 	bics.w	r3, r1, r3
 8007bbe:	bf0c      	ite	eq
 8007bc0:	2301      	moveq	r3, #1
 8007bc2:	2300      	movne	r3, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 8007bca:	ea32 0404 	bics.w	r4, r2, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8007bce:	bf08      	it	eq
 8007bd0:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 8007bd4:	1e5a      	subs	r2, r3, #1
 8007bd6:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
 8007bda:	2a05      	cmp	r2, #5
 8007bdc:	d858      	bhi.n	8007c90 <HALL_Clear+0x144>
 8007bde:	e8df f002 	tbb	[pc, r2]
 8007be2:	2f25      	.short	0x2f25
 8007be4:	1b4d4339 	.word	0x1b4d4339
 8007be8:	6936      	ldr	r6, [r6, #16]
 8007bea:	692d      	ldr	r5, [r5, #16]
 8007bec:	43ab      	bics	r3, r5
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	bf0c      	ite	eq
 8007bf2:	2401      	moveq	r4, #1
 8007bf4:	2400      	movne	r4, #0
 8007bf6:	ea32 0303 	bics.w	r3, r2, r3
 8007bfa:	bf0c      	ite	eq
 8007bfc:	2301      	moveq	r3, #1
 8007bfe:	2300      	movne	r3, #0
 8007c00:	ea31 0606 	bics.w	r6, r1, r6
 8007c04:	bf0c      	ite	eq
 8007c06:	2201      	moveq	r2, #1
 8007c08:	2200      	movne	r2, #0
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8007c0a:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8007c0c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8007c10:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8007c14:	4313      	orrs	r3, r2
 8007c16:	e7dd      	b.n	8007bd4 <HALL_Clear+0x88>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8007c18:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007c1a:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8007c1e:	3b3f      	subs	r3, #63	@ 0x3f
 8007c20:	b21b      	sxth	r3, r3
 8007c22:	8083      	strh	r3, [r0, #4]
}
 8007c24:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8007c26:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8007c2a:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8007c2c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007c2e:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8007c32:	333f      	adds	r3, #63	@ 0x3f
 8007c34:	b21b      	sxth	r3, r3
}
 8007c36:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8007c38:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8007c3a:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8007c3e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8007c40:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007c42:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 8007c46:	3b2a      	subs	r3, #42	@ 0x2a
 8007c48:	b21b      	sxth	r3, r3
}
 8007c4a:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8007c4c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8007c4e:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8007c52:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8007c54:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007c56:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 8007c5a:	332a      	adds	r3, #42	@ 0x2a
 8007c5c:	b21b      	sxth	r3, r3
}
 8007c5e:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8007c60:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8007c62:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8007c66:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8007c68:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007c6a:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 8007c6e:	3b15      	subs	r3, #21
 8007c70:	b21b      	sxth	r3, r3
}
 8007c72:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8007c74:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8007c76:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8007c7a:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8007c7c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007c7e:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8007c82:	3315      	adds	r3, #21
 8007c84:	b21b      	sxth	r3, r3
}
 8007c86:	bcf0      	pop	{r4, r5, r6, r7}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8007c88:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8007c8a:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
}
 8007c8e:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 8007c90:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8007c92:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 8007c96:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
      break;
 8007c9a:	e7c3      	b.n	8007c24 <HALL_Clear+0xd8>

08007c9c <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8007c9c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8007ca0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8007ca4:	428a      	cmp	r2, r1
{
 8007ca6:	4603      	mov	r3, r0
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8007ca8:	8880      	ldrh	r0, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8007caa:	d00e      	beq.n	8007cca <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8007cac:	f8b3 c0aa 	ldrh.w	ip, [r3, #170]	@ 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8007cb0:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8007cb4:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8007cb6:	4408      	add	r0, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8007cb8:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8007cba:	f8b3 c0ac 	ldrh.w	ip, [r3, #172]	@ 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8007cbe:	f8a3 10aa 	strh.w	r1, [r3, #170]	@ 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8007cc2:	4460      	add	r0, ip
 8007cc4:	b200      	sxth	r0, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8007cc6:	8098      	strh	r0, [r3, #4]
}
 8007cc8:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8007cca:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 8007cce:	4410      	add	r0, r2
 8007cd0:	b200      	sxth	r0, r0
 8007cd2:	8098      	strh	r0, [r3, #4]
}
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop

08007cd8 <HALL_CalcAvrgMecSpeedUnit>:
{
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8007cdc:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007ce0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
{
 8007ce2:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 8007ce4:	b180      	cbz	r0, 8007d08 <HALL_CalcAvrgMecSpeedUnit+0x30>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8007ce8:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	@ 0xae
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d812      	bhi.n	8007d16 <HALL_CalcAvrgMecSpeedUnit+0x3e>
      pHandle->_Super.hElSpeedDpp = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	81e3      	strh	r3, [r4, #14]
            pHandle->CompSpeed = 0;
 8007cf4:	2300      	movs	r3, #0
      *hMecSpeedUnit = 0;
 8007cf6:	802b      	strh	r3, [r5, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f001 f81a 	bl	8008d34 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007d00:	f9b5 3000 	ldrsh.w	r3, [r5]
 8007d04:	81a3      	strh	r3, [r4, #12]
}
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007d08:	78e3      	ldrb	r3, [r4, #3]
 8007d0a:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 8007d0c:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 8007d0e:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 8007d10:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007d12:	81a3      	strh	r3, [r4, #12]
}
 8007d14:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8007d16:	f9b4 20a4 	ldrsh.w	r2, [r4, #164]	@ 0xa4
 8007d1a:	81e2      	strh	r2, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8007d1c:	2a00      	cmp	r2, #0
 8007d1e:	d0e9      	beq.n	8007cf4 <HALL_CalcAvrgMecSpeedUnit+0x1c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8007d20:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d01f      	beq.n	8007d68 <HALL_CalcAvrgMecSpeedUnit+0x90>
          if (pHandle->HallMtpa == true)
 8007d28:	f894 30c7 	ldrb.w	r3, [r4, #199]	@ 0xc7
 8007d2c:	b9d3      	cbnz	r3, 8007d64 <HALL_CalcAvrgMecSpeedUnit+0x8c>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8007d2e:	88a3      	ldrh	r3, [r4, #4]
 8007d30:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	@ 0xaa
 8007d34:	1ac9      	subs	r1, r1, r3
 8007d36:	b209      	sxth	r1, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 8007d38:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	@ 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8007d3c:	f8a4 10a8 	strh.w	r1, [r4, #168]	@ 0xa8
            pHandle->CompSpeed = ( int16_t )
 8007d40:	fb91 f1f3 	sdiv	r1, r1, r3
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8007d44:	8b63      	ldrh	r3, [r4, #26]
 8007d46:	f8a4 10ac 	strh.w	r1, [r4, #172]	@ 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8007d4a:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8007d4e:	69e1      	ldr	r1, [r4, #28]
 8007d50:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8007d52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007d56:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8007d58:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8007d5c:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8007d60:	b21b      	sxth	r3, r3
 8007d62:	e7c8      	b.n	8007cf6 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 8007d64:	2100      	movs	r1, #0
 8007d66:	e7ed      	b.n	8007d44 <HALL_CalcAvrgMecSpeedUnit+0x6c>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8007d68:	f9b4 30b0 	ldrsh.w	r3, [r4, #176]	@ 0xb0
 8007d6c:	e7c3      	b.n	8007cf6 <HALL_CalcAvrgMecSpeedUnit+0x1e>
 8007d6e:	bf00      	nop

08007d70 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8007d70:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d049      	beq.n	8007e0c <HALL_TIMx_CC_IRQHandler+0x9c>
{
 8007d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8007d7a:	f890 c020 	ldrb.w	ip, [r0, #32]
    bPrevHallState = pHandle->HallState;
 8007d7e:	f890 20a6 	ldrb.w	r2, [r0, #166]	@ 0xa6
    PrevDirection = pHandle->Direction;
 8007d82:	f990 10a2 	ldrsb.w	r1, [r0, #162]	@ 0xa2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8007d86:	e9d0 740e 	ldrd	r7, r4, [r0, #56]	@ 0x38
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8007d8a:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	@ 0x40
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8007d8e:	e9d0 e50c 	ldrd	lr, r5, [r0, #48]	@ 0x30
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8007d92:	f1bc 0f00 	cmp.w	ip, #0
 8007d96:	d023      	beq.n	8007de0 <HALL_TIMx_CC_IRQHandler+0x70>
 8007d98:	693f      	ldr	r7, [r7, #16]
 8007d9a:	6936      	ldr	r6, [r6, #16]
 8007d9c:	43b3      	bics	r3, r6
 8007d9e:	f8de 3010 	ldr.w	r3, [lr, #16]
 8007da2:	bf0c      	ite	eq
 8007da4:	2601      	moveq	r6, #1
 8007da6:	2600      	movne	r6, #0
 8007da8:	ea35 0303 	bics.w	r3, r5, r3
 8007dac:	bf0c      	ite	eq
 8007dae:	2301      	moveq	r3, #1
 8007db0:	2300      	movne	r3, #0
 8007db2:	ea34 0707 	bics.w	r7, r4, r7
 8007db6:	bf0c      	ite	eq
 8007db8:	2401      	moveq	r4, #1
 8007dba:	2400      	movne	r4, #0
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8007dbc:	00a4      	lsls	r4, r4, #2
 8007dbe:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8007dc2:	f084 0404 	eor.w	r4, r4, #4
 8007dc6:	4323      	orrs	r3, r4
 8007dc8:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
    switch ( pHandle->HallState )
 8007dcc:	3b01      	subs	r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8007dce:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
    switch ( pHandle->HallState )
 8007dd0:	2b05      	cmp	r3, #5
 8007dd2:	f200 8154 	bhi.w	800807e <HALL_TIMx_CC_IRQHandler+0x30e>
 8007dd6:	e8df f003 	tbb	[pc, r3]
 8007dda:	5f6e      	.short	0x5f6e
 8007ddc:	1b354450 	.word	0x1b354450
 8007de0:	6936      	ldr	r6, [r6, #16]
 8007de2:	43b3      	bics	r3, r6
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f8de 6010 	ldr.w	r6, [lr, #16]
 8007dea:	bf0c      	ite	eq
 8007dec:	2701      	moveq	r7, #1
 8007dee:	2700      	movne	r7, #0
 8007df0:	ea34 0303 	bics.w	r3, r4, r3
 8007df4:	bf0c      	ite	eq
 8007df6:	2301      	moveq	r3, #1
 8007df8:	2300      	movne	r3, #0
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8007dfa:	005b      	lsls	r3, r3, #1
 8007dfc:	ea35 0606 	bics.w	r6, r5, r6
 8007e00:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8007e04:	bf08      	it	eq
 8007e06:	f043 0301 	orreq.w	r3, r3, #1
 8007e0a:	e7dd      	b.n	8007dc8 <HALL_TIMx_CC_IRQHandler+0x58>
}
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 8007e10:	2a02      	cmp	r2, #2
 8007e12:	d07a      	beq.n	8007f0a <HALL_TIMx_CC_IRQHandler+0x19a>
        else if ( bPrevHallState == STATE_4 )
 8007e14:	2a04      	cmp	r2, #4
 8007e16:	f000 8098 	beq.w	8007f4a <HALL_TIMx_CC_IRQHandler+0x1da>
    if (pHandle->Direction != PrevDirection)
 8007e1a:	460a      	mov	r2, r1
    if (pHandle->HallMtpa == true)
 8007e1c:	f890 30c7 	ldrb.w	r3, [r0, #199]	@ 0xc7
 8007e20:	b113      	cbz	r3, 8007e28 <HALL_TIMx_CC_IRQHandler+0xb8>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8007e22:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	@ 0xaa
 8007e26:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 8007e28:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f040 8097 	bne.w	8007f60 <HALL_TIMx_CC_IRQHandler+0x1f0>
      pHandle->FirstCapt++;
 8007e32:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 8007e36:	3301      	adds	r3, #1
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8007e3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
}
 8007e40:	2000      	movs	r0, #0
 8007e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( bPrevHallState == STATE_4 )
 8007e44:	2a04      	cmp	r2, #4
 8007e46:	d069      	beq.n	8007f1c <HALL_TIMx_CC_IRQHandler+0x1ac>
        else if ( bPrevHallState == STATE_1 )
 8007e48:	2a01      	cmp	r2, #1
 8007e4a:	d1e6      	bne.n	8007e1a <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8007e4c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007e4e:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 8007e52:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8007e54:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8007e56:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8007e5a:	b21b      	sxth	r3, r3
 8007e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e60:	e040      	b.n	8007ee4 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_6 )
 8007e62:	2a06      	cmp	r2, #6
 8007e64:	d068      	beq.n	8007f38 <HALL_TIMx_CC_IRQHandler+0x1c8>
        else if ( bPrevHallState == STATE_5 )
 8007e66:	2a05      	cmp	r2, #5
 8007e68:	d1d7      	bne.n	8007e1a <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->Direction = NEGATIVE;
 8007e6a:	22ff      	movs	r2, #255	@ 0xff
 8007e6c:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8007e70:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8007e74:	f04f 32ff 	mov.w	r2, #4294967295
 8007e78:	e034      	b.n	8007ee4 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_1 )
 8007e7a:	2a01      	cmp	r2, #1
 8007e7c:	d054      	beq.n	8007f28 <HALL_TIMx_CC_IRQHandler+0x1b8>
        else if ( bPrevHallState == STATE_2 )
 8007e7e:	2a02      	cmp	r2, #2
 8007e80:	d1cb      	bne.n	8007e1a <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8007e82:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007e84:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = NEGATIVE;
 8007e88:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8007e8a:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = NEGATIVE;
 8007e8c:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8007e90:	b21b      	sxth	r3, r3
 8007e92:	f04f 32ff 	mov.w	r2, #4294967295
 8007e96:	e025      	b.n	8007ee4 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_3 )
 8007e98:	2a03      	cmp	r2, #3
 8007e9a:	d02d      	beq.n	8007ef8 <HALL_TIMx_CC_IRQHandler+0x188>
        else if ( bPrevHallState == STATE_6 )
 8007e9c:	2a06      	cmp	r2, #6
 8007e9e:	d1bc      	bne.n	8007e1a <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8007ea0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007ea2:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 8007ea6:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8007ea8:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 8007eaa:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8007eae:	b21b      	sxth	r3, r3
 8007eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb4:	e016      	b.n	8007ee4 <HALL_TIMx_CC_IRQHandler+0x174>
        if ( bPrevHallState == STATE_5 )
 8007eb6:	2a05      	cmp	r2, #5
 8007eb8:	d00c      	beq.n	8007ed4 <HALL_TIMx_CC_IRQHandler+0x164>
        else if ( bPrevHallState == STATE_3 )
 8007eba:	2a03      	cmp	r2, #3
 8007ebc:	d1ad      	bne.n	8007e1a <HALL_TIMx_CC_IRQHandler+0xaa>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8007ebe:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007ec0:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 8007ec4:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8007ec6:	3355      	adds	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 8007ec8:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8007ecc:	b21b      	sxth	r3, r3
 8007ece:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed2:	e007      	b.n	8007ee4 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8007ed4:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007ed6:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 8007eda:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8007edc:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 8007ede:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8007ee2:	b21b      	sxth	r3, r3
    if (pHandle->Direction != PrevDirection)
 8007ee4:	428a      	cmp	r2, r1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8007ee6:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
    if (pHandle->Direction != PrevDirection)
 8007eea:	d096      	beq.n	8007e1a <HALL_TIMx_CC_IRQHandler+0xaa>
      pHandle->BufferFilled = 0 ;
 8007eec:	2300      	movs	r3, #0
 8007eee:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8007ef2:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
 8007ef6:	e791      	b.n	8007e1c <HALL_TIMx_CC_IRQHandler+0xac>
                                                  + S16_60_PHASE_SHIFT );
 8007ef8:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007efa:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = POSITIVE;
 8007efe:	2201      	movs	r2, #1
                                                  + S16_60_PHASE_SHIFT );
 8007f00:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = POSITIVE;
 8007f02:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 8007f06:	b21b      	sxth	r3, r3
 8007f08:	e7ec      	b.n	8007ee4 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8007f0a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007f0c:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = POSITIVE;
 8007f10:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8007f12:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = POSITIVE;
 8007f14:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8007f18:	b21b      	sxth	r3, r3
 8007f1a:	e7e3      	b.n	8007ee4 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->Direction = POSITIVE;
 8007f1c:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8007f1e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 8007f22:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8007f26:	e7dd      	b.n	8007ee4 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8007f28:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 8007f2a:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8007f2e:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
 8007f32:	3355      	adds	r3, #85	@ 0x55
 8007f34:	b21b      	sxth	r3, r3
 8007f36:	e7d5      	b.n	8007ee4 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8007f38:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007f3a:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 8007f3e:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8007f40:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 8007f42:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8007f46:	b21b      	sxth	r3, r3
 8007f48:	e7cc      	b.n	8007ee4 <HALL_TIMx_CC_IRQHandler+0x174>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8007f4a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8007f4c:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 8007f50:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8007f52:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8007f54:	f880 20a2 	strb.w	r2, [r0, #162]	@ 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8007f58:	b21b      	sxth	r3, r3
 8007f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5e:	e7c1      	b.n	8007ee4 <HALL_TIMx_CC_IRQHandler+0x174>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8007f60:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8007f64:	f890 5026 	ldrb.w	r5, [r0, #38]	@ 0x26
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	d205      	bcs.n	8007f78 <HALL_TIMx_CC_IRQHandler+0x208>
        pHandle->BufferFilled++;
 8007f6c:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8007f70:	3301      	adds	r3, #1
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
 8007f78:	6b66      	ldr	r6, [r4, #52]	@ 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8007f7a:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8007f7c:	f890 304e 	ldrb.w	r3, [r0, #78]	@ 0x4e
      if ( pHandle->OVFCounter != 0u )
 8007f80:	f890 104e 	ldrb.w	r1, [r0, #78]	@ 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8007f84:	041b      	lsls	r3, r3, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8007f86:	b2bf      	uxth	r7, r7
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8007f88:	fa13 f386 	uxtah	r3, r3, r6
      if ( pHandle->OVFCounter != 0u )
 8007f8c:	f001 0cff 	and.w	ip, r1, #255	@ 0xff
 8007f90:	2900      	cmp	r1, #0
 8007f92:	d044      	beq.n	800801e <HALL_TIMx_CC_IRQHandler+0x2ae>
        if ( pHandle->RatioInc )
 8007f94:	f890 104b 	ldrb.w	r1, [r0, #75]	@ 0x4b
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	d04a      	beq.n	8008032 <HALL_TIMx_CC_IRQHandler+0x2c2>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	f880 104b 	strb.w	r1, [r0, #75]	@ 0x4b
        hAux = hPrscBuf + 1u;
 8007fa2:	1c79      	adds	r1, r7, #1
        wCaptBuf *= hAux;
 8007fa4:	b289      	uxth	r1, r1
 8007fa6:	fb01 f303 	mul.w	r3, r1, r3
        if ( wCaptBuf < pHandle->MinPeriod )
 8007faa:	f8d0 10bc 	ldr.w	r1, [r0, #188]	@ 0xbc
 8007fae:	4299      	cmp	r1, r3
 8007fb0:	d830      	bhi.n	8008014 <HALL_TIMx_CC_IRQHandler+0x2a4>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007fb2:	f890 1098 	ldrb.w	r1, [r0, #152]	@ 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8007fb6:	f8d0 60b8 	ldr.w	r6, [r0, #184]	@ 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007fba:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8007fbe:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8007fc2:	429e      	cmp	r6, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007fc4:	f8dc 7050 	ldr.w	r7, [ip, #80]	@ 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8007fc8:	bf88      	it	hi
 8007fca:	fb02 f603 	mulhi.w	r6, r2, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007fce:	eba4 0407 	sub.w	r4, r4, r7
          pHandle->SpeedFIFOIdx++;
 8007fd2:	f101 0101 	add.w	r1, r1, #1
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007fd6:	f8c0 409c 	str.w	r4, [r0, #156]	@ 0x9c
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 8007fda:	bf94      	ite	ls
 8007fdc:	4356      	mulls	r6, r2
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8007fde:	19a4      	addhi	r4, r4, r6
          pHandle->SpeedFIFOIdx++;
 8007fe0:	b2c9      	uxtb	r1, r1
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8007fe2:	bf88      	it	hi
 8007fe4:	f8c0 409c 	strhi.w	r4, [r0, #156]	@ 0x9c
 8007fe8:	f8cc 6050 	str.w	r6, [ip, #80]	@ 0x50
            pHandle->SpeedFIFOIdx = 0u;
 8007fec:	428d      	cmp	r5, r1
 8007fee:	bf08      	it	eq
 8007ff0:	2100      	moveq	r1, #0
 8007ff2:	f880 1098 	strb.w	r1, [r0, #152]	@ 0x98
          if ( pHandle->SensorIsReliable) 
 8007ff6:	f890 1049 	ldrb.w	r1, [r0, #73]	@ 0x49
 8007ffa:	b331      	cbz	r1, 800804a <HALL_TIMx_CC_IRQHandler+0x2da>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8007ffc:	f890 404d 	ldrb.w	r4, [r0, #77]	@ 0x4d
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8008000:	f8d0 10b4 	ldr.w	r1, [r0, #180]	@ 0xb4
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8008004:	42a5      	cmp	r5, r4
 8008006:	d931      	bls.n	800806c <HALL_TIMx_CC_IRQHandler+0x2fc>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8008008:	fbb1 f1f3 	udiv	r1, r1, r3
 800800c:	fb11 f102 	smulbb	r1, r1, r2
 8008010:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
      pHandle->OVFCounter = 0u;
 8008014:	2300      	movs	r3, #0
 8008016:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
}
 800801a:	2000      	movs	r0, #0
 800801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 800801e:	f890 104a 	ldrb.w	r1, [r0, #74]	@ 0x4a
 8008022:	b1a9      	cbz	r1, 8008050 <HALL_TIMx_CC_IRQHandler+0x2e0>
          hAux = hPrscBuf + 2u;
 8008024:	1cb9      	adds	r1, r7, #2
          wCaptBuf *= hAux;
 8008026:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 8008028:	f880 c04a 	strb.w	ip, [r0, #74]	@ 0x4a
          wCaptBuf *= hAux;
 800802c:	fb01 f303 	mul.w	r3, r1, r3
          pHandle->RatioDec = false;
 8008030:	e7bb      	b.n	8007faa <HALL_TIMx_CC_IRQHandler+0x23a>
 8008032:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8008034:	f8b0 60ae 	ldrh.w	r6, [r0, #174]	@ 0xae
 8008038:	428e      	cmp	r6, r1
 800803a:	d9b2      	bls.n	8007fa2 <HALL_TIMx_CC_IRQHandler+0x232>
 800803c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 800803e:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8008040:	62a1      	str	r1, [r4, #40]	@ 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8008042:	2101      	movs	r1, #1
 8008044:	f880 104b 	strb.w	r1, [r0, #75]	@ 0x4b
 8008048:	e7ab      	b.n	8007fa2 <HALL_TIMx_CC_IRQHandler+0x232>
            pHandle->AvrElSpeedDpp = 0;
 800804a:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800804e:	e7e1      	b.n	8008014 <HALL_TIMx_CC_IRQHandler+0x2a4>
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8008050:	b2b6      	uxth	r6, r6
 8008052:	f5b6 4faa 	cmp.w	r6, #21760	@ 0x5500
 8008056:	d2a4      	bcs.n	8007fa2 <HALL_TIMx_CC_IRQHandler+0x232>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8008058:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 800805a:	2900      	cmp	r1, #0
 800805c:	d0a1      	beq.n	8007fa2 <HALL_TIMx_CC_IRQHandler+0x232>
 800805e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8008060:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8008062:	62a1      	str	r1, [r4, #40]	@ 0x28
              pHandle->RatioDec = true;
 8008064:	2101      	movs	r1, #1
 8008066:	f880 104a 	strb.w	r1, [r0, #74]	@ 0x4a
 800806a:	e79a      	b.n	8007fa2 <HALL_TIMx_CC_IRQHandler+0x232>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 800806c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8008070:	fb93 f3f5 	sdiv	r3, r3, r5
 8008074:	fb91 f1f3 	sdiv	r1, r1, r3
 8008078:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800807c:	e7ca      	b.n	8008014 <HALL_TIMx_CC_IRQHandler+0x2a4>
        pHandle->SensorIsReliable = false;
 800807e:	2300      	movs	r3, #0
 8008080:	f880 3049 	strb.w	r3, [r0, #73]	@ 0x49
        break;
 8008084:	e6c9      	b.n	8007e1a <HALL_TIMx_CC_IRQHandler+0xaa>
 8008086:	bf00      	nop

08008088 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8008088:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800808c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  if ( pHandle->SensorIsReliable )
 800808e:	b1db      	cbz	r3, 80080c8 <HALL_TIMx_UP_IRQHandler+0x40>
{
 8008090:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->OVFCounter++;
 8008092:	f890 204e 	ldrb.w	r2, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8008096:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	@ 0xc0
    pHandle->OVFCounter++;
 800809a:	3201      	adds	r2, #1
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80080a2:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	@ 0xc2
  return (uint32_t)(READ_REG(TIMx->PSC));
 80080a6:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 80080a8:	f890 104e 	ldrb.w	r1, [r0, #78]	@ 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80080ac:	fb02 f303 	mul.w	r3, r2, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 80080b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80080b4:	fb04 2202 	mla	r2, r4, r2, r2
 80080b8:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 80080bc:	b29b      	uxth	r3, r3
 80080be:	4299      	cmp	r1, r3
 80080c0:	d204      	bcs.n	80080cc <HALL_TIMx_UP_IRQHandler+0x44>
}
 80080c2:	2000      	movs	r0, #0
 80080c4:	bcf0      	pop	{r4, r5, r6, r7}
 80080c6:	4770      	bx	lr
 80080c8:	2000      	movs	r0, #0
 80080ca:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80080cc:	f890 7020 	ldrb.w	r7, [r0, #32]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80080d0:	6c05      	ldr	r5, [r0, #64]	@ 0x40
      pHandle->_Super.hElSpeedDpp = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	81c3      	strh	r3, [r0, #14]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80080d6:	e9d0 620e 	ldrd	r6, r2, [r0, #56]	@ 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80080da:	e9d0 410c 	ldrd	r4, r1, [r0, #48]	@ 0x30
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80080de:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80080e0:	b9ef      	cbnz	r7, 800811e <HALL_TIMx_UP_IRQHandler+0x96>
 80080e2:	692d      	ldr	r5, [r5, #16]
 80080e4:	43ab      	bics	r3, r5
 80080e6:	6933      	ldr	r3, [r6, #16]
 80080e8:	6924      	ldr	r4, [r4, #16]
 80080ea:	bf0c      	ite	eq
 80080ec:	2501      	moveq	r5, #1
 80080ee:	2500      	movne	r5, #0
 80080f0:	ea32 0303 	bics.w	r3, r2, r3
 80080f4:	bf0c      	ite	eq
 80080f6:	2301      	moveq	r3, #1
 80080f8:	2300      	movne	r3, #0
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 8008100:	ea31 0404 	bics.w	r4, r1, r4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008104:	bf08      	it	eq
 8008106:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 800810a:	1e5a      	subs	r2, r3, #1
 800810c:	f880 30a6 	strb.w	r3, [r0, #166]	@ 0xa6
 8008110:	2a05      	cmp	r2, #5
 8008112:	d867      	bhi.n	80081e4 <HALL_TIMx_UP_IRQHandler+0x15c>
 8008114:	e8df f002 	tbb	[pc, r2]
 8008118:	4a51585f 	.word	0x4a51585f
 800811c:	1b43      	.short	0x1b43
 800811e:	6936      	ldr	r6, [r6, #16]
 8008120:	692d      	ldr	r5, [r5, #16]
 8008122:	43ab      	bics	r3, r5
 8008124:	6923      	ldr	r3, [r4, #16]
 8008126:	bf0c      	ite	eq
 8008128:	2401      	moveq	r4, #1
 800812a:	2400      	movne	r4, #0
 800812c:	ea31 0303 	bics.w	r3, r1, r3
 8008130:	bf0c      	ite	eq
 8008132:	2301      	moveq	r3, #1
 8008134:	2300      	movne	r3, #0
 8008136:	ea32 0606 	bics.w	r6, r2, r6
 800813a:	bf0c      	ite	eq
 800813c:	2201      	moveq	r2, #1
 800813e:	2200      	movne	r2, #0
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8008140:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8008142:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8008146:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800814a:	4313      	orrs	r3, r2
 800814c:	e7dd      	b.n	800810a <HALL_TIMx_UP_IRQHandler+0x82>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 800814e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8008150:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8008154:	3b3f      	subs	r3, #63	@ 0x3f
 8008156:	b21b      	sxth	r3, r3
 8008158:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800815a:	f890 4026 	ldrb.w	r4, [r0, #38]	@ 0x26
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800815e:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8008162:	f8a0 30aa 	strh.w	r3, [r0, #170]	@ 0xaa
      pHandle->OVFCounter = 0u;
 8008166:	2100      	movs	r1, #0
 8008168:	f880 104e 	strb.w	r1, [r0, #78]	@ 0x4e
      pHandle->FirstCapt = 0u;
 800816c:	f880 104c 	strb.w	r1, [r0, #76]	@ 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8008170:	b14c      	cbz	r4, 8008186 <HALL_TIMx_UP_IRQHandler+0xfe>
 8008172:	f100 034c 	add.w	r3, r0, #76	@ 0x4c
 8008176:	eb03 0184 	add.w	r1, r3, r4, lsl #2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 800817a:	f843 2f04 	str.w	r2, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800817e:	4299      	cmp	r1, r3
 8008180:	d1fb      	bne.n	800817a <HALL_TIMx_UP_IRQHandler+0xf2>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8008182:	fb02 f404 	mul.w	r4, r2, r4
      pHandle->BufferFilled = 0 ;
 8008186:	2300      	movs	r3, #0
 8008188:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
      pHandle->SpeedFIFOIdx = 0;
 800818c:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8008190:	f8c0 409c 	str.w	r4, [r0, #156]	@ 0x9c
      pHandle->AvrElSpeedDpp = 0;
 8008194:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
}
 8008198:	bcf0      	pop	{r4, r5, r6, r7}
 800819a:	2000      	movs	r0, #0
 800819c:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 800819e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80081a0:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 80081a4:	3315      	adds	r3, #21
 80081a6:	b21b      	sxth	r3, r3
 80081a8:	8083      	strh	r3, [r0, #4]
      break;
 80081aa:	e7d6      	b.n	800815a <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80081ac:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80081ae:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 80081b2:	3b15      	subs	r3, #21
 80081b4:	b21b      	sxth	r3, r3
 80081b6:	8083      	strh	r3, [r0, #4]
      break;
 80081b8:	e7cf      	b.n	800815a <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80081ba:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80081bc:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 80081c0:	332a      	adds	r3, #42	@ 0x2a
 80081c2:	b21b      	sxth	r3, r3
 80081c4:	8083      	strh	r3, [r0, #4]
      break;
 80081c6:	e7c8      	b.n	800815a <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80081c8:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80081ca:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 80081ce:	3b2a      	subs	r3, #42	@ 0x2a
 80081d0:	b21b      	sxth	r3, r3
 80081d2:	8083      	strh	r3, [r0, #4]
      break;
 80081d4:	e7c1      	b.n	800815a <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80081d6:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80081d8:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80081dc:	333f      	adds	r3, #63	@ 0x3f
 80081de:	b21b      	sxth	r3, r3
 80081e0:	8083      	strh	r3, [r0, #4]
      break;
 80081e2:	e7ba      	b.n	800815a <HALL_TIMx_UP_IRQHandler+0xd2>
      pHandle->SensorIsReliable = false;
 80081e4:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80081e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 80081ea:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
      break;
 80081ee:	e7b4      	b.n	800815a <HALL_TIMx_UP_IRQHandler+0xd2>

080081f0 <ICS_GetPhaseCurrents>:
__weak void ICS_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  int32_t aux;
  uint16_t reg;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80081f0:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80081f2:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->CCER, Channels);
 80081f4:	6a13      	ldr	r3, [r2, #32]
{
 80081f6:	b510      	push	{r4, lr}
 80081f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  /* Ia = (hPhaseAOffset)-(PHASE_A_ADC_CHANNEL vale)  */
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 80081fc:	4c1d      	ldr	r4, [pc, #116]	@ (8008274 <ICS_GetPhaseCurrents+0x84>)
 80081fe:	6213      	str	r3, [r2, #32]
 8008200:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8008202:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c

  /* Saturation of Ia */
  if ( aux < -INT16_MAX )
 8008204:	4a1c      	ldr	r2, [pc, #112]	@ (8008278 <ICS_GetPhaseCurrents+0x88>)
  reg = ( uint16_t )( ( ADC1->JDR1 ) << 1 );
 8008206:	005b      	lsls	r3, r3, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseAOffset );
 8008208:	b29b      	uxth	r3, r3
 800820a:	1b1b      	subs	r3, r3, r4
  if ( aux < -INT16_MAX )
 800820c:	4293      	cmp	r3, r2
 800820e:	db06      	blt.n	800821e <ICS_GetPhaseCurrents+0x2e>
  {
    pStator_Currents->a = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 8008210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008214:	db2a      	blt.n	800826c <ICS_GetPhaseCurrents+0x7c>
 8008216:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800821a:	469e      	mov	lr, r3
 800821c:	e002      	b.n	8008224 <ICS_GetPhaseCurrents+0x34>
 800821e:	f248 0301 	movw	r3, #32769	@ 0x8001
 8008222:	4696      	mov	lr, r2
  {
    pStator_Currents->a = ( int16_t )aux;
  }

  /* Ib = (hPhaseBOffset)-(PHASE_B_ADC_CHANNEL value) */
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8008224:	4a15      	ldr	r2, [pc, #84]	@ (800827c <ICS_GetPhaseCurrents+0x8c>)
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8008226:	6e04      	ldr	r4, [r0, #96]	@ 0x60
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 8008228:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
    pStator_Currents->a = -INT16_MAX;
 800822a:	f8a1 e000 	strh.w	lr, [r1]
  reg = ( uint16_t )( ( ADC2->JDR1 ) << 1 );
 800822e:	0052      	lsls	r2, r2, #1
  aux = ( int32_t )( reg ) - ( int32_t )( pHandle->PhaseBOffset );
 8008230:	b292      	uxth	r2, r2
 8008232:	1b12      	subs	r2, r2, r4

  /* Saturation of Ib */
  if ( aux < -INT16_MAX )
 8008234:	4c10      	ldr	r4, [pc, #64]	@ (8008278 <ICS_GetPhaseCurrents+0x88>)
 8008236:	42a2      	cmp	r2, r4
 8008238:	db06      	blt.n	8008248 <ICS_GetPhaseCurrents+0x58>
  {
    pStator_Currents->b = -INT16_MAX;
  }
  else  if ( aux > INT16_MAX )
 800823a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800823e:	db11      	blt.n	8008264 <ICS_GetPhaseCurrents+0x74>
 8008240:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008244:	4694      	mov	ip, r2
 8008246:	e002      	b.n	800824e <ICS_GetPhaseCurrents+0x5e>
 8008248:	46a4      	mov	ip, r4
 800824a:	f248 0201 	movw	r2, #32769	@ 0x8001
    pStator_Currents->b = ( int16_t )aux;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800824e:	4413      	add	r3, r2
 8008250:	425b      	negs	r3, r3
    pStator_Currents->b = -INT16_MAX;
 8008252:	f8a1 c002 	strh.w	ip, [r1, #2]
  pHandle->_Super.Ia = pStator_Currents->a;
 8008256:	f8a0 e048 	strh.w	lr, [r0, #72]	@ 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 800825a:	f8a0 c04a 	strh.w	ip, [r0, #74]	@ 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800825e:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c

}
 8008262:	bd10      	pop	{r4, pc}
    pStator_Currents->b = ( int16_t )aux;
 8008264:	fa0f fc82 	sxth.w	ip, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8008268:	b292      	uxth	r2, r2
 800826a:	e7f0      	b.n	800824e <ICS_GetPhaseCurrents+0x5e>
    pStator_Currents->a = ( int16_t )aux;
 800826c:	fa0f fe83 	sxth.w	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8008270:	b29b      	uxth	r3, r3
 8008272:	e7d7      	b.n	8008224 <ICS_GetPhaseCurrents+0x34>
 8008274:	40012000 	.word	0x40012000
 8008278:	ffff8001 	.word	0xffff8001
 800827c:	40012100 	.word	0x40012100

08008280 <ICS_HFCurrentsCalibration>:
* @retval Always returns {0,0} in ab_t format
*/
__weak void ICS_HFCurrentsCalibration( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008280:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	6a13      	ldr	r3, [r2, #32]
 8008286:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800828a:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger */
  LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800828c:	f890 3066 	ldrb.w	r3, [r0, #102]	@ 0x66
 8008290:	2b0f      	cmp	r3, #15
 8008292:	d815      	bhi.n	80082c0 <ICS_HFCurrentsCalibration+0x40>
  {
    pHandle->PhaseAOffset += ADC1->JDR1;
 8008294:	4a0c      	ldr	r2, [pc, #48]	@ (80082c8 <ICS_HFCurrentsCalibration+0x48>)
 8008296:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
{
 8008298:	b410      	push	{r4}
    pHandle->PhaseAOffset += ADC1->JDR1;
 800829a:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
 800829c:	4423      	add	r3, r4
 800829e:	65c3      	str	r3, [r0, #92]	@ 0x5c
    pHandle->PhaseBOffset += ADC2->JDR1;
 80082a0:	f8d2 413c 	ldr.w	r4, [r2, #316]	@ 0x13c
    pHandle->PolarizationCounter++;
 80082a4:	f890 3066 	ldrb.w	r3, [r0, #102]	@ 0x66
    pHandle->PhaseBOffset += ADC2->JDR1;
 80082a8:	6e02      	ldr	r2, [r0, #96]	@ 0x60
    pHandle->PolarizationCounter++;
 80082aa:	3301      	adds	r3, #1
 80082ac:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += ADC2->JDR1;
 80082ae:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80082b0:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80082b4:	2300      	movs	r3, #0
    pHandle->PhaseBOffset += ADC2->JDR1;
 80082b6:	6602      	str	r2, [r0, #96]	@ 0x60
  pStator_Currents->b = 0;
}
 80082b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 80082bc:	600b      	str	r3, [r1, #0]
}
 80082be:	4770      	bx	lr
  pStator_Currents->a = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	600b      	str	r3, [r1, #0]
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	40012000 	.word	0x40012000

080082cc <ICS_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80082cc:	6f01      	ldr	r1, [r0, #112]	@ 0x70
 80082ce:	68cb      	ldr	r3, [r1, #12]
{
 80082d0:	b410      	push	{r4}
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80082da:	f891 202c 	ldrb.w	r2, [r1, #44]	@ 0x2c
 80082de:	b132      	cbz	r2, 80082ee <ICS_Init+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80082e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80082e4:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80082ec:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80082ee:	695a      	ldr	r2, [r3, #20]
 80082f0:	f042 0201 	orr.w	r2, r2, #1
 80082f4:	615a      	str	r2, [r3, #20]
    if ( pHandle->pParams_str->FreqRatio == 2u )
 80082f6:	790a      	ldrb	r2, [r1, #4]
 80082f8:	2a02      	cmp	r2, #2
 80082fa:	d030      	beq.n	800835e <ICS_Init+0x92>
      if ( pHandle->pParams_str->InstanceNbr == 1u )
 80082fc:	780a      	ldrb	r2, [r1, #0]
 80082fe:	2a01      	cmp	r2, #1
 8008300:	d030      	beq.n	8008364 <ICS_Init+0x98>
  SET_BIT(TIMx->CCER, Channels);
 8008302:	6a1a      	ldr	r2, [r3, #32]
    if ( pHandle->pParams_str->TIMx == TIM1 )
 8008304:	4922      	ldr	r1, [pc, #136]	@ (8008390 <ICS_Init+0xc4>)
 8008306:	f442 62aa 	orr.w	r2, r2, #1360	@ 0x550
 800830a:	f042 0205 	orr.w	r2, r2, #5
 800830e:	428b      	cmp	r3, r1
 8008310:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008312:	4a20      	ldr	r2, [pc, #128]	@ (8008394 <ICS_Init+0xc8>)
 8008314:	d02b      	beq.n	800836e <ICS_Init+0xa2>
 8008316:	68d3      	ldr	r3, [r2, #12]
 8008318:	f043 0302 	orr.w	r3, r3, #2
 800831c:	f44f 11f0 	mov.w	r1, #1966080	@ 0x1e0000
 8008320:	60d3      	str	r3, [r2, #12]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8008322:	4b1d      	ldr	r3, [pc, #116]	@ (8008398 <ICS_Init+0xcc>)
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8008324:	6681      	str	r1, [r0, #104]	@ 0x68
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	491c      	ldr	r1, [pc, #112]	@ (800839c <ICS_Init+0xd0>)
 800832a:	f042 0201 	orr.w	r2, r2, #1
 800832e:	609a      	str	r2, [r3, #8]
 8008330:	688a      	ldr	r2, [r1, #8]
 8008332:	f042 0201 	orr.w	r2, r2, #1
 8008336:	608a      	str	r2, [r1, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800833a:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800833e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008342:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8008344:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8008346:	685a      	ldr	r2, [r3, #4]
}
 8008348:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->OverCurrentFlag = false;
 800834c:	2100      	movs	r1, #0
 800834e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008352:	605a      	str	r2, [r3, #4]
 8008354:	f880 106c 	strb.w	r1, [r0, #108]	@ 0x6c
    pHandle->_Super.DTTest = 0u;
 8008358:	f8a0 104e 	strh.w	r1, [r0, #78]	@ 0x4e
}
 800835c:	4770      	bx	lr
      if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800835e:	794a      	ldrb	r2, [r1, #5]
 8008360:	2a01      	cmp	r2, #1
 8008362:	d00b      	beq.n	800837c <ICS_Init+0xb0>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8008364:	f8b0 2064 	ldrh.w	r2, [r0, #100]	@ 0x64
 8008368:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 800836a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800836c:	e7c9      	b.n	8008302 <ICS_Init+0x36>
 800836e:	68d3      	ldr	r3, [r2, #12]
 8008370:	f043 0301 	orr.w	r3, r3, #1
 8008374:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8008378:	60d3      	str	r3, [r2, #12]
      pHandle->ADCTriggerSet = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 800837a:	e7d2      	b.n	8008322 <ICS_Init+0x56>
        if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800837c:	7a09      	ldrb	r1, [r1, #8]
 800837e:	2903      	cmp	r1, #3
 8008380:	d1f0      	bne.n	8008364 <ICS_Init+0x98>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008382:	631a      	str	r2, [r3, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008384:	695a      	ldr	r2, [r3, #20]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	615a      	str	r2, [r3, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800838c:	6319      	str	r1, [r3, #48]	@ 0x30
}
 800838e:	e7e9      	b.n	8008364 <ICS_Init+0x98>
 8008390:	40010000 	.word	0x40010000
 8008394:	e0042000 	.word	0xe0042000
 8008398:	40012000 	.word	0x40012000
 800839c:	40012100 	.word	0x40012100

080083a0 <ICS_TurnOnLowSides>:
  * @param pHdl ICS F4xx PWM Current Feedback Handle
  */
__weak void ICS_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80083a0:	6f01      	ldr	r1, [r0, #112]	@ 0x70

  pHandle->_Super.TurnOnLowSidesAction = true;
 80083a2:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80083a6:	68ca      	ldr	r2, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80083a8:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80083ac:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80083ae:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80083b2:	6353      	str	r3, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80083b4:	6393      	str	r3, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80083b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80083b8:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80083ba:	6913      	ldr	r3, [r2, #16]
 80083bc:	07db      	lsls	r3, r3, #31
 80083be:	d5fc      	bpl.n	80083ba <ICS_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80083c0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80083c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083c6:	6453      	str	r3, [r2, #68]	@ 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == RESET ) ;

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80083c8:	7c0b      	ldrb	r3, [r1, #16]
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d000      	beq.n	80083d0 <ICS_TurnOnLowSides+0x30>
 80083ce:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80083d0:	694a      	ldr	r2, [r1, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80083d2:	69c8      	ldr	r0, [r1, #28]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80083d4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
{
 80083d6:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80083d8:	698c      	ldr	r4, [r1, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80083da:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80083dc:	6a0c      	ldr	r4, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80083de:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80083e0:	6184      	str	r4, [r0, #24]
  }
}
 80083e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e6:	619a      	str	r2, [r3, #24]
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop

080083ec <ICS_SwitchOnPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80083ec:	6f01      	ldr	r1, [r0, #112]	@ 0x70

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80083ee:	f8b0 2064 	ldrh.w	r2, [r0, #100]	@ 0x64
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80083f2:	68cb      	ldr	r3, [r1, #12]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80083f4:	f04f 0c00 	mov.w	ip, #0
{
 80083f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80083fa:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80083fe:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008400:	6358      	str	r0, [r3, #52]	@ 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8008402:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008404:	6398      	str	r0, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008406:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008408:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800840c:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800840e:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008410:	691a      	ldr	r2, [r3, #16]
 8008412:	07d2      	lsls	r2, r2, #31
 8008414:	d5fc      	bpl.n	8008410 <ICS_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008416:	f06f 0201 	mvn.w	r2, #1
 800841a:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800841c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800841e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008422:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008424:	7c0a      	ldrb	r2, [r1, #16]
 8008426:	2a02      	cmp	r2, #2
 8008428:	d007      	beq.n	800843a <ICS_SwitchOnPWM+0x4e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800842a:	f06f 0201 	mvn.w	r2, #1
 800842e:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	f042 0201 	orr.w	r2, r2, #1
 8008436:	60da      	str	r2, [r3, #12]
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

}
 8008438:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800843a:	6a1d      	ldr	r5, [r3, #32]
 800843c:	f240 5c55 	movw	ip, #1365	@ 0x555
 8008440:	ea3c 0c05 	bics.w	ip, ip, r5
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008444:	e9d1 e405 	ldrd	lr, r4, [r1, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008448:	e9d1 7007 	ldrd	r7, r0, [r1, #28]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800844c:	e9d1 6209 	ldrd	r6, r2, [r1, #36]	@ 0x24
 8008450:	d007      	beq.n	8008462 <ICS_SwitchOnPWM+0x76>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008452:	0424      	lsls	r4, r4, #16
 8008454:	0400      	lsls	r0, r0, #16
 8008456:	0412      	lsls	r2, r2, #16
 8008458:	f8ce 4018 	str.w	r4, [lr, #24]
 800845c:	61b8      	str	r0, [r7, #24]
 800845e:	61b2      	str	r2, [r6, #24]
}
 8008460:	e7e3      	b.n	800842a <ICS_SwitchOnPWM+0x3e>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008462:	f8ce 4018 	str.w	r4, [lr, #24]
 8008466:	61b8      	str	r0, [r7, #24]
 8008468:	61b2      	str	r2, [r6, #24]
}
 800846a:	e7de      	b.n	800842a <ICS_SwitchOnPWM+0x3e>

0800846c <ICS_SwitchOffPWM>:
* @param pHdl ICS F4xx PWM Current Feedback Handle
*/
__weak void ICS_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800846c:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800846e:	68da      	ldr	r2, [r3, #12]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008470:	68d1      	ldr	r1, [r2, #12]
 8008472:	f021 0101 	bic.w	r1, r1, #1
 8008476:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008478:	6c51      	ldr	r1, [r2, #68]	@ 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 800847a:	f04f 0c00 	mov.w	ip, #0
 800847e:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8008482:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
 8008486:	6451      	str	r1, [r2, #68]	@ 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008488:	7c19      	ldrb	r1, [r3, #16]
 800848a:	2902      	cmp	r1, #2
 800848c:	d009      	beq.n	80084a2 <ICS_SwitchOffPWM+0x36>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800848e:	f06f 0301 	mvn.w	r3, #1
 8008492:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008494:	6913      	ldr	r3, [r2, #16]
 8008496:	07db      	lsls	r3, r3, #31
 8008498:	d5fc      	bpl.n	8008494 <ICS_SwitchOffPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800849a:	f06f 0301 	mvn.w	r3, #1
 800849e:	6113      	str	r3, [r2, #16]
 80084a0:	4770      	bx	lr
{
 80084a2:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80084a4:	699c      	ldr	r4, [r3, #24]
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80084a6:	695d      	ldr	r5, [r3, #20]
 80084a8:	6a18      	ldr	r0, [r3, #32]
 80084aa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80084ac:	0424      	lsls	r4, r4, #16
 80084ae:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80084b0:	69dd      	ldr	r5, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80084b2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80084b4:	0400      	lsls	r0, r0, #16
 80084b6:	0409      	lsls	r1, r1, #16
 80084b8:	f06f 0301 	mvn.w	r3, #1
 80084bc:	61a8      	str	r0, [r5, #24]
 80084be:	61a1      	str	r1, [r4, #24]
 80084c0:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80084c2:	6913      	ldr	r3, [r2, #16]
 80084c4:	07d9      	lsls	r1, r3, #31
 80084c6:	d5fc      	bpl.n	80084c2 <ICS_SwitchOffPWM+0x56>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80084c8:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 80084cc:	bc30      	pop	{r4, r5}
 80084ce:	6113      	str	r3, [r2, #16]
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop

080084d4 <ICS_CurrentReadingCalibration>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80084d4:	6f02      	ldr	r2, [r0, #112]	@ 0x70
{
 80084d6:	b538      	push	{r3, r4, r5, lr}
  pHandle->PhaseAOffset = 0u;
 80084d8:	2300      	movs	r3, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80084da:	68d4      	ldr	r4, [r2, #12]
  pHandle->PolarizationCounter = 0u;
 80084dc:	f880 3066 	strb.w	r3, [r0, #102]	@ 0x66
  pHandle->PhaseAOffset = 0u;
 80084e0:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  CLEAR_BIT(TIMx->CCER, Channels);
 80084e4:	6a23      	ldr	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 80084e6:	4a21      	ldr	r2, [pc, #132]	@ (800856c <ICS_CurrentReadingCalibration+0x98>)
 80084e8:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
{
 80084ec:	4605      	mov	r5, r0
 80084ee:	f023 0305 	bic.w	r3, r3, #5
 80084f2:	6223      	str	r3, [r4, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_HFCurrentsCalibration;
 80084f4:	6042      	str	r2, [r0, #4]
  ICS_SwitchOnPWM( &pHandle->_Super );
 80084f6:	f7ff ff79 	bl	80083ec <ICS_SwitchOnPWM>
  						  pHandle->pParams_str->RepetitionCounter,
 80084fa:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
  waitForPolarizationEnd( TIMx,
 80084fc:	f105 0366 	add.w	r3, r5, #102	@ 0x66
 8008500:	7a12      	ldrb	r2, [r2, #8]
 8008502:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8008506:	4620      	mov	r0, r4
 8008508:	f000 fa04 	bl	8008914 <waitForPolarizationEnd>
  ICS_SwitchOffPWM( &pHandle->_Super );
 800850c:	4628      	mov	r0, r5
 800850e:	f7ff ffad 	bl	800846c <ICS_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 8008512:	e9d5 2317 	ldrd	r2, r3, [r5, #92]	@ 0x5c
  pHandle->PhaseAOffset >>= 3;
 8008516:	08d2      	lsrs	r2, r2, #3
  pHandle->PhaseBOffset >>= 3;
 8008518:	08db      	lsrs	r3, r3, #3
 800851a:	e9c5 2317 	strd	r2, r3, [r5, #92]	@ 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800851e:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8008520:	f8b5 3064 	ldrh.w	r3, [r5, #100]	@ 0x64
 8008524:	f022 0208 	bic.w	r2, r2, #8
 8008528:	61a2      	str	r2, [r4, #24]
 800852a:	69a2      	ldr	r2, [r4, #24]
 800852c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008530:	61a2      	str	r2, [r4, #24]
 8008532:	69e2      	ldr	r2, [r4, #28]
 8008534:	f022 0208 	bic.w	r2, r2, #8
 8008538:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800853a:	6363      	str	r3, [r4, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800853c:	63a3      	str	r3, [r4, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800853e:	63e3      	str	r3, [r4, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008540:	69a3      	ldr	r3, [r4, #24]
  pHandle->_Super.pFctGetPhaseCurrents = &ICS_GetPhaseCurrents;
 8008542:	4a0b      	ldr	r2, [pc, #44]	@ (8008570 <ICS_CurrentReadingCalibration+0x9c>)
 8008544:	f043 0308 	orr.w	r3, r3, #8
 8008548:	61a3      	str	r3, [r4, #24]
 800854a:	69a3      	ldr	r3, [r4, #24]
 800854c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008550:	61a3      	str	r3, [r4, #24]
 8008552:	69e3      	ldr	r3, [r4, #28]
 8008554:	f043 0308 	orr.w	r3, r3, #8
 8008558:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 800855a:	6a23      	ldr	r3, [r4, #32]
 800855c:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8008560:	f043 0305 	orr.w	r3, r3, #5
 8008564:	6223      	str	r3, [r4, #32]
 8008566:	606a      	str	r2, [r5, #4]
}
 8008568:	bd38      	pop	{r3, r4, r5, pc}
 800856a:	bf00      	nop
 800856c:	08008281 	.word	0x08008281
 8008570:	080081f1 	.word	0x080081f1

08008574 <ICS_WriteTIMRegisters>:
*/
__weak uint16_t ICS_WriteTIMRegisters( PWMC_Handle_t * pHdl )
{
  uint16_t aux;
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008574:	6f03      	ldr	r3, [r0, #112]	@ 0x70

  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8008576:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008578:	68db      	ldr	r3, [r3, #12]
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 800857a:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
{
 800857c:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 800857e:	8e44      	ldrh	r4, [r0, #50]	@ 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008580:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008582:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008584:	63da      	str	r2, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8008586:	6a18      	ldr	r0, [r3, #32]
  else
  {
    aux = MC_NO_ERROR;
  }
  return aux;
}
 8008588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800858c:	f3c0 3000 	ubfx	r0, r0, #12, #1
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop

08008594 <ICS_TIMx_UP_IRQHandler>:
__weak void * ICS_TIMx_UP_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{
  uint32_t adcinjflags;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 8008594:	4922      	ldr	r1, [pc, #136]	@ (8008620 <ICS_TIMx_UP_IRQHandler+0x8c>)
 8008596:	680b      	ldr	r3, [r1, #0]
{
 8008598:	b470      	push	{r4, r5, r6}
  adcinjflags = ( ADC1->SR ) & ADC_SR_MASK;
 800859a:	f003 030c 	and.w	r3, r3, #12
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800859e:	6f04      	ldr	r4, [r0, #112]	@ 0x70

  if ( adcinjflags == CONV_STARTED )
 80085a0:	2b08      	cmp	r3, #8
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80085a2:	68e2      	ldr	r2, [r4, #12]
  if ( adcinjflags == CONV_STARTED )
 80085a4:	d026      	beq.n	80085f4 <ICS_TIMx_UP_IRQHandler+0x60>
    {
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
    }
    while ( adcinjflags != CONV_FINISHED );
  }
  else if ( adcinjflags == FLAGS_CLEARED )
 80085a6:	b94b      	cbnz	r3, 80085bc <ICS_TIMx_UP_IRQHandler+0x28>
  {
    while ( ( TIMx->CNT ) < ( pHandle->pParams_str->Tw ) )
 80085a8:	8861      	ldrh	r1, [r4, #2]
 80085aa:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80085ac:	428b      	cmp	r3, r1
 80085ae:	d3fc      	bcc.n	80085aa <ICS_TIMx_UP_IRQHandler+0x16>
    {}
    adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80085b0:	491b      	ldr	r1, [pc, #108]	@ (8008620 <ICS_TIMx_UP_IRQHandler+0x8c>)
 80085b2:	680b      	ldr	r3, [r1, #0]
 80085b4:	f003 030c 	and.w	r3, r3, #12

    if ( adcinjflags == CONV_STARTED )
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	d026      	beq.n	800860a <ICS_TIMx_UP_IRQHandler+0x76>
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 80085bc:	4e18      	ldr	r6, [pc, #96]	@ (8008620 <ICS_TIMx_UP_IRQHandler+0x8c>)
 80085be:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80085c0:	68b3      	ldr	r3, [r6, #8]
 80085c2:	4d18      	ldr	r5, [pc, #96]	@ (8008624 <ICS_TIMx_UP_IRQHandler+0x90>)
 80085c4:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
 80085c8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80085cc:	430b      	orrs	r3, r1
 80085ce:	60b3      	str	r3, [r6, #8]
 80085d0:	68ab      	ldr	r3, [r5, #8]
 80085d2:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80085d6:	430b      	orrs	r3, r1
 80085d8:	60ab      	str	r3, [r5, #8]
  /* It re-initilize AD converter in run time when using dual MC */
  LL_ADC_INJ_SetTriggerSource(ADC1, pHandle->ADCTriggerSet);
  LL_ADC_INJ_SetTriggerSource(ADC2, pHandle->ADCTriggerSet);

  /* Change channels keeping equal to 1 element the sequencer lenght */
  ADC1->JSQR = ( uint32_t )( pHandle->pParams_str->IaChannel ) << 15;
 80085da:	79a3      	ldrb	r3, [r4, #6]
 80085dc:	03db      	lsls	r3, r3, #15
 80085de:	63b3      	str	r3, [r6, #56]	@ 0x38
  ADC2->JSQR = ( uint32_t )( pHandle->pParams_str->IbChannel ) << 15;
 80085e0:	79e3      	ldrb	r3, [r4, #7]
 80085e2:	03db      	lsls	r3, r3, #15
 80085e4:	63ab      	str	r3, [r5, #56]	@ 0x38
  SET_BIT(TIMx->CCER, Channels);
 80085e6:	6a13      	ldr	r3, [r2, #32]
 80085e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000

  LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH4 );

  return &( pHandle->_Super.Motor );
}
 80085ec:	3046      	adds	r0, #70	@ 0x46
 80085ee:	bc70      	pop	{r4, r5, r6}
 80085f0:	6213      	str	r3, [r2, #32]
 80085f2:	4770      	bx	lr
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80085f4:	680b      	ldr	r3, [r1, #0]
 80085f6:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 80085fa:	2b0c      	cmp	r3, #12
 80085fc:	d0de      	beq.n	80085bc <ICS_TIMx_UP_IRQHandler+0x28>
      adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 80085fe:	680b      	ldr	r3, [r1, #0]
 8008600:	f003 030c 	and.w	r3, r3, #12
    while ( adcinjflags != CONV_FINISHED );
 8008604:	2b0c      	cmp	r3, #12
 8008606:	d1f5      	bne.n	80085f4 <ICS_TIMx_UP_IRQHandler+0x60>
 8008608:	e7d8      	b.n	80085bc <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 800860a:	680b      	ldr	r3, [r1, #0]
 800860c:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 8008610:	2b0c      	cmp	r3, #12
 8008612:	d0d3      	beq.n	80085bc <ICS_TIMx_UP_IRQHandler+0x28>
        adcinjflags = ( ADC1-> SR ) & ADC_SR_MASK;
 8008614:	680b      	ldr	r3, [r1, #0]
 8008616:	f003 030c 	and.w	r3, r3, #12
      while ( adcinjflags != CONV_FINISHED );
 800861a:	2b0c      	cmp	r3, #12
 800861c:	d1f5      	bne.n	800860a <ICS_TIMx_UP_IRQHandler+0x76>
 800861e:	e7cd      	b.n	80085bc <ICS_TIMx_UP_IRQHandler+0x28>
 8008620:	40012000 	.word	0x40012000
 8008624:	40012100 	.word	0x40012100

08008628 <ICS_BRK_IRQHandler>:
 * @retval none
 */
__weak void * ICS_BRK_IRQHandler( PWMC_ICS_Handle_t * pHandle )
{

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008628:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800862a:	7c1a      	ldrb	r2, [r3, #16]
 800862c:	2a02      	cmp	r2, #2
 800862e:	d004      	beq.n	800863a <ICS_BRK_IRQHandler+0x12>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
  }
  pHandle->OverCurrentFlag = true;
 8008630:	2301      	movs	r3, #1
 8008632:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c

  return &( pHandle->_Super.Motor );
}
 8008636:	3046      	adds	r0, #70	@ 0x46
 8008638:	4770      	bx	lr
{
 800863a:	b430      	push	{r4, r5}
 800863c:	699c      	ldr	r4, [r3, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800863e:	695d      	ldr	r5, [r3, #20]
 8008640:	6a19      	ldr	r1, [r3, #32]
 8008642:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008644:	0424      	lsls	r4, r4, #16
 8008646:	61ac      	str	r4, [r5, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008648:	69dd      	ldr	r5, [r3, #28]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800864a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800864c:	0409      	lsls	r1, r1, #16
 800864e:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8008650:	2301      	movs	r3, #1
 8008652:	61a9      	str	r1, [r5, #24]
}
 8008654:	3046      	adds	r0, #70	@ 0x46
 8008656:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 8008658:	f880 3026 	strb.w	r3, [r0, #38]	@ 0x26
}
 800865c:	bc30      	pop	{r4, r5}
 800865e:	4770      	bx	lr

08008660 <ICS_IsOverCurrentOccurred>:
__weak uint16_t ICS_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
  PWMC_ICS_Handle_t * pHandle = ( PWMC_ICS_Handle_t * ) pHdl;
  uint16_t retval = MC_NO_FAULTS;

  if ( pHandle->OverCurrentFlag == true )
 8008660:	f890 306c 	ldrb.w	r3, [r0, #108]	@ 0x6c
 8008664:	b90b      	cbnz	r3, 800866a <ICS_IsOverCurrentOccurred+0xa>
  uint16_t retval = MC_NO_FAULTS;
 8008666:	4618      	mov	r0, r3
  {
    retval = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
  }
  return retval;
}
 8008668:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 800866a:	2300      	movs	r3, #0
 800866c:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
    retval = MC_BREAK_IN;
 8008670:	2040      	movs	r0, #64	@ 0x40
 8008672:	4770      	bx	lr

08008674 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8008674:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8008676:	f44f 7280 	mov.w	r2, #256	@ 0x100
{
 800867a:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 800867c:	2100      	movs	r1, #0
 800867e:	f001 f86f 	bl	8009760 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8008682:	2300      	movs	r3, #0
 8008684:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8008688:	bd10      	pop	{r4, pc}
 800868a:	bf00      	nop

0800868c <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800868c:	f8b0 c100 	ldrh.w	ip, [r0, #256]	@ 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8008690:	f10c 0201 	add.w	r2, ip, #1
 8008694:	b292      	uxth	r2, r2
{
 8008696:	b510      	push	{r4, lr}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8008698:	2a80      	cmp	r2, #128	@ 0x80
{
 800869a:	4604      	mov	r4, r0
    pHandle->hNextMeasBufferIndex = 0u;
 800869c:	bf28      	it	cs
 800869e:	2200      	movcs	r2, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80086a0:	f824 101c 	strh.w	r1, [r4, ip, lsl #1]
{
 80086a4:	4608      	mov	r0, r1
 80086a6:	f8a4 2100 	strh.w	r2, [r4, #256]	@ 0x100
 80086aa:	1ea3      	subs	r3, r4, #2
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80086ac:	f8a4 c102 	strh.w	ip, [r4, #258]	@ 0x102
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80086b0:	f104 0efe 	add.w	lr, r4, #254	@ 0xfe
  int32_t wAux = 0;
 80086b4:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80086b6:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80086ba:	459e      	cmp	lr, r3
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80086bc:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80086be:	d1fa      	bne.n	80086b6 <MPM_CalcElMotorPower+0x2a>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 80086c0:	2a00      	cmp	r2, #0
 80086c2:	bfb8      	it	lt
 80086c4:	327f      	addlt	r2, #127	@ 0x7f
 80086c6:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 80086c8:	f8a4 2104 	strh.w	r2, [r4, #260]	@ 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	bf00      	nop

080086d0 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 80086d0:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	@ 0x104
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop

080086d8 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80086d8:	8a03      	ldrh	r3, [r0, #16]
 80086da:	8b42      	ldrh	r2, [r0, #26]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d306      	bcc.n	80086ee <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80086e0:	8b82      	ldrh	r2, [r0, #28]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d901      	bls.n	80086ea <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 80086e6:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 80086e8:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 80086ea:	8ac0      	ldrh	r0, [r0, #22]
 80086ec:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 80086ee:	2008      	movs	r0, #8
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop

080086f4 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80086f4:	2300      	movs	r3, #0
 80086f6:	8203      	strh	r3, [r0, #16]
}
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop

080086fc <NTC_Init>:
{
 80086fc:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 80086fe:	7803      	ldrb	r3, [r0, #0]
{
 8008700:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8008702:	b123      	cbz	r3, 800870e <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008704:	8a43      	ldrh	r3, [r0, #18]
 8008706:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8008708:	2200      	movs	r2, #0
 800870a:	82c2      	strh	r2, [r0, #22]
}
 800870c:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800870e:	3004      	adds	r0, #4
 8008710:	f7f9 fffa 	bl	8002708 <RCM_RegisterRegConv>
 8008714:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
    NTC_Clear( pHandle );
 8008718:	4620      	mov	r0, r4
 800871a:	f7ff ffeb 	bl	80086f4 <NTC_Clear>
}
 800871e:	bd10      	pop	{r4, pc}

08008720 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8008720:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8008722:	7803      	ldrb	r3, [r0, #0]
{
 8008724:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8008726:	b113      	cbz	r3, 800872e <NTC_CalcAvTemp+0xe>
 8008728:	2000      	movs	r0, #0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800872a:	82e0      	strh	r0, [r4, #22]
  {
    pHandle->hFaultState = MC_NO_ERROR;
  }

  return ( pHandle->hFaultState );
}
 800872c:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800872e:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8008732:	f7fa f8c3 	bl	80028bc <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8008736:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800873a:	4298      	cmp	r0, r3
 800873c:	d007      	beq.n	800874e <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800873e:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8008740:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8008742:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8008744:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8008748:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800874c:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800874e:	4620      	mov	r0, r4
 8008750:	f7ff ffc2 	bl	80086d8 <NTC_SetFaultState>
 8008754:	82e0      	strh	r0, [r4, #22]
}
 8008756:	bd10      	pop	{r4, pc}

08008758 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8008758:	7803      	ldrb	r3, [r0, #0]
 800875a:	b983      	cbnz	r3, 800877e <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 800875c:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 800875e:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8008760:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8008764:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8008766:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8008768:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800876c:	2b00      	cmp	r3, #0
 800876e:	bfbc      	itt	lt
 8008770:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8008774:	33ff      	addlt	r3, #255	@ 0xff
 8008776:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 800877a:	b200      	sxth	r0, r0
 800877c:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 800877e:	8a80      	ldrh	r0, [r0, #20]
}
 8008780:	b200      	sxth	r0, r0
 8008782:	4770      	bx	lr

08008784 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8008784:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8008786:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8008788:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800878a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800878c:	8442      	strh	r2, [r0, #34]	@ 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800878e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8008790:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8008792:	4770      	bx	lr

08008794 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8008794:	8081      	strh	r1, [r0, #4]
}
 8008796:	4770      	bx	lr

08008798 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8008798:	80c1      	strh	r1, [r0, #6]
}
 800879a:	4770      	bx	lr

0800879c <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 800879c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop

080087a4 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 80087a4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop

080087ac <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 80087ac:	6081      	str	r1, [r0, #8]

  return;
}
 80087ae:	4770      	bx	lr

080087b0 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 80087b0:	8b00      	ldrh	r0, [r0, #24]
 80087b2:	4770      	bx	lr

080087b4 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 80087b4:	8b40      	ldrh	r0, [r0, #26]
 80087b6:	4770      	bx	lr

080087b8 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 80087b8:	8441      	strh	r1, [r0, #34]	@ 0x22
}
 80087ba:	4770      	bx	lr

080087bc <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 80087bc:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop

080087c4 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80087c4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 80087c8:	4603      	mov	r3, r0
 80087ca:	b530      	push	{r4, r5, lr}

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 80087cc:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80087d0:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80087d4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80087d8:	fb01 f202 	mul.w	r2, r1, r2
  if ( pHandle->hKiGain == 0 )
 80087dc:	b17c      	cbz	r4, 80087fe <PI_Controller+0x3a>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80087de:	fb04 f101 	mul.w	r1, r4, r1
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80087e2:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
    if ( wIntegral_sum_temp < 0 )
 80087e6:	eb15 0e01 	adds.w	lr, r5, r1
 80087ea:	d41d      	bmi.n	8008828 <PI_Controller+0x64>
          wIntegral_sum_temp = -INT32_MAX;
 80087ec:	420d      	tst	r5, r1
 80087ee:	4914      	ldr	r1, [pc, #80]	@ (8008840 <PI_Controller+0x7c>)
 80087f0:	bf48      	it	mi
 80087f2:	468e      	movmi	lr, r1
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80087f4:	45a6      	cmp	lr, r4
 80087f6:	dc02      	bgt.n	80087fe <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80087f8:	691c      	ldr	r4, [r3, #16]
 80087fa:	4574      	cmp	r4, lr
 80087fc:	dd1d      	ble.n	800883a <PI_Controller+0x76>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80087fe:	8b99      	ldrh	r1, [r3, #28]
 8008800:	410a      	asrs	r2, r1
 8008802:	8bd9      	ldrh	r1, [r3, #30]
 8008804:	fa44 f101 	asr.w	r1, r4, r1
 8008808:	440a      	add	r2, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800880a:	4290      	cmp	r0, r2
 800880c:	da03      	bge.n	8008816 <PI_Controller+0x52>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 800880e:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8008810:	4414      	add	r4, r2
 8008812:	609c      	str	r4, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8008814:	bd30      	pop	{r4, r5, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8008816:	4594      	cmp	ip, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
 8008818:	bfc5      	ittet	gt
 800881a:	ebac 0202 	subgt.w	r2, ip, r2
  pHandle->wIntegralTerm += wDischarge;
 800881e:	18a4      	addgt	r4, r4, r2
  return ( ( int16_t )( wOutput_32 ) );
 8008820:	b210      	sxthle	r0, r2
    wOutput_32 = hLowerOutputLimit;
 8008822:	4660      	movgt	r0, ip
  pHandle->wIntegralTerm += wDischarge;
 8008824:	609c      	str	r4, [r3, #8]
}
 8008826:	bd30      	pop	{r4, r5, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8008828:	2d00      	cmp	r5, #0
 800882a:	dde3      	ble.n	80087f4 <PI_Controller+0x30>
        if ( wIntegral_Term > 0 )
 800882c:	2900      	cmp	r1, #0
 800882e:	dde1      	ble.n	80087f4 <PI_Controller+0x30>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8008830:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008834:	428c      	cmp	r4, r1
 8008836:	d1e2      	bne.n	80087fe <PI_Controller+0x3a>
 8008838:	46a6      	mov	lr, r4
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 800883a:	4674      	mov	r4, lr
 800883c:	e7df      	b.n	80087fe <PI_Controller+0x3a>
 800883e:	bf00      	nop
 8008840:	80000001 	.word	0x80000001

08008844 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8008844:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
{
 8008848:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800884a:	89d1      	ldrh	r1, [r2, #14]
 800884c:	8b14      	ldrh	r4, [r2, #24]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800884e:	8993      	ldrh	r3, [r2, #12]
{
 8008850:	4605      	mov	r5, r0
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8008852:	8ad0      	ldrh	r0, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008854:	f8d5 6108 	ldr.w	r6, [r5, #264]	@ 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8008858:	fb11 f204 	smulbb	r2, r1, r4
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800885c:	fb13 2400 	smlabb	r4, r3, r0, r2
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8008860:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
 8008864:	f7ff f88c 	bl	8007980 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8008868:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800886a:	490f      	ldr	r1, [pc, #60]	@ (80088a8 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800886c:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8008870:	bfb8      	it	lt
 8008872:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8008876:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 800887a:	bfb8      	it	lt
 800887c:	33ff      	addlt	r3, #255	@ 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800887e:	fb81 1000 	smull	r1, r0, r1, r0
 8008882:	ebc2 12a0 	rsb	r2, r2, r0, asr #6
  wAux /= 65536;
 8008886:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8008888:	fb02 f303 	mul.w	r3, r2, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 800888c:	4907      	ldr	r1, [pc, #28]	@ (80088ac <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800888e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008892:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8008894:	fb81 2103 	smull	r2, r1, r1, r3
 8008898:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800889a:	4628      	mov	r0, r5
 800889c:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 80088a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 80088a4:	f7ff bef2 	b.w	800868c <MPM_CalcElMotorPower>
 80088a8:	1b4e81b5 	.word	0x1b4e81b5
 80088ac:	66666667 	.word	0x66666667

080088b0 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 80088b0:	4b17      	ldr	r3, [pc, #92]	@ (8008910 <startTimers+0x60>)
 80088b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 80088b4:	07d2      	lsls	r2, r2, #31
 80088b6:	d415      	bmi.n	80088e4 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 80088b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088ba:	f042 0201 	orr.w	r2, r2, #1
 80088be:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80088c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80088c2:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80088c4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80088c8:	f002 0201 	and.w	r2, r2, #1
 80088cc:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80088ce:	9a01      	ldr	r2, [sp, #4]
 80088d0:	694a      	ldr	r2, [r1, #20]
 80088d2:	f042 0201 	orr.w	r2, r2, #1
 80088d6:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80088d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088da:	f022 0201 	bic.w	r2, r2, #1
 80088de:	641a      	str	r2, [r3, #64]	@ 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 80088e0:	b002      	add	sp, #8
 80088e2:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 80088e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088e8:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80088ea:	6859      	ldr	r1, [r3, #4]
 80088ec:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80088f0:	f041 0120 	orr.w	r1, r1, #32
 80088f4:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80088f6:	6959      	ldr	r1, [r3, #20]
 80088f8:	f041 0101 	orr.w	r1, r1, #1
 80088fc:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80088fe:	6859      	ldr	r1, [r3, #4]
 8008900:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8008904:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8008908:	430a      	orrs	r2, r1
 800890a:	605a      	str	r2, [r3, #4]
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	40023800 	.word	0x40023800

08008914 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8008914:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8008916:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8008918:	f014 0460 	ands.w	r4, r4, #96	@ 0x60
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 800891c:	f102 0201 	add.w	r2, r2, #1
 8008920:	d11b      	bne.n	800895a <waitForPolarizationEnd+0x46>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8008922:	6804      	ldr	r4, [r0, #0]
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8008924:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008926:	f06f 0602 	mvn.w	r6, #2
 800892a:	0155      	lsls	r5, r2, #5
 800892c:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 800892e:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8008930:	f893 c000 	ldrb.w	ip, [r3]
 8008934:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8008938:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 800893c:	d80c      	bhi.n	8008958 <waitForPolarizationEnd+0x44>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800893e:	6904      	ldr	r4, [r0, #16]
 8008940:	07a4      	lsls	r4, r4, #30
 8008942:	d5f5      	bpl.n	8008930 <waitForPolarizationEnd+0x1c>
      hCalibrationPeriodCounter++;
 8008944:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8008948:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800894a:	6106      	str	r6, [r0, #16]
 800894c:	d8f0      	bhi.n	8008930 <waitForPolarizationEnd+0x1c>
      {
        if (*cnt < NB_CONVERSIONS)
 800894e:	781c      	ldrb	r4, [r3, #0]
 8008950:	2c0f      	cmp	r4, #15
 8008952:	d8ed      	bhi.n	8008930 <waitForPolarizationEnd+0x1c>
        {
          *SWerror = 1u;
 8008954:	2301      	movs	r3, #1
 8008956:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8008958:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800895a:	2c60      	cmp	r4, #96	@ 0x60
 800895c:	d0e3      	beq.n	8008926 <waitForPolarizationEnd+0x12>
 800895e:	e7e1      	b.n	8008924 <waitForPolarizationEnd+0x10>

08008960 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8008960:	6843      	ldr	r3, [r0, #4]
 8008962:	4718      	bx	r3

08008964 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8008964:	b530      	push	{r4, r5, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008966:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800896a:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800896c:	ea4f 4c21 	mov.w	ip, r1, asr #16
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8008970:	b20b      	sxth	r3, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008972:	fb04 fc0c 	mul.w	ip, r4, ip
 8008976:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800897a:	fb02 f303 	mul.w	r3, r2, r3

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 800897e:	eb03 024c 	add.w	r2, r3, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8008982:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8008986:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 800898a:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 800898e:	1c55      	adds	r5, r2, #1
{
 8008990:	b083      	sub	sp, #12
  {
    if ( wZ < 0 )
    {
      pHandle->Sector = SECTOR_5;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8008992:	ea4f 0494 	mov.w	r4, r4, lsr #2
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8008996:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800899a:	ea4f 0161 	mov.w	r1, r1, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 800899e:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  if ( wY < 0 )
 80089a2:	db7a      	blt.n	8008a9a <PWMC_SetPhaseVoltage+0x136>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 80089a4:	1c5d      	adds	r5, r3, #1
 80089a6:	db57      	blt.n	8008a58 <PWMC_SetPhaseVoltage+0xf4>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80089a8:	ebb1 010e 	subs.w	r1, r1, lr
 80089ac:	bf44      	itt	mi
 80089ae:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 80089b2:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	bfbc      	itt	lt
 80089ba:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80089be:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80089c2:	2a00      	cmp	r2, #0
 80089c4:	bfb8      	it	lt
 80089c6:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80089ca:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80089ce:	bfb8      	it	lt
 80089d0:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80089d4:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 80089d8:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhB;
 80089dc:	fa1f fe83 	uxth.w	lr, r3
      pHandle->midDuty = wTimePhA;
 80089e0:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhC;
 80089e4:	b294      	uxth	r4, r2
 80089e6:	2501      	movs	r5, #1
        pHandle->highDuty = wTimePhA;
 80089e8:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 80089ec:	f8b0 404e 	ldrh.w	r4, [r0, #78]	@ 0x4e
        pHandle->Sector = SECTOR_4;
 80089f0:	f880 503a 	strb.w	r5, [r0, #58]	@ 0x3a
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 80089f4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 80089f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 80089fc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8008a00:	b289      	uxth	r1, r1
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	b292      	uxth	r2, r2
  if ( pHandle->DTTest == 1u )
 8008a06:	2c01      	cmp	r4, #1
        pHandle->lowDuty = wTimePhC;
 8008a08:	f8a0 e03c 	strh.w	lr, [r0, #60]	@ 0x3c
        pHandle->midDuty = wTimePhB;
 8008a0c:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8008a10:	8641      	strh	r1, [r0, #50]	@ 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8008a12:	8683      	strh	r3, [r0, #52]	@ 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8008a14:	86c2      	strh	r2, [r0, #54]	@ 0x36
  if ( pHandle->DTTest == 1u )
 8008a16:	d11a      	bne.n	8008a4e <PWMC_SetPhaseVoltage+0xea>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8008a18:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	@ 0x48
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8008a1c:	f8b0 4054 	ldrh.w	r4, [r0, #84]	@ 0x54
    if ( pHandle->Ia > 0 )
 8008a20:	2d00      	cmp	r5, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8008a22:	bfcc      	ite	gt
 8008a24:	1909      	addgt	r1, r1, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8008a26:	1b09      	suble	r1, r1, r4
 8008a28:	b289      	uxth	r1, r1
 8008a2a:	8641      	strh	r1, [r0, #50]	@ 0x32
    }

    if ( pHandle->Ib > 0 )
 8008a2c:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	@ 0x4a
 8008a30:	2900      	cmp	r1, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8008a32:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	@ 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8008a36:	bfcc      	ite	gt
 8008a38:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8008a3a:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8008a3c:	2900      	cmp	r1, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8008a3e:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8008a40:	bfcc      	ite	gt
 8008a42:	18a4      	addgt	r4, r4, r2
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8008a44:	1b12      	suble	r2, r2, r4
 8008a46:	8683      	strh	r3, [r0, #52]	@ 0x34
      pHandle->CntPhC += pHandle->DTCompCnt;
 8008a48:	bfcc      	ite	gt
 8008a4a:	86c4      	strhgt	r4, [r0, #54]	@ 0x36
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8008a4c:	86c2      	strhle	r2, [r0, #54]	@ 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8008a4e:	6983      	ldr	r3, [r0, #24]
}
 8008a50:	b003      	add	sp, #12
 8008a52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8008a56:	4718      	bx	r3
      if ( wX <= 0 )
 8008a58:	f1bc 0f00 	cmp.w	ip, #0
 8008a5c:	dd3d      	ble.n	8008ada <PWMC_SetPhaseVoltage+0x176>
        wTimePhB = wTimePhA + wZ / 131072;
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	bfb8      	it	lt
 8008a62:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8008a66:	ebac 0e0e 	sub.w	lr, ip, lr
        wTimePhB = wTimePhA + wZ / 131072;
 8008a6a:	bfb8      	it	lt
 8008a6c:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8008a70:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8008a74:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8008a78:	bfb8      	it	lt
 8008a7a:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8008a7e:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8008a82:	bfb8      	it	lt
 8008a84:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8008a88:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhA;
 8008a8c:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhB;
 8008a90:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhC;
 8008a94:	b294      	uxth	r4, r2
 8008a96:	2500      	movs	r5, #0
 8008a98:	e7a6      	b.n	80089e8 <PWMC_SetPhaseVoltage+0x84>
    if ( wZ < 0 )
 8008a9a:	1c5d      	adds	r5, r3, #1
 8008a9c:	db5d      	blt.n	8008b5a <PWMC_SetPhaseVoltage+0x1f6>
      if ( wX <= 0 )
 8008a9e:	f1bc 0f00 	cmp.w	ip, #0
 8008aa2:	dd38      	ble.n	8008b16 <PWMC_SetPhaseVoltage+0x1b2>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8008aa4:	ebb1 010c 	subs.w	r1, r1, ip
 8008aa8:	bf44      	itt	mi
 8008aaa:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8008aae:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	bfb8      	it	lt
 8008ab6:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8008aba:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8008abe:	bfb8      	it	lt
 8008ac0:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
 8008ac4:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8008ac8:	eb02 436c 	add.w	r3, r2, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8008acc:	fa1f fe83 	uxth.w	lr, r3
        pHandle->midDuty = wTimePhC;
 8008ad0:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhA;
 8008ad4:	b28c      	uxth	r4, r1
 8008ad6:	2502      	movs	r5, #2
 8008ad8:	e786      	b.n	80089e8 <PWMC_SetPhaseVoltage+0x84>
        wTimePhC = wTimePhA - wY / 131072;
 8008ada:	2a00      	cmp	r2, #0
 8008adc:	bfb8      	it	lt
 8008ade:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8008ae2:	eba1 010c 	sub.w	r1, r1, ip
        wTimePhC = wTimePhA - wY / 131072;
 8008ae6:	bfb8      	it	lt
 8008ae8:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhC + wX / 131072;
 8008aec:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8008af0:	eb04 41a1 	add.w	r1, r4, r1, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8008af4:	bfb8      	it	lt
 8008af6:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8008afa:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8008afe:	bfb8      	it	lt
 8008b00:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 8008b04:	eb02 4363 	add.w	r3, r2, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8008b08:	fa1f fe81 	uxth.w	lr, r1
        pHandle->midDuty = wTimePhC;
 8008b0c:	fa1f fc82 	uxth.w	ip, r2
        pHandle->highDuty = wTimePhB;
 8008b10:	b29c      	uxth	r4, r3
 8008b12:	2505      	movs	r5, #5
 8008b14:	e768      	b.n	80089e8 <PWMC_SetPhaseVoltage+0x84>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8008b16:	ebbc 0e0e 	subs.w	lr, ip, lr
 8008b1a:	bf44      	itt	mi
 8008b1c:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8008b20:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	bfbc      	itt	lt
 8008b28:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8008b2c:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhB - wX / 131072;
 8008b30:	f1bc 0200 	subs.w	r2, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8008b34:	eb04 41ae 	add.w	r1, r4, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8008b38:	bfb8      	it	lt
 8008b3a:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8008b3e:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8008b42:	bfb8      	it	lt
 8008b44:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8008b48:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhC;
 8008b4c:	fa1f fe82 	uxth.w	lr, r2
        pHandle->midDuty = wTimePhB;
 8008b50:	fa1f fc83 	uxth.w	ip, r3
        pHandle->highDuty = wTimePhA;
 8008b54:	b28c      	uxth	r4, r1
 8008b56:	2503      	movs	r5, #3
 8008b58:	e746      	b.n	80089e8 <PWMC_SetPhaseVoltage+0x84>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8008b5a:	ebb1 010e 	subs.w	r1, r1, lr
 8008b5e:	bf44      	itt	mi
 8008b60:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8008b64:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	bfbc      	itt	lt
 8008b6c:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8008b70:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8008b74:	2a00      	cmp	r2, #0
 8008b76:	bfb8      	it	lt
 8008b78:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8008b7c:	eb04 41a1 	add.w	r1, r4, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8008b80:	bfb8      	it	lt
 8008b82:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8008b86:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8008b8a:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->lowDuty = wTimePhC;
 8008b8e:	fa1f fe82 	uxth.w	lr, r2
      pHandle->midDuty = wTimePhA;
 8008b92:	fa1f fc81 	uxth.w	ip, r1
      pHandle->highDuty = wTimePhB;
 8008b96:	b29c      	uxth	r4, r3
 8008b98:	2504      	movs	r5, #4
 8008b9a:	e725      	b.n	80089e8 <PWMC_SetPhaseVoltage+0x84>

08008b9c <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8008b9c:	6883      	ldr	r3, [r0, #8]
 8008b9e:	4718      	bx	r3

08008ba0 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	4604      	mov	r4, r0
  bool retVal = false;
  if ( action == CRC_START )
 8008ba4:	b179      	cbz	r1, 8008bc6 <PWMC_CurrentReadingCalibr+0x26>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8008ba6:	2901      	cmp	r1, #1
 8008ba8:	d001      	beq.n	8008bae <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8008baa:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8008bac:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8008bae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8008bb2:	b19b      	cbz	r3, 8008bdc <PWMC_CurrentReadingCalibr+0x3c>
      pHandle->OffCalibrWaitTimeCounter--;
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1f4      	bne.n	8008baa <PWMC_CurrentReadingCalibr+0xa>
        pHandle->pFctCurrReadingCalib( pHandle );
 8008bc0:	6903      	ldr	r3, [r0, #16]
 8008bc2:	4798      	blx	r3
        retVal = true;
 8008bc4:	e00a      	b.n	8008bdc <PWMC_CurrentReadingCalibr+0x3c>
    PWMC_SwitchOffPWM( pHandle );
 8008bc6:	f7ff ffe9 	bl	8008b9c <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8008bca:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8008bce:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e9      	bne.n	8008baa <PWMC_CurrentReadingCalibr+0xa>
      pHandle->pFctCurrReadingCalib( pHandle );
 8008bd6:	6923      	ldr	r3, [r4, #16]
 8008bd8:	4620      	mov	r0, r4
 8008bda:	4798      	blx	r3
      retVal = true;
 8008bdc:	2001      	movs	r0, #1
}
 8008bde:	bd10      	pop	{r4, pc}

08008be0 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8008be0:	69c3      	ldr	r3, [r0, #28]
 8008be2:	4718      	bx	r3

08008be4 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8008be4:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8008be8:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008bea:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8008bec:	4494      	add	ip, r2
 8008bee:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
{
 8008bf2:	b430      	push	{r4, r5}
 8008bf4:	2500      	movs	r5, #0
 8008bf6:	f36c 050f 	bfi	r5, ip, #0, #16
 8008bfa:	f36c 451f 	bfi	r5, ip, #16, #16
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008bfe:	b14b      	cbz	r3, 8008c14 <RVBS_Clear+0x30>
  {
    pHandle->aBuffer[index] = aux;
 8008c00:	6a04      	ldr	r4, [r0, #32]
 8008c02:	2300      	movs	r3, #0
 8008c04:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008c06:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 8008c08:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008c0c:	8b01      	ldrh	r1, [r0, #24]
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	4291      	cmp	r1, r2
 8008c12:	d8f7      	bhi.n	8008c04 <RVBS_Clear+0x20>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8008c14:	2300      	movs	r3, #0
  pHandle->_Super.LatestConv = aux;
 8008c16:	6045      	str	r5, [r0, #4]
  pHandle->index = 0;
 8008c18:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
}
 8008c1c:	bc30      	pop	{r4, r5}
 8008c1e:	4770      	bx	lr

08008c20 <RVBS_Init>:
{
 8008c20:	b510      	push	{r4, lr}
 8008c22:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8008c24:	300c      	adds	r0, #12
 8008c26:	f7f9 fd6f 	bl	8002708 <RCM_RegisterRegConv>
 8008c2a:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
  RVBS_Clear( pHandle );
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f7ff ffd8 	bl	8008be4 <RVBS_Clear>
}
 8008c34:	bd10      	pop	{r4, pc}
 8008c36:	bf00      	nop

08008c38 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8008c38:	88c3      	ldrh	r3, [r0, #6]
 8008c3a:	8b42      	ldrh	r2, [r0, #26]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d306      	bcc.n	8008c4e <RVBS_CheckFaultState+0x16>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8008c40:	8b80      	ldrh	r0, [r0, #28]
 8008c42:	4298      	cmp	r0, r3
 8008c44:	bf94      	ite	ls
 8008c46:	2000      	movls	r0, #0
 8008c48:	2001      	movhi	r0, #1
 8008c4a:	0080      	lsls	r0, r0, #2
 8008c4c:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8008c4e:	2002      	movs	r0, #2
  else
  {
    fault = MC_NO_ERROR;
  }
  return fault;
}
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop

08008c54 <RVBS_CalcAvVbus>:
{
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008c58:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8008c5c:	f7f9 fe2e 	bl	80028bc <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8008c60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c64:	4298      	cmp	r0, r3
 8008c66:	d01e      	beq.n	8008ca6 <RVBS_CalcAvVbus+0x52>
    pHandle->aBuffer[pHandle->index] = hAux;
 8008c68:	6a26      	ldr	r6, [r4, #32]
 8008c6a:	f894 c025 	ldrb.w	ip, [r4, #37]	@ 0x25
 8008c6e:	f826 001c 	strh.w	r0, [r6, ip, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008c72:	8b25      	ldrh	r5, [r4, #24]
 8008c74:	b1e5      	cbz	r5, 8008cb0 <RVBS_CalcAvVbus+0x5c>
 8008c76:	2300      	movs	r3, #0
    wtemp = 0;
 8008c78:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8008c7a:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008c7e:	3301      	adds	r3, #1
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	42ab      	cmp	r3, r5
      wtemp += pHandle->aBuffer[i];
 8008c84:	440a      	add	r2, r1
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008c86:	d3f8      	bcc.n	8008c7a <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8008c88:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008c8c:	1e6b      	subs	r3, r5, #1
 8008c8e:	459c      	cmp	ip, r3
      pHandle->index++;
 8008c90:	bfb4      	ite	lt
 8008c92:	f10c 0c01 	addlt.w	ip, ip, #1
      pHandle->index = 0;
 8008c96:	2300      	movge	r3, #0
    pHandle->_Super.LatestConv = hAux;
 8008c98:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8008c9a:	80e2      	strh	r2, [r4, #6]
      pHandle->index++;
 8008c9c:	bfb4      	ite	lt
 8008c9e:	f884 c025 	strblt.w	ip, [r4, #37]	@ 0x25
      pHandle->index = 0;
 8008ca2:	f884 3025 	strbge.w	r3, [r4, #37]	@ 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f7ff ffc6 	bl	8008c38 <RVBS_CheckFaultState>
 8008cac:	8120      	strh	r0, [r4, #8]
}
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
    wtemp /= pHandle->LowPassFilterBW;
 8008cb0:	deff      	udf	#255	@ 0xff
 8008cb2:	bf00      	nop

08008cb4 <REMNG_Init>:
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
  pHandle->TargetFinal = 0;
 8008cb4:	2300      	movs	r3, #0
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8008cb6:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8008cb8:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8008cbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8008cc0:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8008cc2:	4770      	bx	lr

08008cc4 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8008cc4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008cc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008ccc:	8182      	strh	r2, [r0, #12]
}
 8008cce:	4770      	bx	lr

08008cd0 <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008cd0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008cd4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008cd8:	81c2      	strh	r2, [r0, #14]
}
 8008cda:	4770      	bx	lr

08008cdc <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8008cdc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008ce0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008ce4:	8202      	strh	r2, [r0, #16]
}
 8008ce6:	4770      	bx	lr

08008ce8 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8008ce8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008cec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8008cf0:	8980      	ldrh	r0, [r0, #12]
 8008cf2:	4770      	bx	lr

08008cf4 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8008cf4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008cf8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8008cfc:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop

08008d04 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8008d04:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008d08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8008d0c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop

08008d14 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8008d14:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop

08008d1c <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8008d1c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop

08008d24 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8008d24:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop

08008d2c <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8008d2c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop

08008d34 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8008d34:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8008d38:	4603      	mov	r3, r0
 8008d3a:	b510      	push	{r4, lr}
  {
    hAux = -( *pMecSpeedUnit );
 8008d3c:	fa1f f18c 	uxth.w	r1, ip
  if ( *pMecSpeedUnit < 0 )
 8008d40:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( *pMecSpeedUnit );
 8008d44:	bfb8      	it	lt
 8008d46:	4249      	neglt	r1, r1
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8008d48:	f8b3 e016 	ldrh.w	lr, [r3, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008d4c:	78c0      	ldrb	r0, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008d4e:	781a      	ldrb	r2, [r3, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008d50:	8a9c      	ldrh	r4, [r3, #20]
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8008d52:	f9b3 c012 	ldrsh.w	ip, [r3, #18]
    hAux = -( *pMecSpeedUnit );
 8008d56:	bfb8      	it	lt
 8008d58:	b289      	uxthlt	r1, r1
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8008d5a:	458e      	cmp	lr, r1
 8008d5c:	d816      	bhi.n	8008d8c <SPD_IsMecSpeedReliable+0x58>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 8008d5e:	fa1f fe8c 	uxth.w	lr, ip
  if ( pHandle->hMecAccelUnitP < 0 )
 8008d62:	f1bc 0f00 	cmp.w	ip, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8008d66:	bfb8      	it	lt
 8008d68:	f1ce 0e00 	rsblt	lr, lr, #0
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8008d6c:	f8b3 c018 	ldrh.w	ip, [r3, #24]
    hAux = -( pHandle->hMecAccelUnitP );
 8008d70:	bfb8      	it	lt
 8008d72:	fa1f fe8e 	uxthlt.w	lr, lr
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8008d76:	45f4      	cmp	ip, lr
 8008d78:	d308      	bcc.n	8008d8c <SPD_IsMecSpeedReliable+0x58>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8008d7a:	428c      	cmp	r4, r1
 8008d7c:	d306      	bcc.n	8008d8c <SPD_IsMecSpeedReliable+0x58>
      bSpeedErrorNumber++;
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8008d7e:	4290      	cmp	r0, r2
 8008d80:	d809      	bhi.n	8008d96 <SPD_IsMecSpeedReliable+0x62>
    {
      bSpeedErrorNumber = 0u;
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8008d82:	1a10      	subs	r0, r2, r0
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008d84:	701a      	strb	r2, [r3, #0]
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 8008d86:	bf18      	it	ne
 8008d88:	2001      	movne	r0, #1

  return ( SpeedSensorReliability );
}
 8008d8a:	bd10      	pop	{r4, pc}
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8008d8c:	4290      	cmp	r0, r2
 8008d8e:	d9f8      	bls.n	8008d82 <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber++;
 8008d90:	3201      	adds	r2, #1
 8008d92:	b2d2      	uxtb	r2, r2
 8008d94:	e7f5      	b.n	8008d82 <SPD_IsMecSpeedReliable+0x4e>
      bSpeedErrorNumber = 0u;
 8008d96:	2200      	movs	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008d98:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8008d9a:	2001      	movs	r0, #1
}
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	bf00      	nop

08008da0 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8008da0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008da4:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
  wAux *= INT16_MAX;
 8008da8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008dac:	fb93 f0f2 	sdiv	r0, r3, r2
  return ( int16_t )wAux;
}
 8008db0:	b200      	sxth	r0, r0
 8008db2:	4770      	bx	lr

08008db4 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8008db4:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
  pHandle->PISpeed = pPI;
 8008db8:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008dba:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
  pHandle->SPD = SPD_Handle;
 8008dbe:	6142      	str	r2, [r0, #20]
{
 8008dc0:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8008dc2:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8008dc6:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8008dc8:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8008dca:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8008dce:	0409      	lsls	r1, r1, #16
 8008dd0:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8008dd4:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8008dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 8008dda:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8008ddc:	6183      	str	r3, [r0, #24]
}
 8008dde:	4770      	bx	lr

08008de0 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8008de0:	6940      	ldr	r0, [r0, #20]
 8008de2:	4770      	bx	lr

08008de4 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8008de4:	7803      	ldrb	r3, [r0, #0]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d000      	beq.n	8008dec <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8008dea:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8008dec:	6900      	ldr	r0, [r0, #16]
 8008dee:	2100      	movs	r1, #0
 8008df0:	f7ff bcdc 	b.w	80087ac <PID_SetIntegralTerm>

08008df4 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8008df4:	6840      	ldr	r0, [r0, #4]
 8008df6:	2800      	cmp	r0, #0
 8008df8:	bfbc      	itt	lt
 8008dfa:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8008dfe:	30ff      	addlt	r0, #255	@ 0xff
}
 8008e00:	1400      	asrs	r0, r0, #16
 8008e02:	4770      	bx	lr

08008e04 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8008e04:	6880      	ldr	r0, [r0, #8]
 8008e06:	2800      	cmp	r0, #0
 8008e08:	bfbc      	itt	lt
 8008e0a:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8008e0e:	30ff      	addlt	r0, #255	@ 0xff
}
 8008e10:	1400      	asrs	r0, r0, #16
 8008e12:	4770      	bx	lr

08008e14 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008e14:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8008e16:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008e18:	60c3      	str	r3, [r0, #12]
}
 8008e1a:	4770      	bx	lr

08008e1c <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8008e1c:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008e1e:	7803      	ldrb	r3, [r0, #0]
{
 8008e20:	4604      	mov	r4, r0
 8008e22:	460d      	mov	r5, r1
 8008e24:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008e26:	b31b      	cbz	r3, 8008e70 <STC_ExecRamp+0x54>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008e28:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008e2a:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	bfbc      	itt	lt
 8008e30:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8008e34:	30ff      	addlt	r0, #255	@ 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008e36:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008e38:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008e3c:	dd01      	ble.n	8008e42 <STC_ExecRamp+0x26>
 8008e3e:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8008e40:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8008e42:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8008e46:	428b      	cmp	r3, r1
 8008e48:	dcf9      	bgt.n	8008e3e <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8008e4a:	8c23      	ldrh	r3, [r4, #32]
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	da03      	bge.n	8008e58 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8008e50:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 8008e54:	428b      	cmp	r3, r1
 8008e56:	dbf2      	blt.n	8008e3e <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8008e58:	b9a6      	cbnz	r6, 8008e84 <STC_ExecRamp+0x68>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8008e5a:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8008e5c:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8008e5e:	2b01      	cmp	r3, #1
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8008e60:	bf0c      	ite	eq
 8008e62:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8008e64:	60a5      	strne	r5, [r4, #8]
      pHandle->IncDecAmount = 0;
 8008e66:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
 8008e68:	61a0      	str	r0, [r4, #24]
      pHandle->RampRemainingStep++;
 8008e6a:	60e6      	str	r6, [r4, #12]
      pHandle->IncDecAmount = wAux1;
 8008e6c:	2001      	movs	r0, #1
}
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8008e70:	f7ff ffc8 	bl	8008e04 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8008e74:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8008e76:	42ab      	cmp	r3, r5
 8008e78:	dbe1      	blt.n	8008e3e <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8008e7a:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8008e7e:	42ab      	cmp	r3, r5
 8008e80:	dcdd      	bgt.n	8008e3e <STC_ExecRamp+0x22>
 8008e82:	e7e9      	b.n	8008e58 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8008e84:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8008e86:	4a06      	ldr	r2, [pc, #24]	@ (8008ea0 <STC_ExecRamp+0x84>)
      pHandle->TargetFinal = hTargetFinal;
 8008e88:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8008e8a:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8008e8e:	fba2 2303 	umull	r2, r3, r2, r3
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8008e92:	1a28      	subs	r0, r5, r0
      wAux /= 1000u;
 8008e94:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8008e96:	1c5e      	adds	r6, r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8008e98:	0400      	lsls	r0, r0, #16
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8008e9a:	fb90 f0f6 	sdiv	r0, r0, r6
      pHandle->IncDecAmount = wAux1;
 8008e9e:	e7e3      	b.n	8008e68 <STC_ExecRamp+0x4c>
 8008ea0:	10624dd3 	.word	0x10624dd3

08008ea4 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8008ea8:	6183      	str	r3, [r0, #24]
}
 8008eaa:	4770      	bx	lr

08008eac <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8008eac:	b570      	push	{r4, r5, r6, lr}
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008eae:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8008eb0:	68c3      	ldr	r3, [r0, #12]
{
 8008eb2:	4604      	mov	r4, r0
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008eb4:	b96a      	cbnz	r2, 8008ed2 <STC_CalcTorqueReference+0x26>
  if ( pHandle->RampRemainingStep > 1u )
 8008eb6:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->TorqueRef;
 8008eb8:	6886      	ldr	r6, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 8008eba:	d923      	bls.n	8008f04 <STC_CalcTorqueReference+0x58>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8008ebc:	6982      	ldr	r2, [r0, #24]
 8008ebe:	4416      	add	r6, r2

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8008ec0:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008ec2:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8008ec4:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	db20      	blt.n	8008f0c <STC_CalcTorqueReference+0x60>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8008eca:	1405      	asrs	r5, r0, #16
 8008ecc:	b228      	sxth	r0, r5
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8008ece:	60a6      	str	r6, [r4, #8]
  }

  return hTorqueReference;
}
 8008ed0:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->RampRemainingStep > 1u )
 8008ed2:	2b01      	cmp	r3, #1
    wCurrentReference = pHandle->SpeedRefUnitExt;
 8008ed4:	6846      	ldr	r6, [r0, #4]
  if ( pHandle->RampRemainingStep > 1u )
 8008ed6:	d91d      	bls.n	8008f14 <STC_CalcTorqueReference+0x68>
    wCurrentReference += pHandle->IncDecAmount;
 8008ed8:	6981      	ldr	r1, [r0, #24]
 8008eda:	440e      	add	r6, r1
    pHandle->RampRemainingStep--;
 8008edc:	3b01      	subs	r3, #1
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008ede:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8008ee0:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	db1a      	blt.n	8008f1c <STC_CalcTorqueReference+0x70>
 8008ee6:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8008ee8:	2a01      	cmp	r2, #1
 8008eea:	d1ef      	bne.n	8008ecc <STC_CalcTorqueReference+0x20>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8008eec:	6960      	ldr	r0, [r4, #20]
 8008eee:	f7ff ff19 	bl	8008d24 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8008ef2:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8008ef4:	b209      	sxth	r1, r1
 8008ef6:	6920      	ldr	r0, [r4, #16]
 8008ef8:	f7ff fc64 	bl	80087c4 <PI_Controller>
    pHandle->SpeedRefUnitExt = wCurrentReference;
 8008efc:	6066      	str	r6, [r4, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8008efe:	0406      	lsls	r6, r0, #16
 8008f00:	60a6      	str	r6, [r4, #8]
}
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8008f04:	d014      	beq.n	8008f30 <STC_CalcTorqueReference+0x84>
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8008f06:	2e00      	cmp	r6, #0
 8008f08:	4630      	mov	r0, r6
 8008f0a:	dade      	bge.n	8008eca <STC_CalcTorqueReference+0x1e>
 8008f0c:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8008f10:	30ff      	adds	r0, #255	@ 0xff
 8008f12:	e7da      	b.n	8008eca <STC_CalcTorqueReference+0x1e>
  else if ( pHandle->RampRemainingStep == 1u )
 8008f14:	d006      	beq.n	8008f24 <STC_CalcTorqueReference+0x78>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8008f16:	2e00      	cmp	r6, #0
 8008f18:	4630      	mov	r0, r6
 8008f1a:	dae4      	bge.n	8008ee6 <STC_CalcTorqueReference+0x3a>
 8008f1c:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8008f20:	30ff      	adds	r0, #255	@ 0xff
 8008f22:	e7e0      	b.n	8008ee6 <STC_CalcTorqueReference+0x3a>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008f24:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8008f28:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008f2a:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8008f2c:	60c3      	str	r3, [r0, #12]
 8008f2e:	e7db      	b.n	8008ee8 <STC_CalcTorqueReference+0x3c>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008f30:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8008f34:	60c2      	str	r2, [r0, #12]
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008f36:	042e      	lsls	r6, r5, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8008f38:	e7c8      	b.n	8008ecc <STC_CalcTorqueReference+0x20>
 8008f3a:	bf00      	nop

08008f3c <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8008f3c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop

08008f44 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8008f44:	8bc0      	ldrh	r0, [r0, #30]
 8008f46:	4770      	bx	lr

08008f48 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8008f48:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	@ 0x24
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop

08008f50 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008f50:	f8d0 302e 	ldr.w	r3, [r0, #46]	@ 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8008f54:	2200      	movs	r2, #0
 8008f56:	b299      	uxth	r1, r3
 8008f58:	f361 020f 	bfi	r2, r1, #0, #16
 8008f5c:	0c1b      	lsrs	r3, r3, #16
 8008f5e:	f363 421f 	bfi	r2, r3, #16, #16
{
 8008f62:	b082      	sub	sp, #8
}
 8008f64:	4610      	mov	r0, r2
 8008f66:	b002      	add	sp, #8
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop

08008f6c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8008f70:	6940      	ldr	r0, [r0, #20]
 8008f72:	f7ff fed7 	bl	8008d24 <SPD_GetAvrgMecSpeedUnit>
 8008f76:	0400      	lsls	r0, r0, #16
 8008f78:	6060      	str	r0, [r4, #4]
}
 8008f7a:	bd10      	pop	{r4, pc}

08008f7c <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8008f80:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop

08008f88 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8008f88:	b500      	push	{lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008f8a:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8008f8c:	f8b0 e004 	ldrh.w	lr, [r0, #4]
{
 8008f90:	4684      	mov	ip, r0
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008f92:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 8008f94:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008f96:	ea23 0202 	bic.w	r2, r3, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8008f9a:	ea41 010e 	orr.w	r1, r1, lr
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008f9e:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8008fa0:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008fa2:	f8ac 2002 	strh.w	r2, [ip, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8008fa6:	f8ac 1004 	strh.w	r1, [ip, #4]
  if ( LocalState == FAULT_NOW )
 8008faa:	d008      	beq.n	8008fbe <STM_FaultProcessing+0x36>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8008fac:	b90a      	cbnz	r2, 8008fb2 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8008fae:	f85d fb04 	ldr.w	pc, [sp], #4
      pHandle->bState = FAULT_NOW;
 8008fb2:	230a      	movs	r3, #10
 8008fb4:	f88c 3000 	strb.w	r3, [ip]
      LocalState = FAULT_NOW;
 8008fb8:	200a      	movs	r0, #10
}
 8008fba:	f85d fb04 	ldr.w	pc, [sp], #4
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8008fbe:	2a00      	cmp	r2, #0
 8008fc0:	d1fa      	bne.n	8008fb8 <STM_FaultProcessing+0x30>
      pHandle->bState = FAULT_OVER;
 8008fc2:	200b      	movs	r0, #11
 8008fc4:	f88c 0000 	strb.w	r0, [ip]
}
 8008fc8:	f85d fb04 	ldr.w	pc, [sp], #4

08008fcc <STM_NextState>:
{
 8008fcc:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8008fce:	7803      	ldrb	r3, [r0, #0]
 8008fd0:	2b14      	cmp	r3, #20
 8008fd2:	d820      	bhi.n	8009016 <STM_NextState+0x4a>
 8008fd4:	e8df f003 	tbb	[pc, r3]
 8008fd8:	530d2930 	.word	0x530d2930
 8008fdc:	260d6547 	.word	0x260d6547
 8008fe0:	1f1f421d 	.word	0x1f1f421d
 8008fe4:	3a3d0b19 	.word	0x3a3d0b19
 8008fe8:	61506937 	.word	0x61506937
 8008fec:	5e          	.byte	0x5e
 8008fed:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8008fee:	290e      	cmp	r1, #14
 8008ff0:	d00c      	beq.n	800900c <STM_NextState+0x40>
      if ( bState == ANY_STOP )
 8008ff2:	2907      	cmp	r1, #7
 8008ff4:	d00a      	beq.n	800900c <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008ff6:	f001 01fd 	and.w	r1, r1, #253	@ 0xfd
 8008ffa:	2901      	cmp	r1, #1
 8008ffc:	d003      	beq.n	8009006 <STM_NextState+0x3a>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8008ffe:	2200      	movs	r2, #0
 8009000:	2180      	movs	r1, #128	@ 0x80
 8009002:	f7ff ffc1 	bl	8008f88 <STM_FaultProcessing>
 8009006:	2000      	movs	r0, #0
}
 8009008:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 800900a:	b921      	cbnz	r1, 8009016 <STM_NextState+0x4a>
    pHandle->bState = bNewState;
 800900c:	7001      	strb	r1, [r0, #0]
 800900e:	2001      	movs	r0, #1
}
 8009010:	bd08      	pop	{r3, pc}
      if ( bState == STOP_IDLE )
 8009012:	2909      	cmp	r1, #9
 8009014:	d0fa      	beq.n	800900c <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009016:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 800901a:	2b01      	cmp	r3, #1
 800901c:	d0f3      	beq.n	8009006 <STM_NextState+0x3a>
 800901e:	2907      	cmp	r1, #7
 8009020:	d0f1      	beq.n	8009006 <STM_NextState+0x3a>
 8009022:	e7ec      	b.n	8008ffe <STM_NextState+0x32>
      if ( bState == STOP )
 8009024:	2908      	cmp	r1, #8
 8009026:	d1f6      	bne.n	8009016 <STM_NextState+0x4a>
 8009028:	e7f0      	b.n	800900c <STM_NextState+0x40>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800902a:	2907      	cmp	r1, #7
 800902c:	d0ee      	beq.n	800900c <STM_NextState+0x40>
 800902e:	f1a1 030d 	sub.w	r3, r1, #13
 8009032:	2b01      	cmp	r3, #1
 8009034:	d8df      	bhi.n	8008ff6 <STM_NextState+0x2a>
 8009036:	e7e9      	b.n	800900c <STM_NextState+0x40>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009038:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 800903c:	2b01      	cmp	r3, #1
 800903e:	d0e5      	beq.n	800900c <STM_NextState+0x40>
           || ( bState == ICLWAIT ) )
 8009040:	290c      	cmp	r1, #12
 8009042:	d1ec      	bne.n	800901e <STM_NextState+0x52>
 8009044:	e7e2      	b.n	800900c <STM_NextState+0x40>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8009046:	2911      	cmp	r1, #17
 8009048:	d1d3      	bne.n	8008ff2 <STM_NextState+0x26>
 800904a:	e7df      	b.n	800900c <STM_NextState+0x40>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800904c:	2902      	cmp	r1, #2
 800904e:	d1d0      	bne.n	8008ff2 <STM_NextState+0x26>
 8009050:	e7dc      	b.n	800900c <STM_NextState+0x40>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8009052:	f001 03f7 	and.w	r3, r1, #247	@ 0xf7
 8009056:	2b07      	cmp	r3, #7
 8009058:	d1cd      	bne.n	8008ff6 <STM_NextState+0x2a>
 800905a:	e7d7      	b.n	800900c <STM_NextState+0x40>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800905c:	2900      	cmp	r1, #0
 800905e:	d0d5      	beq.n	800900c <STM_NextState+0x40>
 8009060:	290c      	cmp	r1, #12
 8009062:	d1d8      	bne.n	8009016 <STM_NextState+0x4a>
 8009064:	e7d2      	b.n	800900c <STM_NextState+0x40>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8009066:	2913      	cmp	r1, #19
 8009068:	d0d0      	beq.n	800900c <STM_NextState+0x40>
 800906a:	f001 03fd 	and.w	r3, r1, #253	@ 0xfd
 800906e:	2b05      	cmp	r3, #5
 8009070:	d0cc      	beq.n	800900c <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8009072:	2b01      	cmp	r3, #1
 8009074:	d1c3      	bne.n	8008ffe <STM_NextState+0x32>
 8009076:	e7c6      	b.n	8009006 <STM_NextState+0x3a>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8009078:	2904      	cmp	r1, #4
 800907a:	d1ba      	bne.n	8008ff2 <STM_NextState+0x26>
 800907c:	e7c6      	b.n	800900c <STM_NextState+0x40>
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 800907e:	2907      	cmp	r1, #7
 8009080:	d0c4      	beq.n	800900c <STM_NextState+0x40>
 8009082:	2911      	cmp	r1, #17
 8009084:	d8bb      	bhi.n	8008ffe <STM_NextState+0x32>
 8009086:	4b0c      	ldr	r3, [pc, #48]	@ (80090b8 <STM_NextState+0xec>)
 8009088:	40cb      	lsrs	r3, r1
 800908a:	07da      	lsls	r2, r3, #31
 800908c:	d4be      	bmi.n	800900c <STM_NextState+0x40>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800908e:	2903      	cmp	r1, #3
 8009090:	d0b9      	beq.n	8009006 <STM_NextState+0x3a>
 8009092:	e7b4      	b.n	8008ffe <STM_NextState+0x32>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8009094:	2912      	cmp	r1, #18
 8009096:	d1ac      	bne.n	8008ff2 <STM_NextState+0x26>
 8009098:	e7b8      	b.n	800900c <STM_NextState+0x40>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800909a:	1f0b      	subs	r3, r1, #4
 800909c:	2b01      	cmp	r3, #1
 800909e:	d8a8      	bhi.n	8008ff2 <STM_NextState+0x26>
 80090a0:	e7b4      	b.n	800900c <STM_NextState+0x40>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 80090a2:	1f8b      	subs	r3, r1, #6
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d8a6      	bhi.n	8008ff6 <STM_NextState+0x2a>
 80090a8:	e7b0      	b.n	800900c <STM_NextState+0x40>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 80090aa:	2914      	cmp	r1, #20
 80090ac:	d8a3      	bhi.n	8008ff6 <STM_NextState+0x2a>
 80090ae:	4b03      	ldr	r3, [pc, #12]	@ (80090bc <STM_NextState+0xf0>)
 80090b0:	410b      	asrs	r3, r1
 80090b2:	07db      	lsls	r3, r3, #31
 80090b4:	d5aa      	bpl.n	800900c <STM_NextState+0x40>
 80090b6:	e79e      	b.n	8008ff6 <STM_NextState+0x2a>
 80090b8:	00030012 	.word	0x00030012
 80090bc:	ffebff7f 	.word	0xffebff7f

080090c0 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80090c0:	7800      	ldrb	r0, [r0, #0]
 80090c2:	4770      	bx	lr

080090c4 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80090c4:	7803      	ldrb	r3, [r0, #0]
 80090c6:	2b0b      	cmp	r3, #11
 80090c8:	d001      	beq.n	80090ce <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80090ca:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80090cc:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80090ce:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80090d0:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80090d2:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80090d4:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80090d6:	2001      	movs	r0, #1
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop

080090dc <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80090dc:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80090de:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80090e0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop

080090e8 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80090e8:	f7fe bc80 	b.w	80079ec <FCP_Init>

080090ec <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80090ec:	f890 3097 	ldrb.w	r3, [r0, #151]	@ 0x97
 80090f0:	b17b      	cbz	r3, 8009112 <UFCP_TX_IRQ_Handler+0x26>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80090f2:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 80090f6:	f8d0 1120 	ldr.w	r1, [r0, #288]	@ 0x120
 80090fa:	4602      	mov	r2, r0
    switch ( pBaseHandle->TxFrameLevel )
 80090fc:	b183      	cbz	r3, 8009120 <UFCP_TX_IRQ_Handler+0x34>
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d008      	beq.n	8009114 <UFCP_TX_IRQ_Handler+0x28>
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8009102:	7d40      	ldrb	r0, [r0, #21]
 8009104:	3001      	adds	r0, #1
 8009106:	4283      	cmp	r3, r0
 8009108:	dc10      	bgt.n	800912c <UFCP_TX_IRQ_Handler+0x40>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800910a:	18d0      	adds	r0, r2, r3
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800910c:	7d00      	ldrb	r0, [r0, #20]
 800910e:	6048      	str	r0, [r1, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8009110:	e002      	b.n	8009118 <UFCP_TX_IRQ_Handler+0x2c>
 8009112:	4770      	bx	lr
 8009114:	7d40      	ldrb	r0, [r0, #21]
 8009116:	6048      	str	r0, [r1, #4]
    {
      pBaseHandle->TxFrameLevel++;
 8009118:	3301      	adds	r3, #1
 800911a:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 800911e:	4770      	bx	lr
 8009120:	7d00      	ldrb	r0, [r0, #20]
 8009122:	6048      	str	r0, [r1, #4]
 8009124:	3301      	adds	r3, #1
 8009126:	f882 3098 	strb.w	r3, [r2, #152]	@ 0x98
 800912a:	4770      	bx	lr
{
 800912c:	b410      	push	{r4}
 800912e:	f892 3096 	ldrb.w	r3, [r2, #150]	@ 0x96
 8009132:	604b      	str	r3, [r1, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8009134:	310c      	adds	r1, #12
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	e851 3f00 	ldrex	r3, [r1]
 800913a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913e:	e841 3400 	strex	r4, r3, [r1]
 8009142:	2c00      	cmp	r4, #0
 8009144:	d1f7      	bne.n	8009136 <UFCP_TX_IRQ_Handler+0x4a>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8009146:	f882 4097 	strb.w	r4, [r2, #151]	@ 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800914a:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800914e:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8009152:	4718      	bx	r3

08009154 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8009154:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 8009158:	b97b      	cbnz	r3, 800917a <UFCP_Receive+0x26>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800915a:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800915e:	2301      	movs	r3, #1
 8009160:	f8a0 311c 	strh.w	r3, [r0, #284]	@ 0x11c
 8009164:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	e852 3f00 	ldrex	r3, [r2]
 800916a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916e:	e842 3100 	strex	r1, r3, [r2]
 8009172:	2900      	cmp	r1, #0
 8009174:	d1f7      	bne.n	8009166 <UFCP_Receive+0x12>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8009176:	2002      	movs	r0, #2
 8009178:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800917a:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop

08009180 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8009184:	f890 0097 	ldrb.w	r0, [r0, #151]	@ 0x97
 8009188:	bb88      	cbnz	r0, 80091ee <UFCP_Send+0x6e>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 800918a:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 800918c:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 800918e:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8009190:	b2c0      	uxtb	r0, r0
 8009192:	b19b      	cbz	r3, 80091bc <UFCP_Send+0x3c>
 8009194:	2805      	cmp	r0, #5
 8009196:	d94e      	bls.n	8009236 <UFCP_Send+0xb6>
 8009198:	f104 0616 	add.w	r6, r4, #22
 800919c:	1c51      	adds	r1, r2, #1
 800919e:	1a75      	subs	r5, r6, r1
 80091a0:	2d02      	cmp	r5, #2
 80091a2:	d826      	bhi.n	80091f2 <UFCP_Send+0x72>
 80091a4:	3001      	adds	r0, #1
 80091a6:	f104 0315 	add.w	r3, r4, #21
 80091aa:	4402      	add	r2, r0
 80091ac:	e000      	b.n	80091b0 <UFCP_Send+0x30>
 80091ae:	3101      	adds	r1, #1
 80091b0:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 80091b4:	f803 0f01 	strb.w	r0, [r3, #1]!
 80091b8:	428a      	cmp	r2, r1
 80091ba:	d1f8      	bne.n	80091ae <UFCP_Send+0x2e>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80091bc:	f104 0014 	add.w	r0, r4, #20
 80091c0:	f7fe fc28 	bl	8007a14 <FCP_CalcCRC>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80091c4:	f8d4 2120 	ldr.w	r2, [r4, #288]	@ 0x120
 80091c8:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96

    pHandle->TxFrameLevel = 0;
 80091cc:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80091ce:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 80091d0:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80091d4:	f884 3097 	strb.w	r3, [r4, #151]	@ 0x97
 80091d8:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091da:	e852 3f00 	ldrex	r3, [r2]
 80091de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e2:	e842 3100 	strex	r1, r3, [r2]
 80091e6:	2900      	cmp	r1, #0
 80091e8:	d1f7      	bne.n	80091da <UFCP_Send+0x5a>
 80091ea:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 80091ec:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80091ee:	2001      	movs	r0, #1
}
 80091f0:	bd70      	pop	{r4, r5, r6, pc}
 80091f2:	089d      	lsrs	r5, r3, #2
 80091f4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80091f8:	4611      	mov	r1, r2
 80091fa:	46b4      	mov	ip, r6
    while ( size-- ) *dest++ = *buffer++;
 80091fc:	f851 eb04 	ldr.w	lr, [r1], #4
 8009200:	f84c eb04 	str.w	lr, [ip], #4
 8009204:	42a9      	cmp	r1, r5
 8009206:	d1f9      	bne.n	80091fc <UFCP_Send+0x7c>
 8009208:	f003 01fc 	and.w	r1, r3, #252	@ 0xfc
 800920c:	1a40      	subs	r0, r0, r1
 800920e:	079b      	lsls	r3, r3, #30
 8009210:	b2c0      	uxtb	r0, r0
 8009212:	eb02 0c01 	add.w	ip, r2, r1
 8009216:	eb06 0501 	add.w	r5, r6, r1
 800921a:	d0cf      	beq.n	80091bc <UFCP_Send+0x3c>
 800921c:	5c53      	ldrb	r3, [r2, r1]
 800921e:	5473      	strb	r3, [r6, r1]
 8009220:	2800      	cmp	r0, #0
 8009222:	d0cb      	beq.n	80091bc <UFCP_Send+0x3c>
 8009224:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8009228:	706b      	strb	r3, [r5, #1]
 800922a:	2801      	cmp	r0, #1
 800922c:	d0c6      	beq.n	80091bc <UFCP_Send+0x3c>
 800922e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8009232:	70ab      	strb	r3, [r5, #2]
 8009234:	e7c2      	b.n	80091bc <UFCP_Send+0x3c>
 8009236:	1c51      	adds	r1, r2, #1
 8009238:	e7b4      	b.n	80091a4 <UFCP_Send+0x24>
 800923a:	bf00      	nop

0800923c <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800923c:	f890 311c 	ldrb.w	r3, [r0, #284]	@ 0x11c
 8009240:	b90b      	cbnz	r3, 8009246 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009242:	482e      	ldr	r0, [pc, #184]	@ (80092fc <UFCP_RX_IRQ_Handler+0xc0>)
}
 8009244:	4770      	bx	lr
{
 8009246:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8009248:	f890 311d 	ldrb.w	r3, [r0, #285]	@ 0x11d
{
 800924c:	b083      	sub	sp, #12
 800924e:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8009250:	fa5f fc81 	uxtb.w	ip, r1
    switch ( pBaseHandle->RxFrameLevel )
 8009254:	b39b      	cbz	r3, 80092be <UFCP_RX_IRQ_Handler+0x82>
 8009256:	2b01      	cmp	r3, #1
 8009258:	d03b      	beq.n	80092d2 <UFCP_RX_IRQ_Handler+0x96>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800925a:	f890 209a 	ldrb.w	r2, [r0, #154]	@ 0x9a
 800925e:	3201      	adds	r2, #1
 8009260:	4293      	cmp	r3, r2
 8009262:	dc08      	bgt.n	8009276 <UFCP_RX_IRQ_Handler+0x3a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8009264:	18c2      	adds	r2, r0, r3
          pBaseHandle->RxFrameLevel++;
 8009266:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8009268:	f882 c099 	strb.w	ip, [r2, #153]	@ 0x99
          pBaseHandle->RxFrameLevel++;
 800926c:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8009270:	4822      	ldr	r0, [pc, #136]	@ (80092fc <UFCP_RX_IRQ_Handler+0xc0>)
}
 8009272:	b003      	add	sp, #12
 8009274:	bd30      	pop	{r4, r5, pc}
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8009276:	f8d0 2120 	ldr.w	r2, [r0, #288]	@ 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800927a:	f880 c11b 	strb.w	ip, [r0, #283]	@ 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	8243      	strh	r3, [r0, #18]
 8009282:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009284:	e852 3f00 	ldrex	r3, [r2]
 8009288:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928c:	e842 3100 	strex	r1, r3, [r2]
 8009290:	2900      	cmp	r1, #0
 8009292:	d1f7      	bne.n	8009284 <UFCP_RX_IRQ_Handler+0x48>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009294:	f884 111c 	strb.w	r1, [r4, #284]	@ 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8009298:	f104 0099 	add.w	r0, r4, #153	@ 0x99
 800929c:	f7fe fbba 	bl	8007a14 <FCP_CalcCRC>
 80092a0:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 80092a4:	4283      	cmp	r3, r0
 80092a6:	d11d      	bne.n	80092e4 <UFCP_RX_IRQ_Handler+0xa8>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 80092a8:	68a5      	ldr	r5, [r4, #8]
 80092aa:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 80092ae:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 80092b2:	6820      	ldr	r0, [r4, #0]
 80092b4:	f104 029b 	add.w	r2, r4, #155	@ 0x9b
 80092b8:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80092ba:	4811      	ldr	r0, [pc, #68]	@ (8009300 <UFCP_RX_IRQ_Handler+0xc4>)
  return ret_val;
 80092bc:	e7d9      	b.n	8009272 <UFCP_RX_IRQ_Handler+0x36>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80092be:	8a02      	ldrh	r2, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80092c0:	4810      	ldr	r0, [pc, #64]	@ (8009304 <UFCP_RX_IRQ_Handler+0xc8>)
        pBaseHandle->RxFrame.Code = rx_byte;
 80092c2:	f884 c099 	strb.w	ip, [r4, #153]	@ 0x99
        pBaseHandle->RxFrameLevel++;
 80092c6:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80092c8:	8262      	strh	r2, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 80092ca:	f884 311d 	strb.w	r3, [r4, #285]	@ 0x11d
}
 80092ce:	b003      	add	sp, #12
 80092d0:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80092d2:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 80092d4:	bf54      	ite	pl
 80092d6:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 80092d8:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 80092da:	f880 c09a 	strb.w	ip, [r0, #154]	@ 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 80092de:	f880 311d 	strb.w	r3, [r0, #285]	@ 0x11d
 80092e2:	e7c5      	b.n	8009270 <UFCP_RX_IRQ_Handler+0x34>
            error_code = FCP_MSG_RX_BAD_CRC;
 80092e4:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80092e6:	2301      	movs	r3, #1
 80092e8:	f10d 0207 	add.w	r2, sp, #7
 80092ec:	21ff      	movs	r1, #255	@ 0xff
 80092ee:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 80092f0:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80092f4:	f7ff ff44 	bl	8009180 <UFCP_Send>
 80092f8:	e7df      	b.n	80092ba <UFCP_RX_IRQ_Handler+0x7e>
 80092fa:	bf00      	nop
 80092fc:	08009c38 	.word	0x08009c38
 8009300:	08009c34 	.word	0x08009c34
 8009304:	08009c36 	.word	0x08009c36

08009308 <UFCP_OVR_IRQ_Handler>:
{
 8009308:	b500      	push	{lr}
 800930a:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 800930c:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8009310:	2301      	movs	r3, #1
 8009312:	f10d 0207 	add.w	r2, sp, #7
 8009316:	21ff      	movs	r1, #255	@ 0xff
  error_code = UFCP_MSG_OVERRUN;
 8009318:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800931c:	f7ff ff30 	bl	8009180 <UFCP_Send>
}
 8009320:	b003      	add	sp, #12
 8009322:	f85d fb04 	ldr.w	pc, [sp], #4
 8009326:	bf00      	nop

08009328 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8009328:	2300      	movs	r3, #0
 800932a:	f880 311c 	strb.w	r3, [r0, #284]	@ 0x11c
}
 800932e:	4770      	bx	lr

08009330 <GPIO_Init>:
#include "main.h"
#include "UDHAL_GPIO.h"

GPIO_InitTypeDef GPIO_InitStruct = {0};
void GPIO_Init(void)
{
 8009330:	b570      	push	{r4, r5, r6, lr}
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009332:	2400      	movs	r4, #0
{
 8009334:	b08a      	sub	sp, #40	@ 0x28
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009336:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800933a:	e9cd 4406 	strd	r4, r4, [sp, #24]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800933e:	4b28      	ldr	r3, [pc, #160]	@ (80093e0 <GPIO_Init+0xb0>)
 8009340:	9400      	str	r4, [sp, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009342:	9408      	str	r4, [sp, #32]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
	  __HAL_RCC_GPIOC_CLK_ENABLE();
	  __HAL_RCC_GPIOA_CLK_ENABLE();
	  __HAL_RCC_GPIOB_CLK_ENABLE();

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(DASHBOARD_GPIO_Port, DASHBOARD_Pin, GPIO_PIN_RESET);
 8009346:	4d27      	ldr	r5, [pc, #156]	@ (80093e4 <GPIO_Init+0xb4>)

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin, GPIO_PIN_RESET);
 8009348:	4e27      	ldr	r6, [pc, #156]	@ (80093e8 <GPIO_Init+0xb8>)
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800934a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800934e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009352:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8009356:	9200      	str	r2, [sp, #0]
 8009358:	9a00      	ldr	r2, [sp, #0]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800935a:	9401      	str	r4, [sp, #4]
 800935c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800935e:	f042 0204 	orr.w	r2, r2, #4
 8009362:	631a      	str	r2, [r3, #48]	@ 0x30
 8009364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009366:	f002 0204 	and.w	r2, r2, #4
 800936a:	9201      	str	r2, [sp, #4]
 800936c:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800936e:	9402      	str	r4, [sp, #8]
 8009370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009372:	f042 0201 	orr.w	r2, r2, #1
 8009376:	631a      	str	r2, [r3, #48]	@ 0x30
 8009378:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800937a:	f002 0201 	and.w	r2, r2, #1
 800937e:	9202      	str	r2, [sp, #8]
 8009380:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009382:	9403      	str	r4, [sp, #12]
 8009384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009386:	f042 0202 	orr.w	r2, r2, #2
 800938a:	631a      	str	r2, [r3, #48]	@ 0x30
 800938c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	9303      	str	r3, [sp, #12]
	  HAL_GPIO_WritePin(DASHBOARD_GPIO_Port, DASHBOARD_Pin, GPIO_PIN_RESET);
 8009394:	4622      	mov	r2, r4
 8009396:	4628      	mov	r0, r5
 8009398:	2120      	movs	r1, #32
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800939a:	9b03      	ldr	r3, [sp, #12]
	  HAL_GPIO_WritePin(DASHBOARD_GPIO_Port, DASHBOARD_Pin, GPIO_PIN_RESET);
 800939c:	f7fa fe78 	bl	8004090 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin, GPIO_PIN_RESET);
 80093a0:	4622      	mov	r2, r4
 80093a2:	4630      	mov	r0, r6
 80093a4:	f240 4106 	movw	r1, #1030	@ 0x406
 80093a8:	f7fa fe72 	bl	8004090 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : DASHBOARD_Pin */
	  GPIO_InitStruct.Pin = DASHBOARD_Pin;
 80093ac:	2400      	movs	r4, #0
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(DASHBOARD_GPIO_Port, &GPIO_InitStruct);
 80093ae:	4628      	mov	r0, r5
	  GPIO_InitStruct.Pin = DASHBOARD_Pin;
 80093b0:	2220      	movs	r2, #32
 80093b2:	2301      	movs	r3, #1
 80093b4:	2500      	movs	r5, #0
	  HAL_GPIO_Init(DASHBOARD_GPIO_Port, &GPIO_InitStruct);
 80093b6:	a904      	add	r1, sp, #16
	  GPIO_InitStruct.Pin = DASHBOARD_Pin;
 80093b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093bc:	e9cd 4506 	strd	r4, r5, [sp, #24]
	  HAL_GPIO_Init(DASHBOARD_GPIO_Port, &GPIO_InitStruct);
 80093c0:	f7fa fca8 	bl	8003d14 <HAL_GPIO_Init>

	  /*Configure GPIO pins : FAULT_Pin TAIL_LIGHT_Pin TAIL_LIGHT_2_Pin */
	  GPIO_InitStruct.Pin = FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin;
 80093c4:	f240 4206 	movw	r2, #1030	@ 0x406
 80093c8:	2301      	movs	r3, #1
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093ca:	a904      	add	r1, sp, #16
 80093cc:	4630      	mov	r0, r6
	  GPIO_InitStruct.Pin = FAULT_Pin|TAIL_LIGHT_Pin|TAIL_LIGHT_2_Pin;
 80093ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80093d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093d6:	f7fa fc9d 	bl	8003d14 <HAL_GPIO_Init>

}
 80093da:	b00a      	add	sp, #40	@ 0x28
 80093dc:	bd70      	pop	{r4, r5, r6, pc}
 80093de:	bf00      	nop
 80093e0:	40023800 	.word	0x40023800
 80093e4:	40020000 	.word	0x40020000
 80093e8:	40020400 	.word	0x40020400

080093ec <WakeUpPinInit>:

void WakeUpPinInit(void)
{
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  /*Use UART1 Rx Pin PB7 as External Interrupt Pin PORTB Pin 7 --> i.e. EXTI9_5*/
  GPIO_InitStruct.Pin  = GPIO_PIN_7; /*UART2 Rx Pin PA3*/
 80093ee:	4c13      	ldr	r4, [pc, #76]	@ (800943c <WakeUpPinInit+0x50>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; /*Falling Edge Triggered Interrupt by UART from CC2640 Dash-board*/
  GPIO_InitStruct.Pull = GPIO_NOPULL; /*Activate Internal Pull Up Resistor!*/
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093f0:	4e13      	ldr	r6, [pc, #76]	@ (8009440 <WakeUpPinInit+0x54>)
  GPIO_InitStruct.Pull = GPIO_NOPULL; /*Activate Internal Pull Up Resistor!*/
 80093f2:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin  = GPIO_PIN_7; /*UART2 Rx Pin PA3*/
 80093f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093f8:	4621      	mov	r1, r4
 80093fa:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin  = GPIO_PIN_7; /*UART2 Rx Pin PA3*/
 80093fc:	2280      	movs	r2, #128	@ 0x80
 80093fe:	e9c4 2300 	strd	r2, r3, [r4]
  GPIO_InitStruct.Pull = GPIO_NOPULL; /*Activate Internal Pull Up Resistor!*/
 8009402:	60a5      	str	r5, [r4, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009404:	f7fa fc86 	bl	8003d14 <HAL_GPIO_Init>
  /*Activate Falling Edge Triggered Interrupt --> External Line Interrupt 3*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn,3,0);
 8009408:	462a      	mov	r2, r5
 800940a:	2103      	movs	r1, #3
 800940c:	2017      	movs	r0, #23
 800940e:	f7fa fbf9 	bl	8003c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009412:	2017      	movs	r0, #23
 8009414:	f7fa fc32 	bl	8003c7c <HAL_NVIC_EnableIRQ>

  GPIO_InitStruct.Pin  = GPIO_PIN_6; /*UART1 Tx Pin PB6*/
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009418:	2740      	movs	r7, #64	@ 0x40
 800941a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800941c:	4621      	mov	r1, r4
 800941e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009420:	e9c4 7300 	strd	r7, r3, [r4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009424:	e9c4 5502 	strd	r5, r5, [r4, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009428:	f7fa fc74 	bl	8003d14 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 800942c:	462a      	mov	r2, r5
 800942e:	4639      	mov	r1, r7
 8009430:	4630      	mov	r0, r6
}
 8009432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8009436:	f7fa be2b 	b.w	8004090 <HAL_GPIO_WritePin>
 800943a:	bf00      	nop
 800943c:	20004f78 	.word	0x20004f78
 8009440:	40020400 	.word	0x40020400

08009444 <WakeUpPinDeInit>:

void WakeUpPinDeInit(void)
{
 8009444:	b510      	push	{r4, lr}
	HAL_GPIO_DeInit(GPIOB,GPIO_PIN_7);
 8009446:	4c05      	ldr	r4, [pc, #20]	@ (800945c <WakeUpPinDeInit+0x18>)
 8009448:	2180      	movs	r1, #128	@ 0x80
 800944a:	4620      	mov	r0, r4
 800944c:	f7fa fd72 	bl	8003f34 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB,GPIO_PIN_6);
 8009450:	4620      	mov	r0, r4
 8009452:	2140      	movs	r1, #64	@ 0x40
}
 8009454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_DeInit(GPIOB,GPIO_PIN_6);
 8009458:	f7fa bd6c 	b.w	8003f34 <HAL_GPIO_DeInit>
 800945c:	40020400 	.word	0x40020400

08009460 <dashboard_indicator_on>:

void dashboard_indicator_on()
{
	HAL_GPIO_WritePin(DASHBOARD_GPIO_Port,DASHBOARD_Pin,GPIO_PIN_SET);
 8009460:	4802      	ldr	r0, [pc, #8]	@ (800946c <dashboard_indicator_on+0xc>)
 8009462:	2201      	movs	r2, #1
 8009464:	2120      	movs	r1, #32
 8009466:	f7fa be13 	b.w	8004090 <HAL_GPIO_WritePin>
 800946a:	bf00      	nop
 800946c:	40020000 	.word	0x40020000

08009470 <fault_warning_on>:
}

void fault_warning_on()
{
	HAL_GPIO_WritePin(GPIOB,FAULT_Pin,GPIO_PIN_SET);
 8009470:	4802      	ldr	r0, [pc, #8]	@ (800947c <fault_warning_on+0xc>)
 8009472:	2201      	movs	r2, #1
 8009474:	2102      	movs	r1, #2
 8009476:	f7fa be0b 	b.w	8004090 <HAL_GPIO_WritePin>
 800947a:	bf00      	nop
 800947c:	40020400 	.word	0x40020400

08009480 <dashboard_indicator_off>:
}

void dashboard_indicator_off()
{
	HAL_GPIO_WritePin(DASHBOARD_GPIO_Port,DASHBOARD_Pin,GPIO_PIN_RESET);
 8009480:	4802      	ldr	r0, [pc, #8]	@ (800948c <dashboard_indicator_off+0xc>)
 8009482:	2200      	movs	r2, #0
 8009484:	2120      	movs	r1, #32
 8009486:	f7fa be03 	b.w	8004090 <HAL_GPIO_WritePin>
 800948a:	bf00      	nop
 800948c:	40020000 	.word	0x40020000

08009490 <fault_warning_off>:
}

void fault_warning_off()
{
	HAL_GPIO_WritePin(GPIOB,FAULT_Pin,GPIO_PIN_RESET);
 8009490:	4802      	ldr	r0, [pc, #8]	@ (800949c <fault_warning_off+0xc>)
 8009492:	2200      	movs	r2, #0
 8009494:	2102      	movs	r1, #2
 8009496:	f7fa bdfb 	b.w	8004090 <HAL_GPIO_WritePin>
 800949a:	bf00      	nop
 800949c:	40020400 	.word	0x40020400

080094a0 <tail_light_flash>:
}

void tail_light_flash()
{
 80094a0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB,TAIL_LIGHT_Pin,GPIO_PIN_SET);
 80094a2:	4c09      	ldr	r4, [pc, #36]	@ (80094c8 <tail_light_flash+0x28>)
 80094a4:	2201      	movs	r2, #1
 80094a6:	2104      	movs	r1, #4
 80094a8:	4620      	mov	r0, r4
 80094aa:	f7fa fdf1 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80094ae:	20c8      	movs	r0, #200	@ 0xc8
 80094b0:	f7fa f94e 	bl	8003750 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,TAIL_LIGHT_Pin,GPIO_PIN_RESET);
 80094b4:	4620      	mov	r0, r4
 80094b6:	2200      	movs	r2, #0
 80094b8:	2104      	movs	r1, #4
 80094ba:	f7fa fde9 	bl	8004090 <HAL_GPIO_WritePin>
	HAL_Delay(200);
}
 80094be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(200);
 80094c2:	20c8      	movs	r0, #200	@ 0xc8
 80094c4:	f7fa b944 	b.w	8003750 <HAL_Delay>
 80094c8:	40020400 	.word	0x40020400

080094cc <tail_light_turnon>:

void tail_light_turnon()
{
	HAL_GPIO_WritePin(GPIOB,TAIL_LIGHT_Pin,GPIO_PIN_SET);
 80094cc:	4802      	ldr	r0, [pc, #8]	@ (80094d8 <tail_light_turnon+0xc>)
 80094ce:	2201      	movs	r2, #1
 80094d0:	2104      	movs	r1, #4
 80094d2:	f7fa bddd 	b.w	8004090 <HAL_GPIO_WritePin>
 80094d6:	bf00      	nop
 80094d8:	40020400 	.word	0x40020400

080094dc <tail_light_turnoff>:
}

void tail_light_turnoff()
{
	HAL_GPIO_WritePin(GPIOB,TAIL_LIGHT_Pin,GPIO_PIN_RESET);
 80094dc:	4802      	ldr	r0, [pc, #8]	@ (80094e8 <tail_light_turnoff+0xc>)
 80094de:	2200      	movs	r2, #0
 80094e0:	2104      	movs	r1, #4
 80094e2:	f7fa bdd5 	b.w	8004090 <HAL_GPIO_WritePin>
 80094e6:	bf00      	nop
 80094e8:	40020400 	.word	0x40020400

080094ec <accelerateIQMotor>:
#include "mc_api.h"
#include "mc_type.h"
#include "hardwareParam.h"

void accelerateIQMotor(int16_t torque, uint16_t ramp)
{
 80094ec:	b508      	push	{r3, lr}
	MC_ProgramTorqueRampMotor1(torque,ramp);
 80094ee:	f7f7 ff1d 	bl	800132c <MC_ProgramTorqueRampMotor1>
	MC_StartMotor1();
}
 80094f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MC_StartMotor1();
 80094f6:	f7f7 bf0d 	b.w	8001314 <MC_StartMotor1>
 80094fa:	bf00      	nop

080094fc <motorStop>:
	MC_StartMotor1();
}

void motorStop()
{
	MC_StopMotor1();
 80094fc:	f7f7 bf10 	b.w	8001320 <MC_StopMotor1>

08009500 <getSpeed>:
{
	MC_AcknowledgeFaultMotor1();
}

int16_t getSpeed()
{
 8009500:	b508      	push	{r3, lr}
	/*Returns the speed in RPM*/
	int16_t MOTOR_SPEED = (MC_GetMecSpeedAverageMotor1() * _RPM) / SPEED_UNIT;
 8009502:	f7f7 ff1f 	bl	8001344 <MC_GetMecSpeedAverageMotor1>
 8009506:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800950a:	0040      	lsls	r0, r0, #1
	return MOTOR_SPEED;
}
 800950c:	b200      	sxth	r0, r0
 800950e:	bd08      	pop	{r3, pc}

08009510 <getCurrent>:

float getCurrent()
{
 8009510:	b508      	push	{r3, lr}
	float MOTOR_CURRENT = (MC_GetPhaseCurrentAmplitudeMotor1() * VDD_SUPPLY)/(ADC_RANGE*CURRENT_SENSOR_GAIN);
 8009512:	f7f7 ff1d 	bl	8001350 <MC_GetPhaseCurrentAmplitudeMotor1>
 8009516:	f7f7 f8f7 	bl	8000708 <__aeabi_i2d>
 800951a:	4b04      	ldr	r3, [pc, #16]	@ (800952c <getCurrent+0x1c>)
 800951c:	2200      	movs	r2, #0
 800951e:	f7f6 fe77 	bl	8000210 <__aeabi_dmul>
 8009522:	f7f7 f95b 	bl	80007dc <__aeabi_d2f>
	return MOTOR_CURRENT;
}
 8009526:	ee00 0a10 	vmov	s0, r0
 800952a:	bd08      	pop	{r3, pc}
 800952c:	3f54a000 	.word	0x3f54a000

08009530 <ShutDownTask>:
		rst_source = 0x7D;
	}
}

void ShutDownTask()
{
 8009530:	b510      	push	{r4, lr}
    if(UART_DeInit() == 0x01)
 8009532:	f000 f8fd 	bl	8009730 <UART_DeInit>
 8009536:	2801      	cmp	r0, #1
 8009538:	d003      	beq.n	8009542 <ShutDownTask+0x12>
    {
        /*Fuck Off*/
    	/*System Shutdown Fails*/
    	/*What Happens if UART cannot de-init ??*/
    }
}
 800953a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if(UART_DeInit() == 0xFF)
 800953e:	f000 b8f7 	b.w	8009730 <UART_DeInit>
 8009542:	4604      	mov	r4, r0
    	WakeUpPinInit();
 8009544:	f7ff ff52 	bl	80093ec <WakeUpPinInit>
    	dashboard_indicator_off();
 8009548:	f7ff ff9a 	bl	8009480 <dashboard_indicator_off>
    	fault_warning_off();
 800954c:	f7ff ffa0 	bl	8009490 <fault_warning_off>
    	tail_light_turnoff();
 8009550:	f7ff ffc4 	bl	80094dc <tail_light_turnoff>
    	HAL_SuspendTick();
 8009554:	f7f9 fbf2 	bl	8002d3c <HAL_SuspendTick>
    	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 8009558:	4621      	mov	r1, r4
 800955a:	4620      	mov	r0, r4
}
 800955c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 8009560:	f7fa bd9a 	b.w	8004098 <HAL_PWR_EnterSTOPMode>

08009564 <bootStart>:

void bootStart()
{
 8009564:	b508      	push	{r3, lr}
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8009566:	4b1a      	ldr	r3, [pc, #104]	@ (80095d0 <bootStart+0x6c>)
 8009568:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800956a:	2a00      	cmp	r2, #0
 800956c:	db19      	blt.n	80095a2 <bootStart+0x3e>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800956e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009570:	00d2      	lsls	r2, r2, #3
 8009572:	d50c      	bpl.n	800958e <bootStart+0x2a>
		rst_source = 0x7C;
 8009574:	4b17      	ldr	r3, [pc, #92]	@ (80095d4 <bootStart+0x70>)
 8009576:	227c      	movs	r2, #124	@ 0x7c
 8009578:	701a      	strb	r2, [r3, #0]
	/* Reset all the system peripherals ! Reset the program counter! You could de-active EXTI First
	 * Resume RTOS tasks !
	 * */
	GET_RESET_SOURCE();
	WakeUpPinDeInit();
 800957a:	f7ff ff63 	bl	8009444 <WakeUpPinDeInit>
	SystemClock();
 800957e:	f000 f82b 	bl	80095d8 <SystemClock>
	HAL_ResumeTick();
 8009582:	f7f9 fbe5 	bl	8002d50 <HAL_ResumeTick>
	HAL_NVIC_SystemReset();
}
 8009586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_SystemReset();
 800958a:	f7fa bb97 	b.w	8003cbc <HAL_NVIC_SystemReset>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800958e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009590:	0110      	lsls	r0, r2, #4
 8009592:	d40a      	bmi.n	80095aa <bootStart+0x46>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8009594:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009596:	0191      	lsls	r1, r2, #6
 8009598:	d50b      	bpl.n	80095b2 <bootStart+0x4e>
		rst_source = 0x79;
 800959a:	4b0e      	ldr	r3, [pc, #56]	@ (80095d4 <bootStart+0x70>)
 800959c:	2279      	movs	r2, #121	@ 0x79
 800959e:	701a      	strb	r2, [r3, #0]
 80095a0:	e7eb      	b.n	800957a <bootStart+0x16>
		rst_source = 0x7F;
 80095a2:	4b0c      	ldr	r3, [pc, #48]	@ (80095d4 <bootStart+0x70>)
 80095a4:	227f      	movs	r2, #127	@ 0x7f
 80095a6:	701a      	strb	r2, [r3, #0]
 80095a8:	e7e7      	b.n	800957a <bootStart+0x16>
		rst_source = 0x7B;
 80095aa:	4b0a      	ldr	r3, [pc, #40]	@ (80095d4 <bootStart+0x70>)
 80095ac:	227b      	movs	r2, #123	@ 0x7b
 80095ae:	701a      	strb	r2, [r3, #0]
 80095b0:	e7e3      	b.n	800957a <bootStart+0x16>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 80095b2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80095b4:	0052      	lsls	r2, r2, #1
 80095b6:	d406      	bmi.n	80095c6 <bootStart+0x62>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 80095b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	d5dd      	bpl.n	800957a <bootStart+0x16>
		rst_source = 0x7D;
 80095be:	4b05      	ldr	r3, [pc, #20]	@ (80095d4 <bootStart+0x70>)
 80095c0:	227d      	movs	r2, #125	@ 0x7d
 80095c2:	701a      	strb	r2, [r3, #0]
 80095c4:	e7d9      	b.n	800957a <bootStart+0x16>
		rst_source = 0x7E;
 80095c6:	4b03      	ldr	r3, [pc, #12]	@ (80095d4 <bootStart+0x70>)
 80095c8:	227e      	movs	r2, #126	@ 0x7e
 80095ca:	701a      	strb	r2, [r3, #0]
 80095cc:	e7d5      	b.n	800957a <bootStart+0x16>
 80095ce:	bf00      	nop
 80095d0:	40023800 	.word	0x40023800
 80095d4:	20004f8c 	.word	0x20004f8c

080095d8 <SystemClock>:
#include "UDHAL_SYSCLK.h"
#include "stm32f4xx_hal.h"
#include "main.h"

void SystemClock()
{
 80095d8:	b510      	push	{r4, lr}
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80095da:	2300      	movs	r3, #0
{
 80095dc:	b096      	sub	sp, #88	@ 0x58
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80095de:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80095e2:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
	 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80095e6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80095ea:	e9cd 3305 	strd	r3, r3, [sp, #20]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 80095ee:	492c      	ldr	r1, [pc, #176]	@ (80096a0 <SystemClock+0xc8>)
 80095f0:	9301      	str	r3, [sp, #4]
	 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80095f2:	9307      	str	r3, [sp, #28]
	  __HAL_RCC_PWR_CLK_ENABLE();
 80095f4:	6c08      	ldr	r0, [r1, #64]	@ 0x40
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80095f6:	4a2b      	ldr	r2, [pc, #172]	@ (80096a4 <SystemClock+0xcc>)
	  __HAL_RCC_PWR_CLK_ENABLE();
 80095f8:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 80095fc:	6408      	str	r0, [r1, #64]	@ 0x40
 80095fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009600:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8009604:	9101      	str	r1, [sp, #4]
 8009606:	9901      	ldr	r1, [sp, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009608:	9302      	str	r3, [sp, #8]
 800960a:	6813      	ldr	r3, [r2, #0]
 800960c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009610:	6013      	str	r3, [r2, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009612:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8009690 <SystemClock+0xb8>
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009616:	6813      	ldr	r3, [r2, #0]
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009618:	ed8d 7b08 	vstr	d7, [sp, #32]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800961c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	  RCC_OscInitStruct.PLL.PLLM = 8;
	  RCC_OscInitStruct.PLL.PLLN = 180;
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009620:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 8009698 <SystemClock+0xc0>
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009624:	9302      	str	r3, [sp, #8]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009626:	2102      	movs	r1, #2
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009628:	9802      	ldr	r0, [sp, #8]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800962a:	910e      	str	r1, [sp, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800962c:	f44f 0480 	mov.w	r4, #4194304	@ 0x400000
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8009630:	2208      	movs	r2, #8
	  RCC_OscInitStruct.PLL.PLLN = 180;
 8009632:	23b4      	movs	r3, #180	@ 0xb4
	  RCC_OscInitStruct.PLL.PLLQ = 2;
	  RCC_OscInitStruct.PLL.PLLR = 2;
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009634:	a808      	add	r0, sp, #32
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8009636:	e9cd 420f 	strd	r4, r2, [sp, #60]	@ 0x3c
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800963a:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 800963e:	9114      	str	r1, [sp, #80]	@ 0x50
	  RCC_OscInitStruct.PLL.PLLN = 180;
 8009640:	9311      	str	r3, [sp, #68]	@ 0x44
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009642:	f7fa feab 	bl	800439c <HAL_RCC_OscConfig>
 8009646:	b9a8      	cbnz	r0, 8009674 <SystemClock+0x9c>
	    Error_Handler();
	  }

	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009648:	f7fa fd46 	bl	80040d8 <HAL_PWREx_EnableOverDrive>
 800964c:	b9c0      	cbnz	r0, 8009680 <SystemClock+0xa8>
	    Error_Handler();
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800964e:	210f      	movs	r1, #15
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009650:	2302      	movs	r3, #2
 8009652:	e9cd 1303 	strd	r1, r3, [sp, #12]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009656:	2400      	movs	r4, #0
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009658:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800965c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009660:	a803      	add	r0, sp, #12
 8009662:	2105      	movs	r1, #5
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009664:	e9cd 4205 	strd	r4, r2, [sp, #20]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009668:	9307      	str	r3, [sp, #28]
	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800966a:	f7fa fd71 	bl	8004150 <HAL_RCC_ClockConfig>
 800966e:	b950      	cbnz	r0, 8009686 <SystemClock+0xae>
	  {
	    Error_Handler();
	  }
}
 8009670:	b016      	add	sp, #88	@ 0x58
 8009672:	bd10      	pop	{r4, pc}
	    Error_Handler();
 8009674:	f7f7 fe4c 	bl	8001310 <Error_Handler>
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009678:	f7fa fd2e 	bl	80040d8 <HAL_PWREx_EnableOverDrive>
 800967c:	2800      	cmp	r0, #0
 800967e:	d0e6      	beq.n	800964e <SystemClock+0x76>
	    Error_Handler();
 8009680:	f7f7 fe46 	bl	8001310 <Error_Handler>
 8009684:	e7e3      	b.n	800964e <SystemClock+0x76>
	    Error_Handler();
 8009686:	f7f7 fe43 	bl	8001310 <Error_Handler>
}
 800968a:	b016      	add	sp, #88	@ 0x58
 800968c:	bd10      	pop	{r4, pc}
 800968e:	bf00      	nop
 8009690:	00000001 	.word	0x00000001
 8009694:	00010000 	.word	0x00010000
 8009698:	00000002 	.word	0x00000002
 800969c:	00000002 	.word	0x00000002
 80096a0:	40023800 	.word	0x40023800
 80096a4:	40007000 	.word	0x40007000

080096a8 <UDHAL_TIMEOUT_Stop>:

}

static void UDHAL_TIMEOUT_Stop()
{
	osTimerStop(protocolTimeoutHandle);
 80096a8:	4b01      	ldr	r3, [pc, #4]	@ (80096b0 <UDHAL_TIMEOUT_Stop+0x8>)
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	f7fb bfb6 	b.w	800561c <osTimerStop>
 80096b0:	20004f90 	.word	0x20004f90

080096b4 <UDHAL_TIMEOUT_Start>:
	osTimerStart(protocolTimeoutHandle,RECEIVE_TIMEOUT_PERIOD);
 80096b4:	4b02      	ldr	r3, [pc, #8]	@ (80096c0 <UDHAL_TIMEOUT_Start+0xc>)
 80096b6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	f7fb bf80 	b.w	80055c0 <osTimerStart>
 80096c0:	20004f90 	.word	0x20004f90

080096c4 <UDHAL_TIMEOUT_OVClockFxn>:
}

void UDHAL_TIMEOUT_OVClockFxn(void const *argument)
{
	timeOutHandler();
 80096c4:	f7f7 bb10 	b.w	8000ce8 <timeOutHandler>

080096c8 <UDHAL_TIMEOUT_init>:
{
 80096c8:	b500      	push	{lr}
	STM32MCP_registerTimer(&timeoutHandle);
 80096ca:	4808      	ldr	r0, [pc, #32]	@ (80096ec <UDHAL_TIMEOUT_init+0x24>)
{
 80096cc:	b083      	sub	sp, #12
	STM32MCP_registerTimer(&timeoutHandle);
 80096ce:	f7f7 faff 	bl	8000cd0 <STM32MCP_registerTimer>
	osTimerDef(timeout,UDHAL_TIMEOUT_OVClockFxn);
 80096d2:	4b07      	ldr	r3, [pc, #28]	@ (80096f0 <UDHAL_TIMEOUT_init+0x28>)
 80096d4:	2200      	movs	r2, #0
	protocolTimeoutHandle = osTimerCreate(osTimer(timeout),osTimerPeriodic,NULL);
 80096d6:	2101      	movs	r1, #1
 80096d8:	4668      	mov	r0, sp
	osTimerDef(timeout,UDHAL_TIMEOUT_OVClockFxn);
 80096da:	e9cd 3200 	strd	r3, r2, [sp]
	protocolTimeoutHandle = osTimerCreate(osTimer(timeout),osTimerPeriodic,NULL);
 80096de:	f7fb ff53 	bl	8005588 <osTimerCreate>
 80096e2:	4b04      	ldr	r3, [pc, #16]	@ (80096f4 <UDHAL_TIMEOUT_init+0x2c>)
 80096e4:	6018      	str	r0, [r3, #0]
}
 80096e6:	b003      	add	sp, #12
 80096e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80096ec:	2000057c 	.word	0x2000057c
 80096f0:	080096c5 	.word	0x080096c5
 80096f4:	20004f90 	.word	0x20004f90

080096f8 <UART_Init>:

UART_HandleTypeDef huart1;
uint8_t UART_OFF = 0x00;

void UART_Init()
{
 80096f8:	b510      	push	{r4, lr}
	  huart1.Instance = USART1;
 80096fa:	480b      	ldr	r0, [pc, #44]	@ (8009728 <UART_Init+0x30>)
 80096fc:	4c0b      	ldr	r4, [pc, #44]	@ (800972c <UART_Init+0x34>)
	  huart1.Init.BaudRate = 115200;
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80096fe:	2300      	movs	r3, #0
	  huart1.Init.BaudRate = 115200;
 8009700:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
	  huart1.Init.StopBits = UART_STOPBITS_1;
	  huart1.Init.Parity = UART_PARITY_NONE;
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8009704:	220c      	movs	r2, #12
	  huart1.Init.BaudRate = 115200;
 8009706:	e9c0 4100 	strd	r4, r1, [r0]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800970a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 800970e:	e9c0 3204 	strd	r3, r2, [r0, #16]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009712:	e9c0 3306 	strd	r3, r3, [r0, #24]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009716:	f7fb fe43 	bl	80053a0 <HAL_UART_Init>
 800971a:	b900      	cbnz	r0, 800971e <UART_Init+0x26>
	  {
	    Error_Handler();
	  }
}
 800971c:	bd10      	pop	{r4, pc}
 800971e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    Error_Handler();
 8009722:	f7f7 bdf5 	b.w	8001310 <Error_Handler>
 8009726:	bf00      	nop
 8009728:	20004f98 	.word	0x20004f98
 800972c:	40011000 	.word	0x40011000

08009730 <UART_DeInit>:

uint8_t UART_DeInit()
{
 8009730:	b508      	push	{r3, lr}
    if(HAL_UART_DeInit(&huart1) == HAL_OK)
 8009732:	4809      	ldr	r0, [pc, #36]	@ (8009758 <UART_DeInit+0x28>)
 8009734:	f7fb fec6 	bl	80054c4 <HAL_UART_DeInit>
 8009738:	b918      	cbnz	r0, 8009742 <UART_DeInit+0x12>
    {
    	UART_OFF = 0x01;
 800973a:	4b08      	ldr	r3, [pc, #32]	@ (800975c <UART_DeInit+0x2c>)
 800973c:	2001      	movs	r0, #1
 800973e:	7018      	strb	r0, [r3, #0]
    else if(HAL_UART_DeInit(&huart1) != HAL_OK)
    {
    	UART_OFF = 0xFF;
    }
    return UART_OFF;
}
 8009740:	bd08      	pop	{r3, pc}
    else if(HAL_UART_DeInit(&huart1) != HAL_OK)
 8009742:	4805      	ldr	r0, [pc, #20]	@ (8009758 <UART_DeInit+0x28>)
 8009744:	f7fb febe 	bl	80054c4 <HAL_UART_DeInit>
    	UART_OFF = 0xFF;
 8009748:	4b04      	ldr	r3, [pc, #16]	@ (800975c <UART_DeInit+0x2c>)
    else if(HAL_UART_DeInit(&huart1) != HAL_OK)
 800974a:	b110      	cbz	r0, 8009752 <UART_DeInit+0x22>
    	UART_OFF = 0xFF;
 800974c:	20ff      	movs	r0, #255	@ 0xff
 800974e:	7018      	strb	r0, [r3, #0]
}
 8009750:	bd08      	pop	{r3, pc}
    return UART_OFF;
 8009752:	7818      	ldrb	r0, [r3, #0]
}
 8009754:	bd08      	pop	{r3, pc}
 8009756:	bf00      	nop
 8009758:	20004f98 	.word	0x20004f98
 800975c:	20004f94 	.word	0x20004f94

08009760 <memset>:
 8009760:	4402      	add	r2, r0
 8009762:	4603      	mov	r3, r0
 8009764:	4293      	cmp	r3, r2
 8009766:	d100      	bne.n	800976a <memset+0xa>
 8009768:	4770      	bx	lr
 800976a:	f803 1b01 	strb.w	r1, [r3], #1
 800976e:	e7f9      	b.n	8009764 <memset+0x4>

08009770 <_reclaim_reent>:
 8009770:	4b29      	ldr	r3, [pc, #164]	@ (8009818 <_reclaim_reent+0xa8>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4283      	cmp	r3, r0
 8009776:	b570      	push	{r4, r5, r6, lr}
 8009778:	4604      	mov	r4, r0
 800977a:	d04b      	beq.n	8009814 <_reclaim_reent+0xa4>
 800977c:	69c3      	ldr	r3, [r0, #28]
 800977e:	b1ab      	cbz	r3, 80097ac <_reclaim_reent+0x3c>
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	b16b      	cbz	r3, 80097a0 <_reclaim_reent+0x30>
 8009784:	2500      	movs	r5, #0
 8009786:	69e3      	ldr	r3, [r4, #28]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	5959      	ldr	r1, [r3, r5]
 800978c:	2900      	cmp	r1, #0
 800978e:	d13b      	bne.n	8009808 <_reclaim_reent+0x98>
 8009790:	3504      	adds	r5, #4
 8009792:	2d80      	cmp	r5, #128	@ 0x80
 8009794:	d1f7      	bne.n	8009786 <_reclaim_reent+0x16>
 8009796:	69e3      	ldr	r3, [r4, #28]
 8009798:	4620      	mov	r0, r4
 800979a:	68d9      	ldr	r1, [r3, #12]
 800979c:	f000 f872 	bl	8009884 <_free_r>
 80097a0:	69e3      	ldr	r3, [r4, #28]
 80097a2:	6819      	ldr	r1, [r3, #0]
 80097a4:	b111      	cbz	r1, 80097ac <_reclaim_reent+0x3c>
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 f86c 	bl	8009884 <_free_r>
 80097ac:	6961      	ldr	r1, [r4, #20]
 80097ae:	b111      	cbz	r1, 80097b6 <_reclaim_reent+0x46>
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 f867 	bl	8009884 <_free_r>
 80097b6:	69e1      	ldr	r1, [r4, #28]
 80097b8:	b111      	cbz	r1, 80097c0 <_reclaim_reent+0x50>
 80097ba:	4620      	mov	r0, r4
 80097bc:	f000 f862 	bl	8009884 <_free_r>
 80097c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80097c2:	b111      	cbz	r1, 80097ca <_reclaim_reent+0x5a>
 80097c4:	4620      	mov	r0, r4
 80097c6:	f000 f85d 	bl	8009884 <_free_r>
 80097ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097cc:	b111      	cbz	r1, 80097d4 <_reclaim_reent+0x64>
 80097ce:	4620      	mov	r0, r4
 80097d0:	f000 f858 	bl	8009884 <_free_r>
 80097d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80097d6:	b111      	cbz	r1, 80097de <_reclaim_reent+0x6e>
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 f853 	bl	8009884 <_free_r>
 80097de:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80097e0:	b111      	cbz	r1, 80097e8 <_reclaim_reent+0x78>
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 f84e 	bl	8009884 <_free_r>
 80097e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80097ea:	b111      	cbz	r1, 80097f2 <_reclaim_reent+0x82>
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 f849 	bl	8009884 <_free_r>
 80097f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80097f4:	b111      	cbz	r1, 80097fc <_reclaim_reent+0x8c>
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 f844 	bl	8009884 <_free_r>
 80097fc:	6a23      	ldr	r3, [r4, #32]
 80097fe:	b14b      	cbz	r3, 8009814 <_reclaim_reent+0xa4>
 8009800:	4620      	mov	r0, r4
 8009802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009806:	4718      	bx	r3
 8009808:	680e      	ldr	r6, [r1, #0]
 800980a:	4620      	mov	r0, r4
 800980c:	f000 f83a 	bl	8009884 <_free_r>
 8009810:	4631      	mov	r1, r6
 8009812:	e7bb      	b.n	800978c <_reclaim_reent+0x1c>
 8009814:	bd70      	pop	{r4, r5, r6, pc}
 8009816:	bf00      	nop
 8009818:	20000584 	.word	0x20000584

0800981c <__libc_init_array>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	4d0d      	ldr	r5, [pc, #52]	@ (8009854 <__libc_init_array+0x38>)
 8009820:	4c0d      	ldr	r4, [pc, #52]	@ (8009858 <__libc_init_array+0x3c>)
 8009822:	1b64      	subs	r4, r4, r5
 8009824:	10a4      	asrs	r4, r4, #2
 8009826:	2600      	movs	r6, #0
 8009828:	42a6      	cmp	r6, r4
 800982a:	d109      	bne.n	8009840 <__libc_init_array+0x24>
 800982c:	4d0b      	ldr	r5, [pc, #44]	@ (800985c <__libc_init_array+0x40>)
 800982e:	4c0c      	ldr	r4, [pc, #48]	@ (8009860 <__libc_init_array+0x44>)
 8009830:	f000 f87e 	bl	8009930 <_init>
 8009834:	1b64      	subs	r4, r4, r5
 8009836:	10a4      	asrs	r4, r4, #2
 8009838:	2600      	movs	r6, #0
 800983a:	42a6      	cmp	r6, r4
 800983c:	d105      	bne.n	800984a <__libc_init_array+0x2e>
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	f855 3b04 	ldr.w	r3, [r5], #4
 8009844:	4798      	blx	r3
 8009846:	3601      	adds	r6, #1
 8009848:	e7ee      	b.n	8009828 <__libc_init_array+0xc>
 800984a:	f855 3b04 	ldr.w	r3, [r5], #4
 800984e:	4798      	blx	r3
 8009850:	3601      	adds	r6, #1
 8009852:	e7f2      	b.n	800983a <__libc_init_array+0x1e>
 8009854:	08009c44 	.word	0x08009c44
 8009858:	08009c44 	.word	0x08009c44
 800985c:	08009c44 	.word	0x08009c44
 8009860:	08009c48 	.word	0x08009c48

08009864 <__retarget_lock_acquire_recursive>:
 8009864:	4770      	bx	lr

08009866 <__retarget_lock_release_recursive>:
 8009866:	4770      	bx	lr

08009868 <memcpy>:
 8009868:	440a      	add	r2, r1
 800986a:	4291      	cmp	r1, r2
 800986c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009870:	d100      	bne.n	8009874 <memcpy+0xc>
 8009872:	4770      	bx	lr
 8009874:	b510      	push	{r4, lr}
 8009876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800987a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800987e:	4291      	cmp	r1, r2
 8009880:	d1f9      	bne.n	8009876 <memcpy+0xe>
 8009882:	bd10      	pop	{r4, pc}

08009884 <_free_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4605      	mov	r5, r0
 8009888:	2900      	cmp	r1, #0
 800988a:	d041      	beq.n	8009910 <_free_r+0x8c>
 800988c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009890:	1f0c      	subs	r4, r1, #4
 8009892:	2b00      	cmp	r3, #0
 8009894:	bfb8      	it	lt
 8009896:	18e4      	addlt	r4, r4, r3
 8009898:	f000 f83e 	bl	8009918 <__malloc_lock>
 800989c:	4a1d      	ldr	r2, [pc, #116]	@ (8009914 <_free_r+0x90>)
 800989e:	6813      	ldr	r3, [r2, #0]
 80098a0:	b933      	cbnz	r3, 80098b0 <_free_r+0x2c>
 80098a2:	6063      	str	r3, [r4, #4]
 80098a4:	6014      	str	r4, [r2, #0]
 80098a6:	4628      	mov	r0, r5
 80098a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ac:	f000 b83a 	b.w	8009924 <__malloc_unlock>
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	d908      	bls.n	80098c6 <_free_r+0x42>
 80098b4:	6820      	ldr	r0, [r4, #0]
 80098b6:	1821      	adds	r1, r4, r0
 80098b8:	428b      	cmp	r3, r1
 80098ba:	bf01      	itttt	eq
 80098bc:	6819      	ldreq	r1, [r3, #0]
 80098be:	685b      	ldreq	r3, [r3, #4]
 80098c0:	1809      	addeq	r1, r1, r0
 80098c2:	6021      	streq	r1, [r4, #0]
 80098c4:	e7ed      	b.n	80098a2 <_free_r+0x1e>
 80098c6:	461a      	mov	r2, r3
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	b10b      	cbz	r3, 80098d0 <_free_r+0x4c>
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	d9fa      	bls.n	80098c6 <_free_r+0x42>
 80098d0:	6811      	ldr	r1, [r2, #0]
 80098d2:	1850      	adds	r0, r2, r1
 80098d4:	42a0      	cmp	r0, r4
 80098d6:	d10b      	bne.n	80098f0 <_free_r+0x6c>
 80098d8:	6820      	ldr	r0, [r4, #0]
 80098da:	4401      	add	r1, r0
 80098dc:	1850      	adds	r0, r2, r1
 80098de:	4283      	cmp	r3, r0
 80098e0:	6011      	str	r1, [r2, #0]
 80098e2:	d1e0      	bne.n	80098a6 <_free_r+0x22>
 80098e4:	6818      	ldr	r0, [r3, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	6053      	str	r3, [r2, #4]
 80098ea:	4408      	add	r0, r1
 80098ec:	6010      	str	r0, [r2, #0]
 80098ee:	e7da      	b.n	80098a6 <_free_r+0x22>
 80098f0:	d902      	bls.n	80098f8 <_free_r+0x74>
 80098f2:	230c      	movs	r3, #12
 80098f4:	602b      	str	r3, [r5, #0]
 80098f6:	e7d6      	b.n	80098a6 <_free_r+0x22>
 80098f8:	6820      	ldr	r0, [r4, #0]
 80098fa:	1821      	adds	r1, r4, r0
 80098fc:	428b      	cmp	r3, r1
 80098fe:	bf04      	itt	eq
 8009900:	6819      	ldreq	r1, [r3, #0]
 8009902:	685b      	ldreq	r3, [r3, #4]
 8009904:	6063      	str	r3, [r4, #4]
 8009906:	bf04      	itt	eq
 8009908:	1809      	addeq	r1, r1, r0
 800990a:	6021      	streq	r1, [r4, #0]
 800990c:	6054      	str	r4, [r2, #4]
 800990e:	e7ca      	b.n	80098a6 <_free_r+0x22>
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	bf00      	nop
 8009914:	20005118 	.word	0x20005118

08009918 <__malloc_lock>:
 8009918:	4801      	ldr	r0, [pc, #4]	@ (8009920 <__malloc_lock+0x8>)
 800991a:	f7ff bfa3 	b.w	8009864 <__retarget_lock_acquire_recursive>
 800991e:	bf00      	nop
 8009920:	20005114 	.word	0x20005114

08009924 <__malloc_unlock>:
 8009924:	4801      	ldr	r0, [pc, #4]	@ (800992c <__malloc_unlock+0x8>)
 8009926:	f7ff bf9e 	b.w	8009866 <__retarget_lock_release_recursive>
 800992a:	bf00      	nop
 800992c:	20005114 	.word	0x20005114

08009930 <_init>:
 8009930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009932:	bf00      	nop
 8009934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009936:	bc08      	pop	{r3}
 8009938:	469e      	mov	lr, r3
 800993a:	4770      	bx	lr

0800993c <_fini>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	bf00      	nop
 8009940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009942:	bc08      	pop	{r3}
 8009944:	469e      	mov	lr, r3
 8009946:	4770      	bx	lr
